{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7348cd7c-ef37-4c6c-996a-f4c5f3719b01",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c0abd171-f0fc-46c1-b4b2-1d0b13df5b88",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4b98329-112b-4b8e-9af9-adf533cceed6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cfd318ac-51cb-41f6-bf17-71d57f33d88e"
                }
              }
            ]
          },
          {
            "id": "3295990d-678e-4754-87c5-8bbe88f0586c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8daceed-be7a-4cfc-8712-ad1fc943c7d2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "81e537b9-edff-4d7c-909f-cc9ae1199e92"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "35ffac39-c528-45e6-ac64-6f513c6f4a45",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "310fceee-9a90-46d0-ad7a-826ce8f046d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1571acbf-ef12-4881-851c-89cbf5f0dfc8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1fc8006-0084-44a7-b5ee-3aadb6e4b25a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "069c1192-6a7f-4e6f-882c-e9a52aab2369"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aab9d4b8-8bac-4b3c-b93a-6aeb631647b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d756c37-0bba-42c8-8cb2-c097cfeed449"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1cf3a046-853b-4a96-a1bd-9d177ed6587f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "211f133a-944b-4882-bb89-541b5af14651"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddc3cd3f-16fd-4e65-beec-f07ea2963464",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f922ad65-2a0a-4d50-a347-56a7fdafb952"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90ebbd89-0588-4e65-ba4b-f3c61c6d78ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e62c2165-1d0d-4ea1-80a4-2f7605f6df11"
            }
          }
        ]
      },
      {
        "id": "ca55f50c-ff39-419f-91b9-3ce82b760f7d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "39dae8c4-d238-4757-9134-f54c7ba16daa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "496e4435-4071-4dff-be1b-068670634f32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3b466ba-12e2-4a9b-81de-0dfa128b079b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b470c2ff-9ded-4c6e-83f7-8e6f45912a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "101a7966-64d8-4453-b9f5-3d4a9e745e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1f763f-688f-4688-b080-e0e1e049e35b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e940ffe-506c-4ac4-8502-dcf682527949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbf0e8c5-2b30-4c72-8c9f-c89b0aa98900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d666b8-424d-4564-b5c9-a701806dc586",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e74d15-fb53-4b19-8b8f-ad9f94230961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99011459-c653-46d9-9776-4bae5d0b8450"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3ca0aae7-4e55-440c-a412-75fdf7f8b1b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3650a539-9d80-4830-bc27-f62e65a1f8e3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf21bbf-0e03-4d5a-ba18-da110a875045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d7214f4-bf54-4177-b1f0-0214af8d3be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dce010-86a1-46ee-a1e2-0e15369fdbb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c4ee21-d26d-4ea7-803a-397b061c8ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fbb93a-3a9c-4ba6-a769-b722ffea153d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8c2a65-c11c-41fa-baa0-0801c18012f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57a4b0c4-5edf-4fa6-925f-f12aca0fe39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad1aba3-a9ee-490d-8be1-24aeba5bae7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "94330e8b-718a-4a60-b0b8-fb33a41571bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c1d62bd-556d-4595-8fad-de7584286520",
            "name": "Positive Testing",
            "item": [
              {
                "id": "756e3935-3e5c-43c0-afe9-aeb760b09352",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "587c3541-2665-4853-a416-decf40fc85a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6dc9f7f1-854e-48bd-8f2a-72e2cfab04d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bd8bb17-2dae-441f-825e-0797597c85e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "47b954a4-8d8a-4217-ba45-f5b0912747e1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b10d71e1-e200-4e37-913f-8cc51cf7a644",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b64b8f8d-f2b6-4d13-976b-ad5527d36fef"
            }
          }
        ]
      },
      {
        "id": "f1bee20f-2c8a-4e38-ba5e-23e2da52f5d6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a5a7d2e2-6b59-4e74-8ded-d21dc0821098",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7236caf-3ad6-45bd-953b-7bffd91ca201",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bb6fab36-825f-425c-b04b-f1dcd89141d8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2c22c6-46c3-4f0b-89ef-4baa735e9ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430f3c75-cff7-4191-87ff-e5d88030f192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548a2c78-3013-4b9e-be32-d65a650e285b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd662e8c-3316-4ef2-b1b7-5f23e6753195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ac5cd3-2035-4be2-8831-c1de383fc569",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e95c2c-c243-4de8-a476-a5ac6af9b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54852bd-ddc8-4c67-809f-425d469c3f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a261fb39-31ee-41b6-bba6-9c2401e87d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e19da2b7-2107-4fa0-8d44-2b190a257ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b70a715-1121-42eb-aa34-f66b1bea66ca",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf499251-41a2-4ae5-8b8a-00c16cd925ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad57c567-5b58-4645-9446-01bc11748fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a507c584-e570-4ec8-a7e1-343362aae04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "589917e7-81c5-4d4f-86f7-79a59b2efc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4a0da2-a6e9-4d7b-bcaf-585993f7645c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3c23f8-97b5-47dc-9bdc-daa1f09efa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fe8513-5391-4eb5-b500-6138724c2429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b79762a-219a-4edb-8769-8dc9dfb97ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e75cc44-15b3-49c8-935a-bf3d4dd42a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b09dcc-8295-4983-a9c2-3b5f43679cdf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7f88e3-6ba3-4fa5-9609-55455c4b295b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5b1640-8db3-40b3-8274-81bdab8e2003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b49149-99e1-47ac-a7d3-9a29adea4557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dfbba8c-2a88-480a-a985-65d7a68c9bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c24b0ad-e13f-4532-87f3-39478a8ad897",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87872cf7-c101-4f81-9709-0d72929f5ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a07ba0e5-3aa6-4ae6-9431-21bcd5a2f832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09f6281-49a7-40b1-9602-16f79fdba316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33163915-9ad2-4159-9cc7-0da317bee7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11c28ab-4741-43eb-8119-754657ed28ed",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa4145f-31db-4d5a-b2ef-8a55256acdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9387a9b8-c640-4448-820f-5e98a4bf3ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21785be6-b18a-4789-8501-10cc46a3f23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d8793d4-6047-437d-973e-79f1f6360260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62d4d6d-bb47-4a9d-9c58-a54f86b7663b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3eb68f3-b6bb-4d96-badc-b5f1e0c7cad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93708404-5669-4c48-9125-f6f626fddc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba88fc0-9277-4510-8f2b-ad4b0e7991af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "197a0898-e21d-468c-a43c-a9643d71d20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6212943b-5227-4282-8b00-fab84a718cc1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855631db-912e-4999-9680-3c2d2a2d9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3589fac-4b54-4c7a-a5ea-f5e45144ce5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cd2912-c38d-444b-a20b-8774c51f63bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef3bbfd0-dcd6-452a-b5c0-162dee60b816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81955295-9eae-4634-b816-a963c876ca0a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8613c2d1-c967-44bf-8014-71fce1dc4d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0d4625-ebef-4abc-a9d4-29cc8eb2b120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1895bdcb-4619-4eeb-90a8-aebdc88a4f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddbe851e-2b9c-4b5d-86bf-8c78a82b6167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dee3b7-821d-48ae-a21f-dfa14c016454",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0621d024-d72e-4bae-99f4-a3d1011a142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b958fb1-2c86-4093-9f40-b90d5c2351b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcb5844-2009-4d25-ada7-838568a40d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06aa80c1-2360-4f2e-afb0-7ae0014d63e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f874611-ba35-4d42-a6c5-c6f12cb8b420",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe247c60-7f66-481a-a33e-f648afe47050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a3bc05-eee6-42ae-bd54-f2a7fa08e556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a7ef34-6b56-44bd-9daf-5cd994de5665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e94be8-7932-4e42-8046-4657922a79d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675fcd78-61e3-4ace-a6ad-9c23ff1fbe9e",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e251fe1a-a2ae-46e1-bf94-34f44e248802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00042e5d-cfb1-4422-838f-ec8149b35abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f27c9cd-1ace-4c93-a5c8-2459a47528be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce1f5fd-7ecd-49c5-a73c-6bfd9644fac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc525ec-74e9-4c7f-a88d-7454171cfb67",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5e9091-5ef0-440c-8873-004a5fc4e0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cabd6ad-0c54-4027-ac65-49e993460031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196aca32-b42f-4d6c-a925-35b4564caf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a90edd2-9fad-468a-83f2-2fbfaef005ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4194aaea-b885-4919-8a71-06c135abbeb2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbcabf8e-08a6-4c08-8760-67b46c0aea22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01aa2964-7142-46fe-a02b-ece26c19fadb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54a60f9-2446-46e0-aaec-03bf881636b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68bb6823-55fa-4e0f-bc8e-ff048147b409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179a001f-b015-4c67-8b1d-9e90046e8353",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745c4532-8452-4d04-824a-0a1d45f38d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befb28c9-84c2-43f9-a9a4-842a7bda1345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3b2733-259b-4259-b379-51c15d379d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39c70648-1bac-49fa-a67c-7f3ed918d189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7dc364-62e5-4a7c-9514-2fb3c135eef0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb90417-8e84-44a4-b140-ecafd11093a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffc8e38-cd3c-4565-9012-440238a8a06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b205e3-90dc-428f-8957-99ce8ec2f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "320e6d8a-708a-48b2-a581-dba25a7ea909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab057fd-562a-4761-b295-ffe2ee6a2116",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2838e833-beb8-4e18-99aa-4febe79e30b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7dad0b-ef09-4394-be2d-bc958ce7a0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73baeb2a-f6eb-4030-aaf6-c93e40440e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "583c4f27-7e8a-440a-b8b5-728eb28decf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888a6da6-5eca-4b74-a25a-d34862d5045f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ee711b-0551-4bbf-a7bd-c83921bbe9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2024643-c39a-4e80-b454-696d490a84e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fc41c2-fabd-4275-98df-5b78c378e631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cea25cc-7b7e-439e-9c8b-301939274596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648567cc-fe58-42b7-a5c5-5c7dd9e31900",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4f4bc6-7749-47d7-bc17-630fac1aa77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5fef5d-160a-4977-ab6a-37ff0c52dbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b7bff7-8d0b-4fd6-bbd6-8048fcfc5ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "924549df-9ae4-4b78-8293-c5f36495ef7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c7fe9d-0692-4b01-9815-721363a9e3f4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f47702-6b30-4364-9c2f-fd196ba07071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bfd28e-223e-4037-a360-8447a1e4aa11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65b5dd3-9f4c-49bc-9929-b9add2e81219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa430091-b8cb-48e5-a583-8ba69f9d9ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4601889f-cc06-425d-9e4e-3954041445ef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766fea83-5a10-470e-a2a2-379598dd37f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a412a1-f17e-4882-8f5d-a30fcc226b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc4b64b-98c0-43fa-b165-5b0c574f6781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07954589-ac4a-4dc4-a3d6-b62431cf3ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3052159-fd7f-42bb-8334-9abc3e324617",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cf413b-0298-4be6-beef-4be39729da90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db832629-f691-4cb0-855d-7b5f160961d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180aaf1c-b371-4dc3-a5ec-2d642f7bfd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6b6327-8a7a-4ea4-bacf-4f0429029385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76cc240-bb13-48db-90e3-3327d77191e7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80df76bb-a3db-4953-9693-f53ddd488a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9fcda2-3b90-41ac-b25e-5bff3c5cbcdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b123b3-fffd-414e-97a9-955684bc45a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe670108-622b-429d-8d68-5b5d2861c388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3c8175-cd01-4bdf-920b-385f7563ca3a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f06511-6499-462d-b876-53de48886eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50eea94c-0d24-4da2-982a-2454bc623159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2530990-a9a1-40f1-a045-98fdd6e820eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e5e860-e82d-4835-ba55-c84cd7a7ea8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a374e19-d0ff-48f4-bd09-c033f6dd892b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6627252-0f89-406a-b32a-b6d43f5efc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c785a0-4c75-41db-9b3c-86d543406ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76acd5f6-564f-48f4-8dcd-4d6861ccf6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc61186-95e2-4342-9493-d1d5f99900b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6071bc5d-21c6-44e1-8c5f-f320accb0702",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bec9808-db2c-4bc8-9e38-cb86a9c26cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031e8ae9-cab8-4b8a-9916-56a4faa8c628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63cb84d-97d7-4c9a-8d69-ae9dbe5885a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede04279-6251-41d6-8f10-10591c1f50d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dfd20f-bf88-45e2-8a4b-dcb5e73e8828",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4ef17e-639c-4cc3-af48-28315041600e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9111b3-a101-4c2b-a987-75d3d526e12f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2a31e6-42ea-408b-b69c-0c38896f69ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2138da3c-2328-4a0b-a0d7-6b92ca0137a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c4fe9e-6751-49c7-b249-b690752b0663",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e136d45-d4eb-4fa3-9414-12250461b91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc751947-8148-464c-bf5e-06656703577e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac71789f-9012-4ad1-8a58-943d1b750524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3503d3e-439d-42d3-b370-2ea15c6907fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9424cb16-cd69-4dcf-b4fb-47af847bde30",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4040bef-4a39-49c8-9113-78fc46d3a79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5764eb-f1aa-47a5-85e1-9a97c69d73e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f44a18-d045-49aa-8310-5c09e52136c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10e2fda2-5e3c-4213-bf18-89ea829ffa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e347809-e0ab-40b1-9109-edced59fbb3b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e21a5ba-70a8-4e8c-81f0-6cfbcc1bd8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41324d2-1598-45c1-9b40-08b366a65f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44da005-ba02-4052-a127-3d2ffd5888da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce8f4dd-0b6d-40a4-a5cb-4ccac31507c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c21050-1927-4d35-967f-534cfa332ba6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e7d3db-004f-4bd4-ab93-50af94236176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13e4f4f-72c0-4b87-9ec0-0a71a8dc9081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd10775-722e-4bc5-892e-678340fcf374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de626371-37b5-4e76-98cf-3209f71f2482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0755991-9fc0-45f3-8489-cbf516184e76",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c62bba-6861-41a1-8c69-4e60faed1331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6105cdf-270b-46fb-ac10-4eed035bf36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f885b3-40dc-4cc2-a8d7-bdc2914617e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "583db3df-152f-48fb-8b98-1e1743bbbf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174f3744-705c-47c6-bdc0-569c64049884",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b66ba1f-9216-4adc-83ef-31d3ec042dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbfe46e-be94-4e39-8fb8-7fdf150c2b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788bf589-4435-4a5c-a456-832e83905d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62599bbe-1faa-44f5-a9f8-358d4d95aff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d572a06f-5c95-4751-808b-5ec15a5fbbc1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac00ce0d-8b03-42cf-8710-414c211babec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a6ed38-cddf-4aca-8ded-45d90dbf44e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b96eeb-5667-4826-b956-33908e806685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed9b00d-8629-45d4-b84b-df806b25c1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1553ffec-0b41-4b56-a497-f18dfc4e8c03",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f7d024-ed97-47e5-8df8-ec420d0f7fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f476857-93a8-4469-9175-53ce9458d81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca61b99-beae-4325-9248-3cb8b4c16874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2d810b5e-b356-4084-928e-5a51a6f82ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee382f0-212e-4282-85ba-1116f0f91d32",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9176d-daba-4454-a91e-5c5e7fa32e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dae24a5-0e46-4fbd-a662-37d46be4faa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936a6cca-84e5-4893-bf55-3b21add21b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fbe4aa4-6c98-492f-abb0-3b01862813d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14619d0f-2d35-4daf-9e24-5a0465a8bb13",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6f5816-c2fd-4b2e-a755-eefc8ea043c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c7ff1a-90c8-4c63-96a0-bbb10e3fec2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522adefa-59dc-4424-b3b6-a20852d4a620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a2294d-11b5-47f7-a085-17e147d63f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55189a90-1c59-4295-9b60-312be8dfd516",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136ee38-34d5-4982-b4ba-0a783b59de69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507ebff2-a60f-400f-ac8a-803a28ffca1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76112a8-e753-4433-98f1-61620dc14c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee1ac87-8a45-4e53-a3b5-11e5a6ba33e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7cadd2-730f-4b4c-bd21-a5ceec3497fa",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb02c26-ee39-4a18-8d94-97baaf4efc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b23363-1512-4b51-a5c2-ec3b324e8398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de94c87d-cc87-49bc-83ca-bca35b5d3c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a322653-84e4-4948-a00a-7a640c7a31c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38479a7e-bf7e-45e7-9afa-81335662c748",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5007c08-dd5d-4927-81c5-d91957f4a808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e522acc1-476d-4399-bbea-bd3f5f080a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ff354e-b0c1-4fdf-9126-049c3c061916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2f4196-7eee-4fa0-a3c7-6b74a4e5b950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a184e3-7113-4a5a-aacc-d7b607b4a0fb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "334c3593-12b8-4efc-898a-4df070b8917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09773cfb-8def-45e7-ba29-19d825065b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932197f0-ceb9-49e2-9535-8336c7abf071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47bce0c3-c0e9-4082-8365-60cb2b3a088f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2ffb1c-d999-413e-9a53-e2d43d9eff6e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab8cedd-94f2-498b-8501-c55c89004297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522e762b-65af-427a-9e9f-44e6cd63ff40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad919f41-58f3-457e-8c9c-e7728dff2ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a9d39e-6616-41c6-9eac-43cdc47263e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e9aca9-5615-4391-adfe-053a5141d7f0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b563b3-9871-4e18-925f-82ce17ca51be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f82e6a0-88cc-4534-8fac-5f15ddce3c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb57a70-0078-4aaa-a918-5a7393b04dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f146714-5cf5-47c5-b0e8-213111dc30a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f7c5a2-fd49-4d51-a8b8-9838a2f9945e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2b19dd-b247-449c-bbe8-e64ab77d7e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560e8e67-ff98-45e4-a467-004642da072d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183bc82d-eb55-41be-97c4-e5328a5a6329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5064c48e-4c18-4f3f-8908-41d39519648e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e8c34f-1544-4d1f-bf72-cc8af015d7a2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5974e11a-8e6e-4397-9901-2eba977d70a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc79d3bc-e6f1-4cd3-b8f0-162a0489ec90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b025fceb-3ef8-4469-92d3-f37d73f2ef54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd9b34a-effb-4b7f-b31c-1e6d9036d2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87c5e9c-9b70-4f6c-b4ad-dafcb301ac75",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848c7bd7-6887-479c-abea-af11c94e9f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8deea8-2106-4f5a-9a70-14bbdf2c363c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80109cd-e189-4eca-9532-ac8d4882488a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6edee1d-ad65-4257-a793-ecd16c251746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c60adc2-8bc0-4a29-a123-305a9d7cf14b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2fc69a-71ad-4293-b17d-cea1b3f55602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94110e96-2d11-4abc-a62a-9a5497e028f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1839726-7939-441f-ab9e-855a50494d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "696e9e3c-3595-4653-8a9b-cd07f18e7042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0c5176-5e25-47f5-9d6c-2b575814e475",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9156af52-7043-4559-9c1c-ed10fdc7b755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd30aca-02b1-44c0-9c85-0ffddc6e46f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dc8c85-1adc-4c63-91ae-947ec1bbb3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3cd2b4-6b9d-49ba-b558-60beb191c82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c36a6f-73a5-496e-98fc-1f37ccfc84a2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606ee5e3-35e5-4a33-872c-5b51398fe166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ff4e24-c579-4c12-91d4-66d59798ef2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d92ea5-0a53-4a01-a391-5a0df71ae6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "127874dd-8954-4ded-8e55-40286ba021d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ef95b5-7f54-4a2e-a461-4a9f4ef86499",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a44a96-f4ff-4919-b297-1c7d4e12a447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f40aa4-1e5a-4609-afb8-dc9721743dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaa85e9-1223-47b6-81e8-aa9f4ab376bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36d0998c-7531-4d64-9d38-64da81ae75b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8cb096-db2a-4d4a-b178-94a7e7949a17",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c683b1-89aa-4b9e-963d-c3c20894f319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da66121e-b767-48fb-8064-d8450485248d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f05b30-f112-428e-bdec-349c65e4ecc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "224f5d29-4747-4717-bd23-2dc78b73bd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0655cb36-4801-4ca2-8506-aeec8acdbf65",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1e3ec8-277b-4a9e-863d-e25ac4cb2f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d17224-d972-479b-a1ad-c9a71460c248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a2d460-6a62-41a1-910a-31cf271fdb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a234ee3-9403-4370-8e0e-d52e0e47ac45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7192ed6-6512-4590-84de-29279d6c43c1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cc2c14-cade-4c66-bfc6-7e2888ff462a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447c8d8c-da75-4c69-b5a3-208cd0ef33ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52317ec6-2d62-4632-aca6-1d85fef064ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5419817a-e897-4e99-8478-11f119c8c74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cd945c-3b15-4b2e-b4c2-335943abd4d6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68979a0-e2ea-421e-9331-62396d2ebad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2d6cad-afc5-4c66-95d2-33a52c32d430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd1cd7a-4faa-40a5-878d-9af284801986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfac2ac6-54ce-4363-88c4-d4f83ea1b483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ac1648-7b63-4e14-8337-180f36ef44f9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dd2f79-d540-4185-bb02-2d1008580dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7395f3b8-74fd-4f2a-b2b4-410692ff0a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42d8a68-303d-4011-b3d5-e1b579fae649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98363551-3887-4403-a403-9d094d0735d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe5d08b-266f-4c99-94fb-8bcfd1583bc1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7531a5b-a116-480b-a414-6c3a3498f4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de48966e-9e05-4dd5-934b-f5a4d0d3897e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e3d328-fa9b-4db5-8a2c-588c8d03d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "63072c3d-d9ce-494a-bdb7-ee338adfdc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac07e7b-644b-4860-a099-9719194261c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0e17d8-280c-436f-8710-08c81404ca4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a3feaa-1723-4e22-8d74-823429c738da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f0db19-b1b3-4b64-8726-14aea3e29438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49ffb57c-9066-49b6-99ee-02a0dbc7e2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db046e1-e2a4-4698-90dc-2ac000380ecc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30558ae-a987-4f06-bbbe-7671dabb9bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ea3e1a-44eb-4fd9-9904-668212017db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0086978b-2e2c-4a0a-a269-8912643294e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "18944d36-69ea-45c9-ae35-6efe31ba0490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a729cc18-dfa8-4c72-be0e-2e86bcecee6f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdcdd75-451e-414c-949e-35a5c8259e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237254ae-bdc2-4bf6-9f1e-5de31132801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048b1799-d26a-426f-aba3-9fd975f53c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b313e20b-95ab-4f65-aa38-d585491ccb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15254a46-c235-40e4-b9b7-8f9284f219a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd17f04-3801-4bb9-8f94-b00261237d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa056cbd-a20e-4fc8-8413-95da4c6bbf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0cfa44-32de-4c34-b2eb-96fe8bc20898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d049703a-a9ae-4cfb-be69-c07b1e19cf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a550fd-11cc-424a-bf11-f66bfa8970be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73421dae-f569-4ef5-97d4-cee0c6185c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a668eafb-75e1-474e-aab0-4e881ed7f2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e94ca5-ae13-43d3-a198-c3a04ec011c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2465b55e-3614-4ca0-a7a5-39092868a31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab644eb7-6b26-43e2-a229-0526f2510add",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f296ab-6d59-412d-87b0-cb882fec7129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0ee8ad-34dd-48ad-8b8e-53e2de5a6626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2229e1c2-1f03-427b-a60a-48da5f5893a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "512b3a3c-7baa-4443-8204-4671b9266eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91ca7a1-3568-4437-ba66-087876106ba8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44ffff3-98d2-4e3e-9b86-748ed42389de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a32c6e-555d-4569-a05b-6d31d8d36894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4de2b70-0ab1-41f9-85a2-d8e5466b0f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a03a25-837f-491c-82dc-8d5bfcad683e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb70cc10-3ed1-42d3-bf22-8804f2ea45af",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8ea54d-eb3a-4f3c-a1bb-038baab97f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb4e5ff-f40d-4ae9-aa1b-0163ff6fb6cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50ebd14-6174-4d38-8efe-8f17d036fc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1f7d6d8-e509-429b-a0a5-e77efbae036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073cfa4b-7c20-46bc-829a-38abcfb02fb5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c94f84-2b90-41bb-a2a1-4f87048719cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ed8973-b614-4b45-a404-d31bd17d44ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e5a56d-bd14-4e0e-bc9e-1fb83667e827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06847813-2eb5-4663-909b-49c4e14a4995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202f2b24-2a59-4056-bb64-a0eb9b4cef31",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5a2f89-9c59-4a07-a149-e6fe6844b051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487060c3-15c6-4e48-8ea6-711dcbcdb965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482bf920-225a-4c91-92ca-6d57de65ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28761a69-1b9f-4b0f-b472-5d473c6e814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8871d1-84e8-4402-a061-34ee150246f2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c458a3ba-5fe7-4acb-bd85-ed40420bdcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b104bae3-6b24-4ca1-869f-2c2cd1ea3520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f213d54c-fa5a-4e9b-bab3-e9ebfeb90874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a94878-dda7-4880-8fe5-5e885721064d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93c903e-b845-4c6b-b53f-c73225d3ac56",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3294e2b6-a1ca-4edb-9fd7-db2cf4ccef6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd963dd-8926-4cf5-b77a-023f5e93d706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97c8e54-164f-497c-b053-9ffc40d5e62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f304705-966f-4c29-ab80-f18c4514b395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f2578d-655a-415e-8e8a-2e481ea6d58f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6265408-b533-4407-9442-ca84c4ca5d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6eddf4-74f5-49ab-96ad-1cb9f99a0e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4535b8-16fa-41c9-b401-d2f6a38d0ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda0dcd2-59b6-4efc-8602-6e968ddabf2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c874f4-ff8f-4456-bca8-a4e6656fec7a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae0a71e-5ff9-4a52-97c6-eaa5851313a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0b4da0-4ea4-408a-a7b2-6045ab03e621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68c5efe-594f-46c7-9b27-00f0220d113e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d316f8ee-a0d6-4fae-8063-fb174e48b6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd8c2df-90bc-43a7-abc4-c2577862611b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969757b2-737b-452e-b3f9-bb2116c57b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9600b794-21bc-452c-aa68-3d1f307aba92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4b4d46-6d60-419f-85d0-6cf988d5ca6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ac7ff0-25d5-4bec-a3d5-8ccc8dc9a2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb68e2c-4c34-497d-90d6-62a8e17f9b67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fcec47-d245-4727-a68f-5ed85c214cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbefabf4-d3cc-4434-a0c7-572bd821d24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887e1885-846f-42f3-9184-1b3ed2aca5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64ed6b5d-47e5-43ee-8f1e-6573c538dfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2b0000-b0a3-4638-ab83-e7d54346d4ad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7c5f6f-f64c-46b4-8d84-fd40f68e27e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fc15be-d088-4df8-af3f-db438cf3112f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fcac76-c2a4-48cb-8ec3-50ab116cad0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b21f18-1b3f-43b9-a56f-e0b34179db9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ec213c-d5cf-4b26-a534-17947b8b558c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ada25f-e27b-4658-b606-632ba8517714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca16b34-9a3b-4d83-9236-9f357e278129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c4cc87-1ed2-4601-8143-35ad1d4bb698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da08e6ed-ace8-4a57-b159-8d42d48b792e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd24fd0b-0a4c-4b4d-baee-caad7fd0c0c8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7adaf61-1f48-4612-995f-da784907074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a776c598-cf3d-4a09-9beb-4c174765e5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f62bed9-f605-4f12-b319-6b45b1f67a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "004b9256-cbda-4e78-96cc-4a36b50c0cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d343f50-0583-4d98-be32-b2f16e9d573b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2178f001-1b86-421e-9bd8-87429d95a573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5826852-d7d3-4488-b117-60a5cb0e83a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f9925b-193e-4844-9581-d9034d482c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f50c71-6790-4ed6-bf98-edd1bcce0eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752e9630-74ac-4650-abc5-a578f8d59e91",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e4b43c-090c-485f-84cd-81a4bd1ad670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6909aea1-7bd1-46b2-9666-133f62b619ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b616d9e7-60f7-49c0-a614-f7e2321e34fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eeba5fe-6ac3-4440-9493-bdcac80711e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae3efb9-8228-4f07-98d1-f5b9089ef360",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c223f44-e856-4407-8eff-02bf5768df73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b966f9c-4db2-49b0-91f0-e542ab7609c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090be030-1577-4deb-b8a7-eb5e106adc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "497fee31-bd4a-4dc9-9e7c-d464f64a68ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a585807-c84d-47cd-97e6-a153d16d17ca",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0f10cb-e4e6-445b-9190-97b9255d2f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8af8db-ae5f-4595-8d44-aae7bc25702f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba05381-6b7e-4ba6-918f-6eb045e42d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcfe5fbc-d4b4-4de3-a149-2c6271bd9909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c36545d-f811-4fdf-a0ac-e43709185c26",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3248c212-a2bc-4d79-88f6-6a0fcdbfdc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6921db39-e008-4b63-a0ee-c517de5302b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93672748-0b5b-4c59-ae90-b4502c407ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6cadf563-1d57-499e-ab02-447b81f91a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75017bf-8033-4c8c-9647-43403f35a67a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551add28-cd05-4edd-a6a2-50a6852164bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2557786d-5108-447e-bf31-8eb7241b4e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefb663e-815c-495d-a5ca-601d6327ae96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "793f19e7-e65c-4b1f-84d9-e84c5867d5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61386d36-e852-4343-a5b0-90b78b6a60f7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7ade98-12e8-4173-b2b0-574260c09570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599a7d8e-7102-457e-9351-0a9aba1d033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebd0a5c-da5a-40df-978a-5e34a3ed8ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dca5dfc-9772-4714-8250-b716a86b1bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa87471-75ff-433e-affc-a8fff8c00b00",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37b66cc-4ded-4442-8c8b-877069231c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80c5691-ec48-4161-91d9-ba30bd3a2a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892576f5-28e2-4613-8a06-0be4f9c5de2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f40628-8246-4871-aa09-f3ae74ac7644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7413d35-f1f2-4acc-9b40-ef9dbb474fa8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ed8372-a31e-4e2a-8e7d-3625f01ade87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18dbc90-7410-425b-ab7e-20dd7a632f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54428e38-2e07-4765-83ff-28a28213cede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48031a89-ee9f-457e-a44f-098d5eb83b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a29d3e3-6e3b-4534-a794-a990d38751e9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3c8c6f-d490-49e7-97f0-db4d49bc9cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d14ef5-687e-4f9a-bb40-11b25fb22418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0121442-807d-4b16-a373-904f45e54235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9683c6-e9d2-4112-9e2e-6bd3ebf6ec7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70cea41-f5b9-4f6e-a1d5-f6ec5ca7d1da",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8261441a-0ee6-4e5b-96ad-283b780d8f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d508fd88-d888-4a6d-8a69-d5d3cf05ad80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643e2f2-6c8b-414c-8993-e483060e6dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e67cd1-826f-42f8-95e4-e479ac9637d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6ea547-231c-4367-99ad-2aac0110d146",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe1d1c3-a18e-4b72-baf4-4d9772e87f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9841927-417d-4505-86a7-482023ad96f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9bbea8-59a0-428f-91bd-53848fbdd208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cfe38f5-bba6-483e-a1fe-369c55565419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803aa938-af1b-4c5e-ac36-03f16a99f283",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03a1ec4-89c2-4b43-af1a-b43b2dfbaa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c859f53b-03ba-4024-a3be-d2508be77ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5edf35c-bb44-4ee5-82da-0ce9a998cb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "103f5192-317f-4f49-b425-ebeb49f92687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b7be08-6e51-4f43-8d9e-1a1f0b8206c3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02a0c1a-3184-4a09-bea7-3a0986e07c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d080154c-4b2a-4b89-839e-e4485d104e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5ffff1-8d82-4492-b945-f6dfd8271722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "93918cd6-e0bf-48d6-b69b-c1929884baff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b485edc4-63a2-486e-bce6-b96133af8d4b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5783d7b4-c553-4310-a2e7-a266a1d6b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b64c39-5b48-471a-9033-9138aa9e4b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1809d0af-2cfd-4a97-beca-6b8c39ced2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e04d470-0142-4b03-8336-2a6fba2f983e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1282d946-d9fd-4bec-b0f9-8d21dd7c2600",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d19a60c-92b1-446d-bb9b-6cc4495064f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea481374-7f8d-497d-84b1-548d23bc698d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6e0a2b-2a30-45e5-bcf6-3262afb56843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "301f0e09-d47d-47f2-89f9-405c4b7ada85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f421ea86-6263-422e-a133-53ef1048763f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cb4ec7-5a76-4dbf-b428-a3398506ce8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "90fd7718-0a77-4c2d-a797-1d2d2065f362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee2155f-b429-4709-a4cf-820dfc1acdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f26d9f-8da2-427a-9637-f66c643c5698"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "093fec92-fd5e-4d56-90ce-8159c2bcd5bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbe28774-36e4-4954-bb71-fba187db084e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23265bed-707e-441f-b6cd-30e9085c5f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb653476-8296-4b9b-855b-e7fa5fd89444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5466edf6-6d63-485d-9c60-9152ba7a7250",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "bca5338b-a2a8-4e44-87c8-d46e48e6761d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ea3560-0b3a-47d6-b025-ab9681e0074f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa6a7a4-af58-42fe-a4b0-20d76d846fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d98d8f94-5ead-452f-bcd3-5e57ba919027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d580f77f-23c2-4faf-a8d2-371a9bde7874",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "112fd984-1dfa-4db2-8520-163def9b5032"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0a0d238-db92-497d-aecb-ac584a62087b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0770c07-7510-4070-8359-b8bbce729c35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd85fb50-3a04-4259-bf6d-12736296c543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8494d70c-ecdb-440d-b3fe-de6980673713"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc416a60-c3cd-4139-884a-a5b8489fd2e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "407249a7-41c3-47b0-b56a-0ff03fc7bad4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5263763-0ad7-4b6d-887f-7dcfdd4b53c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57e1bae2-da65-40e3-9171-b3428e5b2d70"
                }
              }
            ]
          },
          {
            "id": "0937320f-5be1-48fb-945e-c92622cdb417",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1ae175f4-2eb4-4ab8-a750-8b6c81ae7df9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a633789a-cf6b-4b64-b49b-2713346fde7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40f16608-2879-47bd-86d0-c5ef1b515eed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5404a48-a45e-451f-99c1-92a01dafc453",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "689abced-e1dc-4449-812a-cd1d3e0c8ac4"
                    }
                  }
                ]
              },
              {
                "id": "99e2df62-5cf4-4e21-b045-9d822ce3fe2a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd2f288e-b55f-4230-b37f-d4d95d08d79d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e2d96f4-6b88-4a30-b2f8-630b20c1768c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1225239-91d3-4797-8b64-c552f4d847bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b03344dc-848c-44a3-a32d-8b61f9a3916f"
                    }
                  }
                ]
              },
              {
                "id": "8488e5bf-1895-40c4-b4ab-c6747ca121b4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e969a97b-30c4-47b7-ad69-5b42df11ca1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "666e0b38-ec11-4122-b938-da9d2ee519ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c0c6534-535a-484e-9297-eb78beb36714",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7bc55e2c-cfe7-4faf-8a94-9a13f6c681ef"
                    }
                  }
                ]
              },
              {
                "id": "f1de27d4-bbab-485c-bb5b-3e012828c8a2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "339cf300-0c4a-4a48-af6d-d345d85d7441",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7501df3b-2e2c-45fd-97cb-f5153584046e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4255823c-2808-4fbe-8737-e391ff43ad8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "05673ca8-c516-468b-9fde-c62a70431e41"
                    }
                  }
                ]
              },
              {
                "id": "ea4d18dc-229d-4c7a-83e4-3b7668364cc7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "052481c6-219f-4cde-94a4-1eb0b7a77e68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1390b88-ef71-4e93-bdae-2cd4c7afd657"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7b89dfb-9758-436c-a6aa-741b25197b23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35b680e4-f140-429b-b2c3-f2d40655ba7f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "813b2eee-e411-4184-baf7-83893da53106",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec8d4b6d-675e-4d8e-94c0-2b6f29b33da1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "318d9993-f8b1-410f-94d7-fa648cac60c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "944d63c1-a44e-4c42-a19b-351200656400"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca2ab6da-6bc7-45d3-9b7d-dc1d6e3abde0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b63f9c72-edb4-4295-86aa-f4410a8d1a8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3df5714-3ff9-4af9-a835-dbd607f0f5b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f6ae472-afb4-4a19-bd85-7ebfbd41af38"
            }
          }
        ]
      },
      {
        "id": "d33eb304-1dbb-4d71-8ab4-e1f20b82d886",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c7083588-f958-41de-9dea-d407e34ca5b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b4bc40e0-d2e4-443f-822b-3f646333a2b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e6f71bb-5965-4682-838d-f0834538bd07",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fe4f64-a46a-43a8-a901-199c5e31e7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8eb5fe0-bbed-4883-a458-7c4adef29445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952f7944-0276-4cde-ab35-08fa38f18a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "42901ec8-dc81-4435-90d4-95c2920c444e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0935fc2f-540f-4f22-a28e-96d40e9c0adc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c8861c-5042-4a88-9b8f-90470393de4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3355457-5399-45b3-b5f3-9aa8e669bb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b96dc3-c5fa-443f-920f-a097f326a7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa521bc-71d1-4580-8f37-3964e721f86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1bd174-f9ba-4560-97eb-57ad12bbf895",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e70f12f-c112-457d-bcda-0e973ad5055b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f0c401-5d25-4555-bcde-b159aaf535e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22ff073-f1c2-41a1-b8c4-bd74b6c4e382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d35607bd-a427-4632-bf35-dae8f41a8db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00295ca-e3ab-4a9c-9b76-d8d0d20745e3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c3a342-b0b1-428f-8200-7cd50c80f074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897804c0-004e-422f-adc6-687442fd0698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9558f36c-b2f6-4fad-8d8e-8272ccc7ae7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f60d49c-22ee-4ea1-a4d4-2695b156f47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e08bfe-e643-40a5-8814-93d9632e91b5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a72f2e4-5185-420a-b854-cc1da9733e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2df6ac6-40a1-4979-ad61-046c87947186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51607f3a-b744-45d9-afe3-7ae80ea91633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df68811b-5862-4355-963f-59bffc448963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e3e1cb-199a-45f3-8cfa-7c5f90591564",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34518a71-4a6f-434f-b500-9d8abac88f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4252977b-bef3-4f49-be77-cb0994e759d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c33e93e-caae-4736-8f73-3f9f2fb67fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c984afdb-06ec-4bfa-b765-fb12171ac212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee445d3d-83fc-4756-b393-e4e1620ca053",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279f9dde-02df-4661-b2eb-28a166059749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c016e9fd-4da4-4e08-b882-dd88c66cd3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649d2927-73bd-47da-a77f-feecc9817f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5846c259-00bd-4c5d-a5b8-17c63ad797ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4498cd63-4eb0-468a-a10c-a73f26fd7ca4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e567a2f-bf40-42a8-9be3-d25e12c27b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cae5a3-fb9b-429b-b21c-bf77e99a6b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0010932-d664-4ac0-914d-e53aa7473b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e530076-7e99-4a90-aa59-8d285b293382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcc7587-30e2-46e3-a0e5-d01beeaddf44",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572dbf9c-727e-4e48-983e-04c8db906429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3300f052-5370-47f9-90b1-b8500f12c4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f8478e-9b24-4485-ba47-85bf2a49b702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7c8d5c-9535-42b4-b178-a8291081df0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcc09f9-e662-44ed-981a-4282c82b9392",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2277f19-7a44-4867-a9d7-f0e8ba12eb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3f50c2-6fff-42a5-bd0a-18f2732ab679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4c8f3c-eb62-4bbd-83eb-47c092c3abbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4871f6dc-e155-4963-a92d-2ac8dcf75eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779bcfc4-62be-4d97-9dcf-953b4c748cb3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c846145-a33e-4988-b0c0-f531b383c4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63be383-f6be-4f5d-80da-a4abaa561815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8bd387-b1c0-4cac-976c-6e27ca70774c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaa9871-92e4-451c-9d6f-e5518128b992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a86b0a-8911-44f1-98a7-0cd34bc3a044",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fda6cd3-89ce-4630-bdc5-f3db1d4419db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b423b7e5-5b85-4497-a5fb-9c03c3b2a47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e872a2-a99a-43cf-8f32-8180eef913f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1f1215-4d4d-42a3-94c2-11011ed6c670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cbc04c-c6f9-41f3-b422-b3275df0fad2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a65c57a-7728-4d73-8997-6cea48c00500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d36492-2241-43a7-bbaf-dcb368af9672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a264b3c-0f5d-4cc9-84b8-9a06ed4fdf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24d2d01-e6f8-454d-bd8f-61be95c75c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b077ed-cedc-40c8-a0e5-f40d87d7fb35",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c011b61-a5bc-4820-97fc-9b744e0bcee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30fdb40-9612-4c09-8c55-71af74d73c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf3dc78-8778-4f3f-9950-b47bb0a8e5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cfab9ea-9cfc-48f5-ab6a-e745fba607ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531ec228-46ab-4698-9845-67fcfa47d1dd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6200428e-c455-44c1-bcec-9c452bb54bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a23e62-1c75-465f-a913-e3a6fe22749b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa08b2d-5077-47d9-94ca-227b9b7188cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "73fca205-7cf0-4f5e-b854-78e8277c5a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46dcfa9-fbcf-4932-9f35-6b4eee9e90a6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a89221f-3f2e-4126-99c1-ddd9ea8b6e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1f8533-d8e9-4f7f-a69d-b51d85b7374a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac12c6f-b627-4e7e-8fc4-fe2ee77f6b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0cdde9-3447-4a57-9b80-537de21972d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81c1b46-c666-412a-a6d4-02e0447d02e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2846b2-212b-4642-a61a-34d465fdb26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42d21d1-e349-4149-8ab8-7e2985835eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0e5121-1ed4-40eb-a8f7-e2effac05dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "be21f0f6-8c79-4865-8065-6cbffe31b182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a93fcb9-b402-4c71-a520-f1987f8f6c20",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c40cdd-2f11-451a-8b40-a62b6b8bd5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93016f3c-0051-4acc-89fe-5c17ac1bdb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ff9cca-11db-4150-82d9-b16658183eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57746a85-b8af-4e64-8294-fb4b3494d57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a749a3bc-3bba-4909-955d-4a7b661c58b3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52ffd81-9985-46f2-b208-682fe99f66c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69029d1-4eaf-4d55-a692-eedb9d747e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c1946e-ae90-49c0-94a1-a37ced33dc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7b1150-2106-4a9f-a70e-5a297f63c919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101be06a-e5ea-44c0-b29f-99bf7fb08ab2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1a0c5b-d777-458f-9b0d-70277be08b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5330388-6743-4e4a-baaf-37950d9a4338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0368d8ba-1f9f-47fc-b0b1-a8863c672e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "047a1bc0-e507-4960-aade-96a5ca67f167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57c2b31-8ac1-48de-ab43-6a9f8b432731",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d0bbe3-3802-4166-91fd-9aa62ae201c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a54b6be-d69e-407f-acf3-e926ccbdd58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8ffbb5-9bf6-4918-bb78-49f172dfdb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae658cd0-0dc5-41e1-af42-4f6e5229a450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1003569d-9763-4023-8830-9091e7944cc8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8075b614-8f2f-47ab-8012-37b908b8b97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38613f2-de70-4ee8-9be2-d3b10ef67362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5a0513-e7df-4325-9502-028553a64296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "205b546c-1df2-4da7-a347-5fbd909ddd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef321fe-dbff-4721-819d-c2d9d0b6cd2d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50248464-be82-4db9-afcc-24f16c10e5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc81867e-6fea-4738-b8ca-f475699b61ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dfedd5-c8ef-4d0c-9729-69c0df1d669a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffdb016-33f4-4b57-aeb0-b27f6a4c3448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72ed055-5f32-4dc9-b0bf-fc3be5a40492",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956b1490-ee35-4421-bd9d-edf45293422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a6c7bd-e630-49ee-a3f5-96391818e688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865b3d07-415a-4ff4-bd02-e1b0811740b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af7c1134-f71b-44ae-b477-4ee382fb9cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f99bd7-2888-462a-98e8-7748049b12ec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275a9dbf-29e1-436f-9be3-9250c48cea82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5734ad4-057a-49b8-b4e4-487a55907c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143d128a-8280-4429-a061-3bb5f2f0ea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa3ce60-81ae-48b6-9d9e-fdcf437ce0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce4872f-496b-45cb-b24d-1928e8a86886",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b853cdb7-bb47-4d9e-ab8a-7860482fd23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2eae33-7ec5-40b7-a621-63cbe3c77d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7952040-e427-4949-86cc-9b02da4a5868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec12017e-bce4-4ef2-a95f-10ad3c0348b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6794e70d-a068-4b0b-8dbc-50f367e2ec08",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27fa2112-b64b-4004-b5d8-5d6aca558172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4425dc80-b640-43b0-b40c-e321a91b0e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ea228e-aa0e-41c8-9bb1-ace84705a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4af307be-1acd-40ee-879b-0167c10d1e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3203ea-7ca9-4ea7-93dc-a6aa8cab6695",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8908d170-f6a5-4be6-994a-490053ac6b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb96efe-588a-4732-8f38-a20353f1d18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d13a96-1cd2-47ce-af63-0966df22178e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43a825be-202b-4566-a2b6-f35d86334ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd5f2a4-89e1-4a11-b091-e39d25e75a62",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc030185-8a1c-4f6e-8f74-4b38a5c0ca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53ec924-a64f-4fb7-ae1c-4027721e5c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7dd6f6-885c-4c48-81c9-7cb36028f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "864273a1-a6f0-4c34-96f4-2b9453b8259e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c94cf4-f108-4365-ad9d-0f09586c67a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24f273e-3737-4e08-8264-e5c4341652b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4e7412-fb26-4d56-b0bd-389f91c1a7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e693f3-c213-46c7-86d5-5fa6d7514200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a029c88-6dd9-45dd-b55d-bb62ec3512b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516ed1a0-5736-4b9e-9c62-77dc6eba0db8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd96c3c8-7695-46f4-a25a-3186f7405c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5335db4a-5a00-4305-8983-42b750b412f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ff9a8d-e955-4561-8239-446514fc78bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab42730-e8d9-4959-b6db-54442bee97a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0614ceae-487b-4fc9-8397-c5b38596c7eb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17768c25-c26b-424b-a3c8-ceb6eb4aeb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a743ac-ce9d-46c3-9524-0d3b65894120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c145a718-9c61-45b5-b603-3aa746dac43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4960e0-9665-42ef-b33d-1fdcc85cca12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f93cd9a0-5981-467b-b037-b397c0e739e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41cf951a-6f7f-459a-abc8-54eaff242eb7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33774d63-5688-4aec-aff9-b8cc6c4e2045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515c6a80-a53d-4d48-a62f-38fd2a6c7f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c43593-8921-40f3-9590-c96db7681398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fb6cac7-eeb8-41a1-8481-0c4edfea1066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e2da3-f1a8-47c4-98b3-0fc6ff7c01b8",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57870998-57b2-46fb-addc-411d22357044",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "4b2ecd59-dbbd-4451-af43-fe26bdf6a47f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaadce9c-8f00-431d-8290-38a1c5a0e458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "840e9cc8-057e-4fe6-b6f6-d0ddae0abd46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9fafcc6a-aad9-4267-a3e0-c35b81f7dfee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e6a0e9f-84c9-4913-9a6e-b1d5de358b3d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d8dd605-f1ee-40fc-8012-5affe3e312dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0446124a-826b-4dd6-a240-2fb149aca8f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "194cc586-6fc7-4eea-97a0-a31c276dc1da",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f43e1ab-265f-4735-915b-14e145336a21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab75ea3-bea5-4879-bc8d-39121244e3e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29ff31ec-e1a0-491a-95cc-b252fdf581a8"
            }
          }
        ]
      },
      {
        "id": "6d692ba0-2412-4972-bcfa-423de5484f25",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8cd560da-0eea-4f58-b65f-4d1805031ccd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "267182bb-61a1-46f7-b087-a6fa7ce940c0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e4a2546-ca2d-44f1-9762-57f50c77ccc3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e7d276-c45d-4771-be99-f78070aa17c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf08476-e6f1-4901-a72d-450eec9ce4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5529f622-21f0-4165-9835-4c2a2a3bfd6c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7971346-f341-4b05-abe3-eb38218b6632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df9503d-9c92-431f-85c4-03a016d064e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e608f-b24d-4319-bf94-4f9490850341",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf9e39c-c643-40b2-b093-3ae306ae1e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57c718ff-2009-44de-97b2-b000e86d295c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826a67c9-3fb6-40d8-ad7b-9f16c5937964",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6df70f-0ef6-4304-a785-a424c2d020b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d428572f-ad92-44e7-b588-ed844a0f4255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eb5177-a568-4dff-8b3b-850fa11616dd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289b0cd3-096b-46f3-8f6d-7b808f99cace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046a9368-72ec-4f7c-82f1-2d9d66cbb811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4ae8f6-2228-4852-9f90-aa86d6cdd5d2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d551c5aa-758b-407f-9396-c780796e0f4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06faa7c1-2fe7-4e58-b602-56e2c8528679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab55b04-4c9a-42de-810d-f8cb24c4983e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b10f60-3ace-4607-a58f-54701ff97837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60bd928-7325-48cb-a339-0cb0eb3076e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6528a539-3f80-4452-bfc0-f113b72b981d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6e7cf9-19e0-461e-81cc-ffba7e239663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e902840-c371-4cf4-b70b-e820ecd94f47",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e16d46-5b58-456c-8870-013188805009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1890a9-6bee-4971-8487-52b6448f1559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb5a3d1-d1cb-4d57-96d1-7dc68550473d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf527ab-976b-4be3-b549-41d6c0d79460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ddd965-3899-42d7-8cfb-fc517cae6374",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919b95ea-4317-496d-9331-62b9e2eb7efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad7fb32-73d8-4efa-a939-fb5c6bb3b762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c97e984-76ed-4198-ae2b-9b0ab214376c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6937525-9dda-48ab-b34f-266c67b918cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1403384-5547-4ae7-bc39-498134d5f62a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb06f85b-c001-4078-be06-7bcb67582249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23cf2807-0913-4d81-981e-ac6961e1c4ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e11dd37-14b4-49d3-b8e6-feef9d845c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55147350-91a5-43fb-a76e-4b8f9a7aeb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4021bdd1-82dc-49af-a95b-b733a4823669",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e5127-7c5b-4591-9ead-167c7cf52fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f00c190-8b82-44cb-9c85-0abf3314ff87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0279a122-5498-4551-983e-0c774fcd50ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b2eff9-bc0b-45bd-a44a-cbf4e8295845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bda4e9-19aa-4312-96f8-a6586b04b819",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2af93f-4ac3-48f5-9aad-01a74c572195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e15612a-ceac-45fc-b8d3-0e624998e95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c2ea9b-9ac5-4697-ac02-6a335e703c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f11ef17-348b-4ced-8214-eab42bae83bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0398c482-31cb-4baa-8032-d1803414546b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "862bb69b-d589-4126-b665-e50fd4a8935e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c648600-edce-42aa-8f7d-661d3769d57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec63058f-d012-477d-8b1c-a35d576b4990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52419f6-f36a-4d5e-8685-6060daec0bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f597b45-3661-4f32-b7a1-020ee3d61944",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30466fc2-d4ae-42b8-9094-4fff76059715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8efd770-52a6-4f45-ad4b-e6e0c88a911a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687f58c6-da9c-4406-bc16-eb01da222743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71d0310-f2e8-4dc8-9c34-3677b9959453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293bddc2-6cb0-4825-903c-982ea4253820",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2483db-791c-4b18-bf43-70fa339c600e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ebfbbe-dd95-4cda-b02f-f61608bc8adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b86a0d9-e98d-4a36-ba88-27d867430554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bfa401-fb09-40fa-aa36-b36c406cab68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043eac0c-d948-4805-ae30-6b023ed08c40",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f80ac4-eb28-412d-8091-963606190036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936d5d20-6317-4ff8-9c00-b931d5cd0cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a80cb07-1f16-49fb-86b2-236bca0b9572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbd6091-1ce6-4d55-9c4c-3ce671616d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98030d17-c4e6-4ec3-937e-0df1c853721d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c178463f-1c6e-46b0-91c8-84496a1a7578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ea4c40-58de-47bd-99ea-95a057a789c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be78535c-5877-4df1-8d8d-985f2a486181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656c7ebe-8b03-4ab0-9e2b-b7ce9163bf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0359ad6-a075-439b-8dd9-0087f06ac4dd",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2d93ed-ba37-48ea-bacc-64fae5f0497d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca63fea-e55e-438d-93b9-92eb979fc004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29356b40-3324-4af4-9759-48da718cbd47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fea0838-3932-404e-bc99-0bffca72c946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fc99e7-6a3d-48bd-9867-7cd5708bdaa9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bed747-0d66-4b30-8473-cf479dd83f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852f59ed-a3e0-4d27-b6d2-a836d29a9ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02de18d1-0a04-4d5c-a906-a892c3a6b60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7683cd6-18e0-4d38-9b28-1c0da99e856c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd5837-22f5-4f4b-b7e9-c75149c28d47",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246bb75d-02a3-4737-b348-238a9dd4f72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977237fc-73f1-4ee0-b578-dd612d0e9c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a58e770-dc15-4821-b6cb-9ee52ac29f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f875803-bd23-4659-8427-95fd5f08c6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85c0942-e500-4c25-a574-810d4cf29bee",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e2fe61-feea-4414-bab7-e5c05fbd86d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e51637-80c4-4bf8-a2d4-7faa384b086a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b2d65d-a199-469f-a5dd-e22a4363d5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531733e8-1789-4022-86b8-db6bf642fca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf81c5a-662c-4c39-a793-3fd6ccb8d2aa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e80b70-33b9-4433-a805-51b5720a0c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535475a8-4fc4-4a5d-b091-0f17524f84aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf54e073-c5f9-416b-ab1d-423aa039d9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9361af9-2d8f-4191-92f2-3b9c259ac99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913896ea-54b4-49c3-8795-e28dcc2a032c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a28b75c-35ef-4159-90de-09eb62013c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f8f689-6b18-43de-844e-d2be7f3816ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f88ee1a-4995-4baa-bd04-734ab69219fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ea4432-90fe-44b0-823d-bc5a8532df96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4991645-55e3-47a6-ae38-5cbc7a0f389d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019eb616-2459-433b-bb53-2269375f6b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a678f9-8811-42ae-8e0a-9bb58a08b0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e368860-66a9-48df-8277-cb166b9b98ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2600d1-0a27-47ac-a406-cc7eb7fc91d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b43612a-6f49-4912-a168-8d451c2de92f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51354fef-4ca4-4de8-85ab-991817fc535a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e451c8-f8ba-4580-8b62-fddc32bed3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3fee47-d084-4e55-9639-c84bd2e12a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d018e85-59e8-44d5-a49f-27461f82188d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570b5d25-ff60-4994-b604-c20f5cbae608",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922dffd3-3737-49a1-80b7-0052838830b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47144dcd-8fd2-4112-9809-67e192a2430a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a79fd7-2a6f-4d3e-8cd3-f253d72ae933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7859e8-5624-4008-8372-fd6ba15b3fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7665b9aa-b760-44dc-a88a-f2e48f7c7948",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0eb020-0dc9-41b1-8531-8f14e9a788f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba51b9d9-80c4-4d62-a7f0-2b6f443a936b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87f9cc3-844e-437c-ade4-08cd76cc542b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a6607c-1e28-4b7a-87cc-2e9a67c4af19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c257eba5-70a2-4945-a6da-998f9a87a640",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7c8f6f-cafb-4d3a-af97-24c5220b95d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c61da06-6d1c-44fc-9668-94db5544a464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1344c52c-e138-43cb-8fe3-3b7838197a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439bd5bb-d9eb-44ae-982a-762cbe13c45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3db55a4-a974-4d98-8dc9-24ca3fc9f67d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b42373-0888-4446-9c65-260a96dc9528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ae691d-0ea2-4429-bb92-e45eda72df7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ad6e04-b7ad-4e27-b118-85e2d8085850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5831a1-f0b6-43ec-b2a6-0d28fe9f8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00505450-9331-48ca-bf58-0c39df3159b4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de991c7a-1ef8-4de3-8809-380e5624f555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3bbb633-80ad-49c0-935e-e77cfdf9634f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51280586-6948-4cb9-baed-b313cbadcba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef474f7-224c-4fe3-8fbe-f7a2da7eaf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf38bf0b-6cf5-4363-bb23-35d4bc0a325c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa7b81e-d85f-4d6b-82c6-f81e8b8eaaa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64d40f6f-3292-4289-9bf2-3c4994c259db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bb9564-6dbf-4bc6-8f52-19b6128d939a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204cf82a-d6c5-4297-89e1-dec2d4321d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31239fe3-c8db-4bf5-b23c-b4f72ffc33af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07367bd2-4ef4-4e9b-bf7d-f0bdeeda7076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0487d8e-3698-43e1-ad6c-b0bfc40b0e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "accf6737-dce6-40f7-8bb7-bac000e2d891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77391798-8459-4d16-b2a6-68e652e1e91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5236909-bf4a-41ba-9cbc-4d5b832c88c1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61df1ce-5c68-44c3-8e13-53d101252e17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c091aa-ed3c-438c-9f7e-882312a84bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2854e8cb-cbe2-43d4-9266-20ac56c4198e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763fba68-7714-467e-ac6c-8a3b999060ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0250643d-f48f-46dc-ba3f-cd68aa1de5c8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b128483-f520-4278-a03d-c8942674e74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1337470d-0085-49a1-85c9-e5494bb3e386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f1f53b-9798-4000-a622-adffc8f93448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeec3356-504e-44eb-afa7-070b4fad93c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960e78f0-6fe5-4c66-ad00-e5f4e6f4603c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7bd1b8-0455-4872-97c8-f38de735e507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21807dff-54eb-4b70-8119-f5cf3a24ea4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887cc617-d91d-4e86-8b68-6e11a8e34fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda939d6-8953-4876-b906-0a780955242d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e66158-b104-4d3a-bd5d-1b34813ed571",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf68c048-1a6a-41d7-9ebf-95a9e3c73df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53286793-c220-4a68-a3a9-2259b2f1ea91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ab6e9-3f1d-4a47-9a39-214db582ab3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafe32c5-375e-4fbd-8249-5daff4cf7f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b4164f-2e9e-4baf-ad21-1f0e866e8948",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec874699-3134-462a-b240-decf79f4e307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc227735-a29d-4a39-a0fd-ff17dc5815cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8641687-9486-42be-bcb0-5212b107375c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d4e8f5-cb38-4a65-bb11-dffdbd2ccafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bdb585-d7a0-491a-9d5c-7eabdd50b4cb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f839fec0-bdc0-4d29-b9a2-bb026e89e338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113a3386-09c8-43c6-aba3-91c330896478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d4b109-fddd-4fc3-a0bd-79724323dc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c852b13-0bde-4844-8f52-df852f32fdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef867a44-d968-41d4-b86b-cfdc5371931f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c581a3-26f5-47e7-925c-66f80538b8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54490936-dba0-4018-8bc2-b658a54d7f2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3414ad-4c0e-497a-b158-a6a78389b909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9671d42b-2177-4b01-b0e1-e62d1f5dce45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ddeb8a-06da-48b2-a8ae-66829e7c1132",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3281de-9d6a-4abc-8e7e-7d8a49671dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad6d69b-ec1f-4782-bb25-c02d9d5a9110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f3b63c-5492-4c45-85e0-4886f4622b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99eaf22f-7a83-41d6-b648-63ca3ccb9580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369d83f3-3743-4cd9-a2ed-0b264935a86c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af7e3be-070a-4842-a277-a71a89ab4f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2db0af6-4819-499b-aaaf-a0ed7efa27fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffcc29c-a854-4b11-93ed-c12ddd163cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79aa4eb6-3edc-4f0a-b7ba-45db2bcb28ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c31b40d-e66f-4be1-bf2e-92aaf11e9efd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22e58df-a217-472f-bedf-6445dc9b0c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3093c660-a5ef-467e-85c4-3acb9c8a9997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f14875d-12d0-4763-a4fd-3f127c5c16a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64fa229c-38ff-49f1-bec8-e7a25a00f649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbff5d6-fa04-451c-940d-3fd740336494",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbafc53a-196d-49f2-89d9-3227f06aed6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933559f2-a5f3-4663-a7f1-cbe8029e8c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593a03fa-d528-4a4f-8b67-dc64ff3e5fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d2dfe6-300b-40dc-8d8f-2364e99967fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136dec98-d063-4141-9300-957f7ee2b666",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7558db-4872-4406-bc61-94f04dc56815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c92c84-c5db-4ae3-b8d5-b6ee89b759ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937660f1-0b2d-4451-a257-b7bd85b6d5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9af29b-56f2-4f3f-857c-d693894eb7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1d87e5-2dec-4f9e-b4d7-78f631d95565",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05058d82-c900-4615-b488-9cab5f2a45a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3a7126-3ad1-4703-af3b-bc9fbeb48c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbc9cdd-f88c-458e-bd71-0abc57bba635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c768fb-7c59-4952-b27e-e7449b2b8939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8f4962-c773-4878-bc66-681a46ecaf95",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f378fdf6-259f-46f8-9b0c-ec8818a47fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1c2c5b-bd65-4592-b867-5b4cc985845f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecdb943-6ba9-4865-81c2-019f1a8033bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87751e2-e717-434b-aeed-9786297f7638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48ca48c-a3d9-4c44-bc64-08e86aca4466",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18db03b-59a6-4769-ac2f-368550abc39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b18530-4091-4108-864e-1f7c8aa6f92a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43971b5b-f6bc-4427-9305-f41644345ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f31722e-6201-4d29-b354-574e4e290280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e633734-47ed-4378-9ad5-9c9940115f89",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4149c46-412f-4cd7-b163-cb511a7d3bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b262e6a7-653e-4ca6-a11e-cad78d25c063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2188e0d3-c616-4a16-b553-723b3d356e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ed14ae-4a02-436a-85c4-7bd6a09f45ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fff04fc-cc07-4136-84ab-418470626df0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e3a93a-5e5c-40b9-8449-76907aacaff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a87f6c5-8aaa-4c2a-86dc-682d077ea4a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1712b4a1-5315-4b11-8e5d-7baa34ede580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a256aa-34b2-493a-b984-f6e9bbece8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420fe4a1-702c-4029-9273-384ef3c6082b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71460a2b-951b-40f4-a557-d344ca1940d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35487e90-a390-42c6-a6d4-645c4194ca70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34a3141-58ad-4fc3-8097-95f930004483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90867f0e-9c33-4a28-91f8-198b88ca7980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea51590-539e-467c-aa93-183cbe47b364",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f7525c-fc24-486a-a05c-602b5fc11967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674ad970-8f2c-4a3c-bebd-73da77e5ab8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3287ed13-c9d4-4f61-9a53-2d7ca099d1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b6e926-5b6b-4fd5-838a-d5f472a8fa38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69f3ec1-e541-4f54-a526-876941a0ce59",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0900fedf-4e47-41d4-a7d1-7bf1eada5c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a8c539-2801-46a0-a8de-1659f2b92e02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb59154-282b-43a4-9520-3857c74acba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05eafce5-a613-4644-8c20-a797ea97dd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3452f2c0-4878-4659-84e6-19d2c8dcfba5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f7c919-10a4-447f-bedd-1304c727c245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "337100b2-6b16-400f-b1cb-485bf91b5840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a5538c-2856-4413-afd9-3a55b1e1e9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071abe2f-53f1-4b1f-81b2-5924388906cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40242d35-aba5-4845-96c4-689bce577a8e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8803af1f-f01c-4c6f-98f4-0804509a7ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd6599b-0cc1-4479-aa72-292af446630f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f947db6-7e49-4de6-8edc-0a5fd3329045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fec588-bb94-4309-9f31-a0dd1d325f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3e0b88-3da4-47a7-8b11-4a5edd1d945e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f801f4c-3a0b-4b89-9d61-7e09f2f9d8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab14dee-fcf2-4c11-bb82-8cd8cec1b2a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78cd829-c00b-4f67-b14e-efd675a1b0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7db8f03-ac31-45a6-8134-c502897ee85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e04b3aa-9dd5-4691-b5cd-0442eabed296",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a36a9a-1f74-47ea-95aa-3d14191c9437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577f2955-3c91-43c6-8de0-10aa4f017cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc28f38e-609e-45d8-bdf0-b99893c86f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feee2b0b-33d9-4116-9364-ffba5a747d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1255c96-36a3-4c2f-be59-a6764826ea33",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b07852-94f6-400c-9658-91c4b94553fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4190e9-caef-4498-aa62-0a9233a14647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215cd299-536d-4baf-8f51-353b8d0687ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4511c91a-6ca1-42d0-9944-35b7fe4f4fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce44782-a946-4563-9d91-8fd9d12e8be4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3b861a-d058-4c1f-9b0c-b13da01a77a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e12a5ea-7cbf-436b-aa63-26c3803dac71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fca328d-3c0e-4725-945e-de9b25a2383a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099a567a-a8d1-4c53-87b5-980f04856fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f228079-2b12-41a8-bb11-d3bd29e7fff2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585e9773-f21d-4e74-9e91-8b984f905006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5feff683-e5d5-468c-8793-ff0042e1d838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ba939b-4647-4537-adc1-f1a8a92600d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5075317-cb0b-4d8d-821c-b38ba90919ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e207950-e94a-4413-af13-0fa5a0cb0a09",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6608fb78-db2a-4a44-b02e-641bee6cd0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b951f8de-847e-4340-8c1c-8f39bdf76863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb74d58-96f3-4cdd-b0a3-10ed47221db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435a087a-760c-4fb5-8c0b-6a4e9cd459b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ec3d3e-4f2c-4548-b03a-cee46dd64378",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2844d94-cd6e-4e6b-97be-1859279cf913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ceb2976-9fd5-44c5-80ef-bfd5d64c04cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da5779b-9e90-4be4-a8fe-c20c52f3789e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b5df3b-2be4-435b-86f6-d335ed6edd84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7891f6cb-543b-446c-a92c-8a7776938edc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72bbdce-0f71-45c3-8d4d-daf6245e01ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0795eb51-0d0b-480a-bef5-6f932bc5f567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce9bd9c-5b18-4b74-aeb1-7d599c1e8a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfbda4e-532c-4807-8765-9b8eba9558b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedf6c0e-7506-4e4f-8ad8-49c80e66a0d4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02523725-a6a1-40e6-9bfd-14f1683c6646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25e3b45-350b-43b3-9d69-58d54edd8b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d90bfca-143e-4012-a362-331a5ccf8746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659f9c34-b814-4579-a7c8-151901782dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c78f155-c83e-47b5-a847-a35103591fe4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab65b81a-cc09-4074-99cb-e09ed3abeca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c40217-260b-44d8-be4e-43c057ea7c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ef835a-47fb-43a0-9735-776e63c5f5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781d6893-fe2e-41a2-a072-a8756941b134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e314f08e-7ab6-44cf-9f30-5c76515f1b66",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdb476e-af39-4b61-b664-c85716ef127b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1955f88a-9ba9-4076-b5e3-bbf1133ad8e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c059205d-203b-41ae-8cf3-bc4ae6c8835b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c24a581-2caf-4122-8b01-3e8951289614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3520a853-74a3-4cd0-9bcd-ac814b27f4e5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6810c960-d2f8-4525-bf4b-4a58ea99cede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad2a7308-529a-45df-8fba-e8f98aa8d0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5ae763-dfe4-422f-a10f-93638e35cdf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fe4ee1-0966-4c76-99f0-4372f3263272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9efe25-ca3b-4980-bc15-fbd475cb3bfe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec87276-41f3-4cb2-b8a4-9058549ec25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2116b905-0a15-42c1-8be7-bbd60b30271e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8436df04-41a8-44ea-8963-d660dc6261aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafe9dba-3cf9-44b4-84ac-3db96bc5df15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7063f220-fcc2-449e-8b25-4d66b2290745",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a5804-9b9b-42c4-91bb-baa1613583fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e444b1b2-59c8-4664-b156-726a60f51405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328a790c-08e7-4ce8-8079-aeed82869075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c4180c-7378-49cd-bba7-bce79c01d0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d715f7d-cd10-4d94-8680-c6fb2cbbaadd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2817e31-75e6-4e5b-aea5-2c58527e35ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf8d3463-1536-4e19-a32d-bb9aeca21092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe2a3e0-6b49-49f4-a538-a76e72d97e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8044d3-8b52-433d-a466-9417978221bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03e71f2-ec52-4e49-bc08-89dfe10088f7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed45b8ec-b9d6-408b-9229-78ed8ad1b425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35daaa8c-a685-400f-9268-4c132e1a6422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfaee28-b2f4-4c9b-b4c5-c446c84cb44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d91b61-aff2-48e8-9a5b-4b5755a87ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7a432e-52f0-4798-9f38-622dede88e8c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fae3ca-458a-4ec4-a939-bad24aabfa68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca84128-58e2-47a6-a265-c87a05810578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee94ecd-4a58-483c-a647-d09af7ed5ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42322b3c-4870-4048-b2de-d129c04875a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0043717-f125-49bb-b5cf-4b41b9b94e8c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32990b8c-34ed-4140-97ab-a0d39bc15690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "292a6f0c-412b-4873-9567-55f0b5182f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d14eb3d-143b-45c6-bb0e-0afd7959ded3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a8c630-4b7f-4ebd-b24d-aeb730c5f1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2a1a10-d539-484b-bf14-5f4be0930130",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8af02d-5761-48e0-a588-915159c0e28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c748e89-253d-46d9-af23-8fdcfecf0890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8329625b-e05c-4438-8f32-a469f83c8cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec093f3-4844-420c-978d-70a9d068866f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef43b7a-036d-4745-b11c-dbe69324b3f3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ae57f0-c8cd-4ece-987a-df067341e533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56095d45-d18e-437e-b6eb-dca1f69380a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c3668e-6274-416d-a17a-10411942423b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e45eb65-a29e-43f7-96d6-7f3e3ce0294e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba6890d-dd1e-413b-9661-4e15627f8493",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee5d9da-ad44-439f-86f0-744609d4a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88ba9ea4-ab9a-4ec6-bade-818d9ccb5449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae595f7-393e-4c8f-86c0-7dc96d105250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2793b7-ec57-4190-b054-6756cfa03984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4288f50-3a09-4a5f-b4f4-70539c4c3a0d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814a0b04-76aa-4667-a139-009d131f4c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85be718c-fcb6-4bab-bb12-dc1a34cffa67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0089d24-3c7c-40fa-9491-0e6b2c2be60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da8197ec-12a1-4ecc-887c-3c8dbfef859b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973bc714-6821-4918-99f3-863f7fe3013f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fed2ed-9c91-4f6f-acf0-9b125b0adc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7828cb-3e85-4a25-8bd4-b580bee44aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24aea237-8ccf-45fd-95e9-45ae95b759fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aabca22-779a-4f2d-a267-5150b7f90dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c653e76-2a81-49d3-bfd9-82cf699b7b26",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb44a22-b92d-46ea-8b9a-466ed57aa2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb499751-3690-4019-a5b2-9a4827ab6eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5532c218-96bd-4e5e-aac6-b174955bdf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032558ca-ed19-4c68-85e4-039a6f65f938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8890d9-01e7-4960-96e5-8f8075e652c4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0242f27-013c-4705-bbb9-2ca1522d8b1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf8e99ce-7f86-4bec-b780-fbee03390945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1782f70b-2bd0-4201-b8ea-92beaacfdf06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39dfdd9-0558-40bd-b5d7-4d96b82875bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c08a32-b87b-4034-8c89-989d23634488",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d813b8e-53d3-4f26-b2fc-d26c9811c509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c145d5ce-e098-4c7a-9e5d-a57ac87c3e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b50383c-93ec-4a33-9697-fb352b3cb80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b73ad5-78e6-4753-a368-c8a70638b79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2826fc82-a3ca-41c9-9634-91196a7c6ba4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5173d0a5-b9a5-43ef-80d5-52ef14cc8c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37bca4a1-befa-4d93-af2c-c1e7be1c4eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9958289-8593-47fb-90bc-6cb03a490246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165310e1-a5b8-4edb-8f27-77175b873272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889ded3e-df1d-4d91-9ebc-aa03562134ea",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a627d3be-4817-41d1-9f59-c6d088a8321c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01a3e5c-4ca0-472f-94e1-54ec536a0de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aada18a-255c-45da-a965-e4486ee53366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55193198-9e60-43bd-99b0-c8c23e9677e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa39491-0330-4a86-93e7-31ccd208ffea",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea9d478-6637-428b-81d8-34db666925f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39aa08c0-4ef8-4bf8-a20a-19f283567c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5a08d0-d2de-458a-aa85-15b221abe39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ad5b23-6b23-4936-b497-f8c54fb8096b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bf951c-a6b1-46eb-bbd4-53bb3290c535",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c4ef2c-9737-44f2-9063-5e1389d6f48e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4731fe64-bc2e-49ae-ba96-dfdde90e3c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62507c4-0e70-4ae0-821a-d0e103f4eb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd6a16d-c9c9-4833-b47d-6aa6ab1c1896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebacb63-2285-4f79-bf4e-d8885d2947bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e43ccb-428c-465d-8d04-a88002bb090e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cdab0f7-124a-4d20-9711-e0471ac8976f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96dfbc4-e66c-4a8b-a335-c88cd9da3967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c039c8-f106-47ad-a114-c1393d35defd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bae95f-e8c7-4f31-bca8-10f3219337d0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2bfc3f-4847-4f0a-95ed-463b2926be08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b887a6-f8cb-414e-a95d-f5397cbf82ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9385c6d3-80f2-4eda-9a10-f083587d2647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c153e5-a8d5-4b37-8409-b65085b8fe38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ad864d-7ca3-4efd-800c-6cce43201b16",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff26d66-defb-4c1c-9ac4-0f4b7dc63ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d81c0ba-8883-4f2f-bcb7-cc26b98e66f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851278d4-09c9-4d38-9e11-260d40683fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6df86af-59ff-41c9-a942-0abd5428b4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635eee76-1036-4ba1-897c-8e30d1e74327",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319c7e2b-edfc-4e43-88d7-ad3c41102b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b43feb5-d320-4a7b-939a-98a9e570a513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b372e4f-7c86-4d55-80dd-25db2b4d24ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9752174d-f006-456e-b627-f831d1125726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303af0ca-5fa9-4aad-be38-4f063db91b06",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b6e159-c253-4ca9-97f2-40c51d5da64c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a93bc35c-0e54-4e35-94b3-e80d86e84890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d25c82-3bd3-4319-8301-fcd3603ef0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4ed497-d729-4f6b-b493-505d981e6038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb46e4a-1b36-4f03-91e9-9854aa05c7d2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e8621c-01dd-4a33-87a2-591f66bc58a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06414e94-4cc6-4ad8-9678-eaf68f293810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff15b03-db08-4c41-9b0e-2776cf03ec13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65df7b1-ae1e-466d-9989-944ee737233e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666f49ae-a190-41d9-b1c0-3fc1f56dc1ab",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96c4796-b88b-4274-8374-b9b780b75e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59bffdc3-f58b-45ab-afbb-9720785588b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ab97f1-616f-400c-bcbc-687d012f8919",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735859e7-7ada-4cc8-9387-310f852af2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a1d4e7-1fd6-4724-a824-4a20fd5839a4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b727e55-1e5f-44e0-a9c1-096d66ace34e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "029f293c-bdaf-4e65-bda9-c0fb62f3b296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494de9db-9986-4aed-b333-032662e3dc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1868b4-ee40-4f5b-a9f7-6b760b57a317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d8d046-54fb-44e7-b82d-98671acbe803",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18df0722-153b-41b5-8e7a-ccbca7416786",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83d8fa3-c642-4fa2-a79a-f1cf0115a408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea0d1e8-b28d-4d97-86e1-e85b1fb39f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8263cab4-a970-4957-81e2-b4f8a44a404d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd1d962-84dc-451b-90c2-5e7ae7c80078",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c8fd59-20ad-4237-a4cf-e7c7a7f9b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60d79186-e598-49e4-907c-511cf77ec42d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8616851-d06f-4faa-849c-7c83f6b0e1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6d7507-51b7-4528-8798-c6d56baa8763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17614b63-1f80-4b16-b2f2-d5365876cd9a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd2c26f-42c6-432a-b95a-12ae900b007a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31c4cd35-e4c0-423d-bdf5-cdeb77a2a744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c012d6-fcbe-489e-b11d-0e6f5eb18456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb5961b-f550-4b04-8914-3106d6162cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e1f258-3082-45b7-ba06-27e59caf0c27",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde42980-3cfa-451f-bb42-ff4a6bd72831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9a2e66-e222-476b-94bc-5c0df674be32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdec7d4-17e0-4a21-b550-0225c4798047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5bdc6c-fa80-4a59-8599-dce5922d88e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a5b612-ec1b-46e2-9f57-b2cad8ec410e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebbe98c-9ab4-4f55-ba85-94dcee4b6122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08db50d5-54eb-4a50-8c99-dd4cf97c1068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b632b852-b882-4d37-83bb-30e5170f72fe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9eedfc-3076-4e56-912b-a34b5370d5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956dbb81-7d7b-4ffb-a912-66f030962617",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40fb76d-6a05-479d-bb11-29b5e15f047d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f0ae6d-6d76-416d-979b-0cb15852c0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b817d2d-18df-4647-9ccc-b0390fb325cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d76689-ab22-456f-879c-13c3bb6d0712"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19d27be6-1a14-4b95-8278-bc0eaabeabeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fda34a0-059e-4bfa-8457-3daa630d0b9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "843ee273-5879-487e-aa35-05f427518f49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1de76deb-af67-4cf4-bd79-96a33c94610a"
                    }
                  }
                ]
              },
              {
                "id": "21a971cb-4bd4-4913-9067-8fead35c1760",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e903ce6a-3c2a-436f-a590-851e0d9110d8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8161d705-8b6e-4326-8c3f-3e7fcaab64d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "444d86e0-b6d6-4805-9698-f7b22f920576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70db6d39-479d-43a1-be80-ba48444944d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "713f7cda-0a82-47ff-b36d-8b4ea8b477ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5eb0a09-f19b-428e-a3f1-e79d47323832",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607f5d38-b800-43d0-9700-6d6f9937c5ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fd6666de-f2d1-4f0e-8b60-8ac89b372ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d96d36f-0555-483f-934b-08dd61c674a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58414cd1-e491-4b3b-85ce-f8916f221631"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b012aa5b-885e-45d0-af7a-7d5627253895",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "145b7ee1-b735-4b23-a85b-b2f3e003449a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6ec6125-ae7a-49c9-a0ea-4bba37b79136",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e19188d7-bf07-4972-81d0-8d9e7f117308"
                    }
                  }
                ]
              },
              {
                "id": "46566b8b-e768-49d9-92b2-c3ed7971f830",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2fdb2e87-8969-4bee-a06c-f13b44eeeb9c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8688adf0-6efa-4e3b-8f8f-dccb7206bd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "888dbbe6-9fb4-46a2-8129-05f2d9757598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e92e0f9-9a96-418b-ae01-2dde0db1f2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a246eb32-a22b-43d8-9487-bb3d68e09e1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d378025e-ed8f-4fb2-8476-c146ffd760b9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b216a470-4a74-4a30-9bc7-f700cc7e8b29",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cdc7509-a553-419e-821c-06b324c49e7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1275262e-3f85-427a-bbac-775202fa1458"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aca6af4-69dd-4ef8-a30f-e890f15c954e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04a8d6ca-320b-419e-b3cf-5778b09aa768"
                    }
                  }
                ]
              },
              {
                "id": "aa590b5d-f67b-4e53-9cf1-591bd4fb30a9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "684b6f3a-20c4-462f-89df-d172d6712f5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e00ebc83-80fa-4c7c-aebb-977d9e82096a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4748854-2f2a-4a95-a5d9-fb3b547412a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09d34528-95ba-4f4d-993b-080ba49b682b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c35680c3-ca79-4357-bcfa-65b15abecb73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "02e8c57f-6eef-467c-bbd5-358ccb924cb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34fc290b-47b2-41f8-8752-0c048269304f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30c8fdff-a86d-4b58-9688-9fc336900e4e"
            }
          }
        ]
      },
      {
        "id": "2f29d477-c01e-4e1c-9c15-d7a6041b1aa2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8e7de216-11f7-406b-bb0f-1fdf29497779",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fedcec03-ea22-4dc0-8a8e-6dde5e006068",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6891041b-f568-4160-80db-1502ec3c4fdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "40f8184a-cf07-46a1-8347-7590d9e2b9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90351f45-4b97-4cc3-a6fe-898a5d14d2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a82c6cab-5c5f-4666-b8ae-72ef79405e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffb074e-2909-4d0b-83fb-b0091deb631f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db793592-5e21-42ce-b7fc-84d0fef03d37",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a795ea0-9010-4a4f-a667-9519e032f3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdc3aa0-be58-4914-825a-ee9e160b78b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c7ec156-dfdd-469b-a322-5cb83693224a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8108b724-22a7-4951-9144-b9b28c686023",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77a8e91f-1dfe-48d8-93e8-c6a617ab7f98"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75fb7a7b-4e2e-4460-b991-1116c1a706eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4389245d-4328-4636-a2ec-a01da79ed6f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de5da1db-16ff-4a80-b9ca-2c6961f20a0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5b3096d1-8eef-4f49-bbfc-6311fbf6b72f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8aafa6a-e337-47b0-91ff-2ff477abbb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a661ea6-411b-4ce4-96c2-d18df34835b1"
            }
          }
        ]
      },
      {
        "id": "5a536e73-7195-4764-8da2-685f59aab5e9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6632f7eb-d9ea-4598-b776-8cce3d72ffc9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e5adc10-0584-4622-9550-d07059145c90",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d41f9064-d06b-45ee-9fc8-997b4bac0b92",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbace79-a877-42f4-936d-890306812cdf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5f2d95d4-ffa4-4244-ade0-308518eaf407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644818fe-14d7-4843-9d4d-014096bbfe8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b4593b6-0c93-45a3-bd86-4a9d853a669c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bc54f2-6217-49d0-902e-a80f34d51d30",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257a7362-a423-4d1f-8c24-afed5acf6c8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7dfde568-a963-428d-919f-7291eea4c2ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e566c58-21a1-40d1-a787-2091bff3ae89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1efc0ba-eebc-4cf4-be02-53e6e90479d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eb3cd99-22cc-4f7f-8b1c-12275c341a4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fca84004-fc4d-4a19-aba6-49ddf0aeb0d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3c9b254-2795-4de2-859c-bd114c6816f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5828d4df-1444-4da0-8500-2cb9e82c51ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01cd0c0a-dea4-47cf-916e-e2e5700dcd8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "44bc1e2a-c52f-4054-9c56-200a725f5814"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a60783c-a6b2-414b-b259-16a76909dea5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a15fff0d-f56b-4947-9d89-47ffbe8d9cee"
            }
          }
        ]
      },
      {
        "id": "639c9a53-3307-4088-84b1-c52f3823e568",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d6b544ab-453c-4318-9d0d-ac5dd7f1e68d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "210173bf-d004-473c-9e83-2e3949844ba9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24614287-8db2-4114-9bfb-e339c7a0f019",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dc511d-8de3-4c3a-991c-75190403dd20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "26b16115-2b05-4346-8ca8-5392d8115075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6064d82e-eb0e-4ef7-b1d3-26f2cee4c0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96b9a8e1-a100-46bf-abc3-1ac0fcf33a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095dc29d-b04e-4c92-b90f-d087d5b83de1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3416840d-746b-43c1-87e4-728e36fc084b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ac7001b7-4fdc-464d-99a1-f1fa789265dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ae1e42-1ffa-4322-98d7-f2f306b1a042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd4bd61f-1128-4b0c-856f-9be2cb48e6f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4670f8dd-29b5-45af-a5a8-d1af8a19bd39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22bd8e27-0e54-480b-8842-0ffc8a44eb54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0790d4d0-186f-4268-866e-6faadea97c92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33090a2c-e195-4c13-8d0f-ed2973c02dba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d55acd82-7464-4e31-911a-80062192cd4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7c7c8cc2-10b4-40d6-832e-45245fbfa5b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04b65707-f72c-4bef-85b0-be6868aebcbf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a1eef60-2797-4f31-be58-10ede48eb091"
            }
          }
        ]
      },
      {
        "id": "b6a15512-959c-4615-87d1-10f406352f94",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b341220-8e14-4ed3-8607-6e443e587873",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "511e8c39-77a3-4ece-afa7-10e37cad191f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "37fcf239-250d-4f48-96c4-69de7a1cc5b6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4403ce8e-f9e7-41ad-a33a-8d1b46848f18",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bee778e-b672-4e44-8137-5b6b8bcc1f37",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 15.681992337164761,
      "responseMin": 7,
      "responseMax": 226,
      "responseSd": 26.97214437666765,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676421659129,
      "completed": 1676421673669
    },
    "executions": [
      {
        "id": "c0abd171-f0fc-46c1-b4b2-1d0b13df5b88",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "caba1d6d-b375-4ea1-be91-4032d825d4bf",
          "httpRequestId": "bd067adf-2708-443d-87aa-1e32ade909fe"
        },
        "item": {
          "id": "c0abd171-f0fc-46c1-b4b2-1d0b13df5b88",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "de9d09ad-7afd-4e8b-a575-8e805d655436",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "3295990d-678e-4754-87c5-8bbe88f0586c",
        "cursor": {
          "ref": "af80d59b-87e0-4948-8074-16f403e171d9",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "33f2366e-4765-4a0b-9be8-e4dee491df06"
        },
        "item": {
          "id": "3295990d-678e-4754-87c5-8bbe88f0586c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4da4c829-45ac-4c5d-8c0e-3c222169b9bf",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1571acbf-ef12-4881-851c-89cbf5f0dfc8",
        "cursor": {
          "ref": "ee92b807-5267-466e-9dd7-74ccb177f332",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ffa94144-1892-4dc6-afe5-6c155860078b"
        },
        "item": {
          "id": "1571acbf-ef12-4881-851c-89cbf5f0dfc8",
          "name": "did_json"
        },
        "response": {
          "id": "21ab4f5a-4486-46d9-8c76-357f89b63f68",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b466ba-12e2-4a9b-81de-0dfa128b079b",
        "cursor": {
          "ref": "e5979fec-9083-40db-af22-a6bc171d7f68",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1479fca4-ad1a-4bca-83bb-937623b2aa6b"
        },
        "item": {
          "id": "f3b466ba-12e2-4a9b-81de-0dfa128b079b",
          "name": "did:invalid"
        },
        "response": {
          "id": "93701c4c-32ae-4648-8923-d4daf37fea44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f3b466ba-12e2-4a9b-81de-0dfa128b079b",
        "cursor": {
          "ref": "e5979fec-9083-40db-af22-a6bc171d7f68",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1479fca4-ad1a-4bca-83bb-937623b2aa6b"
        },
        "item": {
          "id": "f3b466ba-12e2-4a9b-81de-0dfa128b079b",
          "name": "did:invalid"
        },
        "response": {
          "id": "93701c4c-32ae-4648-8923-d4daf37fea44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bc1f763f-688f-4688-b080-e0e1e049e35b",
        "cursor": {
          "ref": "b4e1b792-4d4a-429f-a8eb-df38b782736d",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "396e05bd-e115-42ce-842a-e3ab61c4669b"
        },
        "item": {
          "id": "bc1f763f-688f-4688-b080-e0e1e049e35b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d534ef11-58bd-4761-b650-172b0bc7dba3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d666b8-424d-4564-b5c9-a701806dc586",
        "cursor": {
          "ref": "3057f20a-8138-415c-a19b-3c26a8e3439b",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "23538281-994b-49bb-813f-3704e1af464f"
        },
        "item": {
          "id": "d6d666b8-424d-4564-b5c9-a701806dc586",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e0ece846-3e14-4388-ae82-91e977993385",
          "status": "Not Found",
          "code": 404,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3650a539-9d80-4830-bc27-f62e65a1f8e3",
        "cursor": {
          "ref": "bcfed3fb-4a2a-445a-87ba-2461476cd67e",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4646fce8-bfcc-4d44-b588-b25bb240b08d"
        },
        "item": {
          "id": "3650a539-9d80-4830-bc27-f62e65a1f8e3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "41ec1b5f-de74-4748-ac2d-c79911946759",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fbb93a-3a9c-4ba6-a769-b722ffea153d",
        "cursor": {
          "ref": "d80fe419-7dea-4230-88dd-9ab6f61bb525",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86a3988d-2636-472e-877c-0ea53f8ce8e6"
        },
        "item": {
          "id": "85fbb93a-3a9c-4ba6-a769-b722ffea153d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ef74864a-b1cf-48a6-9840-46d3cceb77ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fbb93a-3a9c-4ba6-a769-b722ffea153d",
        "cursor": {
          "ref": "d80fe419-7dea-4230-88dd-9ab6f61bb525",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86a3988d-2636-472e-877c-0ea53f8ce8e6"
        },
        "item": {
          "id": "85fbb93a-3a9c-4ba6-a769-b722ffea153d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ef74864a-b1cf-48a6-9840-46d3cceb77ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756e3935-3e5c-43c0-afe9-aeb760b09352",
        "cursor": {
          "ref": "573f5f74-d9b7-47b2-bc0c-6da563671c1c",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "414934c4-6e3a-4141-8871-4361508f55dd"
        },
        "item": {
          "id": "756e3935-3e5c-43c0-afe9-aeb760b09352",
          "name": "identifiers"
        },
        "response": {
          "id": "e9f0037c-d3f5-4fe2-8f19-e1424e2912cb",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6fab36-825f-425c-b04b-f1dcd89141d8",
        "cursor": {
          "ref": "c81cb93a-705e-4e7f-9f51-bf060c5ea245",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26b7d20b-4291-4581-a729-b1735228c601"
        },
        "item": {
          "id": "bb6fab36-825f-425c-b04b-f1dcd89141d8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3e3b4b26-7282-4aa8-8407-bc2ae9b6b455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6fab36-825f-425c-b04b-f1dcd89141d8",
        "cursor": {
          "ref": "c81cb93a-705e-4e7f-9f51-bf060c5ea245",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "26b7d20b-4291-4581-a729-b1735228c601"
        },
        "item": {
          "id": "bb6fab36-825f-425c-b04b-f1dcd89141d8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3e3b4b26-7282-4aa8-8407-bc2ae9b6b455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ac5cd3-2035-4be2-8831-c1de383fc569",
        "cursor": {
          "ref": "bf293b9f-74b3-4056-81b5-981f8e42386b",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b03de2ab-1809-4cf8-901f-810402f4c3ad"
        },
        "item": {
          "id": "d9ac5cd3-2035-4be2-8831-c1de383fc569",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c9b43de3-9d11-413c-b556-0d1e5ac1c6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b70a715-1121-42eb-aa34-f66b1bea66ca",
        "cursor": {
          "ref": "4e1cbfb2-7f0b-40e4-9123-146e5e04bfa4",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d4153e74-a138-492c-a9ee-1168c41d61b8"
        },
        "item": {
          "id": "0b70a715-1121-42eb-aa34-f66b1bea66ca",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a18ea56e-f3ce-4661-8bcf-eb9384a6fa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4a0da2-a6e9-4d7b-bcaf-585993f7645c",
        "cursor": {
          "ref": "89eb9b3d-8fb6-4722-a57e-5182459e2e56",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "540fcee8-eecd-4d09-8a22-a768d8576755"
        },
        "item": {
          "id": "5e4a0da2-a6e9-4d7b-bcaf-585993f7645c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e2f2c5f9-94fa-4eb7-97df-89d4c7a83c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b09dcc-8295-4983-a9c2-3b5f43679cdf",
        "cursor": {
          "ref": "c7392bcf-f324-4e1a-b389-124e7a8d175c",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6c4dee91-c9f9-47a8-a34d-175df591542e"
        },
        "item": {
          "id": "74b09dcc-8295-4983-a9c2-3b5f43679cdf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fde8aa23-9000-45fd-9b6e-6e15e047e1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c24b0ad-e13f-4532-87f3-39478a8ad897",
        "cursor": {
          "ref": "4828e73a-bea7-4422-8578-b20eefc1d36d",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eaca11ee-3853-4a4d-a807-48d6959d4e12"
        },
        "item": {
          "id": "1c24b0ad-e13f-4532-87f3-39478a8ad897",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6aae0707-674c-43e7-8fa5-b614b2144d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11c28ab-4741-43eb-8119-754657ed28ed",
        "cursor": {
          "ref": "244a017f-b15d-4e5e-9bbb-63df9effa18b",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3f6e130a-ac28-4dba-8fca-5af3c8dab0b8"
        },
        "item": {
          "id": "b11c28ab-4741-43eb-8119-754657ed28ed",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c7f38bc5-cfd5-4aa8-9e32-ca94109ff409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62d4d6d-bb47-4a9d-9c58-a54f86b7663b",
        "cursor": {
          "ref": "ba28b44d-88ec-4124-894f-79b03109e49c",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8d34e7f4-54f3-4b0e-b903-bb6b5da9bec2"
        },
        "item": {
          "id": "e62d4d6d-bb47-4a9d-9c58-a54f86b7663b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cbe5d807-1ef8-4799-9219-a5ceb9a786ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6212943b-5227-4282-8b00-fab84a718cc1",
        "cursor": {
          "ref": "6555b387-417b-47b1-8b36-9415f5fc19b3",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cf9e96ec-97f0-424c-b551-1f84dce5cf43"
        },
        "item": {
          "id": "6212943b-5227-4282-8b00-fab84a718cc1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f75a697d-4780-40b3-a641-630fe55be071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81955295-9eae-4634-b816-a963c876ca0a",
        "cursor": {
          "ref": "9544ceb7-c6a9-440f-96f4-e68a089ff9a2",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4dc1a36b-b22a-4ade-b977-415e109f059c"
        },
        "item": {
          "id": "81955295-9eae-4634-b816-a963c876ca0a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "778cbd6e-81ef-4296-bfa5-3b9bb6a90d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dee3b7-821d-48ae-a21f-dfa14c016454",
        "cursor": {
          "ref": "6cc55025-82d6-4216-a207-4b06e2fbef81",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b3892e81-d964-4a32-b454-d07a674a72d2"
        },
        "item": {
          "id": "70dee3b7-821d-48ae-a21f-dfa14c016454",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "38b7a30f-403e-4925-b0b1-9d462ed4fa21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f874611-ba35-4d42-a6c5-c6f12cb8b420",
        "cursor": {
          "ref": "d24dadbe-0c04-4c59-a203-e7dd9bf93c02",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5bd4174d-c4df-44bb-9e25-0a2fe6204b2c"
        },
        "item": {
          "id": "1f874611-ba35-4d42-a6c5-c6f12cb8b420",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a2306aa1-698c-4d3b-8d32-fed97b6984fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675fcd78-61e3-4ace-a6ad-9c23ff1fbe9e",
        "cursor": {
          "ref": "97607c76-7db6-4b20-a2b0-c2f1a466a3a4",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d61f2c63-62e6-4574-9e86-cdb8322008f2"
        },
        "item": {
          "id": "675fcd78-61e3-4ace-a6ad-9c23ff1fbe9e",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "7236a5c7-e3a5-40fe-b9d0-2a10095aba01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc525ec-74e9-4c7f-a88d-7454171cfb67",
        "cursor": {
          "ref": "76e3c3e4-90e6-4a6a-8c59-1f2017e3bddd",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dcf6b63c-7441-47da-8e31-a82d329dff08"
        },
        "item": {
          "id": "9fc525ec-74e9-4c7f-a88d-7454171cfb67",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3aa5bf86-ee12-4726-a8eb-9eb2873fce84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4194aaea-b885-4919-8a71-06c135abbeb2",
        "cursor": {
          "ref": "2e6df9c9-d64e-47e8-b640-81c79a0374d1",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d3abf781-fed8-4fba-aa63-cbc04113ef70"
        },
        "item": {
          "id": "4194aaea-b885-4919-8a71-06c135abbeb2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ef2d62c4-a260-4309-803d-abac87248bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179a001f-b015-4c67-8b1d-9e90046e8353",
        "cursor": {
          "ref": "37a3f374-0802-4d10-8011-cbf92e008404",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6c642c20-1245-4e6c-a102-78cbd2d7bd2b"
        },
        "item": {
          "id": "179a001f-b015-4c67-8b1d-9e90046e8353",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c7286801-55fa-4000-a439-095de7ca859e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7dc364-62e5-4a7c-9514-2fb3c135eef0",
        "cursor": {
          "ref": "13db5f59-2f99-45f3-9ec5-37d51467c34d",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7a3dbc75-4fdf-46a4-a3eb-1c05100827ab"
        },
        "item": {
          "id": "fe7dc364-62e5-4a7c-9514-2fb3c135eef0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "42b4c341-ed1a-46bb-92b3-5ec7513c2043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab057fd-562a-4761-b295-ffe2ee6a2116",
        "cursor": {
          "ref": "08e1fafa-809e-4925-8cba-7eb6abceb4dc",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f542be77-f18e-46ab-9f19-916e58fffeee"
        },
        "item": {
          "id": "3ab057fd-562a-4761-b295-ffe2ee6a2116",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b509ef52-361a-48cb-aff8-33f13b7055be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888a6da6-5eca-4b74-a25a-d34862d5045f",
        "cursor": {
          "ref": "1f9818a6-2ea3-4394-95ab-3b84794325b2",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "184241fa-ad15-41ec-bbf6-fad2e67feecb"
        },
        "item": {
          "id": "888a6da6-5eca-4b74-a25a-d34862d5045f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a83c549c-db60-4376-b071-0a541dcd2bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648567cc-fe58-42b7-a5c5-5c7dd9e31900",
        "cursor": {
          "ref": "1dfa6c8c-b4fb-43bd-8c5d-166f4a6eb3d6",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3bdc6613-f177-4215-a387-cfa596306c5a"
        },
        "item": {
          "id": "648567cc-fe58-42b7-a5c5-5c7dd9e31900",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0df20cc4-57bf-40fc-9a3b-24dd6e00bdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c7fe9d-0692-4b01-9815-721363a9e3f4",
        "cursor": {
          "ref": "4604004c-a247-4c50-8186-f2f209abb0c6",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7042e8ca-cd88-441e-b807-8af67e3acb53"
        },
        "item": {
          "id": "58c7fe9d-0692-4b01-9815-721363a9e3f4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b4fea14a-7608-4647-bdcd-fb912a3694f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4601889f-cc06-425d-9e4e-3954041445ef",
        "cursor": {
          "ref": "a1dda46d-374d-40e7-9ffc-f2b832ce9df6",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e7837855-0507-4a9b-a139-9d1b77daf7f7"
        },
        "item": {
          "id": "4601889f-cc06-425d-9e4e-3954041445ef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "51937855-3eca-483c-a5fd-332af3db2214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3052159-fd7f-42bb-8334-9abc3e324617",
        "cursor": {
          "ref": "5a8eb54d-2ff7-4892-bc14-b0a42dafe4c3",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "38887f8d-7776-4ddd-8752-5ae7d09856ff"
        },
        "item": {
          "id": "c3052159-fd7f-42bb-8334-9abc3e324617",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2cd50fc1-3567-4807-855f-a793448cd9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76cc240-bb13-48db-90e3-3327d77191e7",
        "cursor": {
          "ref": "d26af5be-93cb-45cf-8289-d868213755fb",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "adf99a96-6d24-4bce-8ae5-2427b3944079"
        },
        "item": {
          "id": "c76cc240-bb13-48db-90e3-3327d77191e7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0bcb1a08-a7b6-4f11-9f19-877db1c2ed8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3c8175-cd01-4bdf-920b-385f7563ca3a",
        "cursor": {
          "ref": "7412048e-9094-4795-8825-055ceb8d68da",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "37b0dbc5-1620-49a8-9187-f50fbcbd4a01"
        },
        "item": {
          "id": "af3c8175-cd01-4bdf-920b-385f7563ca3a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "291bc9ee-1482-4726-87e6-f83bcb1d9bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a374e19-d0ff-48f4-bd09-c033f6dd892b",
        "cursor": {
          "ref": "4ea7963b-e4c8-416f-92cc-f1a15aa08ce3",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a61e3a21-faf1-4d7d-b46b-2fa4be6822d8"
        },
        "item": {
          "id": "3a374e19-d0ff-48f4-bd09-c033f6dd892b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "80de9926-add8-4ddf-be8a-d3eb3f658475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6071bc5d-21c6-44e1-8c5f-f320accb0702",
        "cursor": {
          "ref": "a92687e6-b855-4e7c-abdf-db303e273dd8",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "605fcdde-a0c7-411d-9927-f04527f47857"
        },
        "item": {
          "id": "6071bc5d-21c6-44e1-8c5f-f320accb0702",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5cae22c4-61fd-4578-aa3e-67febd91a403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dfd20f-bf88-45e2-8a4b-dcb5e73e8828",
        "cursor": {
          "ref": "95e95ed5-ac0a-4f68-a67c-4d977d895a46",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c388cdf3-95d5-4e6d-b738-127f97c26163"
        },
        "item": {
          "id": "13dfd20f-bf88-45e2-8a4b-dcb5e73e8828",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d1764739-de55-4574-9a4f-b17a946311bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c4fe9e-6751-49c7-b249-b690752b0663",
        "cursor": {
          "ref": "a3334dcb-644e-43b7-98f9-958aa456590c",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "84270bfc-97b2-4242-88a1-87f1ac6d5b94"
        },
        "item": {
          "id": "05c4fe9e-6751-49c7-b249-b690752b0663",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0a6cbe5a-f533-41c4-b907-2b4dc607d406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9424cb16-cd69-4dcf-b4fb-47af847bde30",
        "cursor": {
          "ref": "318a2954-671b-40e6-972a-a56f71a264db",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "abb87ee4-b731-4137-a5e7-405f33416336"
        },
        "item": {
          "id": "9424cb16-cd69-4dcf-b4fb-47af847bde30",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d711b810-6b99-4a83-ad00-6bd4642d2a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e347809-e0ab-40b1-9109-edced59fbb3b",
        "cursor": {
          "ref": "3441cf86-777c-4630-bb8f-4681b0f9aa34",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3a7f9d58-8c18-4270-bb13-a5907264fbef"
        },
        "item": {
          "id": "5e347809-e0ab-40b1-9109-edced59fbb3b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6dc72001-3d71-439f-b6e1-781a825c167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c21050-1927-4d35-967f-534cfa332ba6",
        "cursor": {
          "ref": "6352f7ba-fe3f-420c-99d6-816c087dbb41",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1951b013-63a6-46e2-adab-655f6cae48e2"
        },
        "item": {
          "id": "d1c21050-1927-4d35-967f-534cfa332ba6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f15c4ab9-a306-4d32-b133-642bf92ccd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0755991-9fc0-45f3-8489-cbf516184e76",
        "cursor": {
          "ref": "963fb019-51f3-4af6-86db-29f251004af2",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "02ff9e4e-942a-4de0-8904-651e1e7dbbbf"
        },
        "item": {
          "id": "a0755991-9fc0-45f3-8489-cbf516184e76",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "26d339d9-a126-4507-b306-34e336e2fbff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174f3744-705c-47c6-bdc0-569c64049884",
        "cursor": {
          "ref": "ceb9ca8b-5535-401b-a26e-e67c333978e9",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c6fef4b0-7f96-4ad6-b223-416bdb341164"
        },
        "item": {
          "id": "174f3744-705c-47c6-bdc0-569c64049884",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bacc3fa1-f5ba-4bb8-97a2-a80b41dd38eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d572a06f-5c95-4751-808b-5ec15a5fbbc1",
        "cursor": {
          "ref": "0556b167-1008-4bc7-9fcc-32ad9c190b77",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a7492c4d-f658-4c86-9f40-2080e4e8d677"
        },
        "item": {
          "id": "d572a06f-5c95-4751-808b-5ec15a5fbbc1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0d68fc16-dd28-400b-95cf-79c22ea7ba9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1553ffec-0b41-4b56-a497-f18dfc4e8c03",
        "cursor": {
          "ref": "e6414b01-86a4-41a8-9756-10427ec3baa2",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "143ad8da-fca8-4266-865d-19014e890f70"
        },
        "item": {
          "id": "1553ffec-0b41-4b56-a497-f18dfc4e8c03",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "055c609d-faf0-43cd-ad0d-52babd32153b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee382f0-212e-4282-85ba-1116f0f91d32",
        "cursor": {
          "ref": "4644e75d-96ff-4989-99c7-eec8e4dce573",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22cd108b-e59c-4e2d-874d-43118aa75697"
        },
        "item": {
          "id": "cee382f0-212e-4282-85ba-1116f0f91d32",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b631d2b1-aada-47ad-92cf-e46c77a096b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "14619d0f-2d35-4daf-9e24-5a0465a8bb13",
        "cursor": {
          "ref": "f3423359-5968-46b4-a05f-ce9f9ab0a6cc",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "39ac4fff-e5b5-4d5a-9a13-d8f12872b29a"
        },
        "item": {
          "id": "14619d0f-2d35-4daf-9e24-5a0465a8bb13",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1ee2834e-71b6-4684-bcb1-d7b6deaf3151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55189a90-1c59-4295-9b60-312be8dfd516",
        "cursor": {
          "ref": "0970300a-82dc-4a78-889e-deeeb8b35871",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "179a2f71-5a98-494a-a11f-aab0def776af"
        },
        "item": {
          "id": "55189a90-1c59-4295-9b60-312be8dfd516",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e6d2fee-924e-4dcb-858c-7d683084bb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7cadd2-730f-4b4c-bd21-a5ceec3497fa",
        "cursor": {
          "ref": "f1093a1f-7f7a-41f3-9213-d2a419ec9be8",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b287de37-f787-45a9-bb53-8fad3a94aab2"
        },
        "item": {
          "id": "8e7cadd2-730f-4b4c-bd21-a5ceec3497fa",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fde1ab71-4e58-4b55-81dc-f8954ad9b6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38479a7e-bf7e-45e7-9afa-81335662c748",
        "cursor": {
          "ref": "b784fbc6-2f44-4e94-b314-572178c6a72b",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "08dd1405-a480-4a7f-83e6-30f374c4f836"
        },
        "item": {
          "id": "38479a7e-bf7e-45e7-9afa-81335662c748",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "62c40447-d833-4b62-b79e-97d72bfc2ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a184e3-7113-4a5a-aacc-d7b607b4a0fb",
        "cursor": {
          "ref": "a316a84b-1527-41fa-af22-adb72cdae6ae",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d2d2d46b-d4bd-42fd-8a54-5fb7e7e43572"
        },
        "item": {
          "id": "85a184e3-7113-4a5a-aacc-d7b607b4a0fb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2f4e42f1-343f-408f-838e-77374b3cb574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2ffb1c-d999-413e-9a53-e2d43d9eff6e",
        "cursor": {
          "ref": "9220eddb-615a-484f-818b-632bb13acee5",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "68d86878-93bd-462b-a923-81dc3af3cf23"
        },
        "item": {
          "id": "0c2ffb1c-d999-413e-9a53-e2d43d9eff6e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "45d980f7-bfc5-445e-b8e8-47125e9373b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e9aca9-5615-4391-adfe-053a5141d7f0",
        "cursor": {
          "ref": "14947d2b-3dc1-49af-8a5d-6e4584fa188a",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c76570fc-9c37-4e48-bdc5-f5726791f4e8"
        },
        "item": {
          "id": "77e9aca9-5615-4391-adfe-053a5141d7f0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9455dddb-e7e0-4789-bf1c-675527fd5fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "90f7c5a2-fd49-4d51-a8b8-9838a2f9945e",
        "cursor": {
          "ref": "f3688a16-0734-4e77-8db3-860f1bedc336",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "25eb7e1b-728f-43fb-8a2d-8451182da990"
        },
        "item": {
          "id": "90f7c5a2-fd49-4d51-a8b8-9838a2f9945e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "91a621ce-3baf-4a71-ba86-317657d5110f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e8c34f-1544-4d1f-bf72-cc8af015d7a2",
        "cursor": {
          "ref": "860e6b8e-e1d0-4b2c-a053-ec9d38cf3f37",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "536b436c-2cb6-4bb6-97e2-0e2f958434c4"
        },
        "item": {
          "id": "e3e8c34f-1544-4d1f-bf72-cc8af015d7a2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "634d3593-4b6d-429e-9eb5-3fef75a4573f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87c5e9c-9b70-4f6c-b4ad-dafcb301ac75",
        "cursor": {
          "ref": "3b9830c0-1534-44cf-a410-95c2b64d262a",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ab73d1a9-888b-4969-9fc0-d74c4d046476"
        },
        "item": {
          "id": "b87c5e9c-9b70-4f6c-b4ad-dafcb301ac75",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8fbc3c13-ce1f-4831-80bf-f8bc4a056afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c60adc2-8bc0-4a29-a123-305a9d7cf14b",
        "cursor": {
          "ref": "ea82f4c9-89ec-44af-a9e9-d0f8cadaaa4a",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "891c1762-5d1c-4457-ae9c-d504450ccedf"
        },
        "item": {
          "id": "5c60adc2-8bc0-4a29-a123-305a9d7cf14b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "94930fa9-011f-489e-ada1-eab7667d11d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0c5176-5e25-47f5-9d6c-2b575814e475",
        "cursor": {
          "ref": "0e34b4a9-6126-4be8-a116-ffdda6a79df4",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "45b1615f-3ac0-487d-856f-770ce807d33f"
        },
        "item": {
          "id": "1a0c5176-5e25-47f5-9d6c-2b575814e475",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fe59eee3-eeda-4425-8c5a-1d23071caff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c36a6f-73a5-496e-98fc-1f37ccfc84a2",
        "cursor": {
          "ref": "d3dddf40-132c-4377-b16a-04d6cd3afeed",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5913e9a6-0c97-43c9-9aa5-35a8edd94bd9"
        },
        "item": {
          "id": "30c36a6f-73a5-496e-98fc-1f37ccfc84a2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "038d51be-80dc-4cf6-b6ad-b8e819427094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ef95b5-7f54-4a2e-a461-4a9f4ef86499",
        "cursor": {
          "ref": "89b4c997-6ffa-4b06-acf4-cd4e6711e04b",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ee80cbb1-3f48-46b6-a558-6aaf42fe4285"
        },
        "item": {
          "id": "45ef95b5-7f54-4a2e-a461-4a9f4ef86499",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bdff977e-c221-437a-a252-a90d839e86dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8cb096-db2a-4d4a-b178-94a7e7949a17",
        "cursor": {
          "ref": "068ba010-206d-4bce-8962-ded50c04f0a7",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "62dccfb2-399c-4d73-9659-c45f52d7d0cd"
        },
        "item": {
          "id": "8d8cb096-db2a-4d4a-b178-94a7e7949a17",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "87009b57-a8d2-413d-85ee-2bfbbbbc089f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0655cb36-4801-4ca2-8506-aeec8acdbf65",
        "cursor": {
          "ref": "5fc769ad-b0b0-41b2-b5b5-f8f2b0be2dbd",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fa2307f6-bc78-47c5-935f-c574472a2d94"
        },
        "item": {
          "id": "0655cb36-4801-4ca2-8506-aeec8acdbf65",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3cb44e0a-dbed-4981-b7af-bcc1a5c70605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7192ed6-6512-4590-84de-29279d6c43c1",
        "cursor": {
          "ref": "fb3d7481-3202-4fc3-9853-103fab666546",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bfafdbf5-a637-412e-8848-179ef9c31c30"
        },
        "item": {
          "id": "e7192ed6-6512-4590-84de-29279d6c43c1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d1ef6e4a-2c63-4511-b82e-a0371a26bf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cd945c-3b15-4b2e-b4c2-335943abd4d6",
        "cursor": {
          "ref": "379f8350-5106-4cb5-861e-f6162f7279d8",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "28e52ba4-9806-4e54-ba05-79ca665b11a3"
        },
        "item": {
          "id": "66cd945c-3b15-4b2e-b4c2-335943abd4d6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2192de3-4fc6-48b9-9091-6dc3a8649c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ac1648-7b63-4e14-8337-180f36ef44f9",
        "cursor": {
          "ref": "792a6ee0-3f35-4d24-a5c5-5dcb9b124bde",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "92cb6b48-ed5a-4d98-b0fa-6e8a74834829"
        },
        "item": {
          "id": "02ac1648-7b63-4e14-8337-180f36ef44f9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "63729e37-1643-4796-baef-61154759c189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe5d08b-266f-4c99-94fb-8bcfd1583bc1",
        "cursor": {
          "ref": "a351a956-9dba-4f8b-8098-c06490057c88",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d0f63e22-b88f-4ed4-bf26-c145bbf53f8a"
        },
        "item": {
          "id": "4fe5d08b-266f-4c99-94fb-8bcfd1583bc1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "782a37c7-200c-4fec-8f79-f9c44ceebed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac07e7b-644b-4860-a099-9719194261c5",
        "cursor": {
          "ref": "8daf5416-37c7-4886-97fb-d07178191387",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eda1368c-c9a8-42c1-9a9a-ddc1219fc7fd"
        },
        "item": {
          "id": "0ac07e7b-644b-4860-a099-9719194261c5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8aaa9c4e-cdbd-43d4-afaf-d2902b732a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db046e1-e2a4-4698-90dc-2ac000380ecc",
        "cursor": {
          "ref": "77883809-5073-43af-9649-b4500c7b09b8",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "651a5862-923a-4987-a3da-d231da4a37ca"
        },
        "item": {
          "id": "4db046e1-e2a4-4698-90dc-2ac000380ecc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ed6021f5-dbbb-4bc6-bef8-5a8e0caf9dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a729cc18-dfa8-4c72-be0e-2e86bcecee6f",
        "cursor": {
          "ref": "e6bbdc11-cdb6-4475-87d1-1db37663628f",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4bfa75b9-4fc5-4d9a-8c92-2d615cc98842"
        },
        "item": {
          "id": "a729cc18-dfa8-4c72-be0e-2e86bcecee6f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c6840ba0-7d91-49c5-ba7e-7466ce382948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15254a46-c235-40e4-b9b7-8f9284f219a8",
        "cursor": {
          "ref": "808696ea-9324-4f0e-a575-73f3e0ae6561",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2b333dd2-2eaa-46eb-8d2a-6beb5359e10c"
        },
        "item": {
          "id": "15254a46-c235-40e4-b9b7-8f9284f219a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "34d3709b-2acf-4910-bc6f-261b0a7635f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a550fd-11cc-424a-bf11-f66bfa8970be",
        "cursor": {
          "ref": "fd207f94-e654-4291-8407-20a9f86e15b4",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4140da14-58c1-4bca-9bd3-fba8c2ec901e"
        },
        "item": {
          "id": "c1a550fd-11cc-424a-bf11-f66bfa8970be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2fc2e062-bc8f-47df-8168-5dc52b9d665c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab644eb7-6b26-43e2-a229-0526f2510add",
        "cursor": {
          "ref": "6fba7b48-4801-40cd-96f2-4813422f7f6a",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5d511c7c-b06c-405e-b758-ad2f87fd7636"
        },
        "item": {
          "id": "ab644eb7-6b26-43e2-a229-0526f2510add",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b357f52a-fdbe-4a23-8e69-393bd12debd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91ca7a1-3568-4437-ba66-087876106ba8",
        "cursor": {
          "ref": "469ee5ba-f45a-4f44-8582-b686bb1f0ad1",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2d659306-5dd2-41d1-8f68-5b3af1447b0b"
        },
        "item": {
          "id": "b91ca7a1-3568-4437-ba66-087876106ba8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a45c2c1d-5955-4965-8b92-d4939e44020f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb70cc10-3ed1-42d3-bf22-8804f2ea45af",
        "cursor": {
          "ref": "f48924d1-981b-4b39-8b68-006f0dd05608",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6651714e-8822-475b-b8bc-f945a844159b"
        },
        "item": {
          "id": "eb70cc10-3ed1-42d3-bf22-8804f2ea45af",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "641c8e21-969b-4169-9e78-a0d2c3fd8bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073cfa4b-7c20-46bc-829a-38abcfb02fb5",
        "cursor": {
          "ref": "9be1315f-574d-42fd-a889-bfa333ce2212",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "599eab1e-8ac2-418e-ada2-fcfd42f108fd"
        },
        "item": {
          "id": "073cfa4b-7c20-46bc-829a-38abcfb02fb5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "114911e2-a32e-48b6-b26e-f6aed1e3b0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202f2b24-2a59-4056-bb64-a0eb9b4cef31",
        "cursor": {
          "ref": "3ecbb7e6-9239-495c-a09a-a6450b4cd716",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b9a826e2-277b-4481-9ae9-be01fc23d535"
        },
        "item": {
          "id": "202f2b24-2a59-4056-bb64-a0eb9b4cef31",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b5e9f0c7-bc27-4ac1-91c1-5dbf86ff333e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8871d1-84e8-4402-a061-34ee150246f2",
        "cursor": {
          "ref": "d852d5a6-7ddc-470e-be2e-dea34a9a4c91",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "50d402af-24c8-4adc-963c-7240aebc6e9c"
        },
        "item": {
          "id": "dc8871d1-84e8-4402-a061-34ee150246f2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "73f024b0-9817-48db-b1c8-704b54271bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93c903e-b845-4c6b-b53f-c73225d3ac56",
        "cursor": {
          "ref": "20b43d24-b4c3-4d5d-8baa-fa4ea9df0025",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e4d90824-0843-4933-895c-b60dca355d37"
        },
        "item": {
          "id": "c93c903e-b845-4c6b-b53f-c73225d3ac56",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d8acf96c-5488-4c85-bb5b-5525dfa89af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f2578d-655a-415e-8e8a-2e481ea6d58f",
        "cursor": {
          "ref": "fe6a9acc-8891-45e5-9f27-eb7d4a7f5222",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d985a157-f84c-44c5-9f34-6cca876a14d2"
        },
        "item": {
          "id": "f6f2578d-655a-415e-8e8a-2e481ea6d58f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aea11c6a-1656-417a-afa5-57ed370a0673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c874f4-ff8f-4456-bca8-a4e6656fec7a",
        "cursor": {
          "ref": "4f416f94-a45a-480a-92fe-055579e73fd5",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b0967e0b-10e1-4d59-8a97-1045c01d5cfc"
        },
        "item": {
          "id": "72c874f4-ff8f-4456-bca8-a4e6656fec7a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "87cc6d4d-892d-4627-a0af-0bec88a8f240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd8c2df-90bc-43a7-abc4-c2577862611b",
        "cursor": {
          "ref": "31b865c7-38aa-44b8-beb4-30bc23645d47",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5763d0a2-10fd-4b60-a4c5-95626506bd6b"
        },
        "item": {
          "id": "bbd8c2df-90bc-43a7-abc4-c2577862611b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7992950c-b28b-43e3-9a65-87f77810c1f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb68e2c-4c34-497d-90d6-62a8e17f9b67",
        "cursor": {
          "ref": "681dd5c2-afa6-49f6-84c3-533ca5864a01",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a5764dfc-ad02-41ef-ae1f-376e290a797a"
        },
        "item": {
          "id": "3eb68e2c-4c34-497d-90d6-62a8e17f9b67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4fde5ae1-081d-4fdf-86b6-28b3a7fe7f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2b0000-b0a3-4638-ab83-e7d54346d4ad",
        "cursor": {
          "ref": "d6cd1d0d-bdef-4477-b137-cae881ad078a",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1154f5aa-b464-46e0-b873-15c754cb663f"
        },
        "item": {
          "id": "cf2b0000-b0a3-4638-ab83-e7d54346d4ad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "12af242f-b40f-411c-8914-e03b35577753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ec213c-d5cf-4b26-a534-17947b8b558c",
        "cursor": {
          "ref": "558f2465-2ed9-483d-8c36-f52b5ac88b87",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9ff01648-fead-46be-be07-022fd5c9ac63"
        },
        "item": {
          "id": "11ec213c-d5cf-4b26-a534-17947b8b558c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9166c3b3-b6b8-48f3-a785-d28e25f9ca6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd24fd0b-0a4c-4b4d-baee-caad7fd0c0c8",
        "cursor": {
          "ref": "63499045-e59a-40a1-8f72-55ef540af363",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "efe313a2-06ef-42d5-9b8e-aebbe85b2a58"
        },
        "item": {
          "id": "bd24fd0b-0a4c-4b4d-baee-caad7fd0c0c8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7a8db809-af36-4ec0-be6d-68a3a747a2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d343f50-0583-4d98-be32-b2f16e9d573b",
        "cursor": {
          "ref": "01a6897e-694c-4d2d-ab9e-e4b048a2f8b0",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ca182481-1377-454a-997a-c7125e7863ef"
        },
        "item": {
          "id": "3d343f50-0583-4d98-be32-b2f16e9d573b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dc3b8f08-9d25-4e8c-8819-51c91092ddb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e9630-74ac-4650-abc5-a578f8d59e91",
        "cursor": {
          "ref": "d2e7f0de-5e74-4168-81f6-54a728e25c99",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "da61d8d4-a8aa-4a7c-ad4c-87aafcf6e693"
        },
        "item": {
          "id": "752e9630-74ac-4650-abc5-a578f8d59e91",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "812687b9-3688-42bb-aec4-a7c52bac7622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae3efb9-8228-4f07-98d1-f5b9089ef360",
        "cursor": {
          "ref": "4a087caa-553b-4c9b-af4b-d0f73fc4d01f",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e692cdb6-9f0d-4ad9-916b-44a45d432b95"
        },
        "item": {
          "id": "3ae3efb9-8228-4f07-98d1-f5b9089ef360",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3cb12be7-b913-4a69-8750-4442f8c22cfd",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "9a585807-c84d-47cd-97e6-a153d16d17ca",
        "cursor": {
          "ref": "7f158df4-3258-4c8c-a153-e485bde3d626",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "10c1662a-d6f3-4c34-85a6-6681d2e90cac"
        },
        "item": {
          "id": "9a585807-c84d-47cd-97e6-a153d16d17ca",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f4c9bf82-268e-4d4f-b4e5-34a6b639a76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c36545d-f811-4fdf-a0ac-e43709185c26",
        "cursor": {
          "ref": "33815c22-6204-4468-b4d4-4a11eddc7f10",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ac5f6492-f3f8-4ed0-892c-3585c8c0dc46"
        },
        "item": {
          "id": "7c36545d-f811-4fdf-a0ac-e43709185c26",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2b5a1643-14ee-418f-b646-3c194485c335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75017bf-8033-4c8c-9647-43403f35a67a",
        "cursor": {
          "ref": "aee5e10c-40ee-4b26-9f1c-5558559dd14f",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "be77d05d-3316-4cc4-bb66-03b3ab7590a2"
        },
        "item": {
          "id": "d75017bf-8033-4c8c-9647-43403f35a67a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a07a23f4-9d22-4f77-b63f-ad1f3e2c5c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61386d36-e852-4343-a5b0-90b78b6a60f7",
        "cursor": {
          "ref": "50cc937a-3641-467d-aeff-7072400c090f",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a74ca269-c2fd-479a-83d5-154c048dda45"
        },
        "item": {
          "id": "61386d36-e852-4343-a5b0-90b78b6a60f7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "37323b43-e767-4f7e-80f6-cd565bf62fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa87471-75ff-433e-affc-a8fff8c00b00",
        "cursor": {
          "ref": "87f18bd7-63ac-4cb1-afbc-389d98ede8f1",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8e39b3af-1e7d-4b9a-b559-3af10327575d"
        },
        "item": {
          "id": "efa87471-75ff-433e-affc-a8fff8c00b00",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "12bc4635-480f-48de-82e1-989a9f0abbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7413d35-f1f2-4acc-9b40-ef9dbb474fa8",
        "cursor": {
          "ref": "3c5b00aa-1c14-4668-b92b-0fa980072aa3",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5af15415-a6e2-422f-9f3b-7e9ff86cd1cd"
        },
        "item": {
          "id": "a7413d35-f1f2-4acc-9b40-ef9dbb474fa8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "35e2a62a-6931-4ede-954c-3441e732f397",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "8a29d3e3-6e3b-4534-a794-a990d38751e9",
        "cursor": {
          "ref": "08424096-beb9-4d4a-a0e0-6333a8a94061",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6152187b-78b5-4084-9436-4ff40083c70a"
        },
        "item": {
          "id": "8a29d3e3-6e3b-4534-a794-a990d38751e9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "42251cbd-f0c2-492a-9cc5-a9951e8193d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70cea41-f5b9-4f6e-a1d5-f6ec5ca7d1da",
        "cursor": {
          "ref": "e50a5f01-86b7-42e8-b395-b5ce4201fae1",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "da9a3ad2-b8cb-4bf5-9819-9750bd38217f"
        },
        "item": {
          "id": "f70cea41-f5b9-4f6e-a1d5-f6ec5ca7d1da",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ea337fd1-c891-4766-9e34-040e53f60428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6ea547-231c-4367-99ad-2aac0110d146",
        "cursor": {
          "ref": "8eef1e59-e723-4e07-b56f-1b6bfff6616a",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "df6e23e8-b88d-4ac8-8d30-e3b3f45b0998"
        },
        "item": {
          "id": "ec6ea547-231c-4367-99ad-2aac0110d146",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1df4d6c6-fdae-498f-bd05-eb3f7b1497ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803aa938-af1b-4c5e-ac36-03f16a99f283",
        "cursor": {
          "ref": "c7ab7cb7-bceb-4391-918e-ee03d27f9db9",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8648c255-1a1f-4337-b04f-304d32ac25d7"
        },
        "item": {
          "id": "803aa938-af1b-4c5e-ac36-03f16a99f283",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cfae71aa-8649-4c51-bb67-36acedba7bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b7be08-6e51-4f43-8d9e-1a1f0b8206c3",
        "cursor": {
          "ref": "e38bf81f-6b06-4dde-bd45-747e48ef2391",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dce65e27-8f98-4cd4-a97c-b58539ff1a7a"
        },
        "item": {
          "id": "d6b7be08-6e51-4f43-8d9e-1a1f0b8206c3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "24607cc7-653f-485b-8434-19db5c6a1c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b485edc4-63a2-486e-bce6-b96133af8d4b",
        "cursor": {
          "ref": "c9ab0efe-cd65-4be7-b67a-bc86ab1d103d",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f32353a6-7de1-4de9-b630-376f0515dace"
        },
        "item": {
          "id": "b485edc4-63a2-486e-bce6-b96133af8d4b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7ed663b5-c814-478b-afd0-2a5ef2e09c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1282d946-d9fd-4bec-b0f9-8d21dd7c2600",
        "cursor": {
          "ref": "bba9180f-88c6-47f9-b9ec-544151222022",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6ec750a1-0eda-48fb-932e-1a77cb94b958"
        },
        "item": {
          "id": "1282d946-d9fd-4bec-b0f9-8d21dd7c2600",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3095a27e-2e0f-49c2-a234-6d9f165e17cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f421ea86-6263-422e-a133-53ef1048763f",
        "cursor": {
          "ref": "0eb3e5e6-d1d1-4ad6-9883-d22de924fa7f",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "342de4ab-d4c8-4767-9e6a-9cb944d4fa8b"
        },
        "item": {
          "id": "f421ea86-6263-422e-a133-53ef1048763f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2bf498fc-5e39-47de-9ca4-b11a127d5480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe28774-36e4-4954-bb71-fba187db084e",
        "cursor": {
          "ref": "5c766c51-871d-463a-ba36-960e3fba1307",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a2912048-481c-433a-b898-6367f2396dea"
        },
        "item": {
          "id": "fbe28774-36e4-4954-bb71-fba187db084e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "169e04ab-e57e-469f-baa9-ede460e361a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "71ea3560-0b3a-47d6-b025-ab9681e0074f",
        "cursor": {
          "ref": "2553444a-93e7-4241-9909-26621e9b90da",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ac820b3a-d429-48e7-b769-48938fe04b6e"
        },
        "item": {
          "id": "71ea3560-0b3a-47d6-b025-ab9681e0074f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "57f49242-e0dd-4863-af69-a7fcb4187e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "1ae175f4-2eb4-4ab8-a750-8b6c81ae7df9",
        "cursor": {
          "ref": "a8066fb1-aad0-4f23-bc97-e9847eaf7032",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8ca44a7d-52d8-4dbe-8f51-b1fc1d3244dd"
        },
        "item": {
          "id": "1ae175f4-2eb4-4ab8-a750-8b6c81ae7df9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "871bffe9-b201-4f85-b321-7e0d8c6dec4e",
          "status": "Created",
          "code": 201,
          "responseTime": 27,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e2df62-5cf4-4e21-b045-9d822ce3fe2a",
        "cursor": {
          "ref": "dfc7c870-79f8-47a0-b1e4-e77a3c802176",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9f12ab8c-49b9-4ead-93c2-d63dc1e24256"
        },
        "item": {
          "id": "99e2df62-5cf4-4e21-b045-9d822ce3fe2a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b49625d9-51e4-4df8-a2cc-13d493a58ec4",
          "status": "Created",
          "code": 201,
          "responseTime": 26,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8488e5bf-1895-40c4-b4ab-c6747ca121b4",
        "cursor": {
          "ref": "b0dc4106-b164-43db-b77d-b9d5b8f4ca4f",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "38e37330-dfa0-462d-b964-4b7a4e7bf1e5"
        },
        "item": {
          "id": "8488e5bf-1895-40c4-b4ab-c6747ca121b4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fcdefc99-ff1c-4ba6-9a6f-bb06d4ad41f3",
          "status": "Created",
          "code": 201,
          "responseTime": 31,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1de27d4-bbab-485c-bb5b-3e012828c8a2",
        "cursor": {
          "ref": "f4edaeee-0217-4cf1-89b5-c020cbe23716",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "81becc18-5d5f-4ef2-a654-f3679edeeba2"
        },
        "item": {
          "id": "f1de27d4-bbab-485c-bb5b-3e012828c8a2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a5b3c963-27e4-4286-915e-4aac84480c5e",
          "status": "Created",
          "code": 201,
          "responseTime": 25,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4d18dc-229d-4c7a-83e4-3b7668364cc7",
        "cursor": {
          "ref": "3a466b11-2d8d-42ec-9464-2c098f65f1b9",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bf7821fc-d1aa-4274-91f1-227dc1fcbae5"
        },
        "item": {
          "id": "ea4d18dc-229d-4c7a-83e4-3b7668364cc7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d53fccaa-5b8d-424c-a9f9-46c2268fc5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          }
        ]
      },
      {
        "id": "2e6f71bb-5965-4682-838d-f0834538bd07",
        "cursor": {
          "ref": "d4a5a3e2-75a2-430b-8792-93d8008045df",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bed7f31d-80cb-460f-a856-68dce600b462"
        },
        "item": {
          "id": "2e6f71bb-5965-4682-838d-f0834538bd07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f81ca41c-4214-4397-b32d-806f8fae58bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6f71bb-5965-4682-838d-f0834538bd07",
        "cursor": {
          "ref": "d4a5a3e2-75a2-430b-8792-93d8008045df",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bed7f31d-80cb-460f-a856-68dce600b462"
        },
        "item": {
          "id": "2e6f71bb-5965-4682-838d-f0834538bd07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f81ca41c-4214-4397-b32d-806f8fae58bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0935fc2f-540f-4f22-a28e-96d40e9c0adc",
        "cursor": {
          "ref": "b6f14d24-0414-4f76-a989-8e5e3981595d",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b5cf837d-bd2a-4b2b-9203-ecbcee3b8ed6"
        },
        "item": {
          "id": "0935fc2f-540f-4f22-a28e-96d40e9c0adc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b4a89703-4d81-4e8c-81ff-779e8ddd3170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1bd174-f9ba-4560-97eb-57ad12bbf895",
        "cursor": {
          "ref": "91ec54e1-b730-4ea5-a26d-068a1e8b1180",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d8194567-e1ef-4ae1-acec-1e6410920177"
        },
        "item": {
          "id": "9d1bd174-f9ba-4560-97eb-57ad12bbf895",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d9b073de-0225-47e7-a19d-1591d3dc82b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00295ca-e3ab-4a9c-9b76-d8d0d20745e3",
        "cursor": {
          "ref": "9b2e7fdd-3a17-4082-a6b4-2a89a9da0b6d",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "200661aa-1483-43c0-92a6-34d7e0120574"
        },
        "item": {
          "id": "b00295ca-e3ab-4a9c-9b76-d8d0d20745e3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cc03d21c-7111-4ffd-9781-eb0b08be4835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e08bfe-e643-40a5-8814-93d9632e91b5",
        "cursor": {
          "ref": "e78d7b9e-b80c-4cae-b7bf-2ff97e8b4a6d",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9f61b6e3-a29e-4738-bdfa-9a2400fd7280"
        },
        "item": {
          "id": "10e08bfe-e643-40a5-8814-93d9632e91b5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "28740981-f158-4d4b-9f4c-56efc3a85cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e3e1cb-199a-45f3-8cfa-7c5f90591564",
        "cursor": {
          "ref": "970c656f-ea90-4379-ae69-cf7131e7b76d",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d3f54c0-92c0-418c-aad9-892f9cd19391"
        },
        "item": {
          "id": "53e3e1cb-199a-45f3-8cfa-7c5f90591564",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2e6f2aec-5bb3-4675-a0ca-3bbfbc30480b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee445d3d-83fc-4756-b393-e4e1620ca053",
        "cursor": {
          "ref": "b8f2522f-c32b-4432-aedb-1a03a19ed4f2",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e2c6b12d-91c0-4ce0-bd04-74072662f3c2"
        },
        "item": {
          "id": "ee445d3d-83fc-4756-b393-e4e1620ca053",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "22eedf70-7195-4243-94a2-9c303d03e1de",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "4498cd63-4eb0-468a-a10c-a73f26fd7ca4",
        "cursor": {
          "ref": "b50f632e-7c69-4311-8597-d3756100f1cd",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8532502d-643d-4ef5-994c-30468f0776a6"
        },
        "item": {
          "id": "4498cd63-4eb0-468a-a10c-a73f26fd7ca4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2ee6fd65-ad53-46dc-af85-c57471abda5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcc7587-30e2-46e3-a0e5-d01beeaddf44",
        "cursor": {
          "ref": "cf32960d-634b-4b5f-b441-89a6dc7aadb3",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f79e3fc4-f5ab-4c44-a032-c88a774a1c12"
        },
        "item": {
          "id": "edcc7587-30e2-46e3-a0e5-d01beeaddf44",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f1f978f-2714-480c-b0f3-812e81c181d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcc09f9-e662-44ed-981a-4282c82b9392",
        "cursor": {
          "ref": "c1240146-641d-4244-b6e6-8cfd8df14cfc",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "074fd0c8-799d-4c67-b760-825aff2c2091"
        },
        "item": {
          "id": "bbcc09f9-e662-44ed-981a-4282c82b9392",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "edab8e93-c60d-4171-b9b6-b0370594e68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779bcfc4-62be-4d97-9dcf-953b4c748cb3",
        "cursor": {
          "ref": "a0a17a75-939c-44a8-b54d-21bd34ce8d35",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3428ecc9-9567-41b8-81c2-a9309ca0ff98"
        },
        "item": {
          "id": "779bcfc4-62be-4d97-9dcf-953b4c748cb3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f99a5563-0da1-4edb-939e-6e71c2fb6f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a86b0a-8911-44f1-98a7-0cd34bc3a044",
        "cursor": {
          "ref": "940c0fc7-6f4e-41d2-9ac2-ab0f9af21bf2",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ecc3e0aa-b88a-4893-8bbc-5a63ed5c910c"
        },
        "item": {
          "id": "d8a86b0a-8911-44f1-98a7-0cd34bc3a044",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fa686fc0-504c-41b1-8514-834e40bc8235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cbc04c-c6f9-41f3-b422-b3275df0fad2",
        "cursor": {
          "ref": "8f56ea18-83f9-4528-a2f5-98321ece66de",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9a69d2cc-ccce-4107-958d-20ea5b5bc24c"
        },
        "item": {
          "id": "74cbc04c-c6f9-41f3-b422-b3275df0fad2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b71de020-abef-470b-9a7e-66770002a055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b077ed-cedc-40c8-a0e5-f40d87d7fb35",
        "cursor": {
          "ref": "7443d28f-83b9-4aa1-a9dc-e9e8e6a96299",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fd9f4de5-4f04-4505-9209-ef630d9ba04c"
        },
        "item": {
          "id": "c6b077ed-cedc-40c8-a0e5-f40d87d7fb35",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2c609027-d19e-4b3e-9783-e7d157135df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531ec228-46ab-4698-9845-67fcfa47d1dd",
        "cursor": {
          "ref": "81184415-db2a-4726-aef3-eb88746314c2",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4e437d7a-495a-409a-b512-deb9edda6fcc"
        },
        "item": {
          "id": "531ec228-46ab-4698-9845-67fcfa47d1dd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a20ddd99-6af3-405e-b69f-3801096db281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46dcfa9-fbcf-4932-9f35-6b4eee9e90a6",
        "cursor": {
          "ref": "949d1df4-e119-4122-afef-85dcc750236d",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "aaa8f256-b62d-4c3e-96b4-09b6663bdda5"
        },
        "item": {
          "id": "b46dcfa9-fbcf-4932-9f35-6b4eee9e90a6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5be02d05-330d-4422-8787-7b2eab9bb850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81c1b46-c666-412a-a6d4-02e0447d02e4",
        "cursor": {
          "ref": "f8b91ad1-e8c9-4956-b987-3bbad74a9d4b",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d9a1abdc-45ba-4ec8-9f5d-aeb0894610c4"
        },
        "item": {
          "id": "b81c1b46-c666-412a-a6d4-02e0447d02e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "593aab89-4c78-49f9-955f-55fcfa971b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a93fcb9-b402-4c71-a520-f1987f8f6c20",
        "cursor": {
          "ref": "b4335bb8-6469-4b3a-936f-f720f963324b",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fd8dda25-149c-47bf-ae8b-76754fd09d34"
        },
        "item": {
          "id": "0a93fcb9-b402-4c71-a520-f1987f8f6c20",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29776f2e-2467-451f-8ef7-085e1e746e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a749a3bc-3bba-4909-955d-4a7b661c58b3",
        "cursor": {
          "ref": "797ef50a-4810-445a-bb5e-1606addba923",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f1722de4-55f6-47cd-8b18-385facd2ef30"
        },
        "item": {
          "id": "a749a3bc-3bba-4909-955d-4a7b661c58b3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0155d337-212d-40e1-99d7-e7b00156b23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101be06a-e5ea-44c0-b29f-99bf7fb08ab2",
        "cursor": {
          "ref": "f0d61106-9447-446a-861f-7296613530e1",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b3fdaf5d-c036-4aab-9d2a-921c2048c7cf"
        },
        "item": {
          "id": "101be06a-e5ea-44c0-b29f-99bf7fb08ab2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3b0ade14-6722-42dd-8cbc-bb326d2e78a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57c2b31-8ac1-48de-ab43-6a9f8b432731",
        "cursor": {
          "ref": "cac07f30-c2fb-4b1b-9eed-63440db5977e",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "87c72324-8c83-42ba-b1ec-bb155e4de1cc"
        },
        "item": {
          "id": "e57c2b31-8ac1-48de-ab43-6a9f8b432731",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0a8d18f4-bbf4-42b6-aa8d-4f50ee99d599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1003569d-9763-4023-8830-9091e7944cc8",
        "cursor": {
          "ref": "bf8dc129-0e15-4d3b-90c6-98d0dd47c79b",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e86408bc-c33e-4e81-a533-0b2bcd581687"
        },
        "item": {
          "id": "1003569d-9763-4023-8830-9091e7944cc8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "23421289-8699-4172-8a35-b9df621e1ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef321fe-dbff-4721-819d-c2d9d0b6cd2d",
        "cursor": {
          "ref": "48c3e8d8-df2f-40e7-958d-f17289f58e06",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7866b92e-36b3-4a6f-9453-b3a2934b39a2"
        },
        "item": {
          "id": "cef321fe-dbff-4721-819d-c2d9d0b6cd2d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "455a984c-4e88-47d6-81aa-734eff607d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72ed055-5f32-4dc9-b0bf-fc3be5a40492",
        "cursor": {
          "ref": "4cb6e7fd-8f2a-4bb3-a4a1-8f6eaae8110e",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7e8c5906-c900-49e2-9747-6daa6c0e7409"
        },
        "item": {
          "id": "a72ed055-5f32-4dc9-b0bf-fc3be5a40492",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e1434e32-62b1-46b4-a497-8a325762840b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f99bd7-2888-462a-98e8-7748049b12ec",
        "cursor": {
          "ref": "6b743b72-1c08-485c-9af6-e9e25500617d",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f4fb1a18-fde2-402f-9567-2cec14cb36d8"
        },
        "item": {
          "id": "60f99bd7-2888-462a-98e8-7748049b12ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ddf3d416-ba43-43ed-94e7-639a9a6f7bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce4872f-496b-45cb-b24d-1928e8a86886",
        "cursor": {
          "ref": "88f11a1e-83bf-44ac-9620-ab409e23416c",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6e6cf497-2f3f-4387-ab58-e8b74c29b958"
        },
        "item": {
          "id": "5ce4872f-496b-45cb-b24d-1928e8a86886",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c32690f9-5dd2-441d-aa74-51f309b13c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6794e70d-a068-4b0b-8dbc-50f367e2ec08",
        "cursor": {
          "ref": "ad1a3bc1-b5c0-47d0-a2bc-d359067d82d4",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7097e25-2819-4bb0-a566-dbe908f8c1ff"
        },
        "item": {
          "id": "6794e70d-a068-4b0b-8dbc-50f367e2ec08",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ea59db9d-ac2d-4314-b6a3-b954cd096b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3203ea-7ca9-4ea7-93dc-a6aa8cab6695",
        "cursor": {
          "ref": "c9f498b6-e053-4022-bea0-b923b1d91f9c",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f92e97c2-732a-42dc-9f0b-40fb010668ed"
        },
        "item": {
          "id": "8e3203ea-7ca9-4ea7-93dc-a6aa8cab6695",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b00daca6-fb11-49ea-805a-777c5d832378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd5f2a4-89e1-4a11-b091-e39d25e75a62",
        "cursor": {
          "ref": "d161f8b7-b350-4b2e-8b25-7ee59694e763",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eb5f8cc6-8958-4e32-8ddc-8c6d5b1faa27"
        },
        "item": {
          "id": "0fd5f2a4-89e1-4a11-b091-e39d25e75a62",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e36a2463-a0b6-45c5-a9ac-211256d89cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c94cf4-f108-4365-ad9d-0f09586c67a9",
        "cursor": {
          "ref": "0c693fc3-8a2d-43fd-ae9f-026991c49467",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4b3b7897-9e58-461d-b032-c00b8677aaee"
        },
        "item": {
          "id": "62c94cf4-f108-4365-ad9d-0f09586c67a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "142fc114-af2c-415f-b393-6f9048af1975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516ed1a0-5736-4b9e-9c62-77dc6eba0db8",
        "cursor": {
          "ref": "c98b79a7-e04e-40da-ab25-60d5d46b566e",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7256efa6-5760-4d40-b943-8ff285e064fa"
        },
        "item": {
          "id": "516ed1a0-5736-4b9e-9c62-77dc6eba0db8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75a1a707-68ea-4e2f-bdb3-3083fe6886a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0614ceae-487b-4fc9-8397-c5b38596c7eb",
        "cursor": {
          "ref": "7a934654-59f8-4a57-a313-50359d49bbde",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8616ce6d-7d3a-4f10-891b-59722024a54c"
        },
        "item": {
          "id": "0614ceae-487b-4fc9-8397-c5b38596c7eb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "56f3eb32-8bc1-4fe4-9c11-1d08e09f545b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41cf951a-6f7f-459a-abc8-54eaff242eb7",
        "cursor": {
          "ref": "fc94992d-6c1b-4d5c-ba2c-c9a942273343",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ea49fb69-d316-4f38-8342-680ff42b8f3a"
        },
        "item": {
          "id": "41cf951a-6f7f-459a-abc8-54eaff242eb7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5b6c6bd2-bd13-43f1-8d9f-e5d4ade444e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1c0e2da3-f1a8-47c4-98b3-0fc6ff7c01b8",
        "cursor": {
          "ref": "60a9b88d-8bc1-4a10-b15a-cfffa08187bf",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bd1e302f-dc27-4471-bdc4-8c21a351c953"
        },
        "item": {
          "id": "1c0e2da3-f1a8-47c4-98b3-0fc6ff7c01b8",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f8817f5e-3f3c-48d3-b85b-dcb6cd7af670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1e4a2546-ca2d-44f1-9762-57f50c77ccc3",
        "cursor": {
          "ref": "1bf0ed83-0a42-4341-a5a3-cd8476d0f990",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6a03a103-f9e4-4531-91ea-85d50bc01aab"
        },
        "item": {
          "id": "1e4a2546-ca2d-44f1-9762-57f50c77ccc3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af60e290-06f2-4fd2-8bb3-a33092c4f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4a2546-ca2d-44f1-9762-57f50c77ccc3",
        "cursor": {
          "ref": "1bf0ed83-0a42-4341-a5a3-cd8476d0f990",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6a03a103-f9e4-4531-91ea-85d50bc01aab"
        },
        "item": {
          "id": "1e4a2546-ca2d-44f1-9762-57f50c77ccc3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "af60e290-06f2-4fd2-8bb3-a33092c4f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5529f622-21f0-4165-9835-4c2a2a3bfd6c",
        "cursor": {
          "ref": "6537c45d-25ba-467c-91c4-42fdce99ddc7",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "67567697-25c7-4903-aaa9-304327853118"
        },
        "item": {
          "id": "5529f622-21f0-4165-9835-4c2a2a3bfd6c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "beb40875-ea0f-445e-8c7e-7bde6cf0393f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e608f-b24d-4319-bf94-4f9490850341",
        "cursor": {
          "ref": "226c0043-bc2c-45b2-8f78-703d4f45b3ad",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7ccbe675-fb5b-41fc-8e2a-e5800a61b4bc"
        },
        "item": {
          "id": "118e608f-b24d-4319-bf94-4f9490850341",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c133fff-c9b7-414a-96ed-1edba12ab3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826a67c9-3fb6-40d8-ad7b-9f16c5937964",
        "cursor": {
          "ref": "c2f60ba8-4a18-46e3-a8c5-c73050712614",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8109902d-0b20-4f42-a37f-1a3a7a0a735d"
        },
        "item": {
          "id": "826a67c9-3fb6-40d8-ad7b-9f16c5937964",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1ef306bb-317f-4a24-a4cd-d5a8e66323c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eb5177-a568-4dff-8b3b-850fa11616dd",
        "cursor": {
          "ref": "095e09fb-f0a0-4d6d-8935-f4237bab6a38",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7fc483e1-14c7-45fc-a012-0aa1419e0b84"
        },
        "item": {
          "id": "b3eb5177-a568-4dff-8b3b-850fa11616dd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c9f11e69-7da2-4eb9-bdcf-b59f6111197b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4ae8f6-2228-4852-9f90-aa86d6cdd5d2",
        "cursor": {
          "ref": "e26f947c-8a5d-44bf-8b8e-8fe9da3f289b",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3faae96c-dd51-4937-9702-856c3456613d"
        },
        "item": {
          "id": "ba4ae8f6-2228-4852-9f90-aa86d6cdd5d2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "80f5f315-9d93-46aa-a56f-c3ee07be3665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab55b04-4c9a-42de-810d-f8cb24c4983e",
        "cursor": {
          "ref": "68d10efa-bd6a-4d54-84e8-606b62d22101",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "156f8d5f-1cec-4814-b3f5-11126973c5fd"
        },
        "item": {
          "id": "fab55b04-4c9a-42de-810d-f8cb24c4983e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "efb5c323-c373-4189-a59a-58db8e666d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e902840-c371-4cf4-b70b-e820ecd94f47",
        "cursor": {
          "ref": "5bb5b0db-7646-47a5-97f7-5e0adb2a69f2",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b2a01d36-03f8-43c4-8723-7cb863ac6104"
        },
        "item": {
          "id": "3e902840-c371-4cf4-b70b-e820ecd94f47",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "54f72c67-1b4e-46f3-8fd5-add1ab0b0ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ddd965-3899-42d7-8cfb-fc517cae6374",
        "cursor": {
          "ref": "be9e86b5-e3d6-4f15-bf17-98a81f8acb6a",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b74d5355-46b3-49dd-8d14-1dad38cb35b9"
        },
        "item": {
          "id": "d2ddd965-3899-42d7-8cfb-fc517cae6374",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "738fc673-3434-4e91-8d15-7f79ff9014fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1403384-5547-4ae7-bc39-498134d5f62a",
        "cursor": {
          "ref": "466dd8a7-9a0d-4d94-a335-037abf8c91e8",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0a50cc5d-8613-4e13-87db-7006cce96148"
        },
        "item": {
          "id": "a1403384-5547-4ae7-bc39-498134d5f62a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fec423b6-f633-459b-bcd6-a5c2e6f6ceae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4021bdd1-82dc-49af-a95b-b733a4823669",
        "cursor": {
          "ref": "caf41a12-f7de-4e70-b1a1-3e2aaf0a2048",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fec5f0b1-811a-48b8-99e6-1f8063befb32"
        },
        "item": {
          "id": "4021bdd1-82dc-49af-a95b-b733a4823669",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4f00cb75-9b7e-4dec-a2a1-55f3c244033d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bda4e9-19aa-4312-96f8-a6586b04b819",
        "cursor": {
          "ref": "6fd32d92-09bf-4bf0-b7ba-8f0382fbd909",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "965ed7ac-0e91-4f50-b45b-fe8f438700fd"
        },
        "item": {
          "id": "b5bda4e9-19aa-4312-96f8-a6586b04b819",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6c233580-7c88-4c8e-b145-43bf1921ddc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0398c482-31cb-4baa-8032-d1803414546b",
        "cursor": {
          "ref": "eb898c9a-61d0-414b-8502-63dd75dde4d6",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "49ae8e71-1577-4d36-87db-a8576f53714a"
        },
        "item": {
          "id": "0398c482-31cb-4baa-8032-d1803414546b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6592953d-a99e-4609-89eb-ccc367487471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f597b45-3661-4f32-b7a1-020ee3d61944",
        "cursor": {
          "ref": "d13a8a18-fb11-42f9-a73f-e68c905a116f",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "043fa131-2f4a-49c5-89a7-9eec1e55b863"
        },
        "item": {
          "id": "0f597b45-3661-4f32-b7a1-020ee3d61944",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ba22abbc-c735-4011-bf12-284912c31500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293bddc2-6cb0-4825-903c-982ea4253820",
        "cursor": {
          "ref": "b90c8e3a-176d-4598-aa5e-ba44bd527506",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b6184abf-1f4c-402a-a477-abff382f0309"
        },
        "item": {
          "id": "293bddc2-6cb0-4825-903c-982ea4253820",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1db3517d-45d2-4c08-80f6-23e6b3f42d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043eac0c-d948-4805-ae30-6b023ed08c40",
        "cursor": {
          "ref": "1990172f-aa3a-4e53-8c8a-bf70496df48f",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0f341cf0-b594-4254-b3d9-6f3658654531"
        },
        "item": {
          "id": "043eac0c-d948-4805-ae30-6b023ed08c40",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2af69266-9e4f-423f-8737-7503a9d4d467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98030d17-c4e6-4ec3-937e-0df1c853721d",
        "cursor": {
          "ref": "fab9ac1e-1267-4e2a-a0bc-9feca37aad3e",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4fa20b32-5250-4672-8159-158e9cc7fc25"
        },
        "item": {
          "id": "98030d17-c4e6-4ec3-937e-0df1c853721d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "23677a93-45e3-45e3-b09a-3c6a99c45189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0359ad6-a075-439b-8dd9-0087f06ac4dd",
        "cursor": {
          "ref": "46e11725-6ec8-4284-9bcf-c19bb6cc6ed6",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "84098b9e-aead-4972-87ba-378c686460ec"
        },
        "item": {
          "id": "c0359ad6-a075-439b-8dd9-0087f06ac4dd",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "0841ec01-b21b-447c-bbab-f31067acd8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fc99e7-6a3d-48bd-9867-7cd5708bdaa9",
        "cursor": {
          "ref": "829f9e7f-44f9-40aa-a5db-99022ae04818",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40651266-25d2-49e4-8c8d-ab9feb507d36"
        },
        "item": {
          "id": "62fc99e7-6a3d-48bd-9867-7cd5708bdaa9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f0b6d19a-2d43-49ed-829c-ce18c641dfd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd5837-22f5-4f4b-b7e9-c75149c28d47",
        "cursor": {
          "ref": "c66a15fb-46c5-440b-82e3-be42f3e37ac3",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a54b2acd-a35f-4f04-b79c-08012cdb3a94"
        },
        "item": {
          "id": "2fbd5837-22f5-4f4b-b7e9-c75149c28d47",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ee92fec1-9a80-49b0-9781-6b3bcdab4cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85c0942-e500-4c25-a574-810d4cf29bee",
        "cursor": {
          "ref": "018c776b-2e37-4657-b55a-1722a5dc19e5",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2d3ef0f9-6936-43e8-b721-2779276c4ebc"
        },
        "item": {
          "id": "a85c0942-e500-4c25-a574-810d4cf29bee",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "39085ec3-b62f-47d3-a1bc-0e2f5351c890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf81c5a-662c-4c39-a793-3fd6ccb8d2aa",
        "cursor": {
          "ref": "6795587c-594e-495b-832a-08e6f10c8b5f",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "519255ea-99ef-4041-af85-68cb9abdb7ff"
        },
        "item": {
          "id": "fdf81c5a-662c-4c39-a793-3fd6ccb8d2aa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3852c88b-6cff-4eda-a285-da72f473298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913896ea-54b4-49c3-8795-e28dcc2a032c",
        "cursor": {
          "ref": "a9504634-7ad4-43c2-a2e8-bb75c23d4309",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e567bff0-4fd9-4ea3-93f0-a8a79a7b51a6"
        },
        "item": {
          "id": "913896ea-54b4-49c3-8795-e28dcc2a032c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e7a8fb62-5a99-492c-a346-11f80cbbe0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4991645-55e3-47a6-ae38-5cbc7a0f389d",
        "cursor": {
          "ref": "760d45f6-cd5f-433d-87da-8c7e3834ef03",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b65fbc9c-a8bd-49e3-aca0-851d3ae9b28c"
        },
        "item": {
          "id": "a4991645-55e3-47a6-ae38-5cbc7a0f389d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1009997a-d422-4663-bb55-aa1dff997f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b43612a-6f49-4912-a168-8d451c2de92f",
        "cursor": {
          "ref": "88d61211-5e15-4ce8-bbb7-f1104c89384c",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d15448e3-8c3c-4d84-b3ac-b12b11cdcdcc"
        },
        "item": {
          "id": "6b43612a-6f49-4912-a168-8d451c2de92f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "93f0667a-18a9-4ff4-aef1-7cb612593efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570b5d25-ff60-4994-b604-c20f5cbae608",
        "cursor": {
          "ref": "29e1deb0-0977-415d-a064-376eea287cea",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cb3ff12f-19e7-40ea-a860-7207ccb9cb2b"
        },
        "item": {
          "id": "570b5d25-ff60-4994-b604-c20f5cbae608",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3f4b29f-9fa7-4a73-b9db-23e73fb63db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7665b9aa-b760-44dc-a88a-f2e48f7c7948",
        "cursor": {
          "ref": "d075a5d8-4556-445b-89f7-c40595953bee",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "457b6419-772c-441d-b835-7ab1f74b9876"
        },
        "item": {
          "id": "7665b9aa-b760-44dc-a88a-f2e48f7c7948",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4087f595-80cf-405d-a9fd-90f0287607ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c257eba5-70a2-4945-a6da-998f9a87a640",
        "cursor": {
          "ref": "8f3ff0fe-3c2e-4fc8-814a-2289c97b750f",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9d525867-89a9-498b-a8c8-6b3071cb1234"
        },
        "item": {
          "id": "c257eba5-70a2-4945-a6da-998f9a87a640",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "94d0e869-844e-4345-ae5a-74a2e655600e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3db55a4-a974-4d98-8dc9-24ca3fc9f67d",
        "cursor": {
          "ref": "25ec028f-68f7-4b4d-99b5-ae560c0a3701",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0611f88a-4c1c-41c7-8dc9-b80cd9ab5d47"
        },
        "item": {
          "id": "d3db55a4-a974-4d98-8dc9-24ca3fc9f67d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4aaf05b6-af14-4784-b257-961f228842af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00505450-9331-48ca-bf58-0c39df3159b4",
        "cursor": {
          "ref": "a0da16b2-dcd2-4878-a4ed-7758f8b9bcad",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "709c2cb9-8cc8-466a-a158-32c379975fd5"
        },
        "item": {
          "id": "00505450-9331-48ca-bf58-0c39df3159b4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8b2d9481-6957-4116-a8ef-ede97594db2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf38bf0b-6cf5-4363-bb23-35d4bc0a325c",
        "cursor": {
          "ref": "dec6a867-f04f-4990-935f-4fa784c1c173",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "21345686-8ead-4f11-9ae4-2f8af4fdd69e"
        },
        "item": {
          "id": "bf38bf0b-6cf5-4363-bb23-35d4bc0a325c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2b9ab12f-173e-4237-bf85-c8fcbee9ba22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31239fe3-c8db-4bf5-b23c-b4f72ffc33af",
        "cursor": {
          "ref": "c011eceb-39f3-4bed-8d8e-2642693ae02d",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0abc1bbb-be31-4d48-a12e-fd5ed9294363"
        },
        "item": {
          "id": "31239fe3-c8db-4bf5-b23c-b4f72ffc33af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ae682d22-393e-4a9d-94be-c9240c52d1dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5236909-bf4a-41ba-9cbc-4d5b832c88c1",
        "cursor": {
          "ref": "e0dfb1c6-5bc3-4281-b738-8b67778b275a",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b78e9e39-5745-4354-bf17-daf5665d89db"
        },
        "item": {
          "id": "e5236909-bf4a-41ba-9cbc-4d5b832c88c1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f73572f-5c26-4b2c-995c-be0fc92554c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0250643d-f48f-46dc-ba3f-cd68aa1de5c8",
        "cursor": {
          "ref": "1f79995a-c862-42cb-b1cc-b3e6e783d88b",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f2808093-d0bc-4470-a7cc-be122ada959d"
        },
        "item": {
          "id": "0250643d-f48f-46dc-ba3f-cd68aa1de5c8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9dd99c5b-d155-4cf1-bbf0-79633b45692c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960e78f0-6fe5-4c66-ad00-e5f4e6f4603c",
        "cursor": {
          "ref": "82d8c2ad-0947-4075-8988-266789869bad",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4a4a556f-bbfe-499e-9a45-48c6e732e455"
        },
        "item": {
          "id": "960e78f0-6fe5-4c66-ad00-e5f4e6f4603c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f5499bf2-f94f-42ee-92ee-2749259b3951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e66158-b104-4d3a-bd5d-1b34813ed571",
        "cursor": {
          "ref": "9b8c519c-8333-41bc-bb77-3c674502e926",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6b586bcf-070b-4f46-a18f-398499b154ae"
        },
        "item": {
          "id": "86e66158-b104-4d3a-bd5d-1b34813ed571",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "46fbca08-4812-4ac0-a73d-9ce59a03af66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b4164f-2e9e-4baf-ad21-1f0e866e8948",
        "cursor": {
          "ref": "81400712-5eda-4ed1-bc1f-1378258d5bcd",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "42108126-c5ba-46cc-8f37-1fc373530198"
        },
        "item": {
          "id": "33b4164f-2e9e-4baf-ad21-1f0e866e8948",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "de98df05-b9e8-406d-b9ef-306d7a4e46d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bdb585-d7a0-491a-9d5c-7eabdd50b4cb",
        "cursor": {
          "ref": "0d2855e2-9cfc-484b-b179-bd00cdbbcff5",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b69f6d92-455d-4210-a566-48d4153647e8"
        },
        "item": {
          "id": "a3bdb585-d7a0-491a-9d5c-7eabdd50b4cb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "27c69d90-68c8-4857-971b-d6707c20bf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef867a44-d968-41d4-b86b-cfdc5371931f",
        "cursor": {
          "ref": "edc0f7ef-f463-4929-81c5-0bb42ebc9d5a",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e5baf4c2-8169-4cff-8984-c7875ce39a8f"
        },
        "item": {
          "id": "ef867a44-d968-41d4-b86b-cfdc5371931f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f3bb43a3-585f-4f5d-824b-df5e0c481a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ddeb8a-06da-48b2-a8ae-66829e7c1132",
        "cursor": {
          "ref": "235a7235-d750-41c7-9ce8-d8339f479c10",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ae779180-8468-4022-884a-9dce92ac7ea7"
        },
        "item": {
          "id": "96ddeb8a-06da-48b2-a8ae-66829e7c1132",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1dd36e5b-a79d-4d3a-86e0-051238739ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369d83f3-3743-4cd9-a2ed-0b264935a86c",
        "cursor": {
          "ref": "29050a43-9f9b-4246-a5f3-0f16e9f850fb",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5977a870-14ac-4beb-be70-22f164be23ed"
        },
        "item": {
          "id": "369d83f3-3743-4cd9-a2ed-0b264935a86c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3eb403f9-0601-46f8-b4dc-aebe4b88223c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c31b40d-e66f-4be1-bf2e-92aaf11e9efd",
        "cursor": {
          "ref": "efc7dad1-16a8-4ba4-bf0d-7003a014ff7f",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1d82c610-a4f1-4f5a-896c-86cbe3e48702"
        },
        "item": {
          "id": "3c31b40d-e66f-4be1-bf2e-92aaf11e9efd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "69c98158-3306-4e4e-b2f3-9b0a8cc44789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbff5d6-fa04-451c-940d-3fd740336494",
        "cursor": {
          "ref": "5461f131-d7d6-4766-8202-eacdaea62b82",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a745db04-e955-46f3-9fcf-755d6e9c7e50"
        },
        "item": {
          "id": "9fbff5d6-fa04-451c-940d-3fd740336494",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7040def6-bc1d-4579-881a-757438e01944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136dec98-d063-4141-9300-957f7ee2b666",
        "cursor": {
          "ref": "dbc2f639-e55e-4106-9a28-b1437179e814",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9e61ca36-251a-46b0-bfa3-2c46968a4d61"
        },
        "item": {
          "id": "136dec98-d063-4141-9300-957f7ee2b666",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6f57958a-8c11-4461-bc0d-bbe61ca70ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1d87e5-2dec-4f9e-b4d7-78f631d95565",
        "cursor": {
          "ref": "8d025d25-36db-40ff-9c2f-c9885f91fbd4",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "36d02230-e506-4254-b8b9-eac832456f13"
        },
        "item": {
          "id": "ea1d87e5-2dec-4f9e-b4d7-78f631d95565",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f5c6af22-3538-44f9-a21b-f9ef68a3a57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8f4962-c773-4878-bc66-681a46ecaf95",
        "cursor": {
          "ref": "0cfec5ef-a3bb-4bf0-86a8-e23385fd2d89",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ceff5e8b-5eda-439b-bca2-b5720127d6f1"
        },
        "item": {
          "id": "8a8f4962-c773-4878-bc66-681a46ecaf95",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d2230172-8588-40c9-8e55-adff09b82258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48ca48c-a3d9-4c44-bc64-08e86aca4466",
        "cursor": {
          "ref": "9b60ebc6-526a-452f-aefa-1555bcd77fd2",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d4124fe3-407f-48ab-9976-bdbee545ca2e"
        },
        "item": {
          "id": "a48ca48c-a3d9-4c44-bc64-08e86aca4466",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "12601608-82e4-4e5e-8bf7-cec8940907fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e633734-47ed-4378-9ad5-9c9940115f89",
        "cursor": {
          "ref": "cf600a4f-396e-4e70-b945-9d0a87d906a3",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "061db92e-fba3-4052-881f-e2fa555dca4e"
        },
        "item": {
          "id": "5e633734-47ed-4378-9ad5-9c9940115f89",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "88dc8610-f6eb-438d-8748-41ba062300d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fff04fc-cc07-4136-84ab-418470626df0",
        "cursor": {
          "ref": "cce2a883-a6c5-4b0d-aab2-1da8ac99f27e",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "68020ec1-0d49-4f11-a8a3-2613eb6379e2"
        },
        "item": {
          "id": "0fff04fc-cc07-4136-84ab-418470626df0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6be4c6b5-9daa-48ef-a13c-a5e2726a90ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420fe4a1-702c-4029-9273-384ef3c6082b",
        "cursor": {
          "ref": "b001929c-e770-453c-b4a1-428dd80d6477",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e1a4307d-b7a9-4a3f-a6b0-c2e47cb5b1db"
        },
        "item": {
          "id": "420fe4a1-702c-4029-9273-384ef3c6082b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bd38c8f4-a5a5-4511-bd35-0e4dd41a569e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea51590-539e-467c-aa93-183cbe47b364",
        "cursor": {
          "ref": "31ab59fa-4b89-4ec1-b921-f24122b58bff",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "71cc6825-282f-4323-896e-a9681d1781d1"
        },
        "item": {
          "id": "0ea51590-539e-467c-aa93-183cbe47b364",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b8bffc2d-4221-4593-a915-c9c00d72ecb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69f3ec1-e541-4f54-a526-876941a0ce59",
        "cursor": {
          "ref": "8e103f5c-acef-4a24-b672-421bba06ceea",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "24d242e1-1e6d-41f8-a2ed-3910b881d630"
        },
        "item": {
          "id": "b69f3ec1-e541-4f54-a526-876941a0ce59",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "09737c2b-17ab-4541-974b-eda1b19aac66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3452f2c0-4878-4659-84e6-19d2c8dcfba5",
        "cursor": {
          "ref": "edbe6f4f-1ddd-451a-8e36-e38e7fdac463",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e75bdbbc-fa1a-4353-a226-a5e6b6a86c97"
        },
        "item": {
          "id": "3452f2c0-4878-4659-84e6-19d2c8dcfba5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2f29edf0-c0d8-47d6-8b02-3f35591c59ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40242d35-aba5-4845-96c4-689bce577a8e",
        "cursor": {
          "ref": "b287f17a-59ad-425a-b341-3d68adea9804",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3a9e7939-4d68-4a71-84fe-57f50fa57ad4"
        },
        "item": {
          "id": "40242d35-aba5-4845-96c4-689bce577a8e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "73a02d2a-7e55-4bc2-a3c0-b3aa3a154e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3e0b88-3da4-47a7-8b11-4a5edd1d945e",
        "cursor": {
          "ref": "271b0e61-187d-4bab-b51d-2ed3c4ced633",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0436023c-c959-4cf6-96bc-601c434c78a3"
        },
        "item": {
          "id": "1b3e0b88-3da4-47a7-8b11-4a5edd1d945e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b509abb3-3287-49b4-9499-070209777e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e04b3aa-9dd5-4691-b5cd-0442eabed296",
        "cursor": {
          "ref": "fa23e909-5ae0-4b2e-9386-d064d41e4f03",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d8f44e0c-6034-4bc3-8592-13dd3ba6e598"
        },
        "item": {
          "id": "9e04b3aa-9dd5-4691-b5cd-0442eabed296",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ca86968-b306-49cf-b5c7-306ea11dcce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1255c96-36a3-4c2f-be59-a6764826ea33",
        "cursor": {
          "ref": "cbe910d0-edf2-4528-9d13-090ae58c0694",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7aa33673-78e4-409e-aa46-038dc692eb6a"
        },
        "item": {
          "id": "b1255c96-36a3-4c2f-be59-a6764826ea33",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c3a4fa56-53a2-4132-afd1-ae7beb1f3ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce44782-a946-4563-9d91-8fd9d12e8be4",
        "cursor": {
          "ref": "7f4b0a90-0a57-4b26-b4bb-caaac281dab7",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36a4e722-3857-47f1-b85e-b8fefeb65ef5"
        },
        "item": {
          "id": "bce44782-a946-4563-9d91-8fd9d12e8be4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "27ed1e60-75b2-439c-ba4b-4ba10b222d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f228079-2b12-41a8-bb11-d3bd29e7fff2",
        "cursor": {
          "ref": "26eb1fda-273a-404d-9ec4-20b94ca98f1c",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "dceb64f7-d563-4a6f-8792-cd73b71aa00b"
        },
        "item": {
          "id": "1f228079-2b12-41a8-bb11-d3bd29e7fff2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ea44c388-ef45-4527-ac25-81217f75f6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e207950-e94a-4413-af13-0fa5a0cb0a09",
        "cursor": {
          "ref": "a2521230-5cee-4581-a16b-daae70667780",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9fb3e533-d3d2-42fe-a61f-b2ae68824a5b"
        },
        "item": {
          "id": "0e207950-e94a-4413-af13-0fa5a0cb0a09",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d2f5994e-0038-493f-92b5-8d0c4a8009a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ec3d3e-4f2c-4548-b03a-cee46dd64378",
        "cursor": {
          "ref": "1efc1178-a24c-4cd0-9114-417565c7e98f",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e7e81cf2-67b4-4ebb-a44b-9e240461a0b9"
        },
        "item": {
          "id": "31ec3d3e-4f2c-4548-b03a-cee46dd64378",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d892d500-cab5-45a3-b2b1-47db034c7ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7891f6cb-543b-446c-a92c-8a7776938edc",
        "cursor": {
          "ref": "f1eb49f7-12f8-4abf-b6de-2187b0a29ab5",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3a7911b4-9632-4c57-9f67-cacfc3a2a8b0"
        },
        "item": {
          "id": "7891f6cb-543b-446c-a92c-8a7776938edc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f5caa2ef-9cb4-46f9-8ed1-1549f9fbebc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedf6c0e-7506-4e4f-8ad8-49c80e66a0d4",
        "cursor": {
          "ref": "71d3e8ee-b77f-4189-851a-39141a833206",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2160a782-46cd-4612-a0bc-367006e8474a"
        },
        "item": {
          "id": "eedf6c0e-7506-4e4f-8ad8-49c80e66a0d4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "aebd5d10-2f73-4357-910a-6aa0f5101846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c78f155-c83e-47b5-a847-a35103591fe4",
        "cursor": {
          "ref": "11122294-23d7-44a9-bad0-c0f44db24a0e",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ed93640b-7146-4f4c-97e1-351c91aefeac"
        },
        "item": {
          "id": "3c78f155-c83e-47b5-a847-a35103591fe4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "89f8e459-eb55-4fad-b20c-a9415897b4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e314f08e-7ab6-44cf-9f30-5c76515f1b66",
        "cursor": {
          "ref": "4536a9b5-6007-4674-9858-38a7b0d3d5a0",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "66ba66a6-0ba4-4453-8f94-74bfd1129c0b"
        },
        "item": {
          "id": "e314f08e-7ab6-44cf-9f30-5c76515f1b66",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "df50da8c-b5ec-49f9-9737-636edd2225f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3520a853-74a3-4cd0-9bcd-ac814b27f4e5",
        "cursor": {
          "ref": "61ca2aba-2ae6-4f4e-afcc-c3beff653013",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d37c8c92-7b7f-4a96-8792-dee9e39a31f0"
        },
        "item": {
          "id": "3520a853-74a3-4cd0-9bcd-ac814b27f4e5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "28ff9d93-9da5-4170-ab80-0cbecbd67281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9efe25-ca3b-4980-bc15-fbd475cb3bfe",
        "cursor": {
          "ref": "4f96efd3-c252-4f06-a1b5-978879e36409",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "feec9ac0-1220-407a-a983-b4833cd5bd2b"
        },
        "item": {
          "id": "1d9efe25-ca3b-4980-bc15-fbd475cb3bfe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "99d321b8-f7d2-407e-b44b-f91c9afe0d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7063f220-fcc2-449e-8b25-4d66b2290745",
        "cursor": {
          "ref": "425548d9-a910-47d7-bb1e-5635adfcaed7",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f62e5439-75ea-4fdf-91ca-44ba72cf9b38"
        },
        "item": {
          "id": "7063f220-fcc2-449e-8b25-4d66b2290745",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a1509963-cbe0-4fba-bdb1-b9fdb3d42b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d715f7d-cd10-4d94-8680-c6fb2cbbaadd",
        "cursor": {
          "ref": "c15394ac-7767-42c9-873d-3934ec5a12fa",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "09f58f96-3306-4950-bc5e-e659cc031e21"
        },
        "item": {
          "id": "0d715f7d-cd10-4d94-8680-c6fb2cbbaadd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cd9a23de-c45d-46ab-b851-2eec582feef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03e71f2-ec52-4e49-bc08-89dfe10088f7",
        "cursor": {
          "ref": "02a6d327-ef2c-4bfc-b98b-62a484465014",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0a4d021f-2912-4c2c-8353-74e5eed7efbd"
        },
        "item": {
          "id": "f03e71f2-ec52-4e49-bc08-89dfe10088f7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "89eee166-3224-40b4-a82f-fa8ef4f3a4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7a432e-52f0-4798-9f38-622dede88e8c",
        "cursor": {
          "ref": "b0355d43-d8f8-494b-9a39-956f21537695",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9f9c597c-3991-4f46-a5a4-65813327f7f9"
        },
        "item": {
          "id": "df7a432e-52f0-4798-9f38-622dede88e8c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "56325582-c7ea-46b6-a2cb-fb1781f60fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0043717-f125-49bb-b5cf-4b41b9b94e8c",
        "cursor": {
          "ref": "ca8f04f9-cda7-49bb-b7fd-01a2f6720aeb",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8f21e2dd-febb-48ef-96e7-d757875c271c"
        },
        "item": {
          "id": "b0043717-f125-49bb-b5cf-4b41b9b94e8c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c6a054cb-bab8-48d9-a84b-830846a72a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2a1a10-d539-484b-bf14-5f4be0930130",
        "cursor": {
          "ref": "7d9770f6-9e49-4474-849a-29ce26d03013",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d5aa5a2-4879-4cbd-98c1-e6cc6c5ca27a"
        },
        "item": {
          "id": "df2a1a10-d539-484b-bf14-5f4be0930130",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "49c8e19f-272d-43b9-9b43-ec225bd83f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef43b7a-036d-4745-b11c-dbe69324b3f3",
        "cursor": {
          "ref": "471f9fd5-7262-491a-949c-17becb357f6e",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "efd174ac-995f-49e9-bcdd-147b4199452a"
        },
        "item": {
          "id": "9ef43b7a-036d-4745-b11c-dbe69324b3f3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9a2e804e-4dae-4b48-8167-241a8d457bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba6890d-dd1e-413b-9661-4e15627f8493",
        "cursor": {
          "ref": "de61e092-b607-4d6d-9249-008a0ff16175",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9595340d-7c4e-4e4c-b938-23372ecebaba"
        },
        "item": {
          "id": "fba6890d-dd1e-413b-9661-4e15627f8493",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "07f67bbc-ad29-44f2-92ac-216a6a36dfc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4288f50-3a09-4a5f-b4f4-70539c4c3a0d",
        "cursor": {
          "ref": "9dedb095-c305-4af7-9d86-4aed5a5332ad",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9ddee98f-64fa-4d4e-acef-caed9d207721"
        },
        "item": {
          "id": "d4288f50-3a09-4a5f-b4f4-70539c4c3a0d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9d6edf4d-21fc-436d-80f9-2c05bab74800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973bc714-6821-4918-99f3-863f7fe3013f",
        "cursor": {
          "ref": "36d4a473-125d-429d-a348-16062ede22c4",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b182d07d-5419-458a-a6cd-42fc12bf701d"
        },
        "item": {
          "id": "973bc714-6821-4918-99f3-863f7fe3013f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6a742698-6229-41e6-9878-246229be2c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c653e76-2a81-49d3-bfd9-82cf699b7b26",
        "cursor": {
          "ref": "70a82f89-726c-408f-bcd6-0255e907ceec",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "76a84609-d38e-4eb9-8444-1b7cde7a63e3"
        },
        "item": {
          "id": "3c653e76-2a81-49d3-bfd9-82cf699b7b26",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4c30b7c2-d933-44ff-85cc-ccb996abf67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8890d9-01e7-4960-96e5-8f8075e652c4",
        "cursor": {
          "ref": "293458c6-13b6-4750-9123-5723c1be9ae1",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ed330025-07dc-4fbd-9f2b-41121dca8d15"
        },
        "item": {
          "id": "fc8890d9-01e7-4960-96e5-8f8075e652c4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e785d256-85d5-4d39-95a4-bacd35b123fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c08a32-b87b-4034-8c89-989d23634488",
        "cursor": {
          "ref": "e1e3daa9-f6a8-4395-96be-6138321d7158",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7746cc55-2a46-491f-88e5-906ed2b218f5"
        },
        "item": {
          "id": "c1c08a32-b87b-4034-8c89-989d23634488",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4564519c-a97f-4fe8-9bd8-c3ee60f7de17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2826fc82-a3ca-41c9-9634-91196a7c6ba4",
        "cursor": {
          "ref": "d8bba7f9-8590-4879-9c83-7574b4a5e4fe",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "721680b8-79d5-4e87-8188-19cac7a24fbf"
        },
        "item": {
          "id": "2826fc82-a3ca-41c9-9634-91196a7c6ba4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1e7398b0-1d98-4e19-9b18-32bfe42e6236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889ded3e-df1d-4d91-9ebc-aa03562134ea",
        "cursor": {
          "ref": "b84bb023-2ce4-4963-8744-f41caf895b10",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0aa81c57-4999-4929-8f87-f96668c97453"
        },
        "item": {
          "id": "889ded3e-df1d-4d91-9ebc-aa03562134ea",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "440659de-44b6-4bb6-b61b-cd384fa4d08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa39491-0330-4a86-93e7-31ccd208ffea",
        "cursor": {
          "ref": "135f32f6-0a64-49aa-a277-1736df83c768",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c7dce7d9-98ce-4b88-bb6f-2fc09967cc72"
        },
        "item": {
          "id": "eaa39491-0330-4a86-93e7-31ccd208ffea",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae190c21-e126-477c-8db7-eaaaba098130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bf951c-a6b1-46eb-bbd4-53bb3290c535",
        "cursor": {
          "ref": "4cbaf1ac-e384-4d58-a023-186d7fac2581",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9614f55f-7fa4-4a24-9d4f-3119d0656f2d"
        },
        "item": {
          "id": "d0bf951c-a6b1-46eb-bbd4-53bb3290c535",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dc8e131c-a6b0-4e5b-b1dd-f2732780cf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebacb63-2285-4f79-bf4e-d8885d2947bb",
        "cursor": {
          "ref": "ae676d3a-85ae-40b0-b2ce-1591cfc4c444",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7ee10fac-eb84-400d-b42c-666932efba17"
        },
        "item": {
          "id": "2ebacb63-2285-4f79-bf4e-d8885d2947bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "99f4167e-9c32-48e9-9870-9d207cf8d041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bae95f-e8c7-4f31-bca8-10f3219337d0",
        "cursor": {
          "ref": "a4682a58-29bf-4838-8354-8dd554962327",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dda1300f-dfad-4bd8-8de0-eb6fdf7ce518"
        },
        "item": {
          "id": "b6bae95f-e8c7-4f31-bca8-10f3219337d0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "52f8d665-cf76-4eae-99be-7d958cf5134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ad864d-7ca3-4efd-800c-6cce43201b16",
        "cursor": {
          "ref": "b4f1930f-9c6f-454e-9a36-289a2a5ebbdc",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "438d9b7f-d094-4109-8c23-1f378b54f46a"
        },
        "item": {
          "id": "a2ad864d-7ca3-4efd-800c-6cce43201b16",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "15f2e579-c299-4071-8778-4ed8fb4f4987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635eee76-1036-4ba1-897c-8e30d1e74327",
        "cursor": {
          "ref": "888584aa-b107-49b8-baca-989e1c71792a",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "936b537d-6111-445f-a687-b948f4e41499"
        },
        "item": {
          "id": "635eee76-1036-4ba1-897c-8e30d1e74327",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3ce0e1bf-1128-4b78-9ce2-e6f0eadf9ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303af0ca-5fa9-4aad-be38-4f063db91b06",
        "cursor": {
          "ref": "6a39f92a-3283-4178-9f07-162573d57bc1",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "921a660b-20cc-4d7c-9304-a56e5cfad40a"
        },
        "item": {
          "id": "303af0ca-5fa9-4aad-be38-4f063db91b06",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "45ca8b69-ab92-4b1a-8ea2-3f658a04adbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb46e4a-1b36-4f03-91e9-9854aa05c7d2",
        "cursor": {
          "ref": "bcdd3db7-0066-42d6-8fd8-0de54ecf6d77",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1e679b89-5b5c-4047-b04d-05f435bc51f8"
        },
        "item": {
          "id": "eeb46e4a-1b36-4f03-91e9-9854aa05c7d2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bc2b3438-69f3-4111-a142-4007302a3026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666f49ae-a190-41d9-b1c0-3fc1f56dc1ab",
        "cursor": {
          "ref": "3f6e41f9-1ff4-4c49-bcb3-58b2167cc787",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "37d5d414-d7c8-49f7-bac7-d846c031f5ab"
        },
        "item": {
          "id": "666f49ae-a190-41d9-b1c0-3fc1f56dc1ab",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "aa140063-acc3-44db-81c0-9346bbcd7471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a1d4e7-1fd6-4724-a824-4a20fd5839a4",
        "cursor": {
          "ref": "70b3cf04-344f-4359-bb22-f49ff8d91c7f",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "12d34f8c-2701-48ca-a442-25a389e79780"
        },
        "item": {
          "id": "f7a1d4e7-1fd6-4724-a824-4a20fd5839a4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1c8a12b2-1b4d-4465-b07b-e3ac1d2789c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d8d046-54fb-44e7-b82d-98671acbe803",
        "cursor": {
          "ref": "f31837b5-c970-4cdf-b3aa-6ec101fdfe02",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f06456a5-261b-4e97-aa72-f7903a15be4f"
        },
        "item": {
          "id": "12d8d046-54fb-44e7-b82d-98671acbe803",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "26670549-1879-408a-9743-3437c468d5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd1d962-84dc-451b-90c2-5e7ae7c80078",
        "cursor": {
          "ref": "7d1341b1-83fc-4272-bc73-660ae9096e3b",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ba6b4b7f-9f3c-4cec-ab27-2a495eefeb4c"
        },
        "item": {
          "id": "5bd1d962-84dc-451b-90c2-5e7ae7c80078",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "717cddd4-1dec-4ecd-8852-9e00190c831d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17614b63-1f80-4b16-b2f2-d5365876cd9a",
        "cursor": {
          "ref": "601d4c40-c3df-48c8-a24b-3c1e7dfeb149",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "35600992-e7d0-4003-bfa6-fa778f3fb476"
        },
        "item": {
          "id": "17614b63-1f80-4b16-b2f2-d5365876cd9a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "25d999f5-a71e-46ac-a7db-ab8be7816e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e1f258-3082-45b7-ba06-27e59caf0c27",
        "cursor": {
          "ref": "baad65e9-b552-44ba-a303-a8b1f598f8ee",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fe21b958-7538-4b2b-b6f4-286441e89abc"
        },
        "item": {
          "id": "47e1f258-3082-45b7-ba06-27e59caf0c27",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "58168688-62fb-4151-902e-b01adf1af986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a5b612-ec1b-46e2-9f57-b2cad8ec410e",
        "cursor": {
          "ref": "03e025e2-a25e-4381-a36f-b119b62378da",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f939b4d1-db6c-4fcf-8db7-d0027a6990c8"
        },
        "item": {
          "id": "a6a5b612-ec1b-46e2-9f57-b2cad8ec410e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9c8db643-871f-479a-a480-870f232a3f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956dbb81-7d7b-4ffb-a912-66f030962617",
        "cursor": {
          "ref": "8cecfffd-672a-41c4-99f8-f40f9ebfedb9",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0739d34c-3064-4746-840d-add33d80cb49"
        },
        "item": {
          "id": "956dbb81-7d7b-4ffb-a912-66f030962617",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d3ee2d8f-e34f-4e08-ad0d-a1e14413f0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e903ce6a-3c2a-436f-a590-851e0d9110d8",
        "cursor": {
          "ref": "ec3b7ac9-16bd-4e6e-a95e-6768d0baad56",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fdd1eb0a-7af3-45ce-a928-3ffbfa41ff48"
        },
        "item": {
          "id": "e903ce6a-3c2a-436f-a590-851e0d9110d8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "eafb671d-381b-46a4-8dcd-32482cfb7edc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5eb0a09-f19b-428e-a3f1-e79d47323832",
        "cursor": {
          "ref": "97553871-e13f-4757-916f-590778e29d20",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "debced1f-0e5c-47b9-9c1f-74d5b03c403b"
        },
        "item": {
          "id": "e5eb0a09-f19b-428e-a3f1-e79d47323832",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b87d65ba-93c1-40de-83b4-79a38083b41f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdb2e87-8969-4bee-a06c-f13b44eeeb9c",
        "cursor": {
          "ref": "bf3a49cc-4291-417b-b0f1-d164a195e6a0",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b17f9f1b-ba48-43fe-908b-15a1887259f7"
        },
        "item": {
          "id": "2fdb2e87-8969-4bee-a06c-f13b44eeeb9c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "310cfbcb-e495-4263-ba95-8cd58c632df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "b216a470-4a74-4a30-9bc7-f700cc7e8b29",
        "cursor": {
          "ref": "3610f39f-a47a-41ae-a522-50e198df40b9",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c0adf90e-3666-40bf-82b6-cd615d2933f9"
        },
        "item": {
          "id": "b216a470-4a74-4a30-9bc7-f700cc7e8b29",
          "name": "credentials_verify"
        },
        "response": {
          "id": "66daee23-5dfd-482c-a19e-1cc6eb8ae874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "aa590b5d-f67b-4e53-9cf1-591bd4fb30a9",
        "cursor": {
          "ref": "84afb06a-cc35-4859-b0c4-a302776bf593",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "45867ad3-2511-4227-8cbd-b3dce4024f9e"
        },
        "item": {
          "id": "aa590b5d-f67b-4e53-9cf1-591bd4fb30a9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "df3d95dc-7e3b-4a0c-bccf-0d2167a24eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
        "cursor": {
          "ref": "11e17f1c-f777-4b29-8d59-ceea763d3d46",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2f34c42d-2d50-40c3-a2b7-3cb1e284b446"
        },
        "item": {
          "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f5fc4a4b-d1a9-49da-aa38-358efd449e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
        "cursor": {
          "ref": "11e17f1c-f777-4b29-8d59-ceea763d3d46",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2f34c42d-2d50-40c3-a2b7-3cb1e284b446"
        },
        "item": {
          "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f5fc4a4b-d1a9-49da-aa38-358efd449e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
        "cursor": {
          "ref": "11e17f1c-f777-4b29-8d59-ceea763d3d46",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2f34c42d-2d50-40c3-a2b7-3cb1e284b446"
        },
        "item": {
          "id": "35cc7606-7ae0-48f9-8ce7-0eac78873bf5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f5fc4a4b-d1a9-49da-aa38-358efd449e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffb074e-2909-4d0b-83fb-b0091deb631f",
        "cursor": {
          "ref": "6ecbc634-4a06-44e5-82ed-8bc4b6dd3fd1",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "da347fe3-4980-49f4-aac6-fbccc3feee2e"
        },
        "item": {
          "id": "4ffb074e-2909-4d0b-83fb-b0091deb631f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "2edd75b4-018d-4e59-97d5-f3d74ce2b53f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41f9064-d06b-45ee-9fc8-997b4bac0b92",
        "cursor": {
          "ref": "026513cc-b2a3-46d5-ace8-2f93d925f78e",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "03c240e6-1710-4266-af24-d655fbefd0ca"
        },
        "item": {
          "id": "d41f9064-d06b-45ee-9fc8-997b4bac0b92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "df5f67ae-8479-40c0-99d3-711ab05bea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d41f9064-d06b-45ee-9fc8-997b4bac0b92",
        "cursor": {
          "ref": "026513cc-b2a3-46d5-ace8-2f93d925f78e",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "03c240e6-1710-4266-af24-d655fbefd0ca"
        },
        "item": {
          "id": "d41f9064-d06b-45ee-9fc8-997b4bac0b92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "df5f67ae-8479-40c0-99d3-711ab05bea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "65bc54f2-6217-49d0-902e-a80f34d51d30",
        "cursor": {
          "ref": "78b41372-5784-4ae4-a82f-f601598717ce",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "811a82d8-6424-4f42-a998-dfbea3a98eca"
        },
        "item": {
          "id": "65bc54f2-6217-49d0-902e-a80f34d51d30",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "70b8ee29-f12b-43ec-ad80-d0f673528c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "24614287-8db2-4114-9bfb-e339c7a0f019",
        "cursor": {
          "ref": "8ea92667-28b1-4c2a-a68f-7089b5c3b99b",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3ef15804-342d-406b-b125-e68a81f0ed04"
        },
        "item": {
          "id": "24614287-8db2-4114-9bfb-e339c7a0f019",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "905724ff-5d3c-4232-9012-cff1bc85d526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "24614287-8db2-4114-9bfb-e339c7a0f019",
        "cursor": {
          "ref": "8ea92667-28b1-4c2a-a68f-7089b5c3b99b",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3ef15804-342d-406b-b125-e68a81f0ed04"
        },
        "item": {
          "id": "24614287-8db2-4114-9bfb-e339c7a0f019",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "905724ff-5d3c-4232-9012-cff1bc85d526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "095dc29d-b04e-4c92-b90f-d087d5b83de1",
        "cursor": {
          "ref": "a9d13141-d32d-417e-83dc-03372ae484bd",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ca3498d3-e55f-449c-93fe-8c374704ad8d"
        },
        "item": {
          "id": "095dc29d-b04e-4c92-b90f-d087d5b83de1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d2620b33-194d-444c-9a3a-0dc02b05be62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}