{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c98bf164-6fcc-4eca-8386-565fcf3fb7cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3d1ae3f1-d22e-4229-85ca-d1c0589149c9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b23a9e38-5a21-4b41-aff2-ed46b686205a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a10b31e4-f804-4e6f-8477-bc371c4c6810"
                }
              }
            ]
          },
          {
            "id": "a08b9c87-23d5-4ec6-a049-007d858b9b3b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "130b6b4d-f194-41d3-bea7-49859aaad496",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7ae4e02d-c1ba-4e20-b279-1f5a1adabfd5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c088a992-02a0-4e9e-b7a1-781d707e4bce",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "22bfb192-a1ba-40a5-876a-dfad3bc69d16",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1848dc43-4d31-4aba-b568-f7655e3d380c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e08414d-a9d2-4641-9978-9e0b166aad8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6ed3093-86f1-48d7-a001-a2b62b1b646e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad7a6b27-8ad1-4085-9cd0-1605d437fb62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "299f8f3f-de85-4ce1-b0a5-4b6a0b7ce1ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3261aa18-4f77-4d63-b8ce-920471029f87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4f20506-7ecb-4af0-bb6d-00702c37fdac"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95965b9a-1120-4964-b763-f1a60907ba35",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a2d43ea8-5b0e-4b78-8ab9-744d6128220e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c07bc4b1-e1f2-4100-9c00-d45ed15eac37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63420d2c-cab3-429f-ab39-e04aff68ed9c"
            }
          }
        ]
      },
      {
        "id": "6cfbbc6c-20e5-439b-b6c6-c7b350957338",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0d85f73a-c7a8-44b2-9a2b-96daec594b6f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8985b119-9e06-4fe3-866f-efa026d6d1ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c93b2f6-43d9-4b61-8919-197067979509",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ae3eee-5078-42a8-8eea-40d2d74a50f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52735a38-2f6d-40bb-ac3b-2509407a7c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d3464d-5444-4bb9-8dbe-b94e8a4cc6ab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc9df02-ad81-47bc-bcb8-3ead8839d3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6d23ed2-ccd8-4306-b840-a5c9bdb73dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05af4d1-1976-45cc-a5e2-217e0d0a7ae5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ffe1b4-4655-4565-a6f1-e620581a21f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9819ef1c-4329-44c3-91ee-a33ce01c5cec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8588786d-1b46-4c02-b0af-a5a22edd4ee2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "173f9322-0b5d-4ad5-b9c7-9367def65925",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7824bfd4-c565-42c0-b755-00fd19f02b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8eb156e-ba2a-4faf-9cf5-df2f3bb7d243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cedbf5d-a63d-4874-9a6e-5fa0c2b1ca1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90917def-0ffe-437b-84ba-4930f57e35da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1afd69-69ca-459b-a313-7741ba15f39a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9ff629-6b7c-45e7-bf01-45c412f10251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a33ca91-b67e-4a28-ae19-18ea12e0bb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4785389-09f6-4d04-8618-4de330a48316",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d4dcc3c8-4230-4eb7-89af-98d25fbb417d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ba6e2117-f5bf-4da3-8fd5-5d785af3830e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a145bc26-5986-484f-a2af-1a7f30a442ac",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ed81a8a-3899-4133-80ab-b8c707dd917b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "05cc7c26-0fe4-4cb3-a227-883225357768"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7db05c0c-ab9b-476e-bef8-adf64f22b517",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ddd8a0a6-2ab4-4a8e-9e02-8d530e23539f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c29f72ba-7698-4bff-a08b-5763ca702331",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62a3e426-a3b7-4b65-b0fa-364d05ceb462"
            }
          }
        ]
      },
      {
        "id": "093f3e11-f03a-41f3-81f0-c94907bcbd51",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "afb62a87-9932-468f-9e26-ad3f45ca9ac4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34bafcde-cd55-4f32-918f-98197e75f579",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e92f38a6-cf2d-48a9-9b1b-512d23514560",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4eacaa-278e-42e7-be99-2d64e332aa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d402218f-e3a1-45b9-a434-f0bb8165de0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10be5a54-e406-41a6-93fc-6daad8bfbb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "796eddde-c87c-40fd-9cd0-071977fd523a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a5f4d6-c8f5-44c5-b3bc-191dc34443c1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b70f07-423b-44b3-a593-85580764f0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748a7155-4d2e-4619-8448-0a0f1fbd2944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1509e514-d2ac-48e1-a696-e4bca7a34922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37fb4c5f-673c-4afb-8862-5e438cb59d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c2c68f-624c-428f-8670-04ed403d8065",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71826553-10ce-42af-8f75-8bc5895321d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0dd6dc7-0cd5-4a2e-b25d-12e2107510c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387b4978-4c6a-4a89-8567-e3d773df228f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a74261a-6f81-429e-b7f3-84441548d089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2768a51c-7bb0-4526-abd3-6c9417f48020",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ec92e7-7b92-415f-9efd-4102bd8f790a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a266209a-1d9e-4694-adac-62572e22098d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f6a23e0-6079-45d6-9e57-4878ce40f69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ccc7781-c822-404a-943d-a4d4ef39a120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d431dbf7-ebe8-4342-b833-85664fa1c295",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92701885-90d0-45a1-858e-a0a531348f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f106da-4586-4084-9e6e-6de4ba3094f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7554bbf-0037-4134-a205-d4a2ee762b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9d4f209-a827-42a3-af35-77eee5e2aad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bd89b2-3a2d-4305-b71c-e3ab104e7f33",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3019dbe-2366-4311-a7e2-8ffed5c21511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "811810e0-583d-4ccf-bf2a-1bdf028a508c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241b56fc-2542-4fa9-8fdd-e4d68ecab7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e106496b-6249-4f64-9b31-9a7e74b4a75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56308866-2bd8-4d89-a6a6-8801eb3c2e04",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752b4b23-d532-4fb3-9c1e-25573d25ba8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a501e810-d6bf-4efc-a89f-dd5be7263a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fecf89d-1781-4dcf-9d5d-5b2b4439c2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a20d507-d241-4c0e-81cc-7f7aea5ec566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0ce936-339b-4a5b-9aa8-a5d3fd444ec3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab05540-e279-4296-93a8-4c3eb33cb430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaa997c-0259-47aa-8c15-ae2e8ace4033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af53ffd-ee77-46bf-8abe-33d03d7381a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb6627b5-aabb-47d2-ac96-3552eba364c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89bed07-6bea-4373-8d0f-df179468cc33",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec16383-d08c-4acd-9f21-af44d0318a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89baf603-b02a-497f-ac48-fcec68379b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed241481-7f2e-44f4-88e1-a8d2a3a2f45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc8c21c-f274-49c1-9536-f0b6d69c7bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a998e759-029c-4922-9f57-5ba47d84d013",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d3337c-2ddb-49ae-89e4-354eea964f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5727a3-c5ae-4014-a839-e2d6b71dbd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec43027e-4ddb-41b2-9463-4fd72a19c6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80b50d9d-9524-4272-97a7-997c724672a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2069a08-73f4-4d60-a061-b38477c8b884",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a87b71-4ac9-4546-a028-ecf39b174c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1c16f2-4e17-41ba-befd-d994e61b8085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4342d5-1fae-4719-99b8-d1e0b635e49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36e94364-98bd-450f-a16f-f5ef47fd02b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f383eea6-8e67-4d82-bbda-b5d0c5411b4e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1ef2db-5aae-4306-8933-0f5ccf294fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2ef2c2-32f8-4f07-ba0c-47ad7afafdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e02ea9e-0ac3-4cbe-9c51-76ed749ac2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8104f06a-36fb-462d-8f43-829b0fad0b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8977a4-1004-4077-ae03-67bb3ed7b2b5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7be45d-aca9-4f18-a14d-4d55147bb30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25ffba4-cdba-496f-9c77-e3e911fb5c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d028fd6-1897-43a3-a1b4-0ed62d6cc78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9677ccda-de06-46b9-83b2-1575df612822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce70cf74-dd87-408c-9559-091063ea3835",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7887ad2c-b670-4c23-8f4d-cdde9fbacb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2a6cb4-dfd2-4c10-88e1-a09224c1c6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6b5d49-beff-46b2-9888-b1299d7f94f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f98d85a-b258-493b-a457-7fb78a781db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ba2d5f-10a7-47c4-8c8b-63abfd2310ad",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5731cd42-1e2b-4542-abab-eaf46b011ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded97c45-0a02-4002-aa8b-53392e17d16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819078e7-9de8-4b69-9dc1-c537ddaa6d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cf09720-79f0-4eb7-960f-4dd2999f1798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb4f987-b6bb-4b91-b7d1-19f6dbeb023d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563656e7-5751-4f84-8239-e2bdcdf9f115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "011d2fe8-6aad-4a45-a6e8-5f0cc2b13569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d175bff0-98ac-477e-9708-e8b97d7a9630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f786a4aa-371f-40e9-ae6b-adf9dccb38c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a271205-3f69-46bb-9c46-914b989121d5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee9473-247e-4223-a3de-8e437631909d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58f69a2-f166-4e1d-b9ad-556c2deca350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525f0069-f04b-4341-a1b9-c1e256ecf70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcd859a1-6ab1-4f3a-be63-d1591d141c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864dbff1-134b-402d-84d6-f60445cfef6f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cdbb30-2045-4749-a752-329d7b67f892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f702e8-6a6e-4ecd-92f9-0e3d7311500b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90dd005-1a4c-4ed9-bbc8-8fdda3cf6c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06cccbb8-9ff9-43b4-8b0f-ce6e158c248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dc3b67-195f-4eb0-9709-237de4060e80",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937920b5-a0d5-4c90-98d7-6864235e5bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92969a2-328d-4528-a3cf-6e19662940cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a334f5c-095c-4cf5-ad39-65a7d0f0ed59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd466b47-e197-49ef-ace6-52bafec25eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429344b8-f633-43ff-8dc1-97efbf889efc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b00065b-1b14-45d5-85f8-ce63c6b05df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72a7740-63eb-401e-ac68-a93a09b48144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24924457-90d2-4a3b-98d4-a71f48582ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc92e929-64c0-497a-af75-626d2bb84526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98b0262-ed06-4ac8-b068-9b330e64a68c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e20833-7049-4b8c-9827-0c1783d2bcff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c51294-c44d-4f28-952b-4806de36cfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cd3ce9-42a9-4b7a-80d8-9adc162f079c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc85439b-4187-4b9f-bfb8-d7a1ccb1e2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab462932-ac73-49be-88c6-497763111211",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bb0d76-7b21-4c3d-a523-8e8f05f3ffe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91840ce-115f-49d2-a7d6-864fe197e764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea62ea76-71df-493d-9e58-353ca5997f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca5fc5b-69f9-4992-beb1-b561fa1a65ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54705392-62c6-454f-840e-8e25889ac83d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30a0703-72ce-4157-96b2-e8b1935d6b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e6e113-82fa-4662-96c3-ea93ac34d922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676b32e8-a29d-46f8-b3d5-477f03a52811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfbf75f-499b-4ed4-ad6d-27488d02b172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1db54a-7eb7-4df4-b046-4c01ab8d1a3f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67598fcf-b10e-4164-9fe7-9b6a0d31f09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950ac1d0-e312-4db7-8dcc-5f7c748ae6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc924877-4ffb-44e4-8747-61577e03439c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1f3151-c5e6-4b07-8ec2-091678f33be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047e8ade-f030-472b-8b95-f05452f87a54",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36667f81-b5cb-452a-9fa5-38b9a8f61400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650aeaae-2c03-4ac4-922a-7cd6aa433dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a20dd0-19de-4f6e-9f8f-4baaccae9b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a19718-404c-481d-8dd2-314f5125dbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3569b310-36b0-447e-ab11-fd6e0aeef81d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ca9c3e-741a-4be6-9845-c9b36aa63311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15335b91-9cf7-4e4d-bdf9-91c3e002811c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4780cc-233e-4e3b-92a2-6267470c5450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac67b3a4-7dc3-4556-b4ec-847b2f6df99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddec47a1-cb7d-4143-b208-7eb5fc1700f5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c4c20a-c306-4707-85f4-78b003a0a14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca086559-befb-46d2-aefd-6a1b5137684c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc13b9b-8812-4207-8e2a-231e96ceb8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "234e21fa-7ed3-40d2-b81f-4c29d27a4732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b46eb4-10c5-40d4-9ac7-083c43e2495d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3cecf1-e0cc-46d3-afed-5b40045856cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28869c1b-f1ae-46bb-afdb-754a13c030bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2baf5c7-353d-4dbe-9dd4-cf90b0d108ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "555fea49-6881-435c-af34-4e5dce7935b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8b7c5b-c26d-4c5a-8d22-ca4fbc3ae8f1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e31ee0-21a7-4035-a562-652e8fdd2ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46163d37-133e-49a6-aaa1-ef34c8b05a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797b4d2f-d2aa-4770-9c30-fbead1eb7145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e51f57fa-648a-4f98-b8d3-267a0b4863bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc76b8dc-445e-4820-8780-115ec27486d2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cda14a-eb71-459b-abaa-5c9427712d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fcd00c-94fd-42d7-8ee5-ceea1821cef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd402a9-95bd-46a9-aa4c-af58ca55b0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d77b3d78-3b9c-4c2e-8c82-bfaa6711f083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd4facf-a917-4d13-bb62-1c8f568273c3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27e3b0f-7f6c-44d3-b90b-a8e350e3f36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cf8f95-4551-4848-b0a6-76e21f6e86bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7938b5e-f7a9-4d08-875d-f3966ef865ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d91808c0-c794-408d-bb80-bbff386edf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7d7e9c-891d-4380-b1fc-4be652f47209",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfe97c3-c6c3-4ee8-9730-153227b68924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a9c86b-e854-48f9-9378-c0004c5175a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0436dc-184f-4e9b-8c79-3759968f5817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc29f215-1130-4ab2-a8ae-2a12a94612e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6283e9-fc0f-42b9-b595-feafea32d986",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d7e9c8-79c1-402c-9124-01513019d5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68d28a1-f33d-471c-b959-e6f05773f932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debfdc3c-95d9-4271-adba-cd0068ff857e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabe3ab5-b0b8-400f-8783-87dfa0c392b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad9fc55-e731-4669-9429-aa28fbe8e130",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1062f31b-2b1f-4e38-b81c-e80871ea0414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d949a998-44af-4d54-9d84-27d74c4f87c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc680a76-157c-40e2-a1e3-b776ebb0ec2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8be00b17-e05f-4e79-9889-7a31b42fa85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffa8748-a91c-4e0c-8a6e-7e1749767c09",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6de95b4-c87e-4ab6-886e-115033ff331d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaa3624-794b-4aac-beeb-6aeae32a2685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae1d937-2ad6-4357-8920-2a3e8ae3e90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eddf9092-af19-4dd6-8a72-2075a6eff5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ee6f92-a51e-40ce-a1c8-4b0e4faf7dc0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d051902-8194-4353-971e-f69ca6e2eb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8c85b5-1032-4b09-b00c-1f64c1521b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ffb14f-5cf9-446c-98de-8b2ae985d463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "903487f5-c2bd-4b67-b6fb-3cfa425ab78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e38511-5cc1-46af-80ba-1b7163d399c0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df628890-4037-4f48-ba5c-36531371c194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c204bd-2736-45a8-91bc-a839012d918a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48cfc50-abfe-45ca-a864-56b446f158b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "81d28864-536b-4276-9020-b8923fdf025c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdd47eb-1d0a-410f-a771-3a6c91e0ee38",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80992ac4-475d-40fa-8d23-4787c49620f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7f6948b-c3cf-408f-91f3-e64a63ea335b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b069354-7583-4930-b93a-024280d52cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8459c9f-ff03-46e0-bdf5-be801246f75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fb9286-1905-467b-9694-33fdca71383b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ace057-8d50-4afb-9f58-85bd9e728cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e26e15e-d808-4614-aae5-3ad1032b8f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1392923-0421-4591-93d9-707f24baed9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3f44fb-af27-4843-aa14-be3be7280f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27be11f2-39ca-425b-a67a-69a6ea1c4169",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2e5fc0-351f-428d-a00f-a715b09dbd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947d0bc0-1513-495c-b358-536b41558dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612e5fe0-9b77-47c2-9f18-f76d70ca74df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06729648-45d7-498d-9a89-0ec9b401452b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0e22b6-e8e7-4395-b5a6-693521f6eb7f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea0d895-07b9-4e65-8c9d-543859101373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25a45f7-8777-49a6-b67a-31cddb022808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0476e1c5-eb57-4f31-93f0-5457454195ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aafe9a0-ff73-458d-bcce-5271170bb19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009563cd-bfc9-418a-81d3-30113bb1da98",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82eeeb19-3f5c-43d8-9e9d-a28bc7a266d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd68b832-bf03-4944-816b-c3847fc54914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f3827-90ab-4530-aab1-f9f6b75935c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01453742-a2b8-47b0-bc8f-526d802f9ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e4e7be-28f0-4159-aba4-8c70ecdc6437",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ce77f0-0ac6-418b-aab7-791d068765e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e7d3e1-a8f1-4321-a35c-b495e4710e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e2e6b9-8047-4378-9604-f05f3177d160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ea5b7a-8ad8-4f80-9b89-1b9bd4e83a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5127f3e6-c0b0-4f15-8236-bca88e9dba56",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6b40fc-fa9c-46e8-baaa-8ea8a58db993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015b95a6-6237-4a0e-aa59-848a62a09823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcba84f5-95e2-41e9-b1e7-892f777bc8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b20d3320-5eb5-4bc3-b078-efc27028d2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb4d538-8609-4cfd-814d-e2de2c16e570",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7327af-2c6c-4ff7-81cd-a31f2bced2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd3de504-844b-49e1-93c0-2a1488933349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e9b287-9fc0-4930-8b2c-70983d71d2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "38c83e9f-e70c-4693-82ff-5b5af371179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "921e2c44-5111-43b2-9861-c883a225a1a0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12a2796-5447-4085-9667-b37a17626cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d0e611-7e9f-4cf7-bd12-4e2777e52586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df505813-1feb-495c-a106-1446569b1b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "af33b022-aaaa-4115-9251-a871b59bc8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e240ea-7793-43a9-8389-5e202b816fa4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e93a599-9ac7-490a-bb15-d0cf2823be97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ef6476-5b79-41b3-b165-17b1dbf9a31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ee491e-cd7c-4b80-9660-e09902b1dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dce8e7a-44cc-4dd3-b560-5ed3770fee76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd38151-150d-4b95-861a-18abe65474ba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9424bf-0deb-4787-8ed7-71c46a6b7f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05105088-87bf-47d9-83f2-a18ee2533d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4081d6-37e9-4689-993a-5683f178af55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84697920-ea63-4c82-b330-10cca0e93a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9c6d44-e7cd-4435-83ff-c8ca1d53ee35",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc61c11-d5e3-4aa1-935f-92b69cb9874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a1945f-7569-4ce0-919c-1f66afa2b5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673ea12f-ae7d-442f-b6d0-2dd8eaf2bda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf3306b-ab06-4d83-aea9-1d5b5832dae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed47ae4-b15e-4426-8acd-334e343987bd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9008a4a-45ba-4979-a92f-02271d348253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fcd790-e5bd-4ecd-8f13-c68597c336da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fb994d-b211-45ae-8508-77f4ba704c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "91c606de-6e77-4324-953f-5ae94b57dfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077f18cb-2131-47be-a8a6-a76dd378fe03",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047ed0f5-eed9-49da-804f-7ee854d99795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2cbe3c-6935-4d78-b3ce-790b3010eea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4aaa15-add9-4749-93d2-05e1ea105273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e81e546-c17e-472e-90ed-ed8352852ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3471665-4add-4230-8e4b-827dd7068f82",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59433f8-e3dd-4e66-94f8-a41995461ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623cfa22-2ac7-42e3-883d-6d926a7e1c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e893d8-0f5f-45f4-af50-e3f23413deb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9324e95-ca64-4e2d-b4c2-26a30561188d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba79ec5-8ea4-4c76-8bb7-3d30c2d3f8b3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86c20eb-e025-414d-8d83-a5c07a2ce94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f503d5-80c8-4b8a-abc2-6c440a4832a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646f0dd4-3ae5-45dd-8eed-8371dad5e793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab20d600-ac01-4c59-a42f-9af580ffe270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7cab7c-f62c-4a6b-b3de-f07f6c450f42",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74be3e2-f6ba-4c5a-89e4-43654135fdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d2189b-b201-4358-8882-2a426cb502b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94e4981-aa36-4f41-9641-f61232686e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e71a8c75-476b-42e3-b1b6-d1f4e56e8ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efa1b44-f6ff-4a83-a178-f471965ed2b2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6c6e5d-2202-406b-a3b2-b468ee034c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e941f81b-d7ec-4914-80bc-2a4f30abc8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbae1d3-4833-47e0-921b-de2fdc6e7eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ba94e9-038c-497c-b577-cb9235451a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4bde7a-b3a6-415a-9b4c-dfbf180b3a29",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0722bc3-e181-4ed9-a2b0-459e645d4d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bc5726-b7f4-4aad-a5d5-c4814ba701b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f849387b-4eac-4f51-9152-efe3339eec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7dc7d67-0911-4fcc-b91a-770dffc84ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ce28ab-3fc0-4bdf-bf7a-c0ec4d69bd1d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991ab4fc-fced-4038-9a71-b102448b5184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fdec4ac-b636-4b72-9aaf-7cad50d12097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4093881-56a7-457f-8e7a-783c22927858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1877e9da-0f3a-4a30-a04f-692ca5ab4083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc4b477-d7f9-40be-8441-415943289a2e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02a9016-ddd1-49a7-878d-45c4d26d6079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87d2344-9d78-4e9d-befe-3bb4a966e7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1fadd9-f8e3-486e-a925-147a61028a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ada28e96-8043-4662-bd62-4df074a92f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3b7dcf-d0cc-45a7-8af7-8b87d4ae4a45",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8924b46-c4f3-4fb4-b579-5fd1ef8a8f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d66166-69fc-4a50-b123-9b983156b48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36f1855-d4a7-49e0-ae80-cd3bf6269a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cea94ee9-4f53-4304-8ba9-17415002af34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b2cf13c-b882-4465-b814-49f229abbef5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e59a15c-bf66-44d5-b381-6f7cc7e74f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95021a7e-57ea-4bd8-b4de-ebe927f8b5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d5c364-c564-4724-92db-7b952d73855c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "306e810c-3ae7-4466-a06e-7b2a1081d4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485b7274-22d3-40d2-bba3-7cc8f15e78b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a7f04d-3889-4c58-af3d-27d1bd0c6e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464aa124-ae09-404b-8a0f-ffca8361659c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e7f10-ba76-45b2-88bc-86965028738a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af208441-8457-48be-9e68-21e9c6e0309f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b247403-f5d8-483c-8eb0-590845b51e62",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f126d6-208a-4073-99f3-1024d9860291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7ef58b-d26f-444d-a847-c2c2a3dcb254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1e25bb-848a-4929-8203-46e27575d54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2488d90-8b32-4867-8e39-5dabffc72ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f344b3-8e6b-4272-b152-f9f41feb8dc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e893393-b47a-4874-bb18-5699998d7e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3eb15b-292d-4336-8294-122c74d9a82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91242cf9-8f6a-4f24-89fd-f6f09ce9bd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "74cbef7e-c7ff-40d6-a1a4-e6d14fcb091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b99d6c-26ff-411d-ae61-7fbeffeff901",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43faaba-79ba-4889-9576-66e17a66430a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddfd2f2-2b0b-4d6a-8edb-4f8911414409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05e2a31-af29-4cea-ac8b-2ee306360c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9e0fe7-75ce-48eb-8bab-4e4c78edfa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e89de09-6397-4cf3-b04a-9a8f588ad9d1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cbce7c-0dad-4fd7-82ad-382c4dfd9f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b44dd8-2a90-42b7-aaca-41f006d4a847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c016cfc4-aaa9-4f69-91aa-047170d893ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd671ca-1654-4015-b040-7003dbcff9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a2780c-2255-45cb-8ba4-f1e3935966da",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce08e25-0c66-4374-8028-98fd39b07166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a4bfae-1173-4ee2-af48-d0b4dddd33a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eecb6633-4e82-4766-84e1-5a8d75f5d18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abe041af-c10c-4fe3-a7d0-3c29dce84498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad310ae8-6c46-44cb-8b9e-536e149a88be",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef35d173-b8ad-4d72-a18b-39800d8caea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07627a71-efe6-424c-ae4b-3241134bef34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff57924-c619-4b50-8243-8335fa2bc3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d1df33-c195-42b7-b58f-442e4fcaf68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b825d9c-9c0e-4684-b941-9f1ab23eeec2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5dbe20a-0159-43bf-b6ec-7ac1c3b1855d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc644204-1c6d-48ac-8cbe-7e8d2e2942bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfdadde-b317-443b-8a7c-041966ff9d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8971ec5-c453-443a-b2f4-b1f83b46d342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33990e8d-9849-48c5-8ed2-3cf2e43a7c1d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc2263b-57a2-4588-b345-72459f90d3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc8374c-ca26-4b11-bdb1-9770b9d4b4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f033d8e7-1ade-4cee-b86b-3c6d8139fac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc2e1fb-48b7-4413-83cf-e43efda49880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfcb4a7-544a-4e2c-9011-dc99e1011c79",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d06596-0415-4610-b93d-e2e3550252ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a02522-97cc-46b3-aa14-a0704a2b6a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb05624-0174-480b-ba8f-ac97054f33b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "936e17cf-aca0-41ea-b75b-d86af4fa2e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a5bc75-3d71-4da7-8c45-d0359228dbdc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec7a84c-d4f2-4c05-ae2c-9e5a025c1489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d634a22-46fd-4a8b-8b83-40db8dd5d8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc233c8d-8207-40f6-aa62-22861b8d6f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "16eb848b-5cfc-4ea2-8218-63dc7d05a408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1498cfde-94df-4123-9d22-2e86b49af307",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ba7518-a981-4605-aa84-57a1232143de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44badaa9-8123-4ce5-b349-276fd33b27b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4198e2ac-89d3-4721-9362-eee0b3f04ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8333031-c5b2-486a-bfb0-88b93b76fcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26384eb-5e5c-4255-ab95-95ae78ea90f9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02438122-8cf8-4906-93d6-4600f1feb7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcbce10-f209-4880-8dd6-bf6580838340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4450f93-0872-44a1-9fdd-02025d7ffa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62e18940-811f-4264-8115-408837c9594c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe422fd-948e-4399-a090-8b69f6dece1f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33381c1-bc82-433e-8fde-c8f111f0f20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1262f2-3507-4028-9371-4d82db38c6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe7bbad-5090-4bf2-bddd-ab3854d9b81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c798dde-a7e3-4044-af97-621748f13a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0545e5a4-87a6-45bc-9a63-0691eb9861da",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef34ccc-777a-4668-b5dd-a7e75a264da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b38f49-43b3-4dc0-bc28-bd8d3fa003b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fabe54b-f06f-4bb4-b6ae-f896774a6e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36c3b7d5-c111-4256-b31a-70f1cef0c850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd33e3a-47a8-4e16-8e00-b8692ed8dfea",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b40425-c098-4dbd-97ff-c88071bbf5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8246fc35-da58-4fb7-a01d-a87486857315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef6563b-67f7-4040-8a6f-544bf8ee702c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "913297d1-3702-4387-b182-945991227825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a6b167-ab5e-4bdb-813f-877e9b97e021",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5907e3af-55cb-4b76-88e8-36706bbaf9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6c6626-1f39-4863-93fd-eba7d5b30d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4501418-5740-4003-ad15-a5caf325e262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "606fc89c-30ac-4200-be5e-86e82df1545c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670306e0-129e-4491-bf58-f1886c5a0f6b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c9ed5a-ef5f-48fd-a4a1-f709c647b74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487396b9-9986-4511-a327-c136f722fd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb8840c-6a4c-4f81-a983-12e6387ed60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8308e110-c23b-4fcb-baca-ea08f64882f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc56206c-cc6b-4b96-957a-757e78b5dc7a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b274d19-4f98-46ef-997f-6e8e40d4a4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd10a12-0e25-4d8b-ae0a-1d4dc2d80df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f481ffb-ca8a-40f6-ad0d-17d82287d072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a412b7-d60a-4d76-a11d-8dda53003dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8df446-be77-455b-91a0-74b30442d35f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ade646-0e7d-41d1-be6c-e456727f0378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f64603-54f7-48c1-9d2f-54af8a63252f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8dfeb2-f9a2-4f15-bf0f-2e43468ea29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03797ec4-932f-40d5-8d41-5d5b39f77522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5911f8bd-7d98-44f3-82bf-0664be28c848",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e74e5f3-df6b-45c5-9c89-a220dd1be6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa28cc6-5048-4e4a-a3f3-2de1085b0bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a015cb-32a8-48e5-858f-6d18901411b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f6b112-2591-466e-929e-4abb006b3830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef450408-4d32-48e7-a9e9-a390c75895ff",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d337dcb6-f4e9-4970-b97c-a7e88558e7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3558e8-98c1-44be-9476-2e1a95fe0336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17774e9c-2e5e-4ed8-ad22-92ab58d46506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff171a2a-8f5a-4723-80c1-ee5e26512382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b968605-4eb3-412b-8f71-c45dae00f50d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6937f010-6ec5-4a78-8809-c8de3a08398b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779a70ce-b847-44ea-a938-b43496b385d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0963325-7a64-459d-9ad7-26e0b8d4560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b02dc27-b00b-48ad-b2c1-a6601833f604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cd36bf-2f5b-4fd2-8324-1b6b1047904e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d07372b-1a85-4293-9ade-a202314cb944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647deebb-0071-491a-a718-24a8b59a9bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feee6be-48ae-4832-aa11-18539d3b5be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "694e96e0-0180-4fec-a422-e9f69f860125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b8d0ae-103a-47d2-b804-4895f31b6c18",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4626f68-03b7-4902-9854-4a62299e0c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae4da8e-087a-4c13-87bc-06ff809a84a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11add538-395a-4f78-94c3-9fddf5c300a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70168fd0-9263-4640-9a21-cafe984849e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056e01fc-b0a9-4bbf-90a9-f15a3debc209",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d66453-05f1-4db2-84c9-35e8162d545c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c288756-51db-45ff-823c-b8aa53352ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fb89e8-2618-4490-84b4-3a2d4a0faf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d0e3bf-ed44-42fb-a634-07fc7b71bbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce65b971-f29b-4ad5-b35d-2fe73cacea59",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc6b973-9d5c-408c-a229-3d780f3cda7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b29d1d8-f6d0-4d36-9e69-147979538217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18b019a-c4f8-40de-b8d8-88fdab1e02ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6075f6a7-c44e-4218-aa48-6bf161b41c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39cee96-af57-404a-b866-26c85bbf65fd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f712aeaf-02ba-4b78-8342-b6d40c449c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db08aaa-e5e1-4572-a17b-fcd0572b0ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4a5249-6644-4dd7-ab8b-03df6ef45563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0dca13d-f5fb-458f-8645-042f351458ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b791c0-5cb2-4d5a-8f45-e2b55e8d6262",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae381f90-88df-4e8c-8925-58549e4e37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7cec7e5-a232-491d-8a7c-b4ef0cf246bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e190bcc8-ebd6-4b37-96b6-11ed4300c927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a842b29b-7e87-45fb-adf6-9d112cc544ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ae830a-0b2c-45e1-803f-fedb098e4449",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af693e67-fa0a-4a8c-9ea6-f1dcb37a113d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d1917e-c3c1-4a77-ad97-b8ed6f19362d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fff0a5-104c-4ce4-82ea-54f1350c820b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af5d60a4-ac72-494f-a109-c4c0877b6092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7265ae34-1267-4006-a735-46e86653fd6b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa2ddd0-6cea-4ddc-a7bd-242be77a4206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f03603-397d-4055-806f-06207b9b0188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13feee83-7ac6-4b0e-9036-2023f4495575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a09c431-40c8-434a-aa72-1709dfcc7ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4922e315-6a48-43e5-a4df-8dc3f8068d60",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518dd75d-0ad0-4cb2-be7c-3c689f3431ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9530ac49-b0f9-4715-bfbe-7854127fc732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fe63d6-3f7d-4d21-bc56-c5ce6b33a1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5dd784e-cf85-42cc-b147-0157b8131fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8d77e3-11bd-4a0d-ad29-ec41f3120f8d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe2d251-54ea-4735-8f6f-3be28743f404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3659b4-c65b-4166-bd8b-ef529cb88243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de02e7bb-c443-44ff-b1bc-5865b17ce50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "edace14f-490c-4714-a52d-9499a3c19fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989f7e09-2ad1-4c65-83b9-fc27e67fa430",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e1474e-f18a-4b40-8b56-1e39bbc87233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "25d27bf3-ad53-4949-afa5-42d831025521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7162185-5dd3-4afe-927e-0043ec80a2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae4df4c-00ed-4fac-9b30-36a25bf31de9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9daf7e90-3186-42db-82bd-bc65f6894702",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee370461-8413-40fe-bd79-7a180f2b6fa6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c12aac-a459-4005-95fc-163d57447d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e0ca906-3deb-43c0-9110-3225dd217b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bb8cea-c0e6-44e2-a5e2-31b96b2884d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2647cdbb-20f5-42d8-a774-1df4c29e0f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948d7e2c-418d-4ea9-addc-d6dd9816f2e4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7bd6a6-9ce1-4e83-ade0-32e0fbbf4b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5095b531-cd55-4aa9-9899-7f3599c33306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88af661-3649-471c-85a5-3717646e9f7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1248a7ea-6af2-4330-be1e-f60439f40414"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "041e10d1-b346-4b01-ad04-032f5c1a305b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80600ac6-c49c-4feb-97ab-faa7c1a6a9c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99ab2232-73be-450e-8e38-94fb16a73802",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "898fffd3-1a75-40bb-bbc4-093162edc114"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d9da8f9-8b32-4de3-952b-4c71b8c035e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61298ffa-dfa1-41fc-8654-32c80482adbf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1b61a37-2a91-44b5-9bc2-0f00fa1372b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "66cc9af6-7f61-4cbf-886b-d9f2c85edce7"
                }
              }
            ]
          },
          {
            "id": "e61325b2-9c8d-48b3-a425-ee2c8d452e05",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9b173a70-64e8-4a3f-b4b8-d423916d3ffa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dfd2676-2941-464a-b530-a194ce3b9695",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fec8eb25-cb88-481a-94fc-09c9ec954f8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d757dc7-2d93-4f8f-b7ad-0aafda12e1ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "851bd7fe-eacc-4b04-8131-9cf0ce196705"
                    }
                  }
                ]
              },
              {
                "id": "959e2de9-03c3-4a84-b443-c838bf36595d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "275f3f93-7e17-4b99-ac1c-8916e999ef53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de5c31f5-268a-4c59-ac20-3842fab3355d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "573567c1-603f-4d3e-9fa1-8f88669678ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4d92992-79dc-4ed4-824c-85d4b781fd36"
                    }
                  }
                ]
              },
              {
                "id": "4aa5136b-d89c-4425-a0f8-b8fcbbe479bd",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7eacc9b-f270-43b6-b6f2-3364f013b302",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f0bdc9c-ed1c-41fd-999b-330fbeaf17f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0ec4f3c-efe3-402b-94a2-c36b0d1fdaa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d24bad27-44a0-4a3b-ba5c-3a53a822cd86"
                    }
                  }
                ]
              },
              {
                "id": "60132039-49e1-4c62-a1c5-2bbbcf1bb892",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bcaca2a-8789-4252-a194-7d5b5b7d62d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84e584c4-fb59-42a0-afec-474da6f5b163"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f55407b-6ab0-4a96-bba7-98c8e1865159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b63874ea-a10a-4b14-8459-834d39a869e5"
                    }
                  }
                ]
              },
              {
                "id": "65576653-e41c-479c-ad40-a046646b6884",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c23f1a53-3294-412a-8c10-4e64ee82d858",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8fe296fa-74dc-408e-a4fa-e48933d78626"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef292a15-d3ee-4fe4-869e-11bd2b523185",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1771834c-ae33-4585-9b7f-0295486138c3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "464b6fa2-3710-46c7-8539-0b4eed327b83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b933c78-38b3-4a5c-adcb-de312d17576e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4a9cc4bf-f9db-40da-975d-441a167588e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6213445c-8292-4425-af9c-0a979bf71779"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2833438e-28ed-4a53-9781-cec706622b97",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2fd8ca25-fd77-4688-a220-c935375f9e94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92f314f0-5c83-47ba-863e-099e450a98f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9247cb91-a234-4295-94c9-ea28b4f6fc4b"
            }
          }
        ]
      },
      {
        "id": "443354c2-9d5b-486b-95b9-321e2bb0fdca",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "27551dc7-83b9-4ccf-a037-411e2c206daf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d739017d-4030-40a9-9df0-71587fbcff68",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b4ab5445-a91e-4ef2-8bbc-92dbc2a772d4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b243624-7326-4cd2-af86-870f4e169f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec70c047-0e27-4fb6-9f31-72114338a727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac4e3c0-3040-45ed-b758-57950c6810ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7897e13e-9aa1-4dbe-915c-d7e54edd1c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6180e23d-e97a-4deb-9186-52ee7282e096",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cf014f-00aa-4898-871b-a911f1c471e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e424eb-d1f5-451e-8088-6e949ddac5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36a632a-5338-4159-9fb9-027a53d142d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2657332c-f1d2-402b-a5ac-f958d96e3178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a8d160-685f-4963-8d5c-4ec212df70f5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb1ceb3-c2d9-4e03-988b-78142297f67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ca20cb-43a0-41ca-ac0c-da8f597953d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8683121-5ffc-4651-82db-9379a8c73011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b295565-d60d-49ae-bc74-f46d0d7f9244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b1dc87-3449-4030-ab8d-230a275ee391",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96f5082-0bb6-4b68-afc0-24a245546f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62f980a-ef73-4b30-8ee5-ad152c45b0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf69956-3e44-430b-840b-11b3a490ddd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26b58d4f-d72a-435a-9a05-6c8254190195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3098799-c6f0-4b84-a49b-769969e14f6d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb68ff3-4531-4fcd-82d2-2c22bc14d10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa64fe94-ed51-42a1-bca3-cee50303ca87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01eb0774-687d-4390-9b2d-13145a8379b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe79c219-fd41-4472-bdf6-b52052475e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df5b951-0253-420f-bd3b-c110cf96495b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdce5202-26b1-4555-a4ca-82b5d7c395e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079b49e7-d37e-45b8-a21f-c033a8ad82e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7a82ce-7caf-49f7-a57f-46186f40ad95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb343617-5fe8-4012-9eb3-29933bedf2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db75f9fd-6512-4217-ae3d-6c6879bbf52f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744b3505-5ad5-4569-ba49-2e20f1722c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddeaea5c-5699-49f6-8629-f530ab8d590c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d760ade1-eb66-4853-891b-ba5930d4ea93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "09c8bbe2-9427-4d60-a3ec-f430f98c5ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691a2702-5cb8-4055-be53-68fe585d5fab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390fa006-a6bd-4a9c-84e0-2ebb6dbfeeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704c302c-641c-4ded-bd1f-c8bc346491ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c78257-f84a-48d0-a73c-82b657da7719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0043e512-3cd8-4b64-9f32-d2a33905ceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71844de3-246d-4432-a347-94f8f1ada2c0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64e8656-c764-4a56-9c1a-b01817fa582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c67abd-41c3-4c83-b7ca-042be941326b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb08d0b-11cc-401a-a86c-1a6e30131c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca8eb3e-4b44-4276-9e88-ab2e42192df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555e57e6-3828-44da-bd23-102c2f5636a3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3306035a-8ce1-46d3-852e-d80809102a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f0c379-e666-4a19-8a43-6f04e1859df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb01274-50ef-4ebb-9fc6-04179f963ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d327caf-a784-4b62-9c5d-27be966c79af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b08521-2aea-43f5-983b-358f4d1a9b88",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1017e5b3-2a19-4d90-97f7-0b77f4d3203d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be507f8-8fef-454b-9e15-0ea4b3ace4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859a70d8-ad3f-4397-8198-db4e4fcdcd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa933d9-ef10-4169-b979-9983b36940bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92daf914-e1e8-41ea-ab49-be25e73dd8ad",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a1a32f-d1c2-4f47-b8f2-55c70f7ea78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe7182c-074d-4323-855e-340cc59f929a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde738b7-9737-42a6-8d74-0620fe2a0e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72870496-8f5c-4a5d-8a74-3ba067c90be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef24a101-6f24-439b-bf34-4e1e7433d34e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf01be9-9e15-409f-b283-7cadd3b1a345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c07a114-c278-46e1-ad0b-501374fb3f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b600e1f-241e-4646-9dde-2f456a7064ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7a12ac-92c0-4218-b014-5a92f8e6f8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43dca84-e536-434d-a1b3-111401fa6fa7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a935667-3e9c-49c7-84a3-0e8a0b71266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ec8d83-e132-438b-9a3e-67df9105475c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf29485-061b-4f7b-860c-efad3270e4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77d3fc6-acb0-4a93-9ec8-ec1cd6dd2a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c264c344-3e98-4dff-8ebf-bc139d3a6e8f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "981e6329-cd58-40fc-96b1-eb2929c7ff66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cd54a9-2d7a-4a40-b398-2e12ab1acf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff1f2b0-ea35-4e74-bb0d-82324c9ef365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8adcbbd-60b4-4019-8276-a7054a2b6780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d7718-78b9-425b-8ed5-a7851cb5371b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fbe45b-689b-4b5c-bb95-cd9d076add2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb9ea51-357f-4489-986c-3ba154498236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034dfe88-cab7-422f-8f71-aee3d9a79b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c24f2757-5600-4da5-8fc5-81debf4b1f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063fa874-0371-4b18-b92f-871881197637",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48c64e0-90fa-45d8-a39d-44f56346279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8bbddb-2608-46b7-937a-adcaed7e8bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7050f696-9620-4d67-bb25-27807edb847f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e754069-32c2-4c28-83c1-3193472cd28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f67882-0048-45f2-aef4-e6a7e2e917fc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703c30a3-28af-4b1d-b755-099d2399ee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1beddcf3-21dd-4bbc-b2c4-96b9ba4eaaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253f351c-279e-48eb-988d-59d31fde5428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3fb034-fc9a-497d-8cbd-c0b078497020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc91b10-ee67-49e6-a517-551d5fef912c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791cc6e5-9222-4f8e-a0e1-e15a966a4a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fdb43c-fa0f-4695-af23-61460398096b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b509bae-0245-4791-9ea1-1ff0b7969610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "994a7eae-86b4-4e47-bb45-68f690a5f05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6852fb1-6005-417e-9375-4e314bca0d17",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ebd767-41bd-4016-93ff-72947be86a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90511f0a-9ea7-463f-b8ae-7fccec4f87ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec23e9f-0090-468c-ac72-ec097b94fb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd1c963-79e3-4fef-92a5-b80a3f0dbd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac3b2c2-c22c-4321-be48-d60d3841f2d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a00fa50-d709-4f20-8ed5-893780c0daf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc956a82-ebef-4d88-89de-ad4a1e2118af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a63d3-29fc-4d14-a816-2ce618a25f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e855df1-536b-4da5-aac3-db0feb4e2c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1926f19a-8be3-43bd-9f26-f359831ee777",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d8c019-c0dc-44f9-b099-359298176774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8f9d85-b4b6-421c-b194-58013f2f2efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b994168e-6a07-4dee-be69-4623b7611f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e837f652-c28f-41f7-8a68-c4cd65c76be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef5b236-a59e-4920-801f-cebf93421384",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f777ab-236e-4764-b100-91a6f228821c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4e6a15-1e52-4fc2-a453-528ba04e64e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df9938e-a1fc-44dc-b6b1-76091adf7598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3941176e-1298-4abd-a9ba-36bcec08afb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1074e87d-fbe2-4c73-a9c1-408aee4bd6f2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2200558d-60df-4b8c-9298-f44b776eb62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4d4816-f1b7-49f8-9b4e-fbd156b22235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0321d2f-d0aa-4b7c-867f-5aa16796c5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1351e5ac-b085-48fa-a6e7-1aa7b9debd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2669df8-963a-42b1-93ec-7f52a2a27f4a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5b78d8-2e05-4fa8-97d1-24ebb9e26d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b641c8-9c1e-4c9a-9169-8513e9671c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a088b96-8ba2-47ad-ba37-89ea8e092f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f670bffc-7c50-4ad7-88b3-94cb6185424f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d72952b-f380-4343-86af-80c8786f2389",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61d8b78-b96e-405b-b5dc-211f089a931f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c78946-3b1c-4ef0-9004-84c06e064ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059f3281-0ab5-4077-9591-2c011b34fcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d80f40ab-bcc7-4b54-b429-e16632f5b317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6d3d78-cc11-4614-b4ca-e7124b482c7b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da730122-4815-4f77-bd87-8b900177553a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee22ecc1-4b18-4307-8fc0-6e4113b6621c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732f9d09-e056-432c-aee3-823e8ad2437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "407ba081-eab6-46c3-a101-e53040f22aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd102f8-f544-4d46-9aec-b5f76b9aa9b2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08b1562-c754-4574-8178-260f99e47c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7b001e-7e96-4f19-85a3-4aa63a94f75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b3c234-97c9-47ae-9bb3-c53bd751b8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45d7c55-5ae3-4ee6-b092-788fb9a1bf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a80d721-dc93-4d63-9192-3b398d224114",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8ff36e-6050-4db2-9fcb-eeaa2f6d7a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36473a4c-fba1-425a-bf27-a2cc33956c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cb6f34-a859-4ee3-abfd-441a50e39f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "facde09e-5ae0-4fdc-bff4-a058d301250f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6bb4b8-b727-45b0-aebe-eb2f6f2e9249",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f8cfb3-5f7c-4e88-a6bc-7fccbe5d8b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4aeba0d-0c87-4090-9a04-97b3ea9bc4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c6f505-d06a-4141-b327-9e02dc994e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf6b9e2-f196-491f-8fad-76e35c369d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b687c0ba-84a5-45a6-8632-9f8da78a59cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1ae494-555f-445d-8fdb-e8833a532dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0167920d-c8a0-4798-b5db-78744c32adf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492e01a1-7031-42af-bb9f-f0b2d417a961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e333e-f1c9-4639-83a9-646e9e56f43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d81d6ab-15d9-4f66-a12b-5f4546b5a96c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd41fe2-5a89-4ba5-aa10-de78f95e72ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4bac1f-3ec0-4e80-81dd-adcea7568143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381b51d1-9e7c-4e1a-94cd-2000b59bba50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d39dfe-f903-4234-bfd2-08657745f745"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea8c2abb-fa78-4fe7-bba3-bc90b53471df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9353d743-4633-46e8-b1bf-60b2d53d9371",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05acdc0c-e2f2-402d-b713-c3d799c25438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b64067-e388-4c3f-9ce6-7b7567e482ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830bbf9c-8dea-45f6-92dc-912a7656bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17943c00-1a95-4bc5-b876-53455eb6d8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f42f83ed-c826-491b-981b-666c72dc9acf",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8547b80-1d4d-4b6b-b54b-db29b34e8e8b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f95dba15-e3c3-4804-95de-f5d5b95921c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bcbb8a-8b3f-4b02-b3c4-f0001cbf7f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "653b01d3-9006-4935-bf51-feeeadd70542"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f032cca7-c491-49ff-9f9d-53bab542ed84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bb778b7-ee1d-4d31-81d1-97edabd8afc0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b314601a-fa41-4c0e-b0d3-36de74f5856d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e6177f2-f265-44b0-8993-6faa3731e724"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e472e091-5398-404a-9c5b-50e3e8cab3b5",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ce59bd0-bd29-488d-ad51-e808687f2071"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddb03866-8309-47fb-9cc6-006987851572",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe1b6dc3-f697-4d0e-ae15-d92cae852ea1"
            }
          }
        ]
      },
      {
        "id": "57748cc2-00be-4632-ada6-c88d6d2dfb9b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ffa546cd-38f5-433b-bc63-3b79dc183680",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14d00d10-2d51-4122-9ca6-0e2675b1c77c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "703939b7-d0ee-40f2-84e1-d8ba11bd989a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b776403f-ffed-4148-aca0-3bdefd0cc4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4d2050-cbcb-42b0-8517-6f793a385605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e89e3ae-8fc7-4569-8a94-5a7a373e3b28",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc32d12-b756-4e40-a12c-739337361a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3d6024-c20d-48bc-aa3f-8a76bc2cee39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4ee679-0ccc-4e7e-81fb-0e86808000bd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83663ff7-9b92-4434-a673-cafe2b527a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c299bc74-0d15-4d0f-91c2-28f7e8fa883f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100ec856-9941-41af-9abd-1f792cc01cc5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c3bf19-e671-4df3-bcd9-067c71f6ab2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48731bc-6d56-4242-bd0c-fa791b96960a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5746d1-7133-499a-87b2-0c8204a90ea9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73be3787-5031-41a0-a74e-340be69bd959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f434bd-178a-468d-9c46-079f3e87226d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1075b0a2-ad37-4c99-a398-7a91f3cd6980",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c176ecd-100e-4807-85a1-05f4944a3d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11b3a33-d36a-4960-aaeb-c85bba33e1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1590ceb-9b34-4f7a-a821-59a37cdc1dd5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acc015a-f454-4c5c-a90b-4f9846ac8676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb53aa8-dfd8-48f0-a78e-d1daefd2eb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ce4bbe-b90f-4365-904e-d754c05c6c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945c7857-1f78-4e98-8f3c-7e7b3fe822ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ae7eca-0086-40af-a1ab-a37af327735a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba3964a-0c8f-4f79-906a-93f1e63d5653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4bd7b8a-25e5-48fc-87ae-ad067580447f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59f08ab-e4ef-4e20-a33d-1418535ae5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa5be74-c09c-4d21-a8a1-decf6889822c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8fa962-ef54-4073-bbe4-19d7f0328ea7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484162fd-0caf-4828-a514-8cd95c72eb12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce94de7-f730-438c-989e-4bb01dce4c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c84de7-0d08-4557-b23a-9bee719c525d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658bbe86-58d2-47be-9f9f-31c2431fc3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc752951-2dff-4889-81fb-473c64f8edb4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fe9753-3de8-4357-a047-fb1f7303873a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f46abe1-1d69-44e3-a9c5-0b90dc12bc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877c8729-7b83-490f-a4ec-8e40afad6a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2062fdbc-e492-4fa9-abcb-3becd8bf3fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec3fef-fa93-4474-9b56-085a36f02da4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e526f50-51ba-498e-8fdc-a3e6016f008f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116938a1-6c3b-42ed-841b-aa38673f5bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb98e51c-5c13-40ce-9529-7516911cb3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c55a4c-b1e6-431f-b88e-151c5be7ea3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a811f75-158e-495c-8850-7897a648ff98",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b756c9c6-80d3-464b-9615-1aba1272d8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac12c8d-0333-496e-a283-845f7635dd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323caa6-0ca8-4244-bff0-a14ceb837c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8d5a87-35b0-4b57-b3bf-7449116cb92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737900e4-a4cd-4729-9da0-c5c5b5f5f841",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd10d748-8673-467c-a94f-240eb7e87d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0035e84f-a87b-4e8d-8acd-1b64ff2d6bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e8718-6397-47cc-af03-75311d8e059e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6a6024-739f-4167-8946-c4efd1c12f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e98ae64-76b8-457a-b103-86dc712954f2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82cb91f-cb86-425a-a543-8d87d8cb88e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0281fdf-fe21-4097-9ee7-2bf4289ad2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53e0c0b-2920-446a-b1bd-995a35ea70dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f170e372-f75a-45be-aa02-ea2dcc62aa2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5111511-53cf-4c57-b692-a9e249b3504d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5856306-27e1-4a6e-9c83-6f244cf305a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25b9e7b6-0c33-4030-9e09-4a62ecdd945d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef763906-963f-451f-93a2-e513c7667710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c214d0-094a-48ff-a119-670921a44356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20554d17-f1e4-4e5d-80bc-0b7128687465",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a741d10-aad0-488c-b6a2-a201ca400f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1245d6-f6c1-4527-a55f-9dd952ee4067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4da498f-d496-4bc6-a40a-e0af74549e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1055cf-da12-4116-b238-dd531d11977a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f3d0eb-dab3-4655-a630-81f552704531",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66069f3-09f0-49b5-9f7b-ef0163589c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53399152-fb3a-4c50-8ac7-c850b1c70b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5f9197-9d20-4ca5-ac99-8da4c8d61eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9789e2-fa31-4659-8648-faf971fab94b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc179e44-3c16-4cc9-b959-cbbc4f2c7dc0",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cafb66e-695c-4f8c-8c53-b6c56b2b1262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ced877-7390-4925-a355-3f7fcaad556b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47da5643-a2b8-4153-b629-4efed97812b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c50586-363c-40a3-8ddf-1d8a7236fb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965b2fc2-dcf6-4f1a-a27f-0470650c5f73",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eece1dfb-9eb1-4b65-a41a-8a6c174508e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47751309-0248-4489-9bf1-e539eb721c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf5147f-3bed-4b85-b336-2817621b26dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed13249-f341-485c-8899-09ab266aa2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c953392b-3e4f-431a-a6f5-1d98802ae56d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868a6fe4-d090-475d-a2c0-ef8d9ec2e0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13cb28a6-14a7-49e0-9271-9358f7831815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d58572c-03b1-4184-981f-2450d31238d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e686dc9c-3aa2-4319-bc76-190eac3eb3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3769988f-ed9a-450e-ba6e-0690db73f197",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19834c19-29a1-4e52-81fb-5366cbfaf594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec125a2-2c74-414a-89c3-7721fdf24576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22aa1e2-2d3d-47ef-8bf3-d5367d2a14e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862ffdfc-7f9f-444d-9b47-b9ea0cc502ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ade6232-20a4-4f42-a7ce-6ae18d3b31c0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf37d7e0-2916-4a24-874f-966488356455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571d898a-18b5-4ee7-93f2-71ee0fc028df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b13166-6772-474d-80ea-0c78b19a5cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f90eec2-43c4-4d51-a3ff-b6bc0edbb9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f967e51-cbf8-48a7-b789-fee6d932569d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd99adf8-4c4a-4134-985f-568c7b2bf0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51fc6779-3fb9-474f-9b26-5ea189edc4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3f569a-7d7b-408c-b8b6-c638c30b5880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45da1aef-88af-4707-8bd9-e2bfbf3d84f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c259e0-6851-459f-9dfc-c7f6b1e28e07",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381993e3-69ef-4bdd-a51d-6299893c067e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16331f48-4f92-48f8-a536-0c2ec36d820e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f058b1-1187-4d5d-95b2-6580684a61ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9419ebb2-e543-485a-aa88-172ddd30d5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ef558d-6b0d-4119-9015-6ef894d81c4a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e9d113-387f-4bb5-a448-47279e861393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab61615-05c1-4791-a04a-eb2125bafd7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c908edf2-7946-48bb-a2f7-ad827dad0fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10bb57d-5d74-463e-8fa0-916ee8a43e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91376b55-ec33-42f6-ba48-470aad14d13d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4561f43b-7f2b-4e2b-b258-2abccbd166f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77e38434-6ec8-49ed-bf8e-f55d641f9b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e63d82-544f-4406-8a4a-64313f0f30ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574a529b-3713-4c35-95a3-994878937b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df078a71-df5f-4096-ba4e-1ccc28295868",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6bf9a3-1d15-4f95-bf26-1ae80a6075e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42a95d2d-0090-453c-a236-358679f86105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f48e772-9834-4e33-812d-6b2a4b542770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a353d2a6-015f-4b6f-999c-907e91e2ca98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9600e1e-d35b-44f1-99a1-a49c269c14f4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9650471a-fc3c-4190-8164-67bdc4a1054c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756c8956-813d-4468-8741-bf85ef6475b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181511b4-b3c9-4264-96b1-ba3b19acd22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baeffb5-d832-452c-bfa0-26704cbf62c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0c9c7d-f8da-4428-996f-157fc1ccf5c0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae06fd1f-caf2-402e-a856-518d79bc2e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594690cf-df94-4eb1-b3d3-bb55b33204c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2851f803-ddc7-4ef4-bf61-58da7248b70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926648c0-443d-4cb4-b255-ab273222ac2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6109432-7394-41a6-98a4-a1d599a48c30",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618b4bcd-7976-454f-b644-9bc26315ca48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6708792b-b2f8-4f37-803e-b9f7d1aa3f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760b7b55-de59-4b5f-b8e0-18ff1d4609ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5af1dcc-142b-4a34-bec7-9a8bf327cffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be37c44-e16f-48c1-8e52-1b048a6ecdda",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a487a71-55eb-4f3b-977e-c0b26d88e5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809ab867-1d65-43b2-b282-1a95af97ae94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02c8adb-431f-4be9-8f22-53bddfd1aa76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9cf890-6d3a-47a0-83aa-ad148aad9180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294d5af9-e9e3-4833-9e68-04e0703c4435",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4827b76c-0115-4a56-822c-a83a5ba1328d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b41823c-d534-4c84-a760-78df8a33d220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea9a476-3bb7-4ce2-a024-834d9a5785da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cf71c6-7a49-4f0a-80ce-6aeb559c2839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea4ecef-1970-4db3-9761-f25a653b4e91",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d35ec2f-5264-46b9-9bd6-e1bc3c73aeb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c142f9d-8dba-4037-9312-fd24f52c599d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f66f73-febc-41b9-aaf1-125966c871d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99bde1be-2292-4373-ad9d-beafbaf4775a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ef9d3b-c319-45cf-b5ff-0558a36ae4b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6a41e2-0b7c-4b2f-98b3-04217f859e60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39cadfcc-42bc-49ea-8a5c-c3601d198e13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980ed711-8369-4fee-953a-3918c592f566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c33f54d-0e56-491a-b957-1857bae16714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda6730f-1923-4255-807c-1861a1802785",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164ccd1f-e981-4df3-b9b4-f077d374026d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ec82eb-1a3b-4f86-8f82-22cfcbf2a25f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eed9458-8f31-4dee-b3fb-fc758e4be3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28adf46b-aa46-40b6-97d3-380bc68b6d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d228da9a-f129-48ef-9901-ef38e6ab6f6c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f01f27-ad5e-4459-93a7-229bf1d9ef80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3b7a80-ac72-4a78-9e5c-406cc6023976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f200115-ccd7-417c-87b5-393cb38aafb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774b6c3b-bfe3-430a-85c9-f8099b1fb33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1a699a-b351-4aa6-9274-1558c2e4f198",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d070f9c0-c277-46b4-b723-adefb1b59864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3435ea-b4f0-439f-861c-f0f282868e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd2924e-ec41-409c-80e1-56afe262adbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77db9c59-c3cc-46ad-ae6a-bb343896c1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7546e8d7-0f0f-4014-8be6-0bd133f80eae",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e2b649-00ee-48b7-a92c-cfcf405413e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77c48fe-c442-4803-8c44-39dd8cf58a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f3afc-469a-47a2-b419-bb5cbb0c2d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b739af74-d94c-4e21-92d0-53d910d15745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5844e74e-7369-4936-8419-0521f3c4e66d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58825916-b85a-4bcc-8a4a-a2d75c3d5dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc99f33-0e6e-48d6-8ec3-82c0c808042d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093c71b2-89f6-4754-9cb0-678a09559245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46532ce7-88e7-479c-9d38-8a017dea7161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d1dea6-b8fd-4362-96bd-b781be81e4e8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098952fa-b09d-476e-b023-85872c9305bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13750fa-bf2f-4940-a019-7b84ce6ef3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00dd9190-0328-4382-9ff8-a0812888b468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60135f04-bd03-4fe4-b448-477c10615ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634d17be-4e47-4d5a-b22e-2cd86d08312d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c00f338-e561-4dbe-a057-f18b842e284b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61ac5ab-b376-4a86-b15a-d622bfa58e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fc1656-66e4-419a-937a-6356c931ec0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8700e4c1-2c94-4f10-924d-0c96cdf491ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959578b6-3b77-4262-a68e-541c374fec5e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9a78c0-f072-4c55-a878-20502694511c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f070cec7-8a91-42cc-9384-b8bfb1b83f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1463e86d-056a-490a-8312-758e5dca2084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604022ac-056b-463d-a6f7-561fbaafc0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3a2915-4a37-4ed7-8d5b-9c1717c31a2c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e18614d-c6ba-46db-9bb8-fc6a8a387b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc39f201-d68c-48ae-a95a-8e8cc2cf0eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87601fd-1a89-431f-a3f8-87629fbafc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aed602f-02b9-4d6d-8786-71224eaefe7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476521f4-b9ee-476f-b0eb-b5d13c5dd2f1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c783033-de26-4cf0-9e0b-21090e5372e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5387e43f-b8a2-4f08-b61d-3f71cffc806c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8aecc90-460e-43c1-a31d-25424a3c7404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648c3ca7-16ab-4b47-9b1f-d51bd1019dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb28b3f-2a78-4c3e-8aaf-f170b051ed90",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba51e37-f01e-4322-920c-b902f56cb137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc494a2-aed3-47b9-aaf6-2fec12bb7e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a386e7-3863-4a43-9444-b7787d5bd09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c83762-0173-43aa-8723-9d3951c0b61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c12e584-63d1-4fbd-97fd-87b2d64a3c6c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5a92a1-2ce8-48dc-82bf-dcf942511818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db96aea6-a3a7-4f88-b2ae-c5321fd4d039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22927e83-bf4e-40b5-b9f3-6e91195ce16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c462bb86-9607-4ced-b579-3028c0379f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b05c2ef-8b77-4e92-9c40-f09ce015497d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b463b42a-90a9-4649-a976-b3961925860f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b54b38-7f5a-4cd8-966f-46e7e5b23545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a67a09-b147-4914-a6c4-9838c14a7efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce3bbfb-a50c-4acf-9a20-5dc260f74d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3017f49f-28df-4316-a375-8c00dadd4f13",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b4981f-3374-4a23-9fb7-7e8b11fcd22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974bce45-6739-4aeb-b46f-b9d1d5ff9da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5cb901-e0ca-48f5-84b9-c920db968e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3bd05e-5de6-49e5-81a5-586057e7d15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad80c089-57d3-4c94-b6e6-2cc7ca90d97f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bfb182-183b-4969-80f0-09f04a4a8625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a327a38-d4fc-4437-a958-9793bb1bb36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07e331b-99b1-4e26-9b10-7237f7f108ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fd2dd1-b34a-412f-b53d-07996bea1768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad37efb6-3c9e-4e18-8086-ee8147817646",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d440653-9a99-4040-a747-b535e7d7c7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d42ee8c-49b4-4431-a92c-52279280ac41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cdad3c-bf3f-4c4f-89f8-b5609f728927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f453b344-8202-4e59-9b28-1dfb21d40e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbde9e8-64e0-450b-b192-ee0fa3019b59",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "513f4840-718c-4152-a255-2d2d659771f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3037fa1d-85a2-45a6-ba90-6ac2f3daa137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faeb740a-74b9-4898-a1e7-9dc118a03b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd950b7a-6f85-4564-8b0d-3011c51fbf7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0abc457-c289-4d54-943d-828f9ab363e9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5affa60e-e6fc-4f05-9833-7f8b8e4dd8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d423be-e009-4415-aa83-25a3922acb63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e75da1-a06e-447d-882d-2e6affc85a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c49ebe-1db0-4569-b0c1-0b3b7d662167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ed85e7-bbbe-424b-af6b-69533ef0aec4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c2ec39-21cd-4a09-842a-9fd88998a4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faeb5ef-bc98-4bcc-b364-f7788c16a3ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97fbb3a-2086-4177-b88c-fd11d5e302f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9599229e-8c0a-4734-b008-fe230f3a0794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f761f3-0224-4b4a-812f-25e353b7210a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b920d527-cf7d-4394-9ae6-966b471c2fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7228c338-929f-4814-a761-11e87dd4d0a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0060c7de-a140-4589-ac2b-214aecaf854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b740c46-8c4f-4c7a-bd7e-7a9bceeb20ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f3bdf8-0509-42a9-8627-0920697a82ec",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ad1ce5-ee2f-4596-8bc9-f955ee7f54bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9880a577-2f47-4422-8937-11e2b945da7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfbde31-a6ef-443a-a454-83ad0dc72c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26307c7b-625c-40f2-955d-e0d9541b8d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88af416-f12a-4881-92d8-d64e71e9b7a3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc772a3-a4ed-4dc4-b25f-9b3cdb5d1ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ef566e-7c91-4239-a5b0-e8353e33ce59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25b5a77-f5fd-432c-8197-6aa3c0e7e778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c001e46-b81d-4fe9-ab03-e44726fcab49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577e4cb1-6ec0-4448-8bd1-1c104555aa64",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd9d58e-1397-4692-85e0-c2c429d59ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73d68ba-01f7-4b53-a6d7-bc480e32ccca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f439bde-e62c-4ddc-a4aa-21bef2cb580a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f9be12-c005-4a19-8f63-18fb8e3a55b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1071a37-1414-4f81-abba-9787625bc5b8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b972a28e-f2e6-4926-ab6a-4066fc941641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b65edc0-a997-4ff2-be26-591886a83f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5245137-d2e8-4e04-9b57-70884b02ef9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80a4258-187f-40e6-b0df-bdb22d940e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d417d9df-5048-4d88-ab6d-71941013b3b5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee554ce5-e50a-4492-aeb6-ac95f3d39f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f420611-836c-47d0-9894-0a13e42decc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff868d3-c945-45e9-b0ce-f3ed3adf1f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ef2d0a-9353-4a78-b28c-d0ddc4b1a009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4967698a-37b1-4c39-a103-b5b02cd4a058",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf94cc0-6cf5-4d87-a9c4-f5be7f4f4934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f52e3a-f19b-4e28-9e14-82ad149e6dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ece1e9-104f-479e-9dea-d0721259b565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e94c2b-0dc6-4465-8f9a-40d15b210eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adb9fc4-3b8b-4e52-b4c5-24a3f2ff7ef5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b51117c-2f89-4618-b91d-2a461440e1bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ed4ccd-ce5b-4657-be5d-148c15efda24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b807a8-36c8-44e7-8f0f-0de8f4d57f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4643c70a-08c3-4b27-a9e9-e3e6043b7b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5096f5-3fb4-417d-9639-b05aeb715ff5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24594875-6d2e-4991-9247-cc0c75411e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6133b50f-94f4-4281-8803-39cda36e7a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3846388f-3660-448f-8ae9-da37919c292b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ab4dac-1872-427d-a2bf-36b33ce30771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0d483e-46a3-4de3-b81e-9411834f1d59",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e793f0-063e-4cfa-b2ce-d8bdb9755436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ed0aef-cc27-4491-acfc-a07ae01ac356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83430c1b-12af-477f-aa52-5ff4c61bd7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce8d952-aa83-4232-a52d-f0ccdf41bc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a228636e-de1e-4a69-9c74-ef73e2126cd5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802cf12d-c4d5-4169-9db4-63d2b668c80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845ad5fd-1944-4cec-bb78-0f1a4797ac4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf7df20-8647-4e0a-993e-78a6e9f104f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee6ba3d-b732-4928-9b21-3f9fc8cefd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacc204d-1f50-499d-8947-ed4d40a439fc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f2d1c6-982f-4369-b269-be729ec16b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7407cf2-e875-4f04-9020-a456959f91f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831cb606-8067-44c3-ab27-ee18ae3c3f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb79cec2-f215-4045-bad9-f7c10e0a40fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3a7cc8-9470-4195-98fe-b23b9eba63ca",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f5b116-5bdf-4433-bfb3-9657aa95f289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4a5d1c5-b692-4e52-901e-5fde58d29fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a476ce-56fd-4f8f-b9ba-7a516a7a9810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5e5195-a3ab-4cdc-8d65-bcf98bb9ff5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f7a436-4291-4250-8568-c3fa84535cb3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9469dd-adeb-41ae-aaaa-143f35fac2ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cec671f-1f73-4a33-a591-63c63e9f20e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17b8d01-7036-4f65-833a-8832ad7e835b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107cec80-12cd-40e4-954e-03d02ee03a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216aa550-6c74-46a0-8373-c319287b70fd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fac4d64-629b-4f98-ab4c-d03e59589a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7fdd894-5dbe-4fee-9cb3-fa7e2e5b3411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f43087a-63e4-4498-9938-a5d6168b5902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef26c7a0-2cef-4c48-8880-a9248ba33cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9983bca8-477b-4f44-9f12-7f4a4577d4df",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b862efc-f008-4056-b4f4-daeb13d159e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5d29bb-d878-4abd-b442-b31ab586f71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f65c01-e37a-4758-bb06-20c47fc47f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b71047-d454-4503-9884-bc22d3013c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82924878-23d8-4e0a-b954-c66c13f3848c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c0626c-f3a4-4ae7-ae0d-fbfcb38ec7c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2271e04-53bb-4f9b-9297-f75dcf99632c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c093e3a-f884-448b-bba0-538faf30d27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029b745d-d84d-4db7-8d82-0972022f4f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd493a8a-e790-4fbd-a5cd-a9a04c5f62be",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7efe88c-47e4-4c05-9893-e1f2f98166c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7884c746-2709-436b-9091-9139b40a7b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26efed6a-ddf9-4e9d-9f0f-787c415401bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b54d459-c7eb-4e4f-92d7-37e48cb2f5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d91a3e-d0f0-4832-ab05-81bc5be6f29f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8b7c03-fc99-4669-8493-c244363f51c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56b11f1f-e637-4707-b816-58cc964670c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaa9cd8-1400-419c-85f3-227f9b3da013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7700c291-4e83-443d-8e05-7772bf5a6028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03774209-fa7c-42f3-a7ad-ec4ab88f14e5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2906bc-a5f7-4a68-81f6-e6fca01c1b26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "155d0a9e-62a8-483b-8275-cf6fb8d7ce14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf52864-7d46-4c73-9012-9ec44d82358f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30cc0b8f-49cc-4313-92bf-423bb8eb5302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa056a2d-6914-4b0b-a847-ab8ca15df69f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe057e45-d0d8-42c9-a813-ee00716dc8b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f9f9763-d6eb-46ba-9a6b-350c9567540d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba28d965-fa47-4bb3-abd5-58bd6fca69d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd4c87a-964d-45f4-a246-55f613729083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9751eb68-779b-4a48-a5ac-23ba83f80f7a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec10cbd-68f2-428d-aa48-bca851e3a80b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0de81742-2d8e-495b-803b-10c8ed6f1609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e444b3-4293-42ff-a56e-fc57095286d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c90974-70a9-4b06-aa3a-09dcc79f5e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c91ae8-e9be-41b9-9cd9-a72d5ad8763d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2baa0d84-9844-4139-b5c1-1dcc410857bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "980c5521-59cd-483c-84f2-37afa7fa5f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dfc5a8-16ae-4d79-8387-9192ca548cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51f6e2f-5374-4fa3-b41d-ce80a9bb3cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddcc8032-5a31-4d1c-a748-8b1cc5367fb5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a238753c-e1f5-4f63-885c-d6db84a44a34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97b3ba75-8fc7-4742-a5b8-da1c755c72a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162e9811-115a-4a78-b412-216f37881aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896315e7-5a39-49dc-a59b-f9ca0e633bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b921659-c794-484d-9da6-64794780a2b6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23935444-f47b-4cc4-b05d-a582eefc508d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b947f4e-5cd1-4b1a-b0a4-4fb3a2ddd258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06018afa-81e1-4079-b557-5bebc2c36dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "069fc40c-e4f2-4799-a5d1-d4949f5fe110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2d35d3-7d32-45d6-a23a-f960e8362e31",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbeebee-28ec-43b1-8484-160563dc13c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd3dc711-9c3b-45eb-934f-ea2281b9b112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa7dc1f-2a5e-438a-8728-3b4a188d0472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16580ce8-3ddf-40a9-b4d0-79b27eff67f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e10ec1c-3f9c-4345-af29-2e3bfb8a883e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb07575a-1dde-45ab-8822-7a0d60a8247b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "521c4754-7fbd-4d97-be1a-ad6d336526c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a980ecbf-6f36-4fa0-a000-3dad65528e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a9f26e-a572-4705-bbb0-aea384a0f5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2b3827-b157-4ef9-957a-3f42f111bfdf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68f0654-3a6c-4536-8230-5d7a0ded4094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9351983e-dfce-4cb2-bdf1-615f266546d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76186884-c7e5-47eb-bf8b-91d3e785f07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c32bc94-c01f-4767-b4e4-61c0fa45079e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43586d60-ad55-4a2e-8688-9e6ec3b2f5af",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13edcc0d-85bb-4d5b-8cb7-9228c29e402c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d2454ef-5b53-46ce-8e7b-53a408c8e945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0da9aef-bd7c-418f-9f07-6b3aaf4d245d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7358e4c1-3e52-4780-a991-491fb5f089ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fc9afe-cac6-4ee3-a917-eb031a7415f2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e87ca6a-8eba-44a1-ad25-e33ce045d5b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b4ba24-3b80-4a82-8585-c69e3cb74b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d53e420-c2d8-4875-a5af-f165a5ac2ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f97730-b25d-45cc-87df-afe0cae8a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0224e9-9f6c-495e-9c01-ce6abd7fb1a2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3abbc7-1c9a-4c90-81b9-799ba01c9819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a06faa8-b01e-4261-8a46-6e63a4a6b981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de4ecf2-8649-4dcb-a946-dc12ecf9982d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675d783c-9e59-4680-a9b8-ee395161c2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a52775f-7291-4187-a4ac-2704ee2a4534",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ace8fbd-cf13-4ed5-99e1-57782b32c93d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c247ccfe-9cc7-4fc3-8122-8e7f3398bd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4eb43d-42ba-41db-b7eb-ae3e89370560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a008ab3-5de7-4c25-bf11-4410a453b57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b081811b-1e55-4c19-b7f1-63770988218e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e576d7f6-c6ff-43da-a8d7-e5fe2fa269ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073ab9bf-afd5-4b42-b9c4-0b9c103a94de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f27713c-5658-499d-b86e-f9dbc99f1b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5688edcf-d2b3-4466-99e4-230ae7d6b5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1bcac2-f4ab-457c-aed1-d4965d512325",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee41fd-4ce9-46f4-83f3-7798f15d409b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e95bfe24-f0af-4b9e-aeb4-66f995944157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efea0e1-a277-4fee-90bf-25d77f6664b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3ffaad-cb10-4f69-9811-19076f1cb191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d88a6c-f1bb-4e73-a46d-753949f02b1b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb03f9b-1d8e-4309-a477-e46db2a73bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4d34e6-8b13-4d83-962d-64903b57cf69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c593eed1-8dd7-400d-8dce-8a8e6b0c4d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502f953f-1599-4e00-a6b6-ced0039c74bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fdae0f-32e6-4fb1-82d5-725f656f7e84",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe4782b-de69-4003-bfbf-7b8b4e768a62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811d9572-7de4-42b0-af6c-b296b971c232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e615364-6872-4f3e-97ce-cd5fdd63e8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4d4811-e1c4-409d-b4c6-307a06a97756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9e2530-6766-4b2b-81f1-caf67769d835",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e665a96-0ad1-4df8-ae88-403f047b7349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8041061e-a87c-46b4-aeff-fdeb262898a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65526da-4d98-49b7-8f95-2827579b77d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf34fc7-5a2a-4f06-9d0a-a8984da1ff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660463e7-4519-4221-81a6-fd6a6689d276",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bad248-9e98-4608-acba-d73959e61722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d69cb5da-3829-40fe-9506-8a2db27598cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559f8db4-0122-44a4-9ef6-793355c39589",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1197d30d-d448-4a89-9876-ef7474cc3a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46875bf5-b7ed-4a88-80f7-62612892bbf4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6f789f-bb3b-4a03-85a7-d84ef3c64475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce59aa8-05b7-4967-a4d8-916b793003ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fef7a9b-9d69-42fc-bc4f-1bc7cf72c20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44173bff-dc30-4611-bbcb-adc6adf5563d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de84361-c5bc-4c1f-a4e4-49f85ed755f8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223379a6-bacd-41ed-8c0c-02c789cd10af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08990503-efd1-46b4-b2b0-06e570d71867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501387db-b631-4107-b962-0b16027ed6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa14ba2-976d-462a-817d-a00cd4fc98e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dade1aa3-7bfe-43f6-b242-f6df21d9dce8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7122158-d182-4499-9790-cd1f6636cc37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d741548-3da3-4584-9b55-7c0d7fc864e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4d1ded-0352-4bc4-a63a-4e6a82ccd0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a3764b-5f21-4379-b693-4baed154bf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1525e592-40a6-49e0-bc91-7ed3227e0bcd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e39a17e-ac7d-4146-8d45-bdd868676a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65661ead-7a0e-4db7-90ae-0b572136d6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d65139-742e-41e2-b68f-6189f77d9967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9828e1-2642-4916-b464-b257712a302c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9314781b-01a9-4865-a83a-032c6f42141f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212897b0-a235-4069-ae9b-173a0cca83bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35d5fd2-9b76-479c-88ff-db0384ee89fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d792a28d-362b-42d8-9bfb-6e57b4a16c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d4abc7-e5ad-4e61-b2ce-13f8f4889e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1fb7af-4f3b-4b3a-bb4a-a0174f81a953",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6d2734-41c8-44fa-84f3-056546bd2b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8601f4f3-006e-4698-90f1-4351a6113bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c938a6c-3606-43ff-8a9c-adc05eea9af9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcab7b93-5ed7-4859-aba3-75681fd8eec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ac53a8-5560-4b2f-b24f-e1cc64084be4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c2b8b7-99ac-4870-819a-ffbb651d7b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caf30426-51eb-4667-8304-517769153739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e499e32-5390-4473-82f2-74ac1a43e5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e8748f-e40b-4308-b6c1-087f62768354"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a2294b1-c8b2-4632-9b0c-4b92cee8fdcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0135f701-d590-4f96-9c08-9fda1d185da1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30d9bfb6-f687-4dff-8689-05d5f084a2e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7faa308-edd4-4c8e-9fdd-b71b08f06866"
                    }
                  }
                ]
              },
              {
                "id": "f084d428-5cb9-45d8-befb-a9422f514f38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f262df73-9bc1-4ffd-accc-25985c81172c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6367b1cd-5e0b-4cc3-a323-ffdf12fc6889",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f829e6f1-91d2-4924-a41c-522aea8c8577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7254e73c-47bc-4e39-8bf2-bfb921176a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10afd4d6-d9cc-4541-b4bc-eb9ddd8af7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d307c2-5809-43d6-bb63-a9f7525db8a7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8983f96f-f043-4f4a-ae42-95cedb42932f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2e2b0012-0a3b-4212-89f2-cb109dfa37fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c934fea5-263a-43e7-9946-3ee4d37d7b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0823d208-5421-4fce-bafc-b93ed26cd3b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35d3a77c-1a8d-41cc-8cca-a3c05fde28ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a097c034-4222-4f86-923d-857d8ad1d79b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dab12f3f-49ca-419a-9252-07b35f5714bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d878c791-bb84-4896-a091-fc963fcb2bd8"
                    }
                  }
                ]
              },
              {
                "id": "f2bbf327-0e19-4423-9881-1245a3c5a3cf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6748af8d-34a9-4622-9d3c-8cff3cf4bfa4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef6da29-b584-40b5-9efc-141b0b8a1ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f67254aa-bed3-4593-844d-a390c3d1fc9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdc1da1-da54-4ab5-a27f-db3f28e3d8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a64358-1adf-408b-8c6e-5a06ec5fb903"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1f2a518c-5571-45b9-b458-b46ff7233d08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a70234e9-b816-4257-a211-935f73513e51",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6acb745e-65ed-40af-a639-ffaad83223e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "52189578-9e07-45dd-bbb9-8d3389ef50fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c7a1f9c-cfed-4fd0-a073-2b6c3094bdc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b278a35e-0b2e-465a-b2c0-e5675d84d925"
                    }
                  }
                ]
              },
              {
                "id": "0ed18945-db19-4316-8dd8-df4175472e40",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "600d7210-ee3f-4e54-93b7-9c0f912b631a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3e85c8a1-8721-4ed2-97a3-f4151bb97425"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3d08f7-1c7f-4a08-96a1-cdd7d3f779b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46529d1b-10da-4f9f-be59-38cb8f014561"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "543ff729-32f7-4791-b085-a844ed5f560f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "205b669c-e5d8-4832-96f0-0d4720538e85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cd47b5e-0050-4d03-a2a7-c3dd9ca85881",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07ec8823-61ea-4ab2-ae69-667890f719b4"
            }
          }
        ]
      },
      {
        "id": "40568acc-1bee-41aa-84fb-92eadc6911bb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "03aed459-60a9-4361-8d1d-fad023e87391",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c84f34b-a0cf-4c49-b025-7dec4e9ca0e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f97de6c-0519-4037-9a8d-8d476c5e1ab4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f27d98b1-f177-48a9-a8de-7fd55b36322c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6865c5f-250b-43bc-82a7-66d74427794a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "118b5429-7f10-4883-bd1a-759ed84ed3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ef0930-d0a8-46dc-9748-1eb410adb0ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0475b99f-19e4-489d-82f9-8e89fd1b9dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d17f4b5-56ac-4d75-95b8-beb5544a1501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42fda51e-00d5-4aa7-bf05-1f8242fdd2d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22ebcc7e-9fde-4e8c-8278-c8695fa7eaa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e135edb9-b066-4782-9f91-23d3d831b8d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "274afe8b-5bbd-4635-ba43-5cd53c9df049",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4343ad91-c15d-4528-a279-7514d963b1d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d67fa5ec-b972-42ec-83e7-065a22971f69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e2b6a291-c94a-468d-9398-fc8ec9c6b415"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3356d3ab-7908-4e1d-b5c6-365a2bf1c89c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "325aba84-fa79-4585-abd4-adbb3d41ee5a"
            }
          }
        ]
      },
      {
        "id": "52e51ba4-a03a-47b2-b9ad-26a1f3f14213",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e74f63fe-6610-43af-9662-d5cb8f203074",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f8e3e1e-d89a-4af4-af24-f3fa4f758ef4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3b1fe1-ecdb-405b-b028-bb74c3205e90",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71e05fe4-3347-4bf8-a9ec-b49610755ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf086a5d-5d2b-43bd-9302-381b2d2fc5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fdea76c-2728-484e-ae96-95e13572700e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee26f20-a944-4523-b6c6-a9d18caa3c4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f5378589-f39e-49f1-bb38-23c3c2b6e021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2afd17-4bf8-48f6-b0ca-3a1d938a6e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b2b0675-4d27-4366-98e0-cbe6c5b62e91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0c9f02e-dee7-4c20-a9b8-7fbfa9969221",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dab713e-8ec4-479d-b412-98326b8e8a72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e121b202-21b8-4378-870f-874ee279abaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b21f354a-fbf5-4bff-b44d-92f80c85d1ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d987b22-ca64-4ba1-8e84-f8a4ebc3df57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7377c8f6-f7e0-46a4-af2e-eb54b6a8f920"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fec4393-f14a-4902-a886-38842ee2173d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "909f4ffa-5745-4e07-a98c-e57ce3d9c4e1"
            }
          }
        ]
      },
      {
        "id": "2cb37cf6-e0a1-400c-9a46-1f2eeeef8006",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "76fb3cf7-1732-432c-b3da-54486e71202c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bc60e8b-5a45-400e-a79f-88d4ac8c3e49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49749c96-c385-489a-b098-eb40c7dce454",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16990df2-2b88-48d1-a222-d35f19a7bfb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "95783c1a-c3aa-41be-b240-d0733f9518d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95405ba-c84d-4f0f-9090-c1f7ac40f25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1fa99ca-1a81-4fb0-99a2-13354d9a07af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd232f1b-9fac-40e0-8ad0-3ee39c1c1ca4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bf7c3d40-1f32-4d45-81b5-0f6022534a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47bd8ec-11cc-4bf2-ae60-ec19837ff754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfe3d971-c45f-4db4-a918-e7f8e105c725"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57261d8f-ff3d-4108-be81-13b107135090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b4dafba-f930-4fd0-a0f0-ee5d7817d3a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "937afbbe-9cad-4f24-aced-2e577e8d0cc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc5de526-b293-455b-820b-260f0f054dd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e48de45-9477-47a4-ba30-585e30f31de9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7cdcb9c9-cd37-4f9a-b94c-786dfd918e9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0fac66c-6525-44e6-b6d2-21de38bd7c32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9ff1795-4bd0-4b5f-b164-43b8ca5c02f9"
            }
          }
        ]
      },
      {
        "id": "f62a9588-784f-4ce0-98d0-97065b403a29",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebdbdfc7-0dd3-4c7a-b9f4-c966b8f7d469",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f314e4d-ecac-456c-96a9-9435489c1586",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8102e957-dace-4f5d-bbd3-45ae06a80660",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d7e8426-5de9-4487-b873-143c3d15c2c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0e58f3b-dfbf-4b74-b0c6-ebe0aeecfa20",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 433
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 591.2141970358593,
      "responseMin": 8,
      "responseMax": 11384,
      "responseSd": 1916.8836443262387,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676248927743,
      "completed": 1676249174874
    },
    "executions": [
      {
        "id": "3d1ae3f1-d22e-4229-85ca-d1c0589149c9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b8e76fb7-c7cc-4dfc-82a8-d73a84f8ddcd",
          "httpRequestId": "12db4abc-be81-442d-8eba-54d2e1c865e3"
        },
        "item": {
          "id": "3d1ae3f1-d22e-4229-85ca-d1c0589149c9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1d3cf156-e98f-46d7-9a49-5a6c7ed50e6b",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "a08b9c87-23d5-4ec6-a049-007d858b9b3b",
        "cursor": {
          "ref": "c3b9799e-53a8-4657-9542-743cbb8203ed",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f64cbecf-c98b-4861-95c2-0fa1f458af46"
        },
        "item": {
          "id": "a08b9c87-23d5-4ec6-a049-007d858b9b3b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8944e796-1ad6-4c81-bd94-6f2db6d44f0b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "1848dc43-4d31-4aba-b568-f7655e3d380c",
        "cursor": {
          "ref": "9af069a6-1d47-443a-a04a-c106192b4d32",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "33598ff3-af9d-4c89-9ef6-d35b2c15b82c"
        },
        "item": {
          "id": "1848dc43-4d31-4aba-b568-f7655e3d380c",
          "name": "did_json"
        },
        "response": {
          "id": "ed0c16aa-85e9-4e7d-bb04-ab359b51379b",
          "status": "OK",
          "code": 200,
          "responseTime": 408,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c93b2f6-43d9-4b61-8919-197067979509",
        "cursor": {
          "ref": "3270d96f-0299-4cb8-b79b-9e4c12ba7f7b",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c68c5b65-2978-463a-94fc-b1db2f5eea33"
        },
        "item": {
          "id": "6c93b2f6-43d9-4b61-8919-197067979509",
          "name": "did:invalid"
        },
        "response": {
          "id": "1b220cd7-9c78-454c-9031-24aaea33a109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c93b2f6-43d9-4b61-8919-197067979509",
        "cursor": {
          "ref": "3270d96f-0299-4cb8-b79b-9e4c12ba7f7b",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c68c5b65-2978-463a-94fc-b1db2f5eea33"
        },
        "item": {
          "id": "6c93b2f6-43d9-4b61-8919-197067979509",
          "name": "did:invalid"
        },
        "response": {
          "id": "1b220cd7-9c78-454c-9031-24aaea33a109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d3464d-5444-4bb9-8dbe-b94e8a4cc6ab",
        "cursor": {
          "ref": "fab5059c-7598-4b80-bae4-11ea0df7144a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3be4e004-d9a7-4c37-8c37-e664046527f3"
        },
        "item": {
          "id": "c6d3464d-5444-4bb9-8dbe-b94e8a4cc6ab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "afa875ac-8a32-445f-ba35-b57e7cb0452c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 346,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05af4d1-1976-45cc-a5e2-217e0d0a7ae5",
        "cursor": {
          "ref": "d4600776-bf9e-4e1b-98e7-0f64b9ef8b65",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cc99fc7d-32e8-4b7b-b3df-9ee651c9fd11"
        },
        "item": {
          "id": "a05af4d1-1976-45cc-a5e2-217e0d0a7ae5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "33f98328-51aa-4a55-9e0f-503576912930",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173f9322-0b5d-4ad5-b9c7-9367def65925",
        "cursor": {
          "ref": "988cef96-bb21-4e20-ab55-6b59b8de4bbe",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d186030d-9276-4126-9d8c-9a0af92211cd"
        },
        "item": {
          "id": "173f9322-0b5d-4ad5-b9c7-9367def65925",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9a7b04a0-efad-4f62-81a5-3574a37537bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1afd69-69ca-459b-a313-7741ba15f39a",
        "cursor": {
          "ref": "c273c70b-6110-420b-b89e-2defad7a54bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3bb9958e-90f6-4549-86dc-824a8d6d1a77"
        },
        "item": {
          "id": "6e1afd69-69ca-459b-a313-7741ba15f39a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8798b01-2cb3-48f6-b06f-e74a5ac7de45",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6e1afd69-69ca-459b-a313-7741ba15f39a",
        "cursor": {
          "ref": "c273c70b-6110-420b-b89e-2defad7a54bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3bb9958e-90f6-4549-86dc-824a8d6d1a77"
        },
        "item": {
          "id": "6e1afd69-69ca-459b-a313-7741ba15f39a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b8798b01-2cb3-48f6-b06f-e74a5ac7de45",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a145bc26-5986-484f-a2af-1a7f30a442ac",
        "cursor": {
          "ref": "5a85ae0c-f15f-4a49-b816-b0390d8f2002",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0658c908-8026-44df-90fb-a381ffe9d007"
        },
        "item": {
          "id": "a145bc26-5986-484f-a2af-1a7f30a442ac",
          "name": "identifiers"
        },
        "response": {
          "id": "376d40b4-8f97-4c02-97a4-7385a00cc491",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92f38a6-cf2d-48a9-9b1b-512d23514560",
        "cursor": {
          "ref": "ae4b8d30-ca30-4cbf-8e82-9c348dc7f79a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ee1ea47-46ec-446f-afe8-4efea45e22b7"
        },
        "item": {
          "id": "e92f38a6-cf2d-48a9-9b1b-512d23514560",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "18fb6711-1d38-4f93-b5b0-46f317d68d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e92f38a6-cf2d-48a9-9b1b-512d23514560",
        "cursor": {
          "ref": "ae4b8d30-ca30-4cbf-8e82-9c348dc7f79a",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ee1ea47-46ec-446f-afe8-4efea45e22b7"
        },
        "item": {
          "id": "e92f38a6-cf2d-48a9-9b1b-512d23514560",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "18fb6711-1d38-4f93-b5b0-46f317d68d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "55a5f4d6-c8f5-44c5-b3bc-191dc34443c1",
        "cursor": {
          "ref": "65293692-9d50-40e3-88af-cb8ae28be060",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4eeb70bf-4f19-49eb-8ae0-8aa93fab1c59"
        },
        "item": {
          "id": "55a5f4d6-c8f5-44c5-b3bc-191dc34443c1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "613a6b8c-ba37-479a-b622-5f489bf8547d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e0c2c68f-624c-428f-8670-04ed403d8065",
        "cursor": {
          "ref": "d1a60e9f-7a5d-4144-bdb7-186f6e6d5844",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d541b148-3465-460e-acc0-ff9a39948ca6"
        },
        "item": {
          "id": "e0c2c68f-624c-428f-8670-04ed403d8065",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "bed05f33-2570-430d-ba6c-b7a7310ebbb9",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "2768a51c-7bb0-4526-abd3-6c9417f48020",
        "cursor": {
          "ref": "f9f1c322-1dff-490f-9d83-69c8b3fadde9",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "50df85c9-6485-465f-bf3a-f15c979c361f"
        },
        "item": {
          "id": "2768a51c-7bb0-4526-abd3-6c9417f48020",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "eb09e877-5dd8-4ca7-a793-8468660887e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "d431dbf7-ebe8-4342-b833-85664fa1c295",
        "cursor": {
          "ref": "20cf0867-1011-401d-bbb0-0f1b34c7e1db",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d6324446-325f-4810-a5d4-1fa40b2c28b4"
        },
        "item": {
          "id": "d431dbf7-ebe8-4342-b833-85664fa1c295",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6904fea6-440b-4a6f-aafe-70c90c93240d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b2bd89b2-3a2d-4305-b71c-e3ab104e7f33",
        "cursor": {
          "ref": "efc7c8e1-ee64-434e-981a-eff6b9dce0b7",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c1b14093-45e9-4e1e-9034-a5565f83702f"
        },
        "item": {
          "id": "b2bd89b2-3a2d-4305-b71c-e3ab104e7f33",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8bcbb18a-ce89-4e8d-b46c-3b12873eb82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "56308866-2bd8-4d89-a6a6-8801eb3c2e04",
        "cursor": {
          "ref": "aea9970b-395d-4e3e-ac91-e21d5ec1a13d",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "48cfbe44-c831-45b5-91bf-be0c4980e955"
        },
        "item": {
          "id": "56308866-2bd8-4d89-a6a6-8801eb3c2e04",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "62743bd3-e59c-4043-a786-a6085d23d642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "fd0ce936-339b-4a5b-9aa8-a5d3fd444ec3",
        "cursor": {
          "ref": "259379a4-9b1a-480c-a383-cb4e4fae1e2b",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ae3474cb-a6c4-4fb0-b3f6-ece656b6922e"
        },
        "item": {
          "id": "fd0ce936-339b-4a5b-9aa8-a5d3fd444ec3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "efc8f8c8-3de0-46b2-b078-aba901315f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f89bed07-6bea-4373-8d0f-df179468cc33",
        "cursor": {
          "ref": "9af045c6-3e01-4419-8ab2-d5e058ca2a9b",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2385d1e8-f0a3-49e5-883d-854a84edc37d"
        },
        "item": {
          "id": "f89bed07-6bea-4373-8d0f-df179468cc33",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4d74167d-a7d2-49c7-a328-deafe239e3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a998e759-029c-4922-9f57-5ba47d84d013",
        "cursor": {
          "ref": "b9963a17-daa6-4a53-9a90-a3359d9c8826",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bef8232f-9801-4043-a250-8bcc2a1f5894"
        },
        "item": {
          "id": "a998e759-029c-4922-9f57-5ba47d84d013",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e6f01bb6-e80a-4841-a6ac-fa1099f9b973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e2069a08-73f4-4d60-a061-b38477c8b884",
        "cursor": {
          "ref": "1525c1ca-7edb-4732-9438-f783ebda843d",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6396349f-b062-42d2-bafe-1f3cee42c273"
        },
        "item": {
          "id": "e2069a08-73f4-4d60-a061-b38477c8b884",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5731bae4-231f-490e-b307-d98b0850795f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "f383eea6-8e67-4d82-bbda-b5d0c5411b4e",
        "cursor": {
          "ref": "a5ae4ead-e537-4af8-8efb-098875391da3",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bdb38ad2-b794-46f1-9a01-7f5fb7549708"
        },
        "item": {
          "id": "f383eea6-8e67-4d82-bbda-b5d0c5411b4e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c691049d-858d-4429-96e2-d232a889d5dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2c8977a4-1004-4077-ae03-67bb3ed7b2b5",
        "cursor": {
          "ref": "ad41005d-a729-41dc-9bf9-8d1780a8e3c4",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8a7c99a9-6bc3-4b71-85e1-414e1dfa9055"
        },
        "item": {
          "id": "2c8977a4-1004-4077-ae03-67bb3ed7b2b5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bbf6310d-21ec-4079-b51b-c919b9255f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ce70cf74-dd87-408c-9559-091063ea3835",
        "cursor": {
          "ref": "d431a25b-4caa-4bf3-b276-436519fa5a07",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9077cc70-fc7e-42d3-a23f-e97d82b6b4ca"
        },
        "item": {
          "id": "ce70cf74-dd87-408c-9559-091063ea3835",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "945990a8-cc85-4063-be75-057a808fda2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "37ba2d5f-10a7-47c4-8c8b-63abfd2310ad",
        "cursor": {
          "ref": "89e4f443-1ced-4269-9bdd-30a91f805082",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9c93e951-2bbf-4d6b-8491-0bbaa2bf8880"
        },
        "item": {
          "id": "37ba2d5f-10a7-47c4-8c8b-63abfd2310ad",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e4b4bfdb-5a0a-4b19-ad5d-010db6f6eb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "abb4f987-b6bb-4b91-b7d1-19f6dbeb023d",
        "cursor": {
          "ref": "1fc19957-5763-4f0f-b38c-8e05a15c8c33",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4caafee5-3730-471c-9a65-08da6bb805eb"
        },
        "item": {
          "id": "abb4f987-b6bb-4b91-b7d1-19f6dbeb023d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "53d4d407-7be3-4eb6-ba23-6b09a01de4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9a271205-3f69-46bb-9c46-914b989121d5",
        "cursor": {
          "ref": "046c4eff-ed1f-44f1-a98b-82e8ac7422a2",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "22ad57f5-5f7d-4661-8fd9-a53a53ced9a5"
        },
        "item": {
          "id": "9a271205-3f69-46bb-9c46-914b989121d5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "06851264-ebfd-446e-b26a-df258485a2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "864dbff1-134b-402d-84d6-f60445cfef6f",
        "cursor": {
          "ref": "9ea3b4b6-0232-4d25-8178-ab73727f1da4",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0bc89b36-741d-4e29-b2a7-c3b1a6e03bcf"
        },
        "item": {
          "id": "864dbff1-134b-402d-84d6-f60445cfef6f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3fea879f-12e9-4335-b91e-c42753d4584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b5dc3b67-195f-4eb0-9709-237de4060e80",
        "cursor": {
          "ref": "01150b32-5fa0-4296-9507-a3c1fe30bbec",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ac9af4fd-45b0-4edb-9c4b-a76e3aa6becd"
        },
        "item": {
          "id": "b5dc3b67-195f-4eb0-9709-237de4060e80",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1dbec1ee-3077-4af7-9966-6b19533632c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "429344b8-f633-43ff-8dc1-97efbf889efc",
        "cursor": {
          "ref": "87ba66b3-6f68-482c-88c7-fbea3accef36",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c82dc13c-7fa9-4706-8641-5da782f4f96b"
        },
        "item": {
          "id": "429344b8-f633-43ff-8dc1-97efbf889efc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3ae87aeb-a790-415e-be62-9a94efad1732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "b98b0262-ed06-4ac8-b068-9b330e64a68c",
        "cursor": {
          "ref": "cfd5422c-1701-4bb9-b3f3-7f844f96982a",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8aeffad0-61de-4233-bce6-a236d1e7742e"
        },
        "item": {
          "id": "b98b0262-ed06-4ac8-b068-9b330e64a68c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "664c8ab9-668a-45a5-a80f-a79275027658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "ab462932-ac73-49be-88c6-497763111211",
        "cursor": {
          "ref": "74f9c3c1-769e-4067-9870-ce6ac7b1dd3e",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "028fa18a-e57a-4c61-a4a2-53e3f46fee4e"
        },
        "item": {
          "id": "ab462932-ac73-49be-88c6-497763111211",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "01eef727-ab86-47c7-b93d-417f2ff75000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "54705392-62c6-454f-840e-8e25889ac83d",
        "cursor": {
          "ref": "857d60b0-c66b-4ddc-aa48-13129941010c",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b154d481-55e5-4aaa-9163-0559aba669cf"
        },
        "item": {
          "id": "54705392-62c6-454f-840e-8e25889ac83d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2bcb82dd-a052-480a-8628-045b3c550dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "ed1db54a-7eb7-4df4-b046-4c01ab8d1a3f",
        "cursor": {
          "ref": "5598e6b8-5efa-4575-a491-2ddeae53f369",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e7d333e-2480-415d-b28f-60e913795521"
        },
        "item": {
          "id": "ed1db54a-7eb7-4df4-b046-4c01ab8d1a3f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "83521a46-21a8-4ecc-bdee-cea8122690a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "047e8ade-f030-472b-8b95-f05452f87a54",
        "cursor": {
          "ref": "93f73a28-3338-4d36-b0b9-af410a99ddf8",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cb7cded2-7ea4-4bb2-b9ab-67f616b0056b"
        },
        "item": {
          "id": "047e8ade-f030-472b-8b95-f05452f87a54",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "344b87d4-0522-43c4-8870-70aaa6a87b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3569b310-36b0-447e-ab11-fd6e0aeef81d",
        "cursor": {
          "ref": "4c46ea12-9147-4742-afcd-16768df7d124",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f398ae01-b210-4436-866e-cf09fedd3ae6"
        },
        "item": {
          "id": "3569b310-36b0-447e-ab11-fd6e0aeef81d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d3ba1f4b-97a3-4bd0-b0eb-c22628b66dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "ddec47a1-cb7d-4143-b208-7eb5fc1700f5",
        "cursor": {
          "ref": "bc7c202c-b471-40ec-925a-8c98141188ed",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e2be34ad-965a-4dbb-b06d-f692b6cd0810"
        },
        "item": {
          "id": "ddec47a1-cb7d-4143-b208-7eb5fc1700f5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ed5ae90a-9882-4fa4-8769-fd8043cd916d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7062,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "35b46eb4-10c5-40d4-9ac7-083c43e2495d",
        "cursor": {
          "ref": "d1bf0115-fd96-4b32-9824-2d679b935f00",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5058a0ce-9e18-41e7-9c23-1d7ebe8a9737"
        },
        "item": {
          "id": "35b46eb4-10c5-40d4-9ac7-083c43e2495d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2eceb445-29c1-4e11-b421-f8ed7bf451ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7452,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "5f8b7c5b-c26d-4c5a-8d22-ca4fbc3ae8f1",
        "cursor": {
          "ref": "bebdf492-58b0-438d-90c3-c11994bf2ca2",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c1043187-81c7-410c-bddd-2efb31db9f86"
        },
        "item": {
          "id": "5f8b7c5b-c26d-4c5a-8d22-ca4fbc3ae8f1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "05c056be-7204-4e18-a871-9474ce496d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4851,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "fc76b8dc-445e-4820-8780-115ec27486d2",
        "cursor": {
          "ref": "828dd95b-8c14-4442-a73b-0f663b280a90",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "966a4a65-a13b-4508-881f-9a3059813e1c"
        },
        "item": {
          "id": "fc76b8dc-445e-4820-8780-115ec27486d2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "224bcb73-7e0b-4b0e-8497-1707ae94b69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6576,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6fd4facf-a917-4d13-bb62-1c8f568273c3",
        "cursor": {
          "ref": "a9ccd5ca-3890-4ab1-ad0c-9a859693d9d3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a56c1cbe-6b1d-4405-9e21-667513afbf5f"
        },
        "item": {
          "id": "6fd4facf-a917-4d13-bb62-1c8f568273c3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a6effdb8-8878-4f14-8840-166c6de08d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4629,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cd7d7e9c-891d-4380-b1fc-4be652f47209",
        "cursor": {
          "ref": "6e8efee2-79fe-4c3f-a698-b3cd3df95abe",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f77d5996-2a25-47e0-9907-27699e6e8004"
        },
        "item": {
          "id": "cd7d7e9c-891d-4380-b1fc-4be652f47209",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6e17f3c-9a39-41b5-92aa-a2003dff0153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8c6283e9-fc0f-42b9-b595-feafea32d986",
        "cursor": {
          "ref": "80b32ba0-0666-480f-807e-d8703dcae431",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0c99b29b-d4d4-41ca-b785-271ddaff633b"
        },
        "item": {
          "id": "8c6283e9-fc0f-42b9-b595-feafea32d986",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9ff0990e-2de4-4e18-9c4e-e3c6a9322b0b",
          "status": "Created",
          "code": 201,
          "responseTime": 6699,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "cad9fc55-e731-4669-9429-aa28fbe8e130",
        "cursor": {
          "ref": "027eb537-e2f9-4a47-bae1-426cd196c5f6",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5af59326-a575-4092-86fa-b77a055f3669"
        },
        "item": {
          "id": "cad9fc55-e731-4669-9429-aa28fbe8e130",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c3af56ce-9bdb-4ee7-a640-a838777c2763",
          "status": "Created",
          "code": 201,
          "responseTime": 4539,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2ffa8748-a91c-4e0c-8a6e-7e1749767c09",
        "cursor": {
          "ref": "8b09da25-3c00-42fa-9b4e-97a2a781ae3d",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fd0830cb-4313-4150-a5fe-ed91fd84107f"
        },
        "item": {
          "id": "2ffa8748-a91c-4e0c-8a6e-7e1749767c09",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "79280aa0-9362-419a-a485-203e2633ab21",
          "status": "Created",
          "code": 201,
          "responseTime": 6811,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "22ee6f92-a51e-40ce-a1c8-4b0e4faf7dc0",
        "cursor": {
          "ref": "1a608810-aead-4d6e-99c6-5195cf1bc5bd",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9746325a-8ed9-4a2e-8ad3-135e8a63a063"
        },
        "item": {
          "id": "22ee6f92-a51e-40ce-a1c8-4b0e4faf7dc0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cc439d28-1636-414a-91a8-eb8f5492e404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c0e38511-5cc1-46af-80ba-1b7163d399c0",
        "cursor": {
          "ref": "6c424fa7-fa93-42a5-b7ff-e53c0154c623",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b30d6489-2d06-4536-ab87-ac198adbe9bf"
        },
        "item": {
          "id": "c0e38511-5cc1-46af-80ba-1b7163d399c0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f96a261d-c7f7-496d-b569-a981ea34bc1f",
          "status": "Created",
          "code": 201,
          "responseTime": 4985,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0cdd47eb-1d0a-410f-a771-3a6c91e0ee38",
        "cursor": {
          "ref": "90f6d0a5-4df0-4ef8-89ec-271428c4398a",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "61acbb48-2923-4a66-95eb-7941d4333657"
        },
        "item": {
          "id": "0cdd47eb-1d0a-410f-a771-3a6c91e0ee38",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3268265c-1ca9-4817-b990-10f18b243dd5",
          "status": "Created",
          "code": 201,
          "responseTime": 6710,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f0fb9286-1905-467b-9694-33fdca71383b",
        "cursor": {
          "ref": "d943ae6c-8f4c-4b0f-8a64-879b425e7292",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b94b5119-06f6-42ce-8501-12bea552c24a"
        },
        "item": {
          "id": "f0fb9286-1905-467b-9694-33fdca71383b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4445329e-7e81-4e33-acdd-15fb6a6311ff",
          "status": "Created",
          "code": 201,
          "responseTime": 4620,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "27be11f2-39ca-425b-a67a-69a6ea1c4169",
        "cursor": {
          "ref": "aab06c4e-c771-44ab-8556-c30091dfe098",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3b45cbb3-2a84-492b-9fc0-f37dce2bbd10"
        },
        "item": {
          "id": "27be11f2-39ca-425b-a67a-69a6ea1c4169",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5a0179c2-40d5-4050-a417-e0b7baef7430",
          "status": "Created",
          "code": 201,
          "responseTime": 6671,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4b0e22b6-e8e7-4395-b5a6-693521f6eb7f",
        "cursor": {
          "ref": "221742ea-6b88-4f7b-afd2-6adca765663d",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "afc5bcfd-c3b3-4099-a0f6-e76755ba99b2"
        },
        "item": {
          "id": "4b0e22b6-e8e7-4395-b5a6-693521f6eb7f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0e3eee64-4c6c-4477-b7b4-9e4b0719c98e",
          "status": "Created",
          "code": 201,
          "responseTime": 4557,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "009563cd-bfc9-418a-81d3-30113bb1da98",
        "cursor": {
          "ref": "481736bd-2603-42cf-b28b-9b7ca12e14a7",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c778509e-0c51-490e-a1f8-eb7ae97fba48"
        },
        "item": {
          "id": "009563cd-bfc9-418a-81d3-30113bb1da98",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c605be9a-ee0d-49e0-bd67-64da16f2f788",
          "status": "Created",
          "code": 201,
          "responseTime": 6760,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "81e4e7be-28f0-4159-aba4-8c70ecdc6437",
        "cursor": {
          "ref": "7e0f4ecf-0e07-4ec8-ada6-32f264273d0a",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d3fb7dbf-8913-4185-8d5e-e5675ad75681"
        },
        "item": {
          "id": "81e4e7be-28f0-4159-aba4-8c70ecdc6437",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ee8722a7-0eb9-46ab-bb70-31309aefa7f4",
          "status": "Created",
          "code": 201,
          "responseTime": 4635,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5127f3e6-c0b0-4f15-8236-bca88e9dba56",
        "cursor": {
          "ref": "535746d9-8db1-4874-ae78-73b71d427d1e",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "28f5a003-4215-4c8a-aed1-6e451e40babc"
        },
        "item": {
          "id": "5127f3e6-c0b0-4f15-8236-bca88e9dba56",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "80878d16-0e93-4194-9c2b-959860d94207",
          "status": "Created",
          "code": 201,
          "responseTime": 6834,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "fbb4d538-8609-4cfd-814d-e2de2c16e570",
        "cursor": {
          "ref": "77652b7d-feeb-4ed3-a333-d82a62f1265a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bd6032b7-6fb2-4420-b007-6fdd47f64a78"
        },
        "item": {
          "id": "fbb4d538-8609-4cfd-814d-e2de2c16e570",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bf2b9150-ce4e-42d2-9272-104d5e3c07aa",
          "status": "Created",
          "code": 201,
          "responseTime": 4569,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "921e2c44-5111-43b2-9861-c883a225a1a0",
        "cursor": {
          "ref": "05c38716-3a35-4246-8413-37c7bdc35f54",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3352b995-3d5b-4a35-9dfd-8bd8bd2bfa60"
        },
        "item": {
          "id": "921e2c44-5111-43b2-9861-c883a225a1a0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "abccde1c-70c6-4e90-827b-456be98cdad0",
          "status": "Created",
          "code": 201,
          "responseTime": 6847,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "62e240ea-7793-43a9-8389-5e202b816fa4",
        "cursor": {
          "ref": "026df7d0-9448-42fb-bf3b-b8d649679681",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4e170e7f-1cbe-439e-ba1d-4a93c0941560"
        },
        "item": {
          "id": "62e240ea-7793-43a9-8389-5e202b816fa4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8ef207a9-3a81-4132-8a91-ebc560aa63f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "dfd38151-150d-4b95-861a-18abe65474ba",
        "cursor": {
          "ref": "23ed6767-fa5d-4ddd-82e4-f618eefde903",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "68e0f191-e4f8-418a-a4c7-d190f13a0cd7"
        },
        "item": {
          "id": "dfd38151-150d-4b95-861a-18abe65474ba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7288dc08-e880-4f43-8e40-68ac9edae53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "dc9c6d44-e7cd-4435-83ff-c8ca1d53ee35",
        "cursor": {
          "ref": "0624cd63-375f-427b-b5ba-8a870f9e07a2",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a7eb9112-ca55-423e-8c28-d01f229fed60"
        },
        "item": {
          "id": "dc9c6d44-e7cd-4435-83ff-c8ca1d53ee35",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bcef426f-c64e-457d-a6df-555850bd916d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9ed47ae4-b15e-4426-8acd-334e343987bd",
        "cursor": {
          "ref": "5740cbae-78bd-4bc5-a10b-13de35607cdd",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4e8dc103-64e0-48e0-a8df-ae68a3a54485"
        },
        "item": {
          "id": "9ed47ae4-b15e-4426-8acd-334e343987bd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "df94b418-b13a-45c3-aba4-8aa7903a1157",
          "status": "Created",
          "code": 201,
          "responseTime": 4828,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "077f18cb-2131-47be-a8a6-a76dd378fe03",
        "cursor": {
          "ref": "ac6ac544-7024-4694-8de6-fde686b6e3ca",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dbd2cf4b-d293-4e4a-9c19-09ce27ce60e2"
        },
        "item": {
          "id": "077f18cb-2131-47be-a8a6-a76dd378fe03",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9d8b8263-2430-4721-9543-2bede74281a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "c3471665-4add-4230-8e4b-827dd7068f82",
        "cursor": {
          "ref": "b74954aa-60ae-46ae-80a8-6dd9b71e8f6d",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9f652bd2-11e3-4395-9e0f-c613b36e78b1"
        },
        "item": {
          "id": "c3471665-4add-4230-8e4b-827dd7068f82",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6011f4f0-48ca-497b-b547-bb53a03a2195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "5ba79ec5-8ea4-4c76-8bb7-3d30c2d3f8b3",
        "cursor": {
          "ref": "9bd360d0-b7ee-4278-ba47-fc4c59e10e5a",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b8c2946c-8cb7-45a5-866a-6c419d682c4f"
        },
        "item": {
          "id": "5ba79ec5-8ea4-4c76-8bb7-3d30c2d3f8b3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "62632fce-4cb7-4d39-a7ea-53a59fec93d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "db7cab7c-f62c-4a6b-b3de-f07f6c450f42",
        "cursor": {
          "ref": "5ef37b20-7efe-4daa-a185-453f07be34b7",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7a7649d7-64f7-4944-a5bb-2fd011bfdbeb"
        },
        "item": {
          "id": "db7cab7c-f62c-4a6b-b3de-f07f6c450f42",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "31c17508-7c34-4c1b-9d6b-f1168187bd63",
          "status": "Created",
          "code": 201,
          "responseTime": 6773,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "0efa1b44-f6ff-4a83-a178-f471965ed2b2",
        "cursor": {
          "ref": "053f39c5-5875-497f-9b09-1067a9828390",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3ff9cce5-f785-4eff-9a95-1a07a928549a"
        },
        "item": {
          "id": "0efa1b44-f6ff-4a83-a178-f471965ed2b2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5b7b1180-f216-438e-adbb-434ddaceb27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5c4bde7a-b3a6-415a-9b4c-dfbf180b3a29",
        "cursor": {
          "ref": "f3f9c6e7-1c93-4e5d-bee0-692a7b523d3e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "75dba841-45fb-4ab0-bb35-6da39e8ef6ec"
        },
        "item": {
          "id": "5c4bde7a-b3a6-415a-9b4c-dfbf180b3a29",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e4ce4d74-cd07-4179-9e91-1b79710222ef",
          "status": "Created",
          "code": 201,
          "responseTime": 4659,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "01ce28ab-3fc0-4bdf-bf7a-c0ec4d69bd1d",
        "cursor": {
          "ref": "4ddcab8a-615c-4f59-bdb2-371a92c2ab22",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b722024d-1953-4187-b3dd-c17bf5550f95"
        },
        "item": {
          "id": "01ce28ab-3fc0-4bdf-bf7a-c0ec4d69bd1d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bf38e42b-6e1d-4592-bb43-713e279bae59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7cc4b477-d7f9-40be-8441-415943289a2e",
        "cursor": {
          "ref": "e283cac6-2122-43ee-9305-e75b9975c0d8",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ac54817e-1914-44aa-b0b0-da68862e61e9"
        },
        "item": {
          "id": "7cc4b477-d7f9-40be-8441-415943289a2e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e47d05da-192c-4a12-a7fd-ce43661e082b",
          "status": "Created",
          "code": 201,
          "responseTime": 6845,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5e3b7dcf-d0cc-45a7-8af7-8b87d4ae4a45",
        "cursor": {
          "ref": "ab34076f-1bdb-475b-84e5-7945731a5940",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "371e6e3f-a62a-425d-a0c8-015d35e68303"
        },
        "item": {
          "id": "5e3b7dcf-d0cc-45a7-8af7-8b87d4ae4a45",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "82e939b7-d753-4bc1-9836-9efe5c07dadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4527,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3b2cf13c-b882-4465-b814-49f229abbef5",
        "cursor": {
          "ref": "5ac88dd1-2c38-4f3e-84aa-7db4a04cce19",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fcbabd5e-65ea-40fe-bf98-c425533ccfe1"
        },
        "item": {
          "id": "3b2cf13c-b882-4465-b814-49f229abbef5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2032cfa6-8e97-446a-ab97-e6188f998f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6384,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "485b7274-22d3-40d2-bba3-7cc8f15e78b1",
        "cursor": {
          "ref": "cce566b8-79bd-4b6b-993c-d33708b5500f",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "85c58782-a911-4cb3-b9c6-c642e3a82269"
        },
        "item": {
          "id": "485b7274-22d3-40d2-bba3-7cc8f15e78b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3d6147a8-43ad-447f-a1ab-c7cc151fd203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "2b247403-f5d8-483c-8eb0-590845b51e62",
        "cursor": {
          "ref": "110808d3-5ada-4478-80ca-33a8e4ca7581",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9b2d03f4-4b57-4f09-854d-eec1ec8a6dfb"
        },
        "item": {
          "id": "2b247403-f5d8-483c-8eb0-590845b51e62",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6fb89c9f-df3a-4a45-8df5-3a32c58d61bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4640,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a4f344b3-8e6b-4272-b152-f9f41feb8dc8",
        "cursor": {
          "ref": "1e362235-e257-439b-b605-e1e3c65afad4",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "de05ba3d-9743-447f-81e9-438f38ee9b84"
        },
        "item": {
          "id": "a4f344b3-8e6b-4272-b152-f9f41feb8dc8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7e345d7e-93c4-4c8a-a938-09827aae89a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "11b99d6c-26ff-411d-ae61-7fbeffeff901",
        "cursor": {
          "ref": "70b085eb-22ae-45fa-ae5b-6ad4c6e3f0e3",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0a80ee5d-baa9-4d3a-a4ab-6cf40c04bfe1"
        },
        "item": {
          "id": "11b99d6c-26ff-411d-ae61-7fbeffeff901",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9af32e2c-8679-4b03-aaa9-64d23547318b",
          "status": "Created",
          "code": 201,
          "responseTime": 8297,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "8e89de09-6397-4cf3-b04a-9a8f588ad9d1",
        "cursor": {
          "ref": "8a431d5b-4538-4c17-a32d-c61d09602e18",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "27f9c4f6-bbce-443d-a41f-1ea61dd10abd"
        },
        "item": {
          "id": "8e89de09-6397-4cf3-b04a-9a8f588ad9d1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cc5667b0-747d-4909-b78c-f19131d16814",
          "status": "Created",
          "code": 201,
          "responseTime": 9018,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "28a2780c-2255-45cb-8ba4-f1e3935966da",
        "cursor": {
          "ref": "17698cbb-b675-48fe-84b3-0bf77d2d2f54",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f40ba0e9-4339-47de-b6bf-7c4ad718c259"
        },
        "item": {
          "id": "28a2780c-2255-45cb-8ba4-f1e3935966da",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "640f467e-3010-43b8-a3c5-0f024515ea0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "ad310ae8-6c46-44cb-8b9e-536e149a88be",
        "cursor": {
          "ref": "93c65cdd-80f8-42d2-a2d4-c11ed55b471e",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5db7c215-30ec-4f6c-a1ca-144b0f226b7e"
        },
        "item": {
          "id": "ad310ae8-6c46-44cb-8b9e-536e149a88be",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e629765d-6b79-4b68-85c1-8dd2ccef74d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "1b825d9c-9c0e-4684-b941-9f1ab23eeec2",
        "cursor": {
          "ref": "95fdd9b7-cd82-4fd2-b71f-19dce49fb080",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a8a9cb59-8248-4cc2-911d-688c9e2c65f1"
        },
        "item": {
          "id": "1b825d9c-9c0e-4684-b941-9f1ab23eeec2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ee90e2de-233b-45bc-bd12-6e194771f28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "33990e8d-9849-48c5-8ed2-3cf2e43a7c1d",
        "cursor": {
          "ref": "93314f72-5a20-467f-87dd-747f0d8894c9",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1e1c2e9a-34e1-459a-bf2d-3924685294b5"
        },
        "item": {
          "id": "33990e8d-9849-48c5-8ed2-3cf2e43a7c1d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3b521101-2f96-4915-87a8-8dff3365f9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "edfcb4a7-544a-4e2c-9011-dc99e1011c79",
        "cursor": {
          "ref": "4e16b194-6777-441d-ac79-3bee235e7bcc",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7a485ebf-18c7-4eed-b9df-34d3efe07f1f"
        },
        "item": {
          "id": "edfcb4a7-544a-4e2c-9011-dc99e1011c79",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "38829aa2-2757-486b-90c5-9e7dc80d2f04",
          "status": "Created",
          "code": 201,
          "responseTime": 8573,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "38a5bc75-3d71-4da7-8c45-d0359228dbdc",
        "cursor": {
          "ref": "a6cff963-2939-468b-a32a-6420dc7fb07c",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1da293c6-e99a-4389-90ab-bd8286052376"
        },
        "item": {
          "id": "38a5bc75-3d71-4da7-8c45-d0359228dbdc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fcbc4885-2baa-4a31-885f-4b1910d97d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "1498cfde-94df-4123-9d22-2e86b49af307",
        "cursor": {
          "ref": "2718b5f0-caf4-4932-bbba-6c27feec756c",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f0a212eb-b04e-41fa-8f32-1d90be8a1c33"
        },
        "item": {
          "id": "1498cfde-94df-4123-9d22-2e86b49af307",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "53050d0e-5841-4b99-a616-e1fda38e297b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "d26384eb-5e5c-4255-ab95-95ae78ea90f9",
        "cursor": {
          "ref": "a023d603-e73b-4c4c-87a7-51a41b303e73",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "95cebda7-e0b0-4588-88b1-c7a53037d3b2"
        },
        "item": {
          "id": "d26384eb-5e5c-4255-ab95-95ae78ea90f9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "55fa959a-7c00-4031-9a41-1e85bb9727e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "7fe422fd-948e-4399-a090-8b69f6dece1f",
        "cursor": {
          "ref": "27bb111d-fecd-499c-8f60-8b6f7f2eb0f5",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aa702853-9c96-4c1a-a29f-7a8d68f392a4"
        },
        "item": {
          "id": "7fe422fd-948e-4399-a090-8b69f6dece1f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "609b54ff-8fe5-4e76-a3f6-9d276b834b4d",
          "status": "Created",
          "code": 201,
          "responseTime": 11384,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0545e5a4-87a6-45bc-9a63-0691eb9861da",
        "cursor": {
          "ref": "bb07e391-82f4-4d06-87ed-ef1f2fa25766",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "22ba0117-7132-450c-848b-f56bbc29520b"
        },
        "item": {
          "id": "0545e5a4-87a6-45bc-9a63-0691eb9861da",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "05cb137d-b887-4cd3-95bb-a5891e665e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "7cd33e3a-47a8-4e16-8e00-b8692ed8dfea",
        "cursor": {
          "ref": "5270eede-2da9-40bb-8775-15bc58790c34",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9a83badd-02cb-4840-9053-73bdaaab3dac"
        },
        "item": {
          "id": "7cd33e3a-47a8-4e16-8e00-b8692ed8dfea",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a196f7bc-bbd3-48b9-bf19-6b8f5e275d12",
          "status": "Created",
          "code": 201,
          "responseTime": 8731,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "a2a6b167-ab5e-4bdb-813f-877e9b97e021",
        "cursor": {
          "ref": "23057798-e251-4ac7-96bb-cdaa3ba1bc20",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ad3df51e-af8b-40b9-b68c-d9e6aa489395"
        },
        "item": {
          "id": "a2a6b167-ab5e-4bdb-813f-877e9b97e021",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2b201376-0766-4eff-a6d3-18ea8f59467e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "670306e0-129e-4491-bf58-f1886c5a0f6b",
        "cursor": {
          "ref": "1135fef0-372a-4356-a71a-24965fd0804f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4c8921e5-dd52-4cd5-adca-94eeffeef620"
        },
        "item": {
          "id": "670306e0-129e-4491-bf58-f1886c5a0f6b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7d11fece-0b8e-41bc-90ff-24cfb22fdfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "bc56206c-cc6b-4b96-957a-757e78b5dc7a",
        "cursor": {
          "ref": "016ea0db-8d54-4172-86d7-249c624add10",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "70cfc3c9-74a4-4c6e-9fbe-0e0b5ff42210"
        },
        "item": {
          "id": "bc56206c-cc6b-4b96-957a-757e78b5dc7a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "befde499-cb2e-4589-8d59-5fb18c8658b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "6e8df446-be77-455b-91a0-74b30442d35f",
        "cursor": {
          "ref": "c14a38cd-92d4-4c55-92fa-8822ab2c897c",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "172c6044-1f0b-43f0-a97a-0e7a00489b42"
        },
        "item": {
          "id": "6e8df446-be77-455b-91a0-74b30442d35f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1fb08563-e24c-458f-8a39-51b1df8b4f6b",
          "status": "Created",
          "code": 201,
          "responseTime": 8288,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "5911f8bd-7d98-44f3-82bf-0664be28c848",
        "cursor": {
          "ref": "cb70dd9c-1065-4682-a7e5-c1015ccf0ffa",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "52bc0e56-d4f0-456e-becb-77d75070de6c"
        },
        "item": {
          "id": "5911f8bd-7d98-44f3-82bf-0664be28c848",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6c9d95a7-c55c-4d1f-be3f-ac51a7a0c700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "ef450408-4d32-48e7-a9e9-a390c75895ff",
        "cursor": {
          "ref": "63967170-c3ec-4d58-ae53-7d0cf2f98752",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "19d12752-4a8b-4475-b00f-e0409ebb5b23"
        },
        "item": {
          "id": "ef450408-4d32-48e7-a9e9-a390c75895ff",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "350b3832-8129-4a50-94c1-804a05068960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "6b968605-4eb3-412b-8f71-c45dae00f50d",
        "cursor": {
          "ref": "c7359d8d-4905-446d-bed3-ae0ef6aea28d",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1d72fd17-fd43-4a02-bca0-5b04745987ec"
        },
        "item": {
          "id": "6b968605-4eb3-412b-8f71-c45dae00f50d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4627e20b-c4c3-4fd1-bfa5-4b4b201b37a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b0cd36bf-2f5b-4fd2-8324-1b6b1047904e",
        "cursor": {
          "ref": "37dde7e4-702c-41a3-b600-3fcfd9b72607",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fe2b97b5-df14-4574-923b-f5efd9932396"
        },
        "item": {
          "id": "b0cd36bf-2f5b-4fd2-8324-1b6b1047904e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3da5fd64-3578-444e-be26-da9cfedd0408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a8b8d0ae-103a-47d2-b804-4895f31b6c18",
        "cursor": {
          "ref": "acd109a6-dec8-4552-85b8-199286169277",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "41d6255d-4d8a-4cd6-a4c7-65c78308f43d"
        },
        "item": {
          "id": "a8b8d0ae-103a-47d2-b804-4895f31b6c18",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "460c06b0-d3bf-43c1-a0ab-b397c62f3a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "056e01fc-b0a9-4bbf-90a9-f15a3debc209",
        "cursor": {
          "ref": "7db2c7d1-fd61-4be2-a974-3f545244f7fd",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "49600cd1-4399-4b34-bdb3-68b95a7565d7"
        },
        "item": {
          "id": "056e01fc-b0a9-4bbf-90a9-f15a3debc209",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2464ada-34ab-47d2-88f4-d898980352d4",
          "status": "Created",
          "code": 201,
          "responseTime": 9381,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "ce65b971-f29b-4ad5-b35d-2fe73cacea59",
        "cursor": {
          "ref": "6c347ceb-bf74-45cc-8428-df306c94ac47",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ffe0dfe7-7fe3-4b7c-a57f-85ea527413e4"
        },
        "item": {
          "id": "ce65b971-f29b-4ad5-b35d-2fe73cacea59",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e9ffaa68-cdb6-4c5a-a984-c78f6f15e3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 449,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "a39cee96-af57-404a-b866-26c85bbf65fd",
        "cursor": {
          "ref": "7d985237-35df-4b59-aaa2-f2613c0adb73",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6f5d3a44-6125-4099-9f22-cc54f2697a29"
        },
        "item": {
          "id": "a39cee96-af57-404a-b866-26c85bbf65fd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "83ca593f-30df-42aa-9ef6-561d82a79b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 351,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "01b791c0-5cb2-4d5a-8f45-e2b55e8d6262",
        "cursor": {
          "ref": "80278f5a-2761-427c-ad2e-b658c5622529",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ab8d6ba1-61f3-4568-8117-30ce47aa80e7"
        },
        "item": {
          "id": "01b791c0-5cb2-4d5a-8f45-e2b55e8d6262",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1bc32aa8-6e96-4b7f-ab2c-3a2fb9a81323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 943,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "93ae830a-0b2c-45e1-803f-fedb098e4449",
        "cursor": {
          "ref": "8fbf63fd-24ee-41b5-af48-ed67eff1d891",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "39505f33-818e-49b6-816e-97bf46c3b10c"
        },
        "item": {
          "id": "93ae830a-0b2c-45e1-803f-fedb098e4449",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "55be99a0-81f6-470c-aaef-5260b7fec956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "7265ae34-1267-4006-a735-46e86653fd6b",
        "cursor": {
          "ref": "81ae240b-ac01-4497-8c4e-40ff5e2cef6e",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "45ca1de7-c465-4b8f-96c5-fa71db7b7136"
        },
        "item": {
          "id": "7265ae34-1267-4006-a735-46e86653fd6b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8b388beb-1274-4f19-b6e0-f2e60c6b7fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "4922e315-6a48-43e5-a4df-8dc3f8068d60",
        "cursor": {
          "ref": "799df59a-2483-48a0-bda8-3e4fe6f213f9",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9bafc4ce-8ee8-4f90-9703-eccb06bab6bd"
        },
        "item": {
          "id": "4922e315-6a48-43e5-a4df-8dc3f8068d60",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d263badf-08e8-4481-ab50-f5d3587bb2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "fb8d77e3-11bd-4a0d-ad29-ec41f3120f8d",
        "cursor": {
          "ref": "ea5d3e50-cc63-4a5a-b69d-ad2225b18b8f",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a9053382-0372-40b8-8ba1-9cd19cc61c3a"
        },
        "item": {
          "id": "fb8d77e3-11bd-4a0d-ad29-ec41f3120f8d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c91cf12c-136e-4963-b74c-73e26b40f6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "989f7e09-2ad1-4c65-83b9-fc27e67fa430",
        "cursor": {
          "ref": "e80760b2-75f8-4672-9be7-255860327893",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "02d0b9c2-ebe6-4b1a-9d04-507ec091577a"
        },
        "item": {
          "id": "989f7e09-2ad1-4c65-83b9-fc27e67fa430",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dde5d248-9d15-4800-9fe6-cf4a33c42a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ee370461-8413-40fe-bd79-7a180f2b6fa6",
        "cursor": {
          "ref": "a74567c5-a76e-4e33-a946-5f55f83c95a8",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8e339552-21c0-45a0-8141-ceb6079455a8"
        },
        "item": {
          "id": "ee370461-8413-40fe-bd79-7a180f2b6fa6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd5947f5-3b40-45d1-8f04-bac2c96f6c9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948d7e2c-418d-4ea9-addc-d6dd9816f2e4",
        "cursor": {
          "ref": "7d2c8514-297f-4033-8869-c8d0a6e5b986",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3345b56a-33d2-4835-8a4c-5091daa81226"
        },
        "item": {
          "id": "948d7e2c-418d-4ea9-addc-d6dd9816f2e4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "31be0ab4-ad4c-4b7b-949e-b96f220e79b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "9b173a70-64e8-4a3f-b4b8-d423916d3ffa",
        "cursor": {
          "ref": "e4aa7d20-d2c3-48cc-81f6-fe056d95529f",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "46abfcab-6d3f-43e1-9898-d5c9584b0e3f"
        },
        "item": {
          "id": "9b173a70-64e8-4a3f-b4b8-d423916d3ffa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4f50223f-df0a-46e2-91b0-367559463441",
          "status": "Created",
          "code": 201,
          "responseTime": 11051,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "959e2de9-03c3-4a84-b443-c838bf36595d",
        "cursor": {
          "ref": "b95c83e9-52f5-4d53-a9e7-96a5afdf12ca",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "977c0d9d-623f-43ac-830d-513a9c68e93e"
        },
        "item": {
          "id": "959e2de9-03c3-4a84-b443-c838bf36595d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1df9270b-d0e1-4e00-9954-59c7bb57f799",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 5560,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "4aa5136b-d89c-4425-a0f8-b8fcbbe479bd",
        "cursor": {
          "ref": "6bf98850-2691-4e81-a434-6fcec3f2914f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "014d2d71-78a7-4e68-a2e6-33a6a14f372f"
        },
        "item": {
          "id": "4aa5136b-d89c-4425-a0f8-b8fcbbe479bd",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6a53e6d3-1390-400a-be50-a4e7b25ca777",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "60132039-49e1-4c62-a1c5-2bbbcf1bb892",
        "cursor": {
          "ref": "b7fe5bfa-9823-4104-b972-653830cf3d3a",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f36c3514-c11a-47dc-89a3-d9860f91f205"
        },
        "item": {
          "id": "60132039-49e1-4c62-a1c5-2bbbcf1bb892",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0a826aa0-8eef-47c2-83ec-3cb5c7d13fea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "65576653-e41c-479c-ad40-a046646b6884",
        "cursor": {
          "ref": "1a9ed20f-5763-4327-9180-d8319c3609b5",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1ecffb2d-fee3-4867-91ed-146aba3d98fa"
        },
        "item": {
          "id": "65576653-e41c-479c-ad40-a046646b6884",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "356f7ec6-638c-416d-afa2-bfadcc6740ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "b4ab5445-a91e-4ef2-8bbc-92dbc2a772d4",
        "cursor": {
          "ref": "5d704964-f99e-4377-af67-8fbfc7172a40",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9514a86a-860c-4161-87f6-da585a0e74ff"
        },
        "item": {
          "id": "b4ab5445-a91e-4ef2-8bbc-92dbc2a772d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c28729f4-9606-4501-b031-426a2c4f1e03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b4ab5445-a91e-4ef2-8bbc-92dbc2a772d4",
        "cursor": {
          "ref": "5d704964-f99e-4377-af67-8fbfc7172a40",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9514a86a-860c-4161-87f6-da585a0e74ff"
        },
        "item": {
          "id": "b4ab5445-a91e-4ef2-8bbc-92dbc2a772d4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c28729f4-9606-4501-b031-426a2c4f1e03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6180e23d-e97a-4deb-9186-52ee7282e096",
        "cursor": {
          "ref": "9b2cd11a-ca35-45a2-afd9-67c9960df667",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3d8b5d8b-414c-477a-becf-385a86ba8d59"
        },
        "item": {
          "id": "6180e23d-e97a-4deb-9186-52ee7282e096",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "963a08a6-7f04-4c94-98a9-e8d4d320d351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6180e23d-e97a-4deb-9186-52ee7282e096",
        "cursor": {
          "ref": "9b2cd11a-ca35-45a2-afd9-67c9960df667",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3d8b5d8b-414c-477a-becf-385a86ba8d59"
        },
        "item": {
          "id": "6180e23d-e97a-4deb-9186-52ee7282e096",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "963a08a6-7f04-4c94-98a9-e8d4d320d351",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "97a8d160-685f-4963-8d5c-4ec212df70f5",
        "cursor": {
          "ref": "186893de-c10a-4e55-b19c-e6ebb303b618",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5e7dbcdc-94cb-4a1f-98fc-ef2884577698"
        },
        "item": {
          "id": "97a8d160-685f-4963-8d5c-4ec212df70f5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b1c31d35-d3ee-46ca-a108-68152ad721ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "97a8d160-685f-4963-8d5c-4ec212df70f5",
        "cursor": {
          "ref": "186893de-c10a-4e55-b19c-e6ebb303b618",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5e7dbcdc-94cb-4a1f-98fc-ef2884577698"
        },
        "item": {
          "id": "97a8d160-685f-4963-8d5c-4ec212df70f5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b1c31d35-d3ee-46ca-a108-68152ad721ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "10b1dc87-3449-4030-ab8d-230a275ee391",
        "cursor": {
          "ref": "eed5dd5f-9df7-4ef5-be7d-dec2b60bca71",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e276a2f-a25f-4c61-a9ac-e9b83677d534"
        },
        "item": {
          "id": "10b1dc87-3449-4030-ab8d-230a275ee391",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4a93b696-4dcc-445b-a7c7-293b38a3dbf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "10b1dc87-3449-4030-ab8d-230a275ee391",
        "cursor": {
          "ref": "eed5dd5f-9df7-4ef5-be7d-dec2b60bca71",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e276a2f-a25f-4c61-a9ac-e9b83677d534"
        },
        "item": {
          "id": "10b1dc87-3449-4030-ab8d-230a275ee391",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4a93b696-4dcc-445b-a7c7-293b38a3dbf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f3098799-c6f0-4b84-a49b-769969e14f6d",
        "cursor": {
          "ref": "f3cf73e8-8951-449b-998e-4283fd354f63",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f2df056a-afe4-4bf8-98dc-ad007579f920"
        },
        "item": {
          "id": "f3098799-c6f0-4b84-a49b-769969e14f6d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e62814b6-c8c0-4377-b492-fad54e190f79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f3098799-c6f0-4b84-a49b-769969e14f6d",
        "cursor": {
          "ref": "f3cf73e8-8951-449b-998e-4283fd354f63",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f2df056a-afe4-4bf8-98dc-ad007579f920"
        },
        "item": {
          "id": "f3098799-c6f0-4b84-a49b-769969e14f6d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e62814b6-c8c0-4377-b492-fad54e190f79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "0df5b951-0253-420f-bd3b-c110cf96495b",
        "cursor": {
          "ref": "1c213d2f-b264-4e58-ae4f-c4b5581b5a3d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "61f42b4b-6771-4a7d-a2f0-d1ddfc3c3726"
        },
        "item": {
          "id": "0df5b951-0253-420f-bd3b-c110cf96495b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e29b2091-8109-4749-92b1-168c913c4a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "0df5b951-0253-420f-bd3b-c110cf96495b",
        "cursor": {
          "ref": "1c213d2f-b264-4e58-ae4f-c4b5581b5a3d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "61f42b4b-6771-4a7d-a2f0-d1ddfc3c3726"
        },
        "item": {
          "id": "0df5b951-0253-420f-bd3b-c110cf96495b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e29b2091-8109-4749-92b1-168c913c4a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "db75f9fd-6512-4217-ae3d-6c6879bbf52f",
        "cursor": {
          "ref": "a498cced-24e9-4de6-8eab-55f26b8ad16d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6bba87b5-a216-4624-adc3-9fa3ea8072d3"
        },
        "item": {
          "id": "db75f9fd-6512-4217-ae3d-6c6879bbf52f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6e30e953-8d7c-4d41-9819-60bd8c6d7257",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "db75f9fd-6512-4217-ae3d-6c6879bbf52f",
        "cursor": {
          "ref": "a498cced-24e9-4de6-8eab-55f26b8ad16d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6bba87b5-a216-4624-adc3-9fa3ea8072d3"
        },
        "item": {
          "id": "db75f9fd-6512-4217-ae3d-6c6879bbf52f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6e30e953-8d7c-4d41-9819-60bd8c6d7257",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "691a2702-5cb8-4055-be53-68fe585d5fab",
        "cursor": {
          "ref": "0b3ab2ba-592d-4736-851a-55c2bc908302",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d0a0dd34-d468-4bfd-9dfd-090f2bbb644a"
        },
        "item": {
          "id": "691a2702-5cb8-4055-be53-68fe585d5fab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2dcd172f-9830-4302-883e-520defc013ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "691a2702-5cb8-4055-be53-68fe585d5fab",
        "cursor": {
          "ref": "0b3ab2ba-592d-4736-851a-55c2bc908302",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d0a0dd34-d468-4bfd-9dfd-090f2bbb644a"
        },
        "item": {
          "id": "691a2702-5cb8-4055-be53-68fe585d5fab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2dcd172f-9830-4302-883e-520defc013ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "71844de3-246d-4432-a347-94f8f1ada2c0",
        "cursor": {
          "ref": "cf9a9e1c-40ee-4ce6-a284-cc3566514a34",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b58f1d7-269a-4b0c-be66-ed80b7b24912"
        },
        "item": {
          "id": "71844de3-246d-4432-a347-94f8f1ada2c0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "acec540e-3f3e-4e3d-bde0-efec7edc46e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "71844de3-246d-4432-a347-94f8f1ada2c0",
        "cursor": {
          "ref": "cf9a9e1c-40ee-4ce6-a284-cc3566514a34",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b58f1d7-269a-4b0c-be66-ed80b7b24912"
        },
        "item": {
          "id": "71844de3-246d-4432-a347-94f8f1ada2c0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "acec540e-3f3e-4e3d-bde0-efec7edc46e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "555e57e6-3828-44da-bd23-102c2f5636a3",
        "cursor": {
          "ref": "41de489e-d094-425c-be22-186b80475cae",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c8791707-5c43-41a0-9f8b-2e1702553f68"
        },
        "item": {
          "id": "555e57e6-3828-44da-bd23-102c2f5636a3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6d2a21c8-b2fb-44ef-a1d3-e4c8040a3d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "555e57e6-3828-44da-bd23-102c2f5636a3",
        "cursor": {
          "ref": "41de489e-d094-425c-be22-186b80475cae",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c8791707-5c43-41a0-9f8b-2e1702553f68"
        },
        "item": {
          "id": "555e57e6-3828-44da-bd23-102c2f5636a3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6d2a21c8-b2fb-44ef-a1d3-e4c8040a3d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "17b08521-2aea-43f5-983b-358f4d1a9b88",
        "cursor": {
          "ref": "587ac0ff-a6a2-4735-9f33-1555b8a87cf0",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be70775f-47aa-4dca-8e80-c95c5548c5d8"
        },
        "item": {
          "id": "17b08521-2aea-43f5-983b-358f4d1a9b88",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "534185f9-3229-471f-9a0a-7572d0ed2ecd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "17b08521-2aea-43f5-983b-358f4d1a9b88",
        "cursor": {
          "ref": "587ac0ff-a6a2-4735-9f33-1555b8a87cf0",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be70775f-47aa-4dca-8e80-c95c5548c5d8"
        },
        "item": {
          "id": "17b08521-2aea-43f5-983b-358f4d1a9b88",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "534185f9-3229-471f-9a0a-7572d0ed2ecd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "92daf914-e1e8-41ea-ab49-be25e73dd8ad",
        "cursor": {
          "ref": "78064001-e851-4e3d-9cf0-7440fdb7e0a5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72820438-ac54-4804-acd7-2d1c7742a325"
        },
        "item": {
          "id": "92daf914-e1e8-41ea-ab49-be25e73dd8ad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b4079e9e-bc89-4183-9727-fbac18a2fa40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "92daf914-e1e8-41ea-ab49-be25e73dd8ad",
        "cursor": {
          "ref": "78064001-e851-4e3d-9cf0-7440fdb7e0a5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72820438-ac54-4804-acd7-2d1c7742a325"
        },
        "item": {
          "id": "92daf914-e1e8-41ea-ab49-be25e73dd8ad",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b4079e9e-bc89-4183-9727-fbac18a2fa40",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ef24a101-6f24-439b-bf34-4e1e7433d34e",
        "cursor": {
          "ref": "d9ac4a1a-5bce-481d-a092-b34650efb9a3",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b3ab6291-6d91-41c4-91ae-0d3b9788dfd3"
        },
        "item": {
          "id": "ef24a101-6f24-439b-bf34-4e1e7433d34e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6e63ff6e-be97-4afa-83fb-336a18b201c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "ef24a101-6f24-439b-bf34-4e1e7433d34e",
        "cursor": {
          "ref": "d9ac4a1a-5bce-481d-a092-b34650efb9a3",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b3ab6291-6d91-41c4-91ae-0d3b9788dfd3"
        },
        "item": {
          "id": "ef24a101-6f24-439b-bf34-4e1e7433d34e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6e63ff6e-be97-4afa-83fb-336a18b201c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "a43dca84-e536-434d-a1b3-111401fa6fa7",
        "cursor": {
          "ref": "58bbb7b4-228b-4182-9064-aeeb556b4a2d",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cbec94ba-46f5-4073-b62b-2704b3d6ee59"
        },
        "item": {
          "id": "a43dca84-e536-434d-a1b3-111401fa6fa7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8911c3d3-95a2-4721-b897-0c9d9e797625",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a43dca84-e536-434d-a1b3-111401fa6fa7",
        "cursor": {
          "ref": "58bbb7b4-228b-4182-9064-aeeb556b4a2d",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cbec94ba-46f5-4073-b62b-2704b3d6ee59"
        },
        "item": {
          "id": "a43dca84-e536-434d-a1b3-111401fa6fa7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8911c3d3-95a2-4721-b897-0c9d9e797625",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c264c344-3e98-4dff-8ebf-bc139d3a6e8f",
        "cursor": {
          "ref": "3bedc7b9-5959-4c0d-afde-705df172a839",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fd5cb50d-8d65-4e00-89bb-e431903ab9e1"
        },
        "item": {
          "id": "c264c344-3e98-4dff-8ebf-bc139d3a6e8f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ac6fb518-7475-422c-b2dd-44437b8bb4da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c264c344-3e98-4dff-8ebf-bc139d3a6e8f",
        "cursor": {
          "ref": "3bedc7b9-5959-4c0d-afde-705df172a839",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fd5cb50d-8d65-4e00-89bb-e431903ab9e1"
        },
        "item": {
          "id": "c264c344-3e98-4dff-8ebf-bc139d3a6e8f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ac6fb518-7475-422c-b2dd-44437b8bb4da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "af4d7718-78b9-425b-8ed5-a7851cb5371b",
        "cursor": {
          "ref": "461586cf-eb92-4bec-9f96-9d43903d1bd6",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b281a1ef-fac0-440a-aae7-40032f1aa78d"
        },
        "item": {
          "id": "af4d7718-78b9-425b-8ed5-a7851cb5371b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bb87b46-cd16-4975-b8b6-7d13d1761c08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "af4d7718-78b9-425b-8ed5-a7851cb5371b",
        "cursor": {
          "ref": "461586cf-eb92-4bec-9f96-9d43903d1bd6",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b281a1ef-fac0-440a-aae7-40032f1aa78d"
        },
        "item": {
          "id": "af4d7718-78b9-425b-8ed5-a7851cb5371b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bb87b46-cd16-4975-b8b6-7d13d1761c08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "063fa874-0371-4b18-b92f-871881197637",
        "cursor": {
          "ref": "f1bc082b-7181-4624-81bc-17f11fb0170d",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2719d168-fdb5-4e5c-9c5d-9fdfd5d9de61"
        },
        "item": {
          "id": "063fa874-0371-4b18-b92f-871881197637",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0b776b66-9cc9-449d-8451-a6c82c116384",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "063fa874-0371-4b18-b92f-871881197637",
        "cursor": {
          "ref": "f1bc082b-7181-4624-81bc-17f11fb0170d",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2719d168-fdb5-4e5c-9c5d-9fdfd5d9de61"
        },
        "item": {
          "id": "063fa874-0371-4b18-b92f-871881197637",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0b776b66-9cc9-449d-8451-a6c82c116384",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b2f67882-0048-45f2-aef4-e6a7e2e917fc",
        "cursor": {
          "ref": "f8c76755-b825-47c9-b482-5b2392407471",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "438221cd-c33b-4836-af5c-9ee09045830e"
        },
        "item": {
          "id": "b2f67882-0048-45f2-aef4-e6a7e2e917fc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bf6d397f-4d5c-424e-b137-3714c8d192b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b2f67882-0048-45f2-aef4-e6a7e2e917fc",
        "cursor": {
          "ref": "f8c76755-b825-47c9-b482-5b2392407471",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "438221cd-c33b-4836-af5c-9ee09045830e"
        },
        "item": {
          "id": "b2f67882-0048-45f2-aef4-e6a7e2e917fc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bf6d397f-4d5c-424e-b137-3714c8d192b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "3bc91b10-ee67-49e6-a517-551d5fef912c",
        "cursor": {
          "ref": "43685a8d-2f00-4410-a5ae-f8c1f0e1972f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7c7c1c7f-798d-49a2-91d1-1eadecec8c7d"
        },
        "item": {
          "id": "3bc91b10-ee67-49e6-a517-551d5fef912c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "49d9ce39-1906-40e9-92a9-9fdf3fe0640e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "3bc91b10-ee67-49e6-a517-551d5fef912c",
        "cursor": {
          "ref": "43685a8d-2f00-4410-a5ae-f8c1f0e1972f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7c7c1c7f-798d-49a2-91d1-1eadecec8c7d"
        },
        "item": {
          "id": "3bc91b10-ee67-49e6-a517-551d5fef912c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "49d9ce39-1906-40e9-92a9-9fdf3fe0640e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d6852fb1-6005-417e-9375-4e314bca0d17",
        "cursor": {
          "ref": "4e971a80-24f7-4dd9-935d-ea2a801d3810",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d20af662-122e-4d2c-8588-2194464cc26c"
        },
        "item": {
          "id": "d6852fb1-6005-417e-9375-4e314bca0d17",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7fd291c-e2d5-4bb8-96b3-e2573ff1f1cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d6852fb1-6005-417e-9375-4e314bca0d17",
        "cursor": {
          "ref": "4e971a80-24f7-4dd9-935d-ea2a801d3810",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d20af662-122e-4d2c-8588-2194464cc26c"
        },
        "item": {
          "id": "d6852fb1-6005-417e-9375-4e314bca0d17",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7fd291c-e2d5-4bb8-96b3-e2573ff1f1cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eac3b2c2-c22c-4321-be48-d60d3841f2d7",
        "cursor": {
          "ref": "bd4a6a29-7cce-4619-ab60-ce65045568ed",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a856024f-c7e7-4a39-ba14-4e7982560773"
        },
        "item": {
          "id": "eac3b2c2-c22c-4321-be48-d60d3841f2d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "28723161-ee26-4654-85de-d88ffdbb7ff9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "eac3b2c2-c22c-4321-be48-d60d3841f2d7",
        "cursor": {
          "ref": "bd4a6a29-7cce-4619-ab60-ce65045568ed",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a856024f-c7e7-4a39-ba14-4e7982560773"
        },
        "item": {
          "id": "eac3b2c2-c22c-4321-be48-d60d3841f2d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "28723161-ee26-4654-85de-d88ffdbb7ff9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "1926f19a-8be3-43bd-9f26-f359831ee777",
        "cursor": {
          "ref": "09d76225-e679-43ad-806a-5fd88c99cb8d",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "26f8387d-1e26-4295-bb89-008e3a19da44"
        },
        "item": {
          "id": "1926f19a-8be3-43bd-9f26-f359831ee777",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "32be4c8b-a930-48a4-b2b4-378f61d55134",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "1926f19a-8be3-43bd-9f26-f359831ee777",
        "cursor": {
          "ref": "09d76225-e679-43ad-806a-5fd88c99cb8d",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "26f8387d-1e26-4295-bb89-008e3a19da44"
        },
        "item": {
          "id": "1926f19a-8be3-43bd-9f26-f359831ee777",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "32be4c8b-a930-48a4-b2b4-378f61d55134",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8ef5b236-a59e-4920-801f-cebf93421384",
        "cursor": {
          "ref": "f2907e74-c5a3-45d4-8f00-4179dbf9a0a2",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7693ef36-41f1-4eda-855b-ea52a84fbbd5"
        },
        "item": {
          "id": "8ef5b236-a59e-4920-801f-cebf93421384",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac8a230f-09bd-4d64-9c29-772be860fcb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8ef5b236-a59e-4920-801f-cebf93421384",
        "cursor": {
          "ref": "f2907e74-c5a3-45d4-8f00-4179dbf9a0a2",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7693ef36-41f1-4eda-855b-ea52a84fbbd5"
        },
        "item": {
          "id": "8ef5b236-a59e-4920-801f-cebf93421384",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac8a230f-09bd-4d64-9c29-772be860fcb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "1074e87d-fbe2-4c73-a9c1-408aee4bd6f2",
        "cursor": {
          "ref": "971288f4-c8b1-4eb5-8a83-454048761942",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fc0467d8-3996-405f-8a6a-091d917e0c7b"
        },
        "item": {
          "id": "1074e87d-fbe2-4c73-a9c1-408aee4bd6f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b11010cb-dcb7-4a9d-93fa-f68868e99c8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "1074e87d-fbe2-4c73-a9c1-408aee4bd6f2",
        "cursor": {
          "ref": "971288f4-c8b1-4eb5-8a83-454048761942",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fc0467d8-3996-405f-8a6a-091d917e0c7b"
        },
        "item": {
          "id": "1074e87d-fbe2-4c73-a9c1-408aee4bd6f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b11010cb-dcb7-4a9d-93fa-f68868e99c8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a2669df8-963a-42b1-93ec-7f52a2a27f4a",
        "cursor": {
          "ref": "3d188b0c-e494-4244-8836-046c6ff13264",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1717defe-5e5a-412b-b743-742a6128834a"
        },
        "item": {
          "id": "a2669df8-963a-42b1-93ec-7f52a2a27f4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71353b57-55ef-4aeb-81f5-a53caf20c764",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a2669df8-963a-42b1-93ec-7f52a2a27f4a",
        "cursor": {
          "ref": "3d188b0c-e494-4244-8836-046c6ff13264",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1717defe-5e5a-412b-b743-742a6128834a"
        },
        "item": {
          "id": "a2669df8-963a-42b1-93ec-7f52a2a27f4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71353b57-55ef-4aeb-81f5-a53caf20c764",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9d72952b-f380-4343-86af-80c8786f2389",
        "cursor": {
          "ref": "8972a06b-2c67-4455-9362-cb3759f04054",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1239a2b3-7a65-4ed4-8eeb-5154deee1482"
        },
        "item": {
          "id": "9d72952b-f380-4343-86af-80c8786f2389",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3ea33d81-c381-4a1c-a664-26ead1e3793c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9d72952b-f380-4343-86af-80c8786f2389",
        "cursor": {
          "ref": "8972a06b-2c67-4455-9362-cb3759f04054",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1239a2b3-7a65-4ed4-8eeb-5154deee1482"
        },
        "item": {
          "id": "9d72952b-f380-4343-86af-80c8786f2389",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3ea33d81-c381-4a1c-a664-26ead1e3793c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "bd6d3d78-cc11-4614-b4ca-e7124b482c7b",
        "cursor": {
          "ref": "030f3c2c-1c25-4345-a25b-40ea2eeee90a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "91c81b9b-c3f0-4482-bd9d-11ac48e6f213"
        },
        "item": {
          "id": "bd6d3d78-cc11-4614-b4ca-e7124b482c7b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3139dedc-1872-4699-83f5-4e525a49f260",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "bd6d3d78-cc11-4614-b4ca-e7124b482c7b",
        "cursor": {
          "ref": "030f3c2c-1c25-4345-a25b-40ea2eeee90a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "91c81b9b-c3f0-4482-bd9d-11ac48e6f213"
        },
        "item": {
          "id": "bd6d3d78-cc11-4614-b4ca-e7124b482c7b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3139dedc-1872-4699-83f5-4e525a49f260",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1fd102f8-f544-4d46-9aec-b5f76b9aa9b2",
        "cursor": {
          "ref": "7f8b34b7-e591-45ad-b871-e40478ac5ad3",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7dcf0fec-4813-418e-9099-9fff04fdaa95"
        },
        "item": {
          "id": "1fd102f8-f544-4d46-9aec-b5f76b9aa9b2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c6347882-b5d9-4c99-94bf-6e2c9d082aa6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1fd102f8-f544-4d46-9aec-b5f76b9aa9b2",
        "cursor": {
          "ref": "7f8b34b7-e591-45ad-b871-e40478ac5ad3",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7dcf0fec-4813-418e-9099-9fff04fdaa95"
        },
        "item": {
          "id": "1fd102f8-f544-4d46-9aec-b5f76b9aa9b2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c6347882-b5d9-4c99-94bf-6e2c9d082aa6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5a80d721-dc93-4d63-9192-3b398d224114",
        "cursor": {
          "ref": "b31f939f-de15-462d-91a6-f07ab2fa3a57",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ba27ba6a-3934-4df6-b818-f62ea5f1df06"
        },
        "item": {
          "id": "5a80d721-dc93-4d63-9192-3b398d224114",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b433cc0c-2d42-472e-a263-2d8930a8c53a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "5a80d721-dc93-4d63-9192-3b398d224114",
        "cursor": {
          "ref": "b31f939f-de15-462d-91a6-f07ab2fa3a57",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ba27ba6a-3934-4df6-b818-f62ea5f1df06"
        },
        "item": {
          "id": "5a80d721-dc93-4d63-9192-3b398d224114",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b433cc0c-2d42-472e-a263-2d8930a8c53a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7d6bb4b8-b727-45b0-aebe-eb2f6f2e9249",
        "cursor": {
          "ref": "6c52f748-86b6-4c81-b93d-fb0f5ba5bfbf",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8435de27-1348-4508-8e43-f713f7b3ab8a"
        },
        "item": {
          "id": "7d6bb4b8-b727-45b0-aebe-eb2f6f2e9249",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "45e75edc-4825-4131-bb33-26d23056f3a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7d6bb4b8-b727-45b0-aebe-eb2f6f2e9249",
        "cursor": {
          "ref": "6c52f748-86b6-4c81-b93d-fb0f5ba5bfbf",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8435de27-1348-4508-8e43-f713f7b3ab8a"
        },
        "item": {
          "id": "7d6bb4b8-b727-45b0-aebe-eb2f6f2e9249",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "45e75edc-4825-4131-bb33-26d23056f3a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b687c0ba-84a5-45a6-8632-9f8da78a59cf",
        "cursor": {
          "ref": "0b6e414d-de8c-476c-8d65-2b14c864fef2",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "41d589d2-45c9-4eea-9aeb-c63e22d67cd2"
        },
        "item": {
          "id": "b687c0ba-84a5-45a6-8632-9f8da78a59cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8a173ff0-9b7f-4bcf-b686-6794175d4995",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b687c0ba-84a5-45a6-8632-9f8da78a59cf",
        "cursor": {
          "ref": "0b6e414d-de8c-476c-8d65-2b14c864fef2",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "41d589d2-45c9-4eea-9aeb-c63e22d67cd2"
        },
        "item": {
          "id": "b687c0ba-84a5-45a6-8632-9f8da78a59cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8a173ff0-9b7f-4bcf-b686-6794175d4995",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5d81d6ab-15d9-4f66-a12b-5f4546b5a96c",
        "cursor": {
          "ref": "0fa778a7-5fb3-4587-b70a-36842143b681",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1144081f-1f7c-4b81-a3ae-fa4dddac26b8"
        },
        "item": {
          "id": "5d81d6ab-15d9-4f66-a12b-5f4546b5a96c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "076eafba-34bf-4d77-9b23-75085a374faf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5d81d6ab-15d9-4f66-a12b-5f4546b5a96c",
        "cursor": {
          "ref": "0fa778a7-5fb3-4587-b70a-36842143b681",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1144081f-1f7c-4b81-a3ae-fa4dddac26b8"
        },
        "item": {
          "id": "5d81d6ab-15d9-4f66-a12b-5f4546b5a96c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "076eafba-34bf-4d77-9b23-75085a374faf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9353d743-4633-46e8-b1bf-60b2d53d9371",
        "cursor": {
          "ref": "445af4a6-dea8-40bf-9e94-da574fbfe6b4",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca989603-439c-4477-b1a1-d60d8cc6217c"
        },
        "item": {
          "id": "9353d743-4633-46e8-b1bf-60b2d53d9371",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a1dd2999-f134-4721-97c5-8372311b8043",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9353d743-4633-46e8-b1bf-60b2d53d9371",
        "cursor": {
          "ref": "445af4a6-dea8-40bf-9e94-da574fbfe6b4",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ca989603-439c-4477-b1a1-d60d8cc6217c"
        },
        "item": {
          "id": "9353d743-4633-46e8-b1bf-60b2d53d9371",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a1dd2999-f134-4721-97c5-8372311b8043",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f42f83ed-c826-491b-981b-666c72dc9acf",
        "cursor": {
          "ref": "56ab250c-8f37-43e5-8a3d-236d1f2d7a4d",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "04e8cba9-005c-4020-b21c-95c2e379ece2"
        },
        "item": {
          "id": "f42f83ed-c826-491b-981b-666c72dc9acf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d90e5a7d-26e2-4b26-a404-7d6dce72af56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "f42f83ed-c826-491b-981b-666c72dc9acf",
        "cursor": {
          "ref": "56ab250c-8f37-43e5-8a3d-236d1f2d7a4d",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "04e8cba9-005c-4020-b21c-95c2e379ece2"
        },
        "item": {
          "id": "f42f83ed-c826-491b-981b-666c72dc9acf",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d90e5a7d-26e2-4b26-a404-7d6dce72af56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "703939b7-d0ee-40f2-84e1-d8ba11bd989a",
        "cursor": {
          "ref": "dbb6f657-885f-4a41-bf60-967ac6001f3b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "257d00db-f03e-41de-aba5-a341327b606c"
        },
        "item": {
          "id": "703939b7-d0ee-40f2-84e1-d8ba11bd989a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "25b1c9be-04e2-4380-a755-7abbcd4456db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "703939b7-d0ee-40f2-84e1-d8ba11bd989a",
        "cursor": {
          "ref": "dbb6f657-885f-4a41-bf60-967ac6001f3b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "257d00db-f03e-41de-aba5-a341327b606c"
        },
        "item": {
          "id": "703939b7-d0ee-40f2-84e1-d8ba11bd989a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "25b1c9be-04e2-4380-a755-7abbcd4456db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "7e89e3ae-8fc7-4569-8a94-5a7a373e3b28",
        "cursor": {
          "ref": "565b3270-47b5-4ae3-a846-22d24d953519",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bbc31116-650d-4afa-80ae-392b8568d41b"
        },
        "item": {
          "id": "7e89e3ae-8fc7-4569-8a94-5a7a373e3b28",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0f128f7-5032-4884-8f8e-e5ca2774db00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "7e89e3ae-8fc7-4569-8a94-5a7a373e3b28",
        "cursor": {
          "ref": "565b3270-47b5-4ae3-a846-22d24d953519",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bbc31116-650d-4afa-80ae-392b8568d41b"
        },
        "item": {
          "id": "7e89e3ae-8fc7-4569-8a94-5a7a373e3b28",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0f128f7-5032-4884-8f8e-e5ca2774db00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "2b4ee679-0ccc-4e7e-81fb-0e86808000bd",
        "cursor": {
          "ref": "cea87f90-9461-4b0a-9956-18f2b233ae88",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "de032b76-c0bf-4c0a-b86c-25363b9aac3d"
        },
        "item": {
          "id": "2b4ee679-0ccc-4e7e-81fb-0e86808000bd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "70582c98-5e9e-45a0-abd5-8449d25c9211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "2b4ee679-0ccc-4e7e-81fb-0e86808000bd",
        "cursor": {
          "ref": "cea87f90-9461-4b0a-9956-18f2b233ae88",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "de032b76-c0bf-4c0a-b86c-25363b9aac3d"
        },
        "item": {
          "id": "2b4ee679-0ccc-4e7e-81fb-0e86808000bd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "70582c98-5e9e-45a0-abd5-8449d25c9211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "100ec856-9941-41af-9abd-1f792cc01cc5",
        "cursor": {
          "ref": "2096bded-b495-47a0-987b-c796480a7c18",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "757ad8be-8bfd-4a01-b615-fba5b8ba1433"
        },
        "item": {
          "id": "100ec856-9941-41af-9abd-1f792cc01cc5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "17541c1b-fd58-4d21-9691-e4037e831701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "100ec856-9941-41af-9abd-1f792cc01cc5",
        "cursor": {
          "ref": "2096bded-b495-47a0-987b-c796480a7c18",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "757ad8be-8bfd-4a01-b615-fba5b8ba1433"
        },
        "item": {
          "id": "100ec856-9941-41af-9abd-1f792cc01cc5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "17541c1b-fd58-4d21-9691-e4037e831701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "1f5746d1-7133-499a-87b2-0c8204a90ea9",
        "cursor": {
          "ref": "1aaa0d6a-e729-4724-991e-08fcd090bcf1",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d046c1b5-3395-49dc-a29a-a0379d41992a"
        },
        "item": {
          "id": "1f5746d1-7133-499a-87b2-0c8204a90ea9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "86ee50d0-484e-42f8-b679-6a3e345572ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "1f5746d1-7133-499a-87b2-0c8204a90ea9",
        "cursor": {
          "ref": "1aaa0d6a-e729-4724-991e-08fcd090bcf1",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d046c1b5-3395-49dc-a29a-a0379d41992a"
        },
        "item": {
          "id": "1f5746d1-7133-499a-87b2-0c8204a90ea9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "86ee50d0-484e-42f8-b679-6a3e345572ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "1075b0a2-ad37-4c99-a398-7a91f3cd6980",
        "cursor": {
          "ref": "1af3ade2-f99f-4460-9743-e9dc74d5b148",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "189b8aa2-2966-42e9-a48b-9c27ecef9f9e"
        },
        "item": {
          "id": "1075b0a2-ad37-4c99-a398-7a91f3cd6980",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8878e7fc-830e-4ef8-9091-58e00b1f8fea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "1075b0a2-ad37-4c99-a398-7a91f3cd6980",
        "cursor": {
          "ref": "1af3ade2-f99f-4460-9743-e9dc74d5b148",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "189b8aa2-2966-42e9-a48b-9c27ecef9f9e"
        },
        "item": {
          "id": "1075b0a2-ad37-4c99-a398-7a91f3cd6980",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8878e7fc-830e-4ef8-9091-58e00b1f8fea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "b1590ceb-9b34-4f7a-a821-59a37cdc1dd5",
        "cursor": {
          "ref": "6d127520-ee7c-450f-b943-42e649eb7b18",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "affc2f0f-9ad7-4d96-9e94-e02d691d3de4"
        },
        "item": {
          "id": "b1590ceb-9b34-4f7a-a821-59a37cdc1dd5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "72c16622-3ca5-4886-9d1c-0edada98ae42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b1590ceb-9b34-4f7a-a821-59a37cdc1dd5",
        "cursor": {
          "ref": "6d127520-ee7c-450f-b943-42e649eb7b18",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "affc2f0f-9ad7-4d96-9e94-e02d691d3de4"
        },
        "item": {
          "id": "b1590ceb-9b34-4f7a-a821-59a37cdc1dd5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "72c16622-3ca5-4886-9d1c-0edada98ae42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "04ae7eca-0086-40af-a1ab-a37af327735a",
        "cursor": {
          "ref": "b2315a48-3131-4838-ade4-978ab96faed2",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fc6cf0a6-480d-4948-8799-d99d37cd7baf"
        },
        "item": {
          "id": "04ae7eca-0086-40af-a1ab-a37af327735a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d4145a7e-6b40-42ed-b854-ec5b0c12224f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "04ae7eca-0086-40af-a1ab-a37af327735a",
        "cursor": {
          "ref": "b2315a48-3131-4838-ade4-978ab96faed2",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fc6cf0a6-480d-4948-8799-d99d37cd7baf"
        },
        "item": {
          "id": "04ae7eca-0086-40af-a1ab-a37af327735a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d4145a7e-6b40-42ed-b854-ec5b0c12224f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "fb8fa962-ef54-4073-bbe4-19d7f0328ea7",
        "cursor": {
          "ref": "37e486be-625b-4992-bd23-36701ad92e55",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9858db81-c34c-405d-95b4-60bb5fd6cf29"
        },
        "item": {
          "id": "fb8fa962-ef54-4073-bbe4-19d7f0328ea7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "eed25948-0242-4ba5-a403-ad3d8a51b40a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "fb8fa962-ef54-4073-bbe4-19d7f0328ea7",
        "cursor": {
          "ref": "37e486be-625b-4992-bd23-36701ad92e55",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9858db81-c34c-405d-95b4-60bb5fd6cf29"
        },
        "item": {
          "id": "fb8fa962-ef54-4073-bbe4-19d7f0328ea7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "eed25948-0242-4ba5-a403-ad3d8a51b40a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "fc752951-2dff-4889-81fb-473c64f8edb4",
        "cursor": {
          "ref": "fe867eae-d2c1-44e4-8061-6f4b7a386bd2",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "febf05cd-8eb6-4a42-a522-4a37a82b9306"
        },
        "item": {
          "id": "fc752951-2dff-4889-81fb-473c64f8edb4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "74c918d6-d88a-4bf9-8f7d-45a875da364f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "fc752951-2dff-4889-81fb-473c64f8edb4",
        "cursor": {
          "ref": "fe867eae-d2c1-44e4-8061-6f4b7a386bd2",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "febf05cd-8eb6-4a42-a522-4a37a82b9306"
        },
        "item": {
          "id": "fc752951-2dff-4889-81fb-473c64f8edb4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "74c918d6-d88a-4bf9-8f7d-45a875da364f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "fcec3fef-fa93-4474-9b56-085a36f02da4",
        "cursor": {
          "ref": "3158d41a-ca40-444b-8870-19d07bc1c741",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b74256a6-9683-4603-80f2-352833010a47"
        },
        "item": {
          "id": "fcec3fef-fa93-4474-9b56-085a36f02da4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "371a05cf-be88-4d89-b345-7093d655bd8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fcec3fef-fa93-4474-9b56-085a36f02da4",
        "cursor": {
          "ref": "3158d41a-ca40-444b-8870-19d07bc1c741",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b74256a6-9683-4603-80f2-352833010a47"
        },
        "item": {
          "id": "fcec3fef-fa93-4474-9b56-085a36f02da4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "371a05cf-be88-4d89-b345-7093d655bd8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "9a811f75-158e-495c-8850-7897a648ff98",
        "cursor": {
          "ref": "418e1f88-ef6a-46e1-94c8-ccd42fc81329",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c48b0f18-7cc3-4645-8590-34cfc6126a0d"
        },
        "item": {
          "id": "9a811f75-158e-495c-8850-7897a648ff98",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ec06711-24a1-411a-a7cf-943bc643e730",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "9a811f75-158e-495c-8850-7897a648ff98",
        "cursor": {
          "ref": "418e1f88-ef6a-46e1-94c8-ccd42fc81329",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c48b0f18-7cc3-4645-8590-34cfc6126a0d"
        },
        "item": {
          "id": "9a811f75-158e-495c-8850-7897a648ff98",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ec06711-24a1-411a-a7cf-943bc643e730",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "737900e4-a4cd-4729-9da0-c5c5b5f5f841",
        "cursor": {
          "ref": "1319fac9-7f12-4b64-8840-6570e4486d7b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9370ce63-ec32-452e-9253-de9779de51f9"
        },
        "item": {
          "id": "737900e4-a4cd-4729-9da0-c5c5b5f5f841",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "382f6732-7897-458b-b260-002ff1055778",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "737900e4-a4cd-4729-9da0-c5c5b5f5f841",
        "cursor": {
          "ref": "1319fac9-7f12-4b64-8840-6570e4486d7b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9370ce63-ec32-452e-9253-de9779de51f9"
        },
        "item": {
          "id": "737900e4-a4cd-4729-9da0-c5c5b5f5f841",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "382f6732-7897-458b-b260-002ff1055778",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "9e98ae64-76b8-457a-b103-86dc712954f2",
        "cursor": {
          "ref": "e142b290-3a2f-4c25-856d-ca10136d7427",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "57042414-c437-40a9-82ba-f176a815c80a"
        },
        "item": {
          "id": "9e98ae64-76b8-457a-b103-86dc712954f2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5ad1bce5-c783-4943-a287-4fad192707bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "9e98ae64-76b8-457a-b103-86dc712954f2",
        "cursor": {
          "ref": "e142b290-3a2f-4c25-856d-ca10136d7427",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "57042414-c437-40a9-82ba-f176a815c80a"
        },
        "item": {
          "id": "9e98ae64-76b8-457a-b103-86dc712954f2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5ad1bce5-c783-4943-a287-4fad192707bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b5111511-53cf-4c57-b692-a9e249b3504d",
        "cursor": {
          "ref": "bfce7d9c-b3dd-4873-85d6-99c015af68ff",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "db91fec6-18fe-4432-8506-f55bd9913e47"
        },
        "item": {
          "id": "b5111511-53cf-4c57-b692-a9e249b3504d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e514f117-1c60-4b02-ab00-46ba5343dcd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "b5111511-53cf-4c57-b692-a9e249b3504d",
        "cursor": {
          "ref": "bfce7d9c-b3dd-4873-85d6-99c015af68ff",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "db91fec6-18fe-4432-8506-f55bd9913e47"
        },
        "item": {
          "id": "b5111511-53cf-4c57-b692-a9e249b3504d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e514f117-1c60-4b02-ab00-46ba5343dcd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "20554d17-f1e4-4e5d-80bc-0b7128687465",
        "cursor": {
          "ref": "45ce8d9e-db72-4bea-b30f-23a47ebd9edb",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3d63285d-86f3-473b-8e28-1f8470617ffb"
        },
        "item": {
          "id": "20554d17-f1e4-4e5d-80bc-0b7128687465",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "62c0d851-8fe8-4824-a28a-cbda92b93dec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "20554d17-f1e4-4e5d-80bc-0b7128687465",
        "cursor": {
          "ref": "45ce8d9e-db72-4bea-b30f-23a47ebd9edb",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3d63285d-86f3-473b-8e28-1f8470617ffb"
        },
        "item": {
          "id": "20554d17-f1e4-4e5d-80bc-0b7128687465",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "62c0d851-8fe8-4824-a28a-cbda92b93dec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a4f3d0eb-dab3-4655-a630-81f552704531",
        "cursor": {
          "ref": "622aa40a-27c2-4da8-917c-dfff3b5fed25",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f1011e07-b2f7-4d5c-b66b-02720a8c8201"
        },
        "item": {
          "id": "a4f3d0eb-dab3-4655-a630-81f552704531",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6028c1d1-991b-42de-a85c-bc3f2c4096db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "a4f3d0eb-dab3-4655-a630-81f552704531",
        "cursor": {
          "ref": "622aa40a-27c2-4da8-917c-dfff3b5fed25",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f1011e07-b2f7-4d5c-b66b-02720a8c8201"
        },
        "item": {
          "id": "a4f3d0eb-dab3-4655-a630-81f552704531",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6028c1d1-991b-42de-a85c-bc3f2c4096db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "cc179e44-3c16-4cc9-b959-cbbc4f2c7dc0",
        "cursor": {
          "ref": "66e6fabe-9dc9-40be-81e4-2c7eeff3b9d6",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6c67b6db-45f0-4304-b362-c7e157bf7c48"
        },
        "item": {
          "id": "cc179e44-3c16-4cc9-b959-cbbc4f2c7dc0",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "93f9efec-b18d-40d5-a650-279fef464eb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "cc179e44-3c16-4cc9-b959-cbbc4f2c7dc0",
        "cursor": {
          "ref": "66e6fabe-9dc9-40be-81e4-2c7eeff3b9d6",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6c67b6db-45f0-4304-b362-c7e157bf7c48"
        },
        "item": {
          "id": "cc179e44-3c16-4cc9-b959-cbbc4f2c7dc0",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "93f9efec-b18d-40d5-a650-279fef464eb6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "965b2fc2-dcf6-4f1a-a27f-0470650c5f73",
        "cursor": {
          "ref": "e1d75697-bd97-4433-a447-c2badb7fe808",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "df7ed9bc-6df4-410e-a3d6-feca79994cea"
        },
        "item": {
          "id": "965b2fc2-dcf6-4f1a-a27f-0470650c5f73",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b4f87b07-7eaa-48e0-85c6-4f1cea821564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "965b2fc2-dcf6-4f1a-a27f-0470650c5f73",
        "cursor": {
          "ref": "e1d75697-bd97-4433-a447-c2badb7fe808",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "df7ed9bc-6df4-410e-a3d6-feca79994cea"
        },
        "item": {
          "id": "965b2fc2-dcf6-4f1a-a27f-0470650c5f73",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b4f87b07-7eaa-48e0-85c6-4f1cea821564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c953392b-3e4f-431a-a6f5-1d98802ae56d",
        "cursor": {
          "ref": "25151a3f-71ea-4046-834d-5e73a6387de8",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b882e014-3cf4-440b-ad67-fb6cebe42a0e"
        },
        "item": {
          "id": "c953392b-3e4f-431a-a6f5-1d98802ae56d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9c26ee34-11e9-4ddf-b0cc-afc7355596cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "c953392b-3e4f-431a-a6f5-1d98802ae56d",
        "cursor": {
          "ref": "25151a3f-71ea-4046-834d-5e73a6387de8",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b882e014-3cf4-440b-ad67-fb6cebe42a0e"
        },
        "item": {
          "id": "c953392b-3e4f-431a-a6f5-1d98802ae56d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9c26ee34-11e9-4ddf-b0cc-afc7355596cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "3769988f-ed9a-450e-ba6e-0690db73f197",
        "cursor": {
          "ref": "2aa3f79f-0cf8-4fce-96e0-460102b32b91",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8fa61afe-30d9-492c-9d03-1e6afc1007b5"
        },
        "item": {
          "id": "3769988f-ed9a-450e-ba6e-0690db73f197",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d578944-f0df-4669-9952-9f3edef1c023",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "3769988f-ed9a-450e-ba6e-0690db73f197",
        "cursor": {
          "ref": "2aa3f79f-0cf8-4fce-96e0-460102b32b91",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8fa61afe-30d9-492c-9d03-1e6afc1007b5"
        },
        "item": {
          "id": "3769988f-ed9a-450e-ba6e-0690db73f197",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d578944-f0df-4669-9952-9f3edef1c023",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "4ade6232-20a4-4f42-a7ce-6ae18d3b31c0",
        "cursor": {
          "ref": "ab766cdf-17fa-44e0-8457-ded2c3057cbe",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7baf4ed4-c1f3-4681-b39a-d6334bea992f"
        },
        "item": {
          "id": "4ade6232-20a4-4f42-a7ce-6ae18d3b31c0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9cb88df1-889e-4fc6-aab3-475e181827ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "4ade6232-20a4-4f42-a7ce-6ae18d3b31c0",
        "cursor": {
          "ref": "ab766cdf-17fa-44e0-8457-ded2c3057cbe",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7baf4ed4-c1f3-4681-b39a-d6334bea992f"
        },
        "item": {
          "id": "4ade6232-20a4-4f42-a7ce-6ae18d3b31c0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9cb88df1-889e-4fc6-aab3-475e181827ca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "1f967e51-cbf8-48a7-b789-fee6d932569d",
        "cursor": {
          "ref": "ca4c0d50-8bd9-423f-a9f8-6a227c9c31cf",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e5482469-b4f9-4dc8-a426-acfee6920a98"
        },
        "item": {
          "id": "1f967e51-cbf8-48a7-b789-fee6d932569d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6aa98cf4-3d39-4632-b8c6-3f890bc82857",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "1f967e51-cbf8-48a7-b789-fee6d932569d",
        "cursor": {
          "ref": "ca4c0d50-8bd9-423f-a9f8-6a227c9c31cf",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e5482469-b4f9-4dc8-a426-acfee6920a98"
        },
        "item": {
          "id": "1f967e51-cbf8-48a7-b789-fee6d932569d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6aa98cf4-3d39-4632-b8c6-3f890bc82857",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d0c259e0-6851-459f-9dfc-c7f6b1e28e07",
        "cursor": {
          "ref": "eac37a12-b01e-476f-8152-26b07c758f99",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "546819ef-3a37-493e-88d7-bbc4e25e9428"
        },
        "item": {
          "id": "d0c259e0-6851-459f-9dfc-c7f6b1e28e07",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3de41e24-8c50-449c-9691-61ba0618e702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d0c259e0-6851-459f-9dfc-c7f6b1e28e07",
        "cursor": {
          "ref": "eac37a12-b01e-476f-8152-26b07c758f99",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "546819ef-3a37-493e-88d7-bbc4e25e9428"
        },
        "item": {
          "id": "d0c259e0-6851-459f-9dfc-c7f6b1e28e07",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3de41e24-8c50-449c-9691-61ba0618e702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f7ef558d-6b0d-4119-9015-6ef894d81c4a",
        "cursor": {
          "ref": "37e46433-015d-4951-ab88-ae9ffbd0108b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a0e5d19c-f227-426a-a3f6-01a84f7f068a"
        },
        "item": {
          "id": "f7ef558d-6b0d-4119-9015-6ef894d81c4a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e535d1c4-c19c-4818-85a6-668306df97cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "f7ef558d-6b0d-4119-9015-6ef894d81c4a",
        "cursor": {
          "ref": "37e46433-015d-4951-ab88-ae9ffbd0108b",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a0e5d19c-f227-426a-a3f6-01a84f7f068a"
        },
        "item": {
          "id": "f7ef558d-6b0d-4119-9015-6ef894d81c4a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e535d1c4-c19c-4818-85a6-668306df97cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "91376b55-ec33-42f6-ba48-470aad14d13d",
        "cursor": {
          "ref": "d9992ff5-928e-41cd-a507-d4e2c1541c32",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30f757db-01a9-460b-a77e-aa161973787b"
        },
        "item": {
          "id": "91376b55-ec33-42f6-ba48-470aad14d13d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "38864cdc-167e-4eb3-b26a-3e0d8630671b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "91376b55-ec33-42f6-ba48-470aad14d13d",
        "cursor": {
          "ref": "d9992ff5-928e-41cd-a507-d4e2c1541c32",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30f757db-01a9-460b-a77e-aa161973787b"
        },
        "item": {
          "id": "91376b55-ec33-42f6-ba48-470aad14d13d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "38864cdc-167e-4eb3-b26a-3e0d8630671b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "df078a71-df5f-4096-ba4e-1ccc28295868",
        "cursor": {
          "ref": "04326ad4-9a47-4597-862f-6d30b52cfb64",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "93c1ee89-5036-4f16-aa5d-137efd152e07"
        },
        "item": {
          "id": "df078a71-df5f-4096-ba4e-1ccc28295868",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e9fc9ff3-b847-47a0-aa25-f65d67d329c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "df078a71-df5f-4096-ba4e-1ccc28295868",
        "cursor": {
          "ref": "04326ad4-9a47-4597-862f-6d30b52cfb64",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "93c1ee89-5036-4f16-aa5d-137efd152e07"
        },
        "item": {
          "id": "df078a71-df5f-4096-ba4e-1ccc28295868",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e9fc9ff3-b847-47a0-aa25-f65d67d329c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d9600e1e-d35b-44f1-99a1-a49c269c14f4",
        "cursor": {
          "ref": "93e890e4-77e4-4555-8765-58e9c54cf2b5",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b18405c7-3900-4d58-88a8-cabc6e5936c7"
        },
        "item": {
          "id": "d9600e1e-d35b-44f1-99a1-a49c269c14f4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "18bb00e3-6c45-41ba-9df5-6bf1c874ab34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "d9600e1e-d35b-44f1-99a1-a49c269c14f4",
        "cursor": {
          "ref": "93e890e4-77e4-4555-8765-58e9c54cf2b5",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b18405c7-3900-4d58-88a8-cabc6e5936c7"
        },
        "item": {
          "id": "d9600e1e-d35b-44f1-99a1-a49c269c14f4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "18bb00e3-6c45-41ba-9df5-6bf1c874ab34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "3b0c9c7d-f8da-4428-996f-157fc1ccf5c0",
        "cursor": {
          "ref": "6e7db040-7024-40e5-bc51-b99d59319005",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8b49ae5a-d544-40e8-b600-29e73c8f1962"
        },
        "item": {
          "id": "3b0c9c7d-f8da-4428-996f-157fc1ccf5c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0db8b87a-74f7-407b-a468-3687da558587",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "3b0c9c7d-f8da-4428-996f-157fc1ccf5c0",
        "cursor": {
          "ref": "6e7db040-7024-40e5-bc51-b99d59319005",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8b49ae5a-d544-40e8-b600-29e73c8f1962"
        },
        "item": {
          "id": "3b0c9c7d-f8da-4428-996f-157fc1ccf5c0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0db8b87a-74f7-407b-a468-3687da558587",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a6109432-7394-41a6-98a4-a1d599a48c30",
        "cursor": {
          "ref": "57f77a5f-6fca-44ac-a17a-b0fb567f71ac",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "77d5e656-53de-46c2-9b9a-c00d24b75ae4"
        },
        "item": {
          "id": "a6109432-7394-41a6-98a4-a1d599a48c30",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8f74f485-aa13-41e1-aa95-595f8b566f06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a6109432-7394-41a6-98a4-a1d599a48c30",
        "cursor": {
          "ref": "57f77a5f-6fca-44ac-a17a-b0fb567f71ac",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "77d5e656-53de-46c2-9b9a-c00d24b75ae4"
        },
        "item": {
          "id": "a6109432-7394-41a6-98a4-a1d599a48c30",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8f74f485-aa13-41e1-aa95-595f8b566f06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "8be37c44-e16f-48c1-8e52-1b048a6ecdda",
        "cursor": {
          "ref": "2a67209e-77ef-47aa-ab46-eddb9602e937",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c649ac13-9389-41ba-84fb-5a0be6ae145a"
        },
        "item": {
          "id": "8be37c44-e16f-48c1-8e52-1b048a6ecdda",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7467b97e-1f59-4d04-84f5-61868317c7a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "8be37c44-e16f-48c1-8e52-1b048a6ecdda",
        "cursor": {
          "ref": "2a67209e-77ef-47aa-ab46-eddb9602e937",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c649ac13-9389-41ba-84fb-5a0be6ae145a"
        },
        "item": {
          "id": "8be37c44-e16f-48c1-8e52-1b048a6ecdda",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7467b97e-1f59-4d04-84f5-61868317c7a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "294d5af9-e9e3-4833-9e68-04e0703c4435",
        "cursor": {
          "ref": "93f223f2-1eb9-4da7-b262-dd7b198e5c68",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "26ead74a-0164-4255-81ee-d446d9d77518"
        },
        "item": {
          "id": "294d5af9-e9e3-4833-9e68-04e0703c4435",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5cb7fb0-c8e7-47a4-9848-fa8d8aa077b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "294d5af9-e9e3-4833-9e68-04e0703c4435",
        "cursor": {
          "ref": "93f223f2-1eb9-4da7-b262-dd7b198e5c68",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "26ead74a-0164-4255-81ee-d446d9d77518"
        },
        "item": {
          "id": "294d5af9-e9e3-4833-9e68-04e0703c4435",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c5cb7fb0-c8e7-47a4-9848-fa8d8aa077b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "aea4ecef-1970-4db3-9761-f25a653b4e91",
        "cursor": {
          "ref": "62996767-69ec-46e4-90d0-e98aa6462c11",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a186a028-e1b4-4070-8060-d4750d9e5f5c"
        },
        "item": {
          "id": "aea4ecef-1970-4db3-9761-f25a653b4e91",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4300e39e-f400-4b38-886c-cf476b6265df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "aea4ecef-1970-4db3-9761-f25a653b4e91",
        "cursor": {
          "ref": "62996767-69ec-46e4-90d0-e98aa6462c11",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a186a028-e1b4-4070-8060-d4750d9e5f5c"
        },
        "item": {
          "id": "aea4ecef-1970-4db3-9761-f25a653b4e91",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4300e39e-f400-4b38-886c-cf476b6265df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "76ef9d3b-c319-45cf-b5ff-0558a36ae4b7",
        "cursor": {
          "ref": "bd9f47e7-30bb-4609-be78-2da07b92e6c0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dbc1580a-4796-48e6-9fd5-33486b4cd282"
        },
        "item": {
          "id": "76ef9d3b-c319-45cf-b5ff-0558a36ae4b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7c75e244-6d1e-49e2-b3bb-d0d679ea7d3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "76ef9d3b-c319-45cf-b5ff-0558a36ae4b7",
        "cursor": {
          "ref": "bd9f47e7-30bb-4609-be78-2da07b92e6c0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "dbc1580a-4796-48e6-9fd5-33486b4cd282"
        },
        "item": {
          "id": "76ef9d3b-c319-45cf-b5ff-0558a36ae4b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7c75e244-6d1e-49e2-b3bb-d0d679ea7d3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "fda6730f-1923-4255-807c-1861a1802785",
        "cursor": {
          "ref": "8ad5446d-4db2-4b16-8282-e7d04310348c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "19d93554-f783-4385-91ca-173daf5a65db"
        },
        "item": {
          "id": "fda6730f-1923-4255-807c-1861a1802785",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "acd769c0-d931-43e3-9eeb-251ec9c2066f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "fda6730f-1923-4255-807c-1861a1802785",
        "cursor": {
          "ref": "8ad5446d-4db2-4b16-8282-e7d04310348c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "19d93554-f783-4385-91ca-173daf5a65db"
        },
        "item": {
          "id": "fda6730f-1923-4255-807c-1861a1802785",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "acd769c0-d931-43e3-9eeb-251ec9c2066f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "d228da9a-f129-48ef-9901-ef38e6ab6f6c",
        "cursor": {
          "ref": "7134c8d3-3dfa-4d8c-827a-6193bc13e95b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fd37abef-7f19-4be8-bb1a-36d74907abb8"
        },
        "item": {
          "id": "d228da9a-f129-48ef-9901-ef38e6ab6f6c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44e7119f-9601-4471-a5e1-499a4ca149fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "d228da9a-f129-48ef-9901-ef38e6ab6f6c",
        "cursor": {
          "ref": "7134c8d3-3dfa-4d8c-827a-6193bc13e95b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fd37abef-7f19-4be8-bb1a-36d74907abb8"
        },
        "item": {
          "id": "d228da9a-f129-48ef-9901-ef38e6ab6f6c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44e7119f-9601-4471-a5e1-499a4ca149fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "cb1a699a-b351-4aa6-9274-1558c2e4f198",
        "cursor": {
          "ref": "25a6bad7-dd02-45ee-9267-baa799258686",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a26db88f-3dac-4617-a086-e8f7740d01a5"
        },
        "item": {
          "id": "cb1a699a-b351-4aa6-9274-1558c2e4f198",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8c831b90-f3ba-4ed8-b9a9-c1f91b1166ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "cb1a699a-b351-4aa6-9274-1558c2e4f198",
        "cursor": {
          "ref": "25a6bad7-dd02-45ee-9267-baa799258686",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a26db88f-3dac-4617-a086-e8f7740d01a5"
        },
        "item": {
          "id": "cb1a699a-b351-4aa6-9274-1558c2e4f198",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8c831b90-f3ba-4ed8-b9a9-c1f91b1166ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "7546e8d7-0f0f-4014-8be6-0bd133f80eae",
        "cursor": {
          "ref": "17cae3fb-1acf-42d5-8ba4-478d8b1e2f07",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "048ebd0e-d4c1-49db-b37c-2e9240a0b178"
        },
        "item": {
          "id": "7546e8d7-0f0f-4014-8be6-0bd133f80eae",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3c8748b8-ef01-4060-9073-fc8871d31b70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "7546e8d7-0f0f-4014-8be6-0bd133f80eae",
        "cursor": {
          "ref": "17cae3fb-1acf-42d5-8ba4-478d8b1e2f07",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "048ebd0e-d4c1-49db-b37c-2e9240a0b178"
        },
        "item": {
          "id": "7546e8d7-0f0f-4014-8be6-0bd133f80eae",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3c8748b8-ef01-4060-9073-fc8871d31b70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5844e74e-7369-4936-8419-0521f3c4e66d",
        "cursor": {
          "ref": "01059ee2-9118-4792-9777-1496f0aaa071",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4233911f-bec8-4808-b954-9970910cac3c"
        },
        "item": {
          "id": "5844e74e-7369-4936-8419-0521f3c4e66d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1bdec35e-69f0-4a9f-a7b5-a788f445ab8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "5844e74e-7369-4936-8419-0521f3c4e66d",
        "cursor": {
          "ref": "01059ee2-9118-4792-9777-1496f0aaa071",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4233911f-bec8-4808-b954-9970910cac3c"
        },
        "item": {
          "id": "5844e74e-7369-4936-8419-0521f3c4e66d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1bdec35e-69f0-4a9f-a7b5-a788f445ab8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d7d1dea6-b8fd-4362-96bd-b781be81e4e8",
        "cursor": {
          "ref": "00c4c735-f872-4fa8-9438-b5cd5d232060",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3de52e9c-44c9-45b7-a6d5-73eb17052655"
        },
        "item": {
          "id": "d7d1dea6-b8fd-4362-96bd-b781be81e4e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "77bd6eee-b4c4-4153-84d0-c1313c6b91bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d7d1dea6-b8fd-4362-96bd-b781be81e4e8",
        "cursor": {
          "ref": "00c4c735-f872-4fa8-9438-b5cd5d232060",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3de52e9c-44c9-45b7-a6d5-73eb17052655"
        },
        "item": {
          "id": "d7d1dea6-b8fd-4362-96bd-b781be81e4e8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "77bd6eee-b4c4-4153-84d0-c1313c6b91bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "634d17be-4e47-4d5a-b22e-2cd86d08312d",
        "cursor": {
          "ref": "fe432664-9eb3-475e-a37e-eb23a5f8f0d6",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2cd42709-cd36-4bbb-bac3-7fe05bb1a7ad"
        },
        "item": {
          "id": "634d17be-4e47-4d5a-b22e-2cd86d08312d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cd7e602a-8c19-4400-a119-ea15dbc4d923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "634d17be-4e47-4d5a-b22e-2cd86d08312d",
        "cursor": {
          "ref": "fe432664-9eb3-475e-a37e-eb23a5f8f0d6",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2cd42709-cd36-4bbb-bac3-7fe05bb1a7ad"
        },
        "item": {
          "id": "634d17be-4e47-4d5a-b22e-2cd86d08312d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cd7e602a-8c19-4400-a119-ea15dbc4d923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "959578b6-3b77-4262-a68e-541c374fec5e",
        "cursor": {
          "ref": "6f2a4479-2043-4e5a-8f97-da1ad0f4f581",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "95698d7a-060a-4460-872c-e74a60382eee"
        },
        "item": {
          "id": "959578b6-3b77-4262-a68e-541c374fec5e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "732ec992-9056-4b79-890d-c9c7a14a4355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "959578b6-3b77-4262-a68e-541c374fec5e",
        "cursor": {
          "ref": "6f2a4479-2043-4e5a-8f97-da1ad0f4f581",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "95698d7a-060a-4460-872c-e74a60382eee"
        },
        "item": {
          "id": "959578b6-3b77-4262-a68e-541c374fec5e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "732ec992-9056-4b79-890d-c9c7a14a4355",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "8b3a2915-4a37-4ed7-8d5b-9c1717c31a2c",
        "cursor": {
          "ref": "892b4241-3889-4cd5-bd98-8b3e278b5716",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "adefbc55-930e-45d6-ba01-fd2c4a14389c"
        },
        "item": {
          "id": "8b3a2915-4a37-4ed7-8d5b-9c1717c31a2c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7d71f429-06f2-4da9-8005-6ec2dbdd7094",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8b3a2915-4a37-4ed7-8d5b-9c1717c31a2c",
        "cursor": {
          "ref": "892b4241-3889-4cd5-bd98-8b3e278b5716",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "adefbc55-930e-45d6-ba01-fd2c4a14389c"
        },
        "item": {
          "id": "8b3a2915-4a37-4ed7-8d5b-9c1717c31a2c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7d71f429-06f2-4da9-8005-6ec2dbdd7094",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "476521f4-b9ee-476f-b0eb-b5d13c5dd2f1",
        "cursor": {
          "ref": "b2ee4777-d94c-4b7f-b15c-070cba15515c",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72304cc5-b84c-4676-ae44-cd04d657a86b"
        },
        "item": {
          "id": "476521f4-b9ee-476f-b0eb-b5d13c5dd2f1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0f634593-ed6f-4eb6-a8a3-9417b6264aae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "476521f4-b9ee-476f-b0eb-b5d13c5dd2f1",
        "cursor": {
          "ref": "b2ee4777-d94c-4b7f-b15c-070cba15515c",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "72304cc5-b84c-4676-ae44-cd04d657a86b"
        },
        "item": {
          "id": "476521f4-b9ee-476f-b0eb-b5d13c5dd2f1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0f634593-ed6f-4eb6-a8a3-9417b6264aae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6bb28b3f-2a78-4c3e-8aaf-f170b051ed90",
        "cursor": {
          "ref": "8e3301a1-6e18-4bf0-bd54-091d2b7fd5b0",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7ae53f7e-cec6-47f4-8cc7-8f8dbc86299f"
        },
        "item": {
          "id": "6bb28b3f-2a78-4c3e-8aaf-f170b051ed90",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a1885d35-8782-4563-b8cb-94c90e172b70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6bb28b3f-2a78-4c3e-8aaf-f170b051ed90",
        "cursor": {
          "ref": "8e3301a1-6e18-4bf0-bd54-091d2b7fd5b0",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7ae53f7e-cec6-47f4-8cc7-8f8dbc86299f"
        },
        "item": {
          "id": "6bb28b3f-2a78-4c3e-8aaf-f170b051ed90",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a1885d35-8782-4563-b8cb-94c90e172b70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "2c12e584-63d1-4fbd-97fd-87b2d64a3c6c",
        "cursor": {
          "ref": "b2eeb9b6-dee0-47ae-8282-8e5e555a2636",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f7caeb0d-074c-4377-ada2-a0fe8fa23969"
        },
        "item": {
          "id": "2c12e584-63d1-4fbd-97fd-87b2d64a3c6c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ffff0f95-7238-4a58-8a79-44fa3f4710b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2c12e584-63d1-4fbd-97fd-87b2d64a3c6c",
        "cursor": {
          "ref": "b2eeb9b6-dee0-47ae-8282-8e5e555a2636",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f7caeb0d-074c-4377-ada2-a0fe8fa23969"
        },
        "item": {
          "id": "2c12e584-63d1-4fbd-97fd-87b2d64a3c6c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ffff0f95-7238-4a58-8a79-44fa3f4710b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7b05c2ef-8b77-4e92-9c40-f09ce015497d",
        "cursor": {
          "ref": "6124e840-4f22-4f17-bead-9fad5a81516d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0c8bd176-61a0-4572-ae83-d2074658cfb2"
        },
        "item": {
          "id": "7b05c2ef-8b77-4e92-9c40-f09ce015497d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ef05210d-845f-412a-8324-27df8c95b202",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7b05c2ef-8b77-4e92-9c40-f09ce015497d",
        "cursor": {
          "ref": "6124e840-4f22-4f17-bead-9fad5a81516d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0c8bd176-61a0-4572-ae83-d2074658cfb2"
        },
        "item": {
          "id": "7b05c2ef-8b77-4e92-9c40-f09ce015497d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ef05210d-845f-412a-8324-27df8c95b202",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3017f49f-28df-4316-a375-8c00dadd4f13",
        "cursor": {
          "ref": "25f763c9-e8d5-4b6d-b97e-833a0bfdcf56",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1c786cc7-184f-4c6a-aff6-c86e569c33e7"
        },
        "item": {
          "id": "3017f49f-28df-4316-a375-8c00dadd4f13",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "db4a5a51-2a33-4078-9e25-bdde1ef951e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3017f49f-28df-4316-a375-8c00dadd4f13",
        "cursor": {
          "ref": "25f763c9-e8d5-4b6d-b97e-833a0bfdcf56",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1c786cc7-184f-4c6a-aff6-c86e569c33e7"
        },
        "item": {
          "id": "3017f49f-28df-4316-a375-8c00dadd4f13",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "db4a5a51-2a33-4078-9e25-bdde1ef951e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ad80c089-57d3-4c94-b6e6-2cc7ca90d97f",
        "cursor": {
          "ref": "bc9c8286-c89c-49a1-ba1c-9b7026ef861e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "32f5cb10-0f6c-49a2-a538-e78d514e2006"
        },
        "item": {
          "id": "ad80c089-57d3-4c94-b6e6-2cc7ca90d97f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4320a273-58db-48e2-b4d2-198d627df3d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ad80c089-57d3-4c94-b6e6-2cc7ca90d97f",
        "cursor": {
          "ref": "bc9c8286-c89c-49a1-ba1c-9b7026ef861e",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "32f5cb10-0f6c-49a2-a538-e78d514e2006"
        },
        "item": {
          "id": "ad80c089-57d3-4c94-b6e6-2cc7ca90d97f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4320a273-58db-48e2-b4d2-198d627df3d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "ad37efb6-3c9e-4e18-8086-ee8147817646",
        "cursor": {
          "ref": "1293f11d-4902-4ab3-87fd-3ea53e9cbfe2",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "86dc6257-dea5-434e-b9c3-5628cfce0bdc"
        },
        "item": {
          "id": "ad37efb6-3c9e-4e18-8086-ee8147817646",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "81990a9d-e560-4318-b953-ff256e30cd26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ad37efb6-3c9e-4e18-8086-ee8147817646",
        "cursor": {
          "ref": "1293f11d-4902-4ab3-87fd-3ea53e9cbfe2",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "86dc6257-dea5-434e-b9c3-5628cfce0bdc"
        },
        "item": {
          "id": "ad37efb6-3c9e-4e18-8086-ee8147817646",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "81990a9d-e560-4318-b953-ff256e30cd26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "bbbde9e8-64e0-450b-b192-ee0fa3019b59",
        "cursor": {
          "ref": "f209dac5-8089-4685-b3fa-808402f89295",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b6856efb-06e9-4b4a-821e-2b77bb4a1c67"
        },
        "item": {
          "id": "bbbde9e8-64e0-450b-b192-ee0fa3019b59",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "64ddd97f-4485-4cb5-9c2a-11c755a5f168",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "bbbde9e8-64e0-450b-b192-ee0fa3019b59",
        "cursor": {
          "ref": "f209dac5-8089-4685-b3fa-808402f89295",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b6856efb-06e9-4b4a-821e-2b77bb4a1c67"
        },
        "item": {
          "id": "bbbde9e8-64e0-450b-b192-ee0fa3019b59",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "64ddd97f-4485-4cb5-9c2a-11c755a5f168",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "a0abc457-c289-4d54-943d-828f9ab363e9",
        "cursor": {
          "ref": "0483ba9e-9d0c-4be7-b31f-6232144e6791",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7426061a-6979-4876-95b4-3d9dfac73032"
        },
        "item": {
          "id": "a0abc457-c289-4d54-943d-828f9ab363e9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21390775-aa8e-4c97-924f-e813e49dd582",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a0abc457-c289-4d54-943d-828f9ab363e9",
        "cursor": {
          "ref": "0483ba9e-9d0c-4be7-b31f-6232144e6791",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7426061a-6979-4876-95b4-3d9dfac73032"
        },
        "item": {
          "id": "a0abc457-c289-4d54-943d-828f9ab363e9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21390775-aa8e-4c97-924f-e813e49dd582",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "78ed85e7-bbbe-424b-af6b-69533ef0aec4",
        "cursor": {
          "ref": "cd23897a-6738-4fab-ad86-bd3d2a8c9324",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cdfd63cb-9417-4235-ba22-7542031ac579"
        },
        "item": {
          "id": "78ed85e7-bbbe-424b-af6b-69533ef0aec4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b69eb7d0-5714-48e3-9665-c7187fa27caa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "78ed85e7-bbbe-424b-af6b-69533ef0aec4",
        "cursor": {
          "ref": "cd23897a-6738-4fab-ad86-bd3d2a8c9324",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cdfd63cb-9417-4235-ba22-7542031ac579"
        },
        "item": {
          "id": "78ed85e7-bbbe-424b-af6b-69533ef0aec4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b69eb7d0-5714-48e3-9665-c7187fa27caa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "06f761f3-0224-4b4a-812f-25e353b7210a",
        "cursor": {
          "ref": "88c450d9-bf61-4921-850f-84dc44be6fbe",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9e5d16aa-ff85-4f4a-947a-584918dde933"
        },
        "item": {
          "id": "06f761f3-0224-4b4a-812f-25e353b7210a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a6cfe3b-09d9-4efb-ba90-c8c6b91b343d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "06f761f3-0224-4b4a-812f-25e353b7210a",
        "cursor": {
          "ref": "88c450d9-bf61-4921-850f-84dc44be6fbe",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9e5d16aa-ff85-4f4a-947a-584918dde933"
        },
        "item": {
          "id": "06f761f3-0224-4b4a-812f-25e353b7210a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4a6cfe3b-09d9-4efb-ba90-c8c6b91b343d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "09f3bdf8-0509-42a9-8627-0920697a82ec",
        "cursor": {
          "ref": "06f1e814-02ea-4022-869f-1b485e95bbc0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "63fb232e-50bb-47ff-9656-e7426d8f8ba1"
        },
        "item": {
          "id": "09f3bdf8-0509-42a9-8627-0920697a82ec",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "58cd1d5d-e7fc-46f2-be24-227a49c8e617",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "09f3bdf8-0509-42a9-8627-0920697a82ec",
        "cursor": {
          "ref": "06f1e814-02ea-4022-869f-1b485e95bbc0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "63fb232e-50bb-47ff-9656-e7426d8f8ba1"
        },
        "item": {
          "id": "09f3bdf8-0509-42a9-8627-0920697a82ec",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "58cd1d5d-e7fc-46f2-be24-227a49c8e617",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "a88af416-f12a-4881-92d8-d64e71e9b7a3",
        "cursor": {
          "ref": "5c78f67e-f3fb-40a4-b033-77ed5701e113",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6f55f459-e96b-4575-9ecb-bcefffe047db"
        },
        "item": {
          "id": "a88af416-f12a-4881-92d8-d64e71e9b7a3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "072e0401-2005-4414-a007-93b4f56f738f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "a88af416-f12a-4881-92d8-d64e71e9b7a3",
        "cursor": {
          "ref": "5c78f67e-f3fb-40a4-b033-77ed5701e113",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6f55f459-e96b-4575-9ecb-bcefffe047db"
        },
        "item": {
          "id": "a88af416-f12a-4881-92d8-d64e71e9b7a3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "072e0401-2005-4414-a007-93b4f56f738f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "577e4cb1-6ec0-4448-8bd1-1c104555aa64",
        "cursor": {
          "ref": "6d8504fc-15ca-4701-9020-6de40c2943ec",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "903dabc5-f341-48d0-a07f-45f5b89577c2"
        },
        "item": {
          "id": "577e4cb1-6ec0-4448-8bd1-1c104555aa64",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fa841930-27eb-4f71-9d2e-42a043dfdca7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "577e4cb1-6ec0-4448-8bd1-1c104555aa64",
        "cursor": {
          "ref": "6d8504fc-15ca-4701-9020-6de40c2943ec",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "903dabc5-f341-48d0-a07f-45f5b89577c2"
        },
        "item": {
          "id": "577e4cb1-6ec0-4448-8bd1-1c104555aa64",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fa841930-27eb-4f71-9d2e-42a043dfdca7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "e1071a37-1414-4f81-abba-9787625bc5b8",
        "cursor": {
          "ref": "8964ea4f-a32e-42d4-8ebf-d23f646ed05e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9b807a3f-2628-4540-9e14-00bd0abfda89"
        },
        "item": {
          "id": "e1071a37-1414-4f81-abba-9787625bc5b8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2a1ba424-2cf3-42eb-9b44-ff66ea96d7b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e1071a37-1414-4f81-abba-9787625bc5b8",
        "cursor": {
          "ref": "8964ea4f-a32e-42d4-8ebf-d23f646ed05e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9b807a3f-2628-4540-9e14-00bd0abfda89"
        },
        "item": {
          "id": "e1071a37-1414-4f81-abba-9787625bc5b8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2a1ba424-2cf3-42eb-9b44-ff66ea96d7b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "d417d9df-5048-4d88-ab6d-71941013b3b5",
        "cursor": {
          "ref": "1d4eae23-a22d-47c1-8cce-20844e9ab5cf",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c16fbf2f-9e4b-4546-8c20-1e834c2245a6"
        },
        "item": {
          "id": "d417d9df-5048-4d88-ab6d-71941013b3b5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b7c08de2-e0cc-41d4-bfbe-6b67f76be987",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "d417d9df-5048-4d88-ab6d-71941013b3b5",
        "cursor": {
          "ref": "1d4eae23-a22d-47c1-8cce-20844e9ab5cf",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c16fbf2f-9e4b-4546-8c20-1e834c2245a6"
        },
        "item": {
          "id": "d417d9df-5048-4d88-ab6d-71941013b3b5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b7c08de2-e0cc-41d4-bfbe-6b67f76be987",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "4967698a-37b1-4c39-a103-b5b02cd4a058",
        "cursor": {
          "ref": "f6a22a6f-2147-46cf-9240-6c981ee116f4",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b1e7704d-6802-483c-9b30-245903363ef8"
        },
        "item": {
          "id": "4967698a-37b1-4c39-a103-b5b02cd4a058",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ad335645-1e8c-48ba-8c5f-04a855e41706",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "4967698a-37b1-4c39-a103-b5b02cd4a058",
        "cursor": {
          "ref": "f6a22a6f-2147-46cf-9240-6c981ee116f4",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b1e7704d-6802-483c-9b30-245903363ef8"
        },
        "item": {
          "id": "4967698a-37b1-4c39-a103-b5b02cd4a058",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ad335645-1e8c-48ba-8c5f-04a855e41706",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "0adb9fc4-3b8b-4e52-b4c5-24a3f2ff7ef5",
        "cursor": {
          "ref": "078104d1-e3b6-4230-a44a-6487d60ea72b",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2209f027-75df-4eff-84a4-7e717294f55f"
        },
        "item": {
          "id": "0adb9fc4-3b8b-4e52-b4c5-24a3f2ff7ef5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9da4938-c75c-479d-a3cd-980c50c2f39b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0adb9fc4-3b8b-4e52-b4c5-24a3f2ff7ef5",
        "cursor": {
          "ref": "078104d1-e3b6-4230-a44a-6487d60ea72b",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2209f027-75df-4eff-84a4-7e717294f55f"
        },
        "item": {
          "id": "0adb9fc4-3b8b-4e52-b4c5-24a3f2ff7ef5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9da4938-c75c-479d-a3cd-980c50c2f39b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "8f5096f5-3fb4-417d-9639-b05aeb715ff5",
        "cursor": {
          "ref": "9d28098f-57d6-4e6a-a133-eac5e9c2fd39",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "93ed4ddb-5bfe-4feb-819a-4614530b802f"
        },
        "item": {
          "id": "8f5096f5-3fb4-417d-9639-b05aeb715ff5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53b57347-5fca-47d6-81b9-cb408a0d777e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 29,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8f5096f5-3fb4-417d-9639-b05aeb715ff5",
        "cursor": {
          "ref": "9d28098f-57d6-4e6a-a133-eac5e9c2fd39",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "93ed4ddb-5bfe-4feb-819a-4614530b802f"
        },
        "item": {
          "id": "8f5096f5-3fb4-417d-9639-b05aeb715ff5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53b57347-5fca-47d6-81b9-cb408a0d777e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 29,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6b0d483e-46a3-4de3-b81e-9411834f1d59",
        "cursor": {
          "ref": "e3ec06d4-7ef2-42da-96c3-718a2f76da93",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fd6f9e91-38e9-4373-a823-464e603fef5a"
        },
        "item": {
          "id": "6b0d483e-46a3-4de3-b81e-9411834f1d59",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "653b6a5f-5d9a-4ddc-b771-e8cf513c504e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "6b0d483e-46a3-4de3-b81e-9411834f1d59",
        "cursor": {
          "ref": "e3ec06d4-7ef2-42da-96c3-718a2f76da93",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fd6f9e91-38e9-4373-a823-464e603fef5a"
        },
        "item": {
          "id": "6b0d483e-46a3-4de3-b81e-9411834f1d59",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "653b6a5f-5d9a-4ddc-b771-e8cf513c504e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a228636e-de1e-4a69-9c74-ef73e2126cd5",
        "cursor": {
          "ref": "f4a2d025-b41c-412e-97b6-32fdc48065b5",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c603141f-3820-48ad-a36a-c6954541f042"
        },
        "item": {
          "id": "a228636e-de1e-4a69-9c74-ef73e2126cd5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ee2450ca-bb10-4a52-b4e6-e54d65b0169d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a228636e-de1e-4a69-9c74-ef73e2126cd5",
        "cursor": {
          "ref": "f4a2d025-b41c-412e-97b6-32fdc48065b5",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c603141f-3820-48ad-a36a-c6954541f042"
        },
        "item": {
          "id": "a228636e-de1e-4a69-9c74-ef73e2126cd5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ee2450ca-bb10-4a52-b4e6-e54d65b0169d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "aacc204d-1f50-499d-8947-ed4d40a439fc",
        "cursor": {
          "ref": "b902daa4-c8e2-4d28-8f2d-2f3aa1d4626c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a71a020-9d95-4209-8c8d-3337b4a68bf6"
        },
        "item": {
          "id": "aacc204d-1f50-499d-8947-ed4d40a439fc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b528a552-d032-4253-b981-f5f98c4a2c27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "aacc204d-1f50-499d-8947-ed4d40a439fc",
        "cursor": {
          "ref": "b902daa4-c8e2-4d28-8f2d-2f3aa1d4626c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a71a020-9d95-4209-8c8d-3337b4a68bf6"
        },
        "item": {
          "id": "aacc204d-1f50-499d-8947-ed4d40a439fc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b528a552-d032-4253-b981-f5f98c4a2c27",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "de3a7cc8-9470-4195-98fe-b23b9eba63ca",
        "cursor": {
          "ref": "9a26bbcf-c88a-429f-9bea-d51f6bb745a9",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "00da7ede-1752-4c3f-851e-1e454a085665"
        },
        "item": {
          "id": "de3a7cc8-9470-4195-98fe-b23b9eba63ca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "908cb039-27bd-4501-a4fc-b2e9046cddf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "de3a7cc8-9470-4195-98fe-b23b9eba63ca",
        "cursor": {
          "ref": "9a26bbcf-c88a-429f-9bea-d51f6bb745a9",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "00da7ede-1752-4c3f-851e-1e454a085665"
        },
        "item": {
          "id": "de3a7cc8-9470-4195-98fe-b23b9eba63ca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "908cb039-27bd-4501-a4fc-b2e9046cddf3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "99f7a436-4291-4250-8568-c3fa84535cb3",
        "cursor": {
          "ref": "ad32fc16-3e47-4439-968f-8c6df0dd513f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4fface3a-87db-44ae-b25b-d780f421d8ab"
        },
        "item": {
          "id": "99f7a436-4291-4250-8568-c3fa84535cb3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "931dc0bf-fb94-426a-96fe-e48744ad582c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "99f7a436-4291-4250-8568-c3fa84535cb3",
        "cursor": {
          "ref": "ad32fc16-3e47-4439-968f-8c6df0dd513f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4fface3a-87db-44ae-b25b-d780f421d8ab"
        },
        "item": {
          "id": "99f7a436-4291-4250-8568-c3fa84535cb3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "931dc0bf-fb94-426a-96fe-e48744ad582c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "216aa550-6c74-46a0-8373-c319287b70fd",
        "cursor": {
          "ref": "b7119fe3-b562-49d0-a640-d7be69388235",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "850fd77d-8909-4dbf-b876-3b0a5597817a"
        },
        "item": {
          "id": "216aa550-6c74-46a0-8373-c319287b70fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "12d123f4-6258-4429-960e-a73999fda733",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "216aa550-6c74-46a0-8373-c319287b70fd",
        "cursor": {
          "ref": "b7119fe3-b562-49d0-a640-d7be69388235",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "850fd77d-8909-4dbf-b876-3b0a5597817a"
        },
        "item": {
          "id": "216aa550-6c74-46a0-8373-c319287b70fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "12d123f4-6258-4429-960e-a73999fda733",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "9983bca8-477b-4f44-9f12-7f4a4577d4df",
        "cursor": {
          "ref": "168c865f-0fac-49cf-9eed-e15e0052dcfe",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c93935a-7661-49f7-a534-48474e2f0cad"
        },
        "item": {
          "id": "9983bca8-477b-4f44-9f12-7f4a4577d4df",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "011eb7d0-ff0b-4210-bea3-c854b93973b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9983bca8-477b-4f44-9f12-7f4a4577d4df",
        "cursor": {
          "ref": "168c865f-0fac-49cf-9eed-e15e0052dcfe",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c93935a-7661-49f7-a534-48474e2f0cad"
        },
        "item": {
          "id": "9983bca8-477b-4f44-9f12-7f4a4577d4df",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "011eb7d0-ff0b-4210-bea3-c854b93973b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "82924878-23d8-4e0a-b954-c66c13f3848c",
        "cursor": {
          "ref": "222a65c0-c6f3-41cd-82c5-024ad7d72278",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "beee6dfc-26e1-4d13-b8d8-4df20478bd30"
        },
        "item": {
          "id": "82924878-23d8-4e0a-b954-c66c13f3848c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "add63ad7-8482-4342-83ca-62ce35dd17f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "82924878-23d8-4e0a-b954-c66c13f3848c",
        "cursor": {
          "ref": "222a65c0-c6f3-41cd-82c5-024ad7d72278",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "beee6dfc-26e1-4d13-b8d8-4df20478bd30"
        },
        "item": {
          "id": "82924878-23d8-4e0a-b954-c66c13f3848c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "add63ad7-8482-4342-83ca-62ce35dd17f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "dd493a8a-e790-4fbd-a5cd-a9a04c5f62be",
        "cursor": {
          "ref": "240e1013-4acd-4758-baf4-c644fe834092",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b7261d87-c491-4f0b-a90e-d82872563622"
        },
        "item": {
          "id": "dd493a8a-e790-4fbd-a5cd-a9a04c5f62be",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b86d72ab-2559-46b0-95d8-553f96c758a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "dd493a8a-e790-4fbd-a5cd-a9a04c5f62be",
        "cursor": {
          "ref": "240e1013-4acd-4758-baf4-c644fe834092",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b7261d87-c491-4f0b-a90e-d82872563622"
        },
        "item": {
          "id": "dd493a8a-e790-4fbd-a5cd-a9a04c5f62be",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b86d72ab-2559-46b0-95d8-553f96c758a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b0d91a3e-d0f0-4832-ab05-81bc5be6f29f",
        "cursor": {
          "ref": "77e144db-fbc9-4a85-8b88-e167c95003e0",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f6c39149-ee59-45ea-8bd8-244e31910030"
        },
        "item": {
          "id": "b0d91a3e-d0f0-4832-ab05-81bc5be6f29f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dd0ab342-2a61-475c-af5f-bc041871dc2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b0d91a3e-d0f0-4832-ab05-81bc5be6f29f",
        "cursor": {
          "ref": "77e144db-fbc9-4a85-8b88-e167c95003e0",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f6c39149-ee59-45ea-8bd8-244e31910030"
        },
        "item": {
          "id": "b0d91a3e-d0f0-4832-ab05-81bc5be6f29f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dd0ab342-2a61-475c-af5f-bc041871dc2e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "03774209-fa7c-42f3-a7ad-ec4ab88f14e5",
        "cursor": {
          "ref": "90377899-c385-43b2-9848-767654bcebe5",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5c35b5b3-62ad-426c-8c00-342ce4041b36"
        },
        "item": {
          "id": "03774209-fa7c-42f3-a7ad-ec4ab88f14e5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5081a321-6a36-423a-9ac0-5a65de62c20f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "03774209-fa7c-42f3-a7ad-ec4ab88f14e5",
        "cursor": {
          "ref": "90377899-c385-43b2-9848-767654bcebe5",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5c35b5b3-62ad-426c-8c00-342ce4041b36"
        },
        "item": {
          "id": "03774209-fa7c-42f3-a7ad-ec4ab88f14e5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5081a321-6a36-423a-9ac0-5a65de62c20f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fa056a2d-6914-4b0b-a847-ab8ca15df69f",
        "cursor": {
          "ref": "40ad221d-ba7a-4b49-bf32-f7422f766d4b",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6ed5041c-7f5a-46f8-b5f3-b4cc73ef6d54"
        },
        "item": {
          "id": "fa056a2d-6914-4b0b-a847-ab8ca15df69f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4219a6f5-fec1-4408-964f-254e6b21a6a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "fa056a2d-6914-4b0b-a847-ab8ca15df69f",
        "cursor": {
          "ref": "40ad221d-ba7a-4b49-bf32-f7422f766d4b",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6ed5041c-7f5a-46f8-b5f3-b4cc73ef6d54"
        },
        "item": {
          "id": "fa056a2d-6914-4b0b-a847-ab8ca15df69f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4219a6f5-fec1-4408-964f-254e6b21a6a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9751eb68-779b-4a48-a5ac-23ba83f80f7a",
        "cursor": {
          "ref": "dbf7cdcb-8476-4adb-b940-54df4856497f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bd8ca06e-cd29-4c54-8aa1-9c94dc6ba36c"
        },
        "item": {
          "id": "9751eb68-779b-4a48-a5ac-23ba83f80f7a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b5a48e39-1395-47f4-b338-4b996659bace",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9751eb68-779b-4a48-a5ac-23ba83f80f7a",
        "cursor": {
          "ref": "dbf7cdcb-8476-4adb-b940-54df4856497f",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bd8ca06e-cd29-4c54-8aa1-9c94dc6ba36c"
        },
        "item": {
          "id": "9751eb68-779b-4a48-a5ac-23ba83f80f7a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b5a48e39-1395-47f4-b338-4b996659bace",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "72c91ae8-e9be-41b9-9cd9-a72d5ad8763d",
        "cursor": {
          "ref": "26f5b04d-9731-41d6-835a-40c9fcc6d756",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c7923adc-b620-4294-b93a-20c976472a83"
        },
        "item": {
          "id": "72c91ae8-e9be-41b9-9cd9-a72d5ad8763d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "003fe05a-2684-4655-bdd0-c82de8194e68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "72c91ae8-e9be-41b9-9cd9-a72d5ad8763d",
        "cursor": {
          "ref": "26f5b04d-9731-41d6-835a-40c9fcc6d756",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c7923adc-b620-4294-b93a-20c976472a83"
        },
        "item": {
          "id": "72c91ae8-e9be-41b9-9cd9-a72d5ad8763d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "003fe05a-2684-4655-bdd0-c82de8194e68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ddcc8032-5a31-4d1c-a748-8b1cc5367fb5",
        "cursor": {
          "ref": "14415ebd-29df-427e-8624-4fee478aef55",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "75ec0614-2707-4c7f-8d1c-973c4aff9568"
        },
        "item": {
          "id": "ddcc8032-5a31-4d1c-a748-8b1cc5367fb5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "66a96efb-875a-4171-9066-b576c1d77f6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ddcc8032-5a31-4d1c-a748-8b1cc5367fb5",
        "cursor": {
          "ref": "14415ebd-29df-427e-8624-4fee478aef55",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "75ec0614-2707-4c7f-8d1c-973c4aff9568"
        },
        "item": {
          "id": "ddcc8032-5a31-4d1c-a748-8b1cc5367fb5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "66a96efb-875a-4171-9066-b576c1d77f6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1b921659-c794-484d-9da6-64794780a2b6",
        "cursor": {
          "ref": "20ad1490-b095-4e5f-be73-262a0792abca",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d3ff8530-5976-4a19-88ed-70bac1a05758"
        },
        "item": {
          "id": "1b921659-c794-484d-9da6-64794780a2b6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "19bcfaca-62ab-46c8-b8f2-6cf35f37e372",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1b921659-c794-484d-9da6-64794780a2b6",
        "cursor": {
          "ref": "20ad1490-b095-4e5f-be73-262a0792abca",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d3ff8530-5976-4a19-88ed-70bac1a05758"
        },
        "item": {
          "id": "1b921659-c794-484d-9da6-64794780a2b6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "19bcfaca-62ab-46c8-b8f2-6cf35f37e372",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4a2d35d3-7d32-45d6-a23a-f960e8362e31",
        "cursor": {
          "ref": "155f7750-f560-4ad3-b703-cb3df9f75a75",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f1487de-8e26-4c3f-985e-5e2ade9af7af"
        },
        "item": {
          "id": "4a2d35d3-7d32-45d6-a23a-f960e8362e31",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dd2f39eb-b320-4819-ba3d-c3e5b141d04d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4a2d35d3-7d32-45d6-a23a-f960e8362e31",
        "cursor": {
          "ref": "155f7750-f560-4ad3-b703-cb3df9f75a75",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f1487de-8e26-4c3f-985e-5e2ade9af7af"
        },
        "item": {
          "id": "4a2d35d3-7d32-45d6-a23a-f960e8362e31",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dd2f39eb-b320-4819-ba3d-c3e5b141d04d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8e10ec1c-3f9c-4345-af29-2e3bfb8a883e",
        "cursor": {
          "ref": "3788d4ef-1246-4cb9-9b33-5f0c1dc12529",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5189dd53-9ea7-44e0-b22c-12116020b088"
        },
        "item": {
          "id": "8e10ec1c-3f9c-4345-af29-2e3bfb8a883e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b72a0a8d-8b8a-4572-b760-4edf72fb2429",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8e10ec1c-3f9c-4345-af29-2e3bfb8a883e",
        "cursor": {
          "ref": "3788d4ef-1246-4cb9-9b33-5f0c1dc12529",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5189dd53-9ea7-44e0-b22c-12116020b088"
        },
        "item": {
          "id": "8e10ec1c-3f9c-4345-af29-2e3bfb8a883e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b72a0a8d-8b8a-4572-b760-4edf72fb2429",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0b2b3827-b157-4ef9-957a-3f42f111bfdf",
        "cursor": {
          "ref": "7251efaa-896d-4cf5-89c3-0bba873a9787",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "62d16eea-7457-46dc-b838-91eea07a49ac"
        },
        "item": {
          "id": "0b2b3827-b157-4ef9-957a-3f42f111bfdf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "02a45d3c-02be-4581-be4b-cdfabdf1534e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "0b2b3827-b157-4ef9-957a-3f42f111bfdf",
        "cursor": {
          "ref": "7251efaa-896d-4cf5-89c3-0bba873a9787",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "62d16eea-7457-46dc-b838-91eea07a49ac"
        },
        "item": {
          "id": "0b2b3827-b157-4ef9-957a-3f42f111bfdf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "02a45d3c-02be-4581-be4b-cdfabdf1534e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "43586d60-ad55-4a2e-8688-9e6ec3b2f5af",
        "cursor": {
          "ref": "694efcb7-b56c-441e-8515-c1fb082ac76b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "466aaba3-a68f-4cd2-816b-a570f14cbc9e"
        },
        "item": {
          "id": "43586d60-ad55-4a2e-8688-9e6ec3b2f5af",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "19ee4549-d8f6-4d99-a1c7-3ae565faaf94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "43586d60-ad55-4a2e-8688-9e6ec3b2f5af",
        "cursor": {
          "ref": "694efcb7-b56c-441e-8515-c1fb082ac76b",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "466aaba3-a68f-4cd2-816b-a570f14cbc9e"
        },
        "item": {
          "id": "43586d60-ad55-4a2e-8688-9e6ec3b2f5af",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "19ee4549-d8f6-4d99-a1c7-3ae565faaf94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "80fc9afe-cac6-4ee3-a917-eb031a7415f2",
        "cursor": {
          "ref": "f2bcb9f5-67c8-40cf-8cf9-25a1fed2d6ea",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4eaeab56-7782-4bb0-bab9-da62e9730de6"
        },
        "item": {
          "id": "80fc9afe-cac6-4ee3-a917-eb031a7415f2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c9a3eac6-58b7-4e10-b1e9-73e6e44d6442",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "80fc9afe-cac6-4ee3-a917-eb031a7415f2",
        "cursor": {
          "ref": "f2bcb9f5-67c8-40cf-8cf9-25a1fed2d6ea",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4eaeab56-7782-4bb0-bab9-da62e9730de6"
        },
        "item": {
          "id": "80fc9afe-cac6-4ee3-a917-eb031a7415f2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c9a3eac6-58b7-4e10-b1e9-73e6e44d6442",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "bb0224e9-9f6c-495e-9c01-ce6abd7fb1a2",
        "cursor": {
          "ref": "0c933fde-3be7-4aab-8c11-4a61cbc624f8",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9990c302-a0eb-4f55-adab-4254a2215f2c"
        },
        "item": {
          "id": "bb0224e9-9f6c-495e-9c01-ce6abd7fb1a2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "afbe0924-d71e-4d15-9a54-6ccda0ed3dca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "bb0224e9-9f6c-495e-9c01-ce6abd7fb1a2",
        "cursor": {
          "ref": "0c933fde-3be7-4aab-8c11-4a61cbc624f8",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9990c302-a0eb-4f55-adab-4254a2215f2c"
        },
        "item": {
          "id": "bb0224e9-9f6c-495e-9c01-ce6abd7fb1a2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "afbe0924-d71e-4d15-9a54-6ccda0ed3dca",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "0a52775f-7291-4187-a4ac-2704ee2a4534",
        "cursor": {
          "ref": "73cf4283-3b59-45dc-b851-86ab43a9db33",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1db368da-6837-45de-9eb1-c1cb9214a69c"
        },
        "item": {
          "id": "0a52775f-7291-4187-a4ac-2704ee2a4534",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f07d47ae-13db-4cec-ba55-027b13399eff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "0a52775f-7291-4187-a4ac-2704ee2a4534",
        "cursor": {
          "ref": "73cf4283-3b59-45dc-b851-86ab43a9db33",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1db368da-6837-45de-9eb1-c1cb9214a69c"
        },
        "item": {
          "id": "0a52775f-7291-4187-a4ac-2704ee2a4534",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f07d47ae-13db-4cec-ba55-027b13399eff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b081811b-1e55-4c19-b7f1-63770988218e",
        "cursor": {
          "ref": "ad3a3a96-a2d3-4f4c-ba17-06e3b56a7c8a",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e7c09d37-2127-49ed-9237-607296420561"
        },
        "item": {
          "id": "b081811b-1e55-4c19-b7f1-63770988218e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca792c68-0673-4e79-bdb7-45ef14651e94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "b081811b-1e55-4c19-b7f1-63770988218e",
        "cursor": {
          "ref": "ad3a3a96-a2d3-4f4c-ba17-06e3b56a7c8a",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e7c09d37-2127-49ed-9237-607296420561"
        },
        "item": {
          "id": "b081811b-1e55-4c19-b7f1-63770988218e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ca792c68-0673-4e79-bdb7-45ef14651e94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "6f1bcac2-f4ab-457c-aed1-d4965d512325",
        "cursor": {
          "ref": "a733132a-d635-452a-87aa-bd56ce35d010",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "20238ad4-a808-45ab-af24-7d605eea1585"
        },
        "item": {
          "id": "6f1bcac2-f4ab-457c-aed1-d4965d512325",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a2534fd7-0f03-4479-98a0-e824b1c4f4d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "6f1bcac2-f4ab-457c-aed1-d4965d512325",
        "cursor": {
          "ref": "a733132a-d635-452a-87aa-bd56ce35d010",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "20238ad4-a808-45ab-af24-7d605eea1585"
        },
        "item": {
          "id": "6f1bcac2-f4ab-457c-aed1-d4965d512325",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a2534fd7-0f03-4479-98a0-e824b1c4f4d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "42d88a6c-f1bb-4e73-a46d-753949f02b1b",
        "cursor": {
          "ref": "096c59d2-0dbe-4550-a206-f782e36a1bce",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "88f19026-67f4-4013-a09a-8538d5f0e56e"
        },
        "item": {
          "id": "42d88a6c-f1bb-4e73-a46d-753949f02b1b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e38e2628-84d7-48af-a49f-633294fbe4c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "42d88a6c-f1bb-4e73-a46d-753949f02b1b",
        "cursor": {
          "ref": "096c59d2-0dbe-4550-a206-f782e36a1bce",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "88f19026-67f4-4013-a09a-8538d5f0e56e"
        },
        "item": {
          "id": "42d88a6c-f1bb-4e73-a46d-753949f02b1b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e38e2628-84d7-48af-a49f-633294fbe4c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e7fdae0f-32e6-4fb1-82d5-725f656f7e84",
        "cursor": {
          "ref": "81337bf2-beb9-4fab-835f-2d471d8ecd06",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a5111ec6-3736-4225-8d31-86ae2c092a94"
        },
        "item": {
          "id": "e7fdae0f-32e6-4fb1-82d5-725f656f7e84",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "565e7bf9-3414-4e9b-b351-ab7f66807b56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "e7fdae0f-32e6-4fb1-82d5-725f656f7e84",
        "cursor": {
          "ref": "81337bf2-beb9-4fab-835f-2d471d8ecd06",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a5111ec6-3736-4225-8d31-86ae2c092a94"
        },
        "item": {
          "id": "e7fdae0f-32e6-4fb1-82d5-725f656f7e84",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "565e7bf9-3414-4e9b-b351-ab7f66807b56",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "8a9e2530-6766-4b2b-81f1-caf67769d835",
        "cursor": {
          "ref": "ee837d47-14ee-441b-8e56-d6080c066e93",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "04a35ce2-acf1-4afb-8e0c-477f59f95bd3"
        },
        "item": {
          "id": "8a9e2530-6766-4b2b-81f1-caf67769d835",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "172bf642-691c-4269-a716-53e9f165006f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "8a9e2530-6766-4b2b-81f1-caf67769d835",
        "cursor": {
          "ref": "ee837d47-14ee-441b-8e56-d6080c066e93",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "04a35ce2-acf1-4afb-8e0c-477f59f95bd3"
        },
        "item": {
          "id": "8a9e2530-6766-4b2b-81f1-caf67769d835",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "172bf642-691c-4269-a716-53e9f165006f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "660463e7-4519-4221-81a6-fd6a6689d276",
        "cursor": {
          "ref": "f681d143-7aef-4d67-b016-2ef336ca2a99",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8afb80fe-d710-42f4-b982-44697f75bfa0"
        },
        "item": {
          "id": "660463e7-4519-4221-81a6-fd6a6689d276",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "516e85e8-6256-4d1b-bae5-d8d69c40fa8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "660463e7-4519-4221-81a6-fd6a6689d276",
        "cursor": {
          "ref": "f681d143-7aef-4d67-b016-2ef336ca2a99",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8afb80fe-d710-42f4-b982-44697f75bfa0"
        },
        "item": {
          "id": "660463e7-4519-4221-81a6-fd6a6689d276",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "516e85e8-6256-4d1b-bae5-d8d69c40fa8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "46875bf5-b7ed-4a88-80f7-62612892bbf4",
        "cursor": {
          "ref": "c790fbf8-fc85-4c28-bd0c-873010064f28",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "246ddb6a-0b12-4487-8546-a7cd7bf57181"
        },
        "item": {
          "id": "46875bf5-b7ed-4a88-80f7-62612892bbf4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b7647cde-f063-4e11-bc82-9b6018718117",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "46875bf5-b7ed-4a88-80f7-62612892bbf4",
        "cursor": {
          "ref": "c790fbf8-fc85-4c28-bd0c-873010064f28",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "246ddb6a-0b12-4487-8546-a7cd7bf57181"
        },
        "item": {
          "id": "46875bf5-b7ed-4a88-80f7-62612892bbf4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b7647cde-f063-4e11-bc82-9b6018718117",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3de84361-c5bc-4c1f-a4e4-49f85ed755f8",
        "cursor": {
          "ref": "b5af7d9c-8365-4531-832e-2c539cc5d73b",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5ef1a15d-802a-481b-ab16-09bce6a7501d"
        },
        "item": {
          "id": "3de84361-c5bc-4c1f-a4e4-49f85ed755f8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ce62ca5b-aa1b-4bd7-9836-1571d6fbfd1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "3de84361-c5bc-4c1f-a4e4-49f85ed755f8",
        "cursor": {
          "ref": "b5af7d9c-8365-4531-832e-2c539cc5d73b",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5ef1a15d-802a-481b-ab16-09bce6a7501d"
        },
        "item": {
          "id": "3de84361-c5bc-4c1f-a4e4-49f85ed755f8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ce62ca5b-aa1b-4bd7-9836-1571d6fbfd1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "dade1aa3-7bfe-43f6-b242-f6df21d9dce8",
        "cursor": {
          "ref": "51389625-2c2f-4875-8fcb-88af96b1b50e",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "62b183fc-0a1a-4f70-a0ab-952b6a48def2"
        },
        "item": {
          "id": "dade1aa3-7bfe-43f6-b242-f6df21d9dce8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "28c5c6f3-8d2f-4285-9cdb-2badb6f4bc1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dade1aa3-7bfe-43f6-b242-f6df21d9dce8",
        "cursor": {
          "ref": "51389625-2c2f-4875-8fcb-88af96b1b50e",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "62b183fc-0a1a-4f70-a0ab-952b6a48def2"
        },
        "item": {
          "id": "dade1aa3-7bfe-43f6-b242-f6df21d9dce8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "28c5c6f3-8d2f-4285-9cdb-2badb6f4bc1a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1525e592-40a6-49e0-bc91-7ed3227e0bcd",
        "cursor": {
          "ref": "1f951e48-f7e1-40cb-91fc-ff718a187834",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "012b374a-7eae-44aa-9508-e4e7203fdbe1"
        },
        "item": {
          "id": "1525e592-40a6-49e0-bc91-7ed3227e0bcd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d736d9ab-a14f-49e1-be14-e51e2cac211a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1525e592-40a6-49e0-bc91-7ed3227e0bcd",
        "cursor": {
          "ref": "1f951e48-f7e1-40cb-91fc-ff718a187834",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "012b374a-7eae-44aa-9508-e4e7203fdbe1"
        },
        "item": {
          "id": "1525e592-40a6-49e0-bc91-7ed3227e0bcd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d736d9ab-a14f-49e1-be14-e51e2cac211a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9314781b-01a9-4865-a83a-032c6f42141f",
        "cursor": {
          "ref": "7e3a5009-03d5-4d2d-844c-26427b63db2b",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a525b2c2-f395-4b6b-ae42-4cff0095e70b"
        },
        "item": {
          "id": "9314781b-01a9-4865-a83a-032c6f42141f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ea5043a2-8390-4d9a-8e21-1cb6b2a08608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9314781b-01a9-4865-a83a-032c6f42141f",
        "cursor": {
          "ref": "7e3a5009-03d5-4d2d-844c-26427b63db2b",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a525b2c2-f395-4b6b-ae42-4cff0095e70b"
        },
        "item": {
          "id": "9314781b-01a9-4865-a83a-032c6f42141f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ea5043a2-8390-4d9a-8e21-1cb6b2a08608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ff1fb7af-4f3b-4b3a-bb4a-a0174f81a953",
        "cursor": {
          "ref": "4bf3aeae-8545-4ad4-99b8-7af549a867df",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a385d098-0b75-48e1-b3c3-94780e004afe"
        },
        "item": {
          "id": "ff1fb7af-4f3b-4b3a-bb4a-a0174f81a953",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9aaa9d0d-35c4-4cd8-bec8-d15a74295bf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ff1fb7af-4f3b-4b3a-bb4a-a0174f81a953",
        "cursor": {
          "ref": "4bf3aeae-8545-4ad4-99b8-7af549a867df",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a385d098-0b75-48e1-b3c3-94780e004afe"
        },
        "item": {
          "id": "ff1fb7af-4f3b-4b3a-bb4a-a0174f81a953",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9aaa9d0d-35c4-4cd8-bec8-d15a74295bf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f1ac53a8-5560-4b2f-b24f-e1cc64084be4",
        "cursor": {
          "ref": "c2bdb706-f267-44f0-a67f-ae0e59588c7c",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "03d0741d-367f-465c-a1c8-a91309ea8c0c"
        },
        "item": {
          "id": "f1ac53a8-5560-4b2f-b24f-e1cc64084be4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8a7d47a-7933-4da3-9251-827b3e4970e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f1ac53a8-5560-4b2f-b24f-e1cc64084be4",
        "cursor": {
          "ref": "c2bdb706-f267-44f0-a67f-ae0e59588c7c",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "03d0741d-367f-465c-a1c8-a91309ea8c0c"
        },
        "item": {
          "id": "f1ac53a8-5560-4b2f-b24f-e1cc64084be4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8a7d47a-7933-4da3-9251-827b3e4970e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f262df73-9bc1-4ffd-accc-25985c81172c",
        "cursor": {
          "ref": "5c1196ec-a10e-4529-9f06-6654b554c706",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8f6a481d-6b74-4e17-8db0-67daaccca0a9"
        },
        "item": {
          "id": "f262df73-9bc1-4ffd-accc-25985c81172c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "85060cc7-5007-4312-9603-e921879a7299",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f262df73-9bc1-4ffd-accc-25985c81172c",
        "cursor": {
          "ref": "5c1196ec-a10e-4529-9f06-6654b554c706",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8f6a481d-6b74-4e17-8db0-67daaccca0a9"
        },
        "item": {
          "id": "f262df73-9bc1-4ffd-accc-25985c81172c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "85060cc7-5007-4312-9603-e921879a7299",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "17d307c2-5809-43d6-bb63-a9f7525db8a7",
        "cursor": {
          "ref": "67a09c16-12df-40be-8ae0-35911bb6828d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e5259b77-105e-4ed3-a0a7-73103aa3d335"
        },
        "item": {
          "id": "17d307c2-5809-43d6-bb63-a9f7525db8a7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "af2167e0-ec79-4d64-af2d-52890a76abdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "17d307c2-5809-43d6-bb63-a9f7525db8a7",
        "cursor": {
          "ref": "67a09c16-12df-40be-8ae0-35911bb6828d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e5259b77-105e-4ed3-a0a7-73103aa3d335"
        },
        "item": {
          "id": "17d307c2-5809-43d6-bb63-a9f7525db8a7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "af2167e0-ec79-4d64-af2d-52890a76abdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "6748af8d-34a9-4622-9d3c-8cff3cf4bfa4",
        "cursor": {
          "ref": "c10b04cc-9b3f-4c95-98bd-ab46dd5562f5",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7f810a0b-0745-4eca-8e7e-4eade9bd0f0b"
        },
        "item": {
          "id": "6748af8d-34a9-4622-9d3c-8cff3cf4bfa4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ad184f29-3824-44b8-9c71-8c890dd19314",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6748af8d-34a9-4622-9d3c-8cff3cf4bfa4",
        "cursor": {
          "ref": "c10b04cc-9b3f-4c95-98bd-ab46dd5562f5",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7f810a0b-0745-4eca-8e7e-4eade9bd0f0b"
        },
        "item": {
          "id": "6748af8d-34a9-4622-9d3c-8cff3cf4bfa4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ad184f29-3824-44b8-9c71-8c890dd19314",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a70234e9-b816-4257-a211-935f73513e51",
        "cursor": {
          "ref": "52844128-4f88-471b-a0c3-12388ab36836",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d972ead-5bc8-4fa9-a79c-5347b4d35143"
        },
        "item": {
          "id": "a70234e9-b816-4257-a211-935f73513e51",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9bf0b6d2-cad8-4aa9-9e33-ce4d0fe2925a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "a70234e9-b816-4257-a211-935f73513e51",
        "cursor": {
          "ref": "52844128-4f88-471b-a0c3-12388ab36836",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3d972ead-5bc8-4fa9-a79c-5347b4d35143"
        },
        "item": {
          "id": "a70234e9-b816-4257-a211-935f73513e51",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9bf0b6d2-cad8-4aa9-9e33-ce4d0fe2925a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "0ed18945-db19-4316-8dd8-df4175472e40",
        "cursor": {
          "ref": "4803eb09-85f0-4adc-8f73-2734e08b5bf0",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b6e096db-8bf8-4424-8fcc-c3c54be0e485"
        },
        "item": {
          "id": "0ed18945-db19-4316-8dd8-df4175472e40",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ab4a8bfd-56bb-4549-a761-d083bcda13ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "0ed18945-db19-4316-8dd8-df4175472e40",
        "cursor": {
          "ref": "4803eb09-85f0-4adc-8f73-2734e08b5bf0",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b6e096db-8bf8-4424-8fcc-c3c54be0e485"
        },
        "item": {
          "id": "0ed18945-db19-4316-8dd8-df4175472e40",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ab4a8bfd-56bb-4549-a761-d083bcda13ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
        "cursor": {
          "ref": "fd8f3817-072b-4cce-8598-aa93468fa430",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b108f449-c9e7-4f9c-b0e7-1203febbe3ce"
        },
        "item": {
          "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
        "cursor": {
          "ref": "fd8f3817-072b-4cce-8598-aa93468fa430",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b108f449-c9e7-4f9c-b0e7-1203febbe3ce"
        },
        "item": {
          "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
        "cursor": {
          "ref": "fd8f3817-072b-4cce-8598-aa93468fa430",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b108f449-c9e7-4f9c-b0e7-1203febbe3ce"
        },
        "item": {
          "id": "4e0070ff-8ddc-4b39-b2f5-ee3c324c4c4e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
        "cursor": {
          "ref": "fb13f163-8a6b-4af1-a0cc-811dc0885f9f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "470d4a59-966c-46d0-800d-b2552cf7c25c"
        },
        "item": {
          "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
        "cursor": {
          "ref": "fb13f163-8a6b-4af1-a0cc-811dc0885f9f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "470d4a59-966c-46d0-800d-b2552cf7c25c"
        },
        "item": {
          "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
        "cursor": {
          "ref": "fb13f163-8a6b-4af1-a0cc-811dc0885f9f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "470d4a59-966c-46d0-800d-b2552cf7c25c"
        },
        "item": {
          "id": "6626281b-43df-4164-9a70-ab3777ff03f5",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
        "cursor": {
          "ref": "b4af210f-fbb6-415e-a67d-7f2bbc3e6156",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64ded80e-2eb0-47b7-964d-072e59c86b0e"
        },
        "item": {
          "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
        "cursor": {
          "ref": "b4af210f-fbb6-415e-a67d-7f2bbc3e6156",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64ded80e-2eb0-47b7-964d-072e59c86b0e"
        },
        "item": {
          "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
        "cursor": {
          "ref": "b4af210f-fbb6-415e-a67d-7f2bbc3e6156",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "64ded80e-2eb0-47b7-964d-072e59c86b0e"
        },
        "item": {
          "id": "4ae8e050-ea12-4faf-91e9-35cc3c305bc1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
        "cursor": {
          "ref": "01addff5-0040-4630-8e2d-e0d6baaeb316",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0f77c941-1cdb-4f62-a0c1-c25a3373d9a7"
        },
        "item": {
          "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
        "cursor": {
          "ref": "01addff5-0040-4630-8e2d-e0d6baaeb316",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0f77c941-1cdb-4f62-a0c1-c25a3373d9a7"
        },
        "item": {
          "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
        "cursor": {
          "ref": "01addff5-0040-4630-8e2d-e0d6baaeb316",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0f77c941-1cdb-4f62-a0c1-c25a3373d9a7"
        },
        "item": {
          "id": "de63a542-3d15-44d4-bfa7-4a12dae5a146",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "49749c96-c385-489a-b098-eb40c7dce454",
        "cursor": {
          "ref": "e7fdc5ca-ac16-495f-8596-de207bbf217e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a79d08c8-51ee-47f2-bb3d-47bd1146248a"
        },
        "item": {
          "id": "49749c96-c385-489a-b098-eb40c7dce454",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "49749c96-c385-489a-b098-eb40c7dce454",
        "cursor": {
          "ref": "e7fdc5ca-ac16-495f-8596-de207bbf217e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a79d08c8-51ee-47f2-bb3d-47bd1146248a"
        },
        "item": {
          "id": "49749c96-c385-489a-b098-eb40c7dce454",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "49749c96-c385-489a-b098-eb40c7dce454",
        "cursor": {
          "ref": "e7fdc5ca-ac16-495f-8596-de207bbf217e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a79d08c8-51ee-47f2-bb3d-47bd1146248a"
        },
        "item": {
          "id": "49749c96-c385-489a-b098-eb40c7dce454",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
        "cursor": {
          "ref": "fdfd9a7b-e78f-40ca-a06e-912afc32eda8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce65ea92-f492-4ffb-af82-80059128bf94"
        },
        "item": {
          "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
        "cursor": {
          "ref": "fdfd9a7b-e78f-40ca-a06e-912afc32eda8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce65ea92-f492-4ffb-af82-80059128bf94"
        },
        "item": {
          "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
        "cursor": {
          "ref": "fdfd9a7b-e78f-40ca-a06e-912afc32eda8",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ce65ea92-f492-4ffb-af82-80059128bf94"
        },
        "item": {
          "id": "c0d34ad1-fe85-4fc3-a92b-412d7b75ff35",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}