{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eb27aa37-8132-4ca3-bdc5-0e35c851daff",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8d2cf057-2a00-434f-9041-e6dce5108e86",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55dcfe75-a027-4107-93d1-a6b28fffe3c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5678ffee-683a-4b45-be00-5bc4756505fa"
                }
              }
            ]
          },
          {
            "id": "0621e1ab-e317-4aeb-917d-737078c1de0e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8654b3c9-81ac-4beb-a5fb-bb8bba0b05f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bfc27f82-7b90-4b83-be96-5c52bfdab86a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e855e863-a38a-409c-9dd5-582112f7c363",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9d44b76d-2960-4e7c-9475-5eb730037946",
            "name": "Positive Testing",
            "item": [
              {
                "id": "61c23d95-a660-4a85-bcc9-322167bb78f0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53765152-0224-45ca-9b16-c56bb399d95d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "416f27f2-234e-40ac-ae32-9b8e9e6decee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8901580-f736-406b-ab90-31be038b5e58",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37cfd677-8e1a-4dcd-860e-47d4a67866a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52fc7923-c98f-42ff-b49e-a0e9004c04ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2fba0cc6-8ca7-4738-9b61-922bd990b114"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4bcd805-2c46-4aca-9b01-c1d7f18258be",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "51e1009d-2e8d-4d79-a147-6b66fd80bba7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69db42dd-2de3-42f6-906b-9d4855ec378a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fde60ac-8867-4268-905b-403e8681318d"
            }
          }
        ]
      },
      {
        "id": "2026dc65-ca7a-4c11-9a00-586bb4bc79fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "53f679e1-c44a-4cbf-8372-79ccc8622400",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc65c7d9-9a5f-4d54-8fc9-26e48c1af75e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "94904ede-4fad-4b65-a244-e4ee53b454bd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a05f95-d964-4026-b107-e7a97f281275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe7d0721-a989-4b76-9687-403b461f1587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2a68bd-ee97-44f3-a54e-4cb3561338e1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8533623-0cc1-4b77-842f-54281f61f74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32dacebc-81db-4e1c-9f1c-4b40104c3b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf3f5d5-506b-46f7-b512-dd8785a0bebf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3a1e9d-c323-4e47-9325-bc5c30741dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da7e7b1a-a0df-49fa-81ff-d47ef6dc72fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "224fd748-cc1c-4931-b4fa-e9862465fb0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3775c1b-b4c6-4829-a84a-a4fb0f5c7cdc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81298e98-9019-414f-b185-9586d52d71b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a129a58-3e79-4d90-b291-e9f43da0b100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934c6629-60c8-4671-b22d-ac52a27840b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060d6057-98f5-4e00-bb8a-6380937bea79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdc56bb-5833-4dd1-84e0-1eec441cd4fa",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5326e8c-a542-4cc8-9334-faa8f4cb3715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "734aac95-3010-42e4-ba92-ffdc1ba5afa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e02ac77-c4d7-4a88-bcc5-12a7dd0362da",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4e288dc0-94f9-445c-8f1e-7960f76b97ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa4584e6-1c2f-426b-bba2-040c84e8a626",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82a74311-5f7f-49ae-bd0b-1dc19243c0a2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e69cfb9f-7e2d-4c38-8f64-8eb2d3f3e6c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77e1c728-f6c6-4c5b-be5b-391367b874a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d749852d-df1b-442f-aad4-6d4b1cc6636c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "28f6d891-f457-4040-9624-51f1e541810a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4baa5171-dc25-4413-94e7-ccb9f38417c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c731100-373c-4fc9-85f1-d6dfbf7de004"
            }
          }
        ]
      },
      {
        "id": "79f80d46-e3ec-4dc4-aab1-5725ddda3771",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c31bc5db-0d9f-4a69-a5c1-da9b633c94c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6d5a157-4225-4773-83c6-069e3c5b4a73",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2eb3e686-8a31-4ca4-a58b-c4d833c069ab",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b42a91-c6f3-4bc1-a1df-6aee9a9b48c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1e1494-3d84-4d14-951c-b88a30d2bb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58613f0f-6ba7-41a0-a05a-0e082e7eb53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "140458a3-f9fa-41a9-924a-03da1f49959f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877b472f-4d43-41ba-a120-7c2ff51ae529",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d542eee-3d9b-4912-818b-ded4358fbb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04493018-d232-4b08-bc7c-1f3a7f9ff1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa5031f-415c-4b56-a28b-192d763fa1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddc0aaf2-b002-47f6-b2e4-4d1666d88d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cd6d00-7249-49db-8986-b1ab067f6dbe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16f25c5-d1fa-4231-bb09-c618f01f5e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e685ea40-61b0-406a-8650-696392987549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03852cb3-ba8f-4974-92cc-88ee3db36b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c11c27a9-b453-46d0-8b6b-68a95019c843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36399a24-754a-4f96-a16a-03d050810b1f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7c7819-b2ff-4603-ad3f-1315ef86d942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4421fc09-8127-4ed9-ad3b-a4f5332c9f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653e219f-bbf3-4613-8310-222355a34819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d501da-8c3b-4838-8ee7-50074fd6a74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d29a6f3-18ef-4946-8e91-f841c3a0cd10",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d32279d-e7c3-4d93-acfd-5de1d3882f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f97026-9577-4316-9f36-c6e229b71a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83f5a20-17cf-4e6f-88f8-3c197719bfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec9a9d5f-e199-4587-8469-48a6d5a3a1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fae5108-eb48-4a8b-9abd-20e66827b8fe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbaf5c05-1321-4fc6-9964-673c5592a5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ff2e04-6ab1-4965-9b84-c0c558416fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d17b539-8860-4a0e-b9c6-6e98c7e781ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f619a7d3-516b-46c1-93d9-e75d2fb071b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f569980a-5f52-4869-985c-6c1eb4f37701",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010a81db-00a3-4e99-acc8-caac5a75ecf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8200ce0b-21eb-44b4-885e-1ad3c09ddbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce6f868-74c5-427b-8aa8-730c7890a7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f123e58-bc9c-46d9-a5bf-91a107c7b2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf6e9d8-5309-4235-ac90-b157e0fff347",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318a053b-e1f7-4233-85a9-e5362fa64a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c893b8-777b-4d17-8e01-21937f5cc91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426ac287-7c1e-49c3-8377-7ab69d1e55c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c9ff43b-0f07-493e-8c58-2e2ab660ded4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04fea86-ab92-40f7-b675-bfca22977fa1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0c70a6-b91f-4358-abeb-63ad807ffab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d59daef-b23b-4d9f-81dc-fdcee29c6cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47cabd0-deb8-4d41-8c56-6a3d18bdb587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412490b8-5fc5-4f71-9614-665a4b0e2a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b817f48f-042f-4620-8e82-86f1b65d91c9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8109506-3627-4a5f-a28a-09aac4459de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc10505-b253-4aa7-aa1d-4de0114357fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d67e777-415f-4e83-a02a-9ba333138012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "598d95cc-ae1b-4800-8749-d8c7c00fe1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b37568-31c2-4ccc-93c2-a55106c2630a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de193fb-efe2-4432-8d8c-2f3ef9ea53ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78712f83-6ee2-4b0c-b899-becef62e1a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2f7afd-6493-461d-ac84-7395514883a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96b42345-9066-42a4-af8f-90937fbdffb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05252460-14b1-4708-9cfc-1a6f178fda2a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fc1440-e6a8-4bdf-8ba4-3a9f1064d275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b47e599-4d38-4136-9213-b998be94de55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c36b49-7586-4a24-96d8-36d38eb7d953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e312f37-f41b-4fe1-b01a-937b2fda8fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b69a7e5-2712-4065-995f-e26cd93fe119",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378208de-7a8b-44bc-babb-fb166eb149d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001d2d57-0f5a-4241-bab7-b8ca92395f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db43341-5a0f-4a66-bc5d-c5487b0d9716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ce17bc6-4cc0-47c9-a1ef-9701f4c3b8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c158207f-6daf-4754-a074-c4de3f280df1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b0fc24-aca3-4591-aea6-2dfb74e62a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b2792b-c56c-4ca9-9f57-7f32f9ac7f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f22e28-f98b-4719-9a80-5339acbfba9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aadf61e-f0c9-462a-9241-f0ab2b515622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38ce2c3-2a45-4ad9-bcae-946a8e86022e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912d03d1-c979-4fab-b215-9e4ee6e6d08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0549c6a-07f1-43f5-bf78-bd39ac21e489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe143cc7-794e-4bff-a0e5-3c517b0a2d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c677d35-b535-4d04-9313-70010bf001d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbf7142-2fb5-45fe-af96-36a1edf37cdb",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cd2e71-6b7a-4b91-8f9f-74d939ecb13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02a13fc-c58a-44fc-a108-77911d1e00fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3198a580-4975-432f-a038-ea022539ee8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0877e719-c161-405e-8f7e-0b2c7eaf1dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee49723c-2149-475f-8094-48bb446863fb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa073dd-c84a-4a35-bef3-153fd3bd373e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e48a1c-9b41-48ed-9c61-dd4724e4e230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fd167d-e181-4128-87ad-adab28aa5b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccdc5933-0dff-457f-9328-340101e33ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6522e95f-0770-444f-bae7-0c3b1470dd80",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bc8e89-d621-419a-bf9a-0f379c131399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e44298d-9584-419e-9d19-15526be895e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b47c09-eaad-40f5-95c4-af905149f0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5f2713-0a3f-4a1e-847f-9d9c8d3f00a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78ef007-c8bc-4e5d-ac39-db8af990d67e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162536e6-fde2-4efe-bf16-60397d3b54c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fdd1ea8-a00c-4cb4-952d-8a1ad653c3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6033dd1d-c161-49ee-8d36-966c134541af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35589e59-6e5b-4615-9e1d-e769d3d9ddec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e1c2e1-06cb-41e7-a2f7-89e7781e8a42",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c034ce8-0f77-4dc6-a9ce-b96934517660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9100fbd-97ef-430c-9c5c-1ed7d10fae02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb438cd-c191-4aad-a445-31c678bf60cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7ad06c-df6a-4594-80fe-4fed7ad1775c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3c0d40-be98-414f-876b-81237f41a906",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5dba99-a0ca-4ee4-9d67-c982565cbba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8d0339-6517-4d6f-83be-8fb44269fe5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe6dfa5-265d-4e18-bdf7-617e70e1c98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdac6ecd-8180-484a-96a9-07e21831037d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd0dde0-1836-460a-9f87-48c7c5ef01d3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350f9221-8e3a-44d7-9546-fecc4ab3ac17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439a1ecb-a94a-4ebf-bf6a-948a6cabcc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05327683-e224-4182-b50f-240409477484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7903645c-52fe-4389-9c05-28be49ad2453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8394818c-441a-4760-9230-f795cfe8e405",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eab58bb-0a9c-4803-8fc8-539d3231e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91f8b4e-bc13-48ca-af01-151b68b86566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fe4f09-daf0-48f6-b0ef-8ed05b1beff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f310e8-d507-4040-a9a6-ecc77ca7938f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813737d8-09eb-464d-b46b-47dd696b1e70",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2a06f0-b6a4-4ceb-b3d4-cd47ab8f825c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f055ce4-527a-4c44-a130-97bba4c3aaed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545d443a-4ecf-4485-abb3-fdfed1d05a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c08b4c-7f59-4f78-adfd-7e3cce3a3cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283c47b4-7928-4bea-a92f-a0bc739b78f5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8da833d-58fe-4697-9ea8-4db89a723633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbb75c9-0d6e-489f-8707-96c0a5052f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e715150e-39d1-4f5e-b3eb-4ea6559ae7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4ea4d7-4257-4fa9-be40-b2049a3b3a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe3ba25-11b7-4f6e-99b6-db52c87d1574",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b742c1c6-8b39-4dff-b50d-81938c647369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c727c87d-9e52-4f54-8891-d700023fcccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a0d711-ac09-4b3f-9e4d-cfee55a4fe0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b036963-db65-4f26-a18a-c453929fa0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c255639-84b2-430b-b2d4-1c06c9b5d880",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9ec72d-0320-4818-8e6d-297fff93ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6171122-50ee-4a92-b881-a1af043646e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59065db1-f7cb-42f9-bda5-d04afb438b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5c4c40-192a-4252-94d1-f2e96a30b06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be236cf-8916-4465-b47a-c67cf65e2540",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f15e72f-83a7-4762-a171-f6427b7e0022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52339a03-ab9b-47d1-b6e7-b99fb630286d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a68b68e-2fda-4287-9529-9a90bead5dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da074124-d6e3-4136-b783-800316dcf860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2bda28-7415-4ef4-b218-77a7ddac433e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de0bc5b-7c36-46f0-9704-eb7742de3659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d3b506-873a-4fa7-9f16-250e657e167d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af24e1c-271d-4a3b-85de-7fbbbb5093d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e9730a-daa3-42b9-a8fa-e2b649b4be44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f036f8-f7cb-458b-896f-807806769d53",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052601bc-32dc-411f-a244-8b017847a3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ee2f15-217b-4492-9208-05ef6df080f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1091656b-f89c-435b-89b9-be590a743e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e27d4f-42c0-4160-8598-cdff83d14264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a848e5a0-fc2d-407f-b2b1-73cea13bbd6a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04617d23-9b24-4751-ac57-74409c208770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b6f655-71ab-40e2-8b22-ada34c22fb8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566a41a4-edef-4c4e-a895-c3926f2097f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaab760f-fbc6-4598-8be8-add8bf70f5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035b2e0d-1bc9-40b9-a221-01b520d82070",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f1f5de-a98b-4bd6-84f0-29507ca43867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88287f9-a524-4845-8e5a-de917e2e11e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27017643-1d37-4c7d-9730-8dff43d93e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d29d5c0-af42-42e5-9084-50a716893fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff17f6a-b7b8-4a0b-b88a-d1d356d49073",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "684c823a-8162-480f-9b8a-31bf0c01981a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71c97a0-b7aa-4965-bb04-83f559430690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67359bac-c356-4f94-be99-7cef96a4b8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a54568c6-8383-4f59-973b-22fb57f3f888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f006d7-2b35-439e-ab4a-b94fc48c3249",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28078ae9-32b0-4001-ae05-ebb246b321e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181235a2-6720-48c8-a7de-a30e5188c6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30a65e8-932c-439e-9c03-a1f39cce6a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c84847c0-60b9-436a-8b01-37f937bcd444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3b9f76-d62b-4cdf-b4bb-1cc0b2e82f88",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ca96a0-d6f1-4d01-8590-b9d4ad97735b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1129be5-8beb-4ee1-a6e3-e069d21a9afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7773117a-ef4a-4386-9cc8-b663a4fe4fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4c91bb46-e7f4-4fed-a088-436fa34880a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598d8f8a-f76a-4810-a781-37d312a0a9b9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a33702a-1380-4e2d-b133-f04357a7ee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bc7f297-f3ba-43a6-a161-93204a4c7349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288b4116-05ac-4d4f-bc88-9b0b923c3ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34810d1c-dbac-42f0-8468-f8c56ae026f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cd2002-00df-443a-b476-8e27024fab19",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36863a80-5d67-439d-bb81-db89795b9220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f196324-000f-4220-98b3-8df350afb419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bceebf-d7f4-408c-8a3c-d607e4093517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3a992a-361f-4747-9363-7e94f2eecbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2c7c73-ed7d-42f9-928d-1122dc7030d8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803c773a-90d0-473b-92f1-feb1900d7797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974212af-3443-43ff-9bac-973bba298ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cbcb68-601d-45ec-b964-de4fb20b6972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "115aa114-986a-4f9a-9649-a32e588959a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95428423-743a-4cb5-961f-2d66e9706779",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85167d32-ecb7-46a8-99bc-72a7ae8c505e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71066e69-7c65-4e6e-8d98-19903438d3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a3c808-0d44-4bb6-a14b-bd10ad3c5ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe91a7a4-78d9-473e-834a-92f80716d8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752e61fc-ddc4-4671-ad7b-98e6ce86d2db",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70eed2c8-8a35-4ca4-ba3d-224719b8f12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ed51b2-7516-45b2-b1f2-2607b86b18ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475365a4-752f-43c6-a501-649dcd7eabc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9ae193-3f24-4743-87da-6f81103f4d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f594e59-b49e-4088-84e5-3c6ad9f7ee83",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b169ddf-99d6-48b1-8753-31f4dd620205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eeaa31-0ade-446a-8851-3f18fa114258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198ab959-daba-4b6e-9e24-b35fc3511bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7cdb3a0-f9af-447b-acdf-6d6564a04f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9765ff0-528c-4bbe-90f8-9177df4cac84",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7671f9a8-3d06-40ba-b9eb-e362bda0a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ea2e33-6df7-43f2-96d8-6f8ad2875dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a23963b-a536-4f96-b9d6-c49d9d63942a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5c4bfd-f16b-4b0e-9fbd-787350739307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbcdf54-3246-444a-97e6-cad33066b4a0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79440ea1-ce44-4808-a118-b331dd4fa343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4e0861-2601-4d91-bb54-bb368aeeedc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419be4b8-d977-4cf5-af78-f513c4254443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9a1ae8d-2b51-42cd-81f7-635c8b3503c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a4240e-cc24-4f96-a058-2004b9c8b7f4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea564a2f-2224-4f5a-bc86-7c2689b2dd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ec9283-a2e6-46fb-836d-b6502a274fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d3f4ec-cdc0-4a70-8423-fb72deb605ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6fbed28-4180-4964-9f71-5da311f04262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e8f65a-204e-4d12-bd7e-ff161a42893f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d73ae0-16e5-449e-93c3-70d92640e345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59c1640-bdc8-47db-8196-6f80162bd325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9af97b-776a-4166-8fe5-aff6ae6d1286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ad005c-5d76-414f-9607-17363344efd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3995a115-8c1e-46b9-a884-da03701479ea",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2925aec4-131a-4a82-a675-e1f3ad8f41d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd06ff41-8d19-46c0-8c8b-c378a2a6fe9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b6c524-8a6b-4cee-9e63-38d924a9db84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3906e4c-deea-4837-ba74-71b88202721f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b64fb1c-7f91-4bf5-8f9f-89347b2bd580",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02671a28-5c15-4cb2-97e2-2b7273bf9c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec75cde-b13f-4d8b-b42b-78d2cac2f73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b49ded-7cdb-483c-ab7c-7ab822617f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48cd41dd-f4a3-4c97-b7b3-e4a86a7237b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410adc8c-7d5b-49ec-908a-8196104193b8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca2927-0e6a-4d14-b2f7-00f39c866fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fca85a-c803-4b67-b5d2-99f9d5406a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067e3946-aae9-4740-a8d2-a417dd03f74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8fd4ff-51ed-4b79-88fe-ec2a33dd5cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d9d29c-5073-4c54-8cf3-d9017d0d16b9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cf3513-2194-443e-8ec6-c5f994715748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253fa8f9-73ef-43fa-b3b3-ac2b5c96df39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa566cf-f609-4a07-bcb9-27e19dd82bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "454153bd-54a7-44b8-9938-04ed79812cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2875eac-af10-481c-9a14-abd3235fe90e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a99aa62-5b19-4f52-a214-5875f8c8424b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c850cc-92f8-4039-b8ff-0fdfbd5cca4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bee23c-eebe-4f8a-9975-86775273bb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6286ad54-2642-4a7c-8db1-a8a38796e60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4fcfe2-03b7-4527-a154-acfdcbf8cd67",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f71c6c0-2459-4806-b814-7319ca778fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c217435-220b-4e53-9813-4aeaf6607fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f940547-e807-457b-95c9-21988a16cf0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c67bf7-e004-4f86-b9bb-027d9abfa5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cd80b5-6c57-4531-a34b-363c24cb7b8e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b13208-dd2a-479d-ae7c-4c78d3f7f33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bca214-0552-4833-bbb0-6bfa3649c74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215c154c-daba-4352-9fb5-ac0738710b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d062e29a-5461-4b93-acc9-48ee8110896f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e1aa83-c786-4ed7-b447-6e7b98f46548",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4975f9ec-da80-4b38-9cc3-4c748bd52cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538dd820-3e1c-4107-a0e4-3a130b7fa461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88357cd-0708-4a68-a2e6-8d5215e71b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3049e96-39c9-43ed-b784-7d35baa2c2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d9bb9a-7e3a-419b-a1ab-ac5b8e63f884",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d650ce-bfbf-4f09-a711-f66fe5814e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b4ac55-ec87-4820-a8c4-a50899ebbbb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7bb526-1827-4e5d-b8d2-a5cd5bd4cc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c160c480-16f8-4534-ae68-57523cf67d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cf5b47-413e-46e3-89cf-68a212713788",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedc7e91-7267-46ba-9035-b479a776a92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c45fe08-dc10-4d08-9481-d3a6bb6ce1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62302ad4-38f9-4aa4-9989-3c63cd6e2034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cf911d-eba3-4262-b85c-dfb8ed5d5485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b71587f-1f57-4320-8a76-ce3f8da2b108",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0017053-8a88-434a-a9bc-d01009493fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "463a93dd-2ef8-46fa-b664-83c74e4b2548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee63ce95-9eb8-49a8-9118-b781e7ec54ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8302306c-7ed1-4715-bdf5-87e9fbf467b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ed4309-f6e8-4617-99d1-9d5de8879be1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ebb598-59ca-43df-ab7d-66a37e53c3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f81b3ae-d2c7-4e02-9089-8a4ef6994a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574f42f6-d606-4191-843b-016a37b92e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc288c3b-1e7c-44b4-901c-bc791e39a37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5401399b-5d3d-488b-b0c1-ffb5ca749f04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2a7ac0-e700-4efa-bfdf-591de1835b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac57c41-b794-48d2-b7f2-895089839de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75b1752-b53b-4094-9762-c3ae83d5183f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee4a0dc0-d732-4436-81a6-d75311313e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc70a5bf-ced4-4dc5-8c97-b04b55dd447a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f14a00-d7d4-47c5-8042-f20995397560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce209fb-b650-4ffb-a8c8-45182bc9d488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf6e4a3-1c69-4fa4-a6a6-005939080c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "167b33ac-e48d-46a6-9b57-6d8dc7bb5f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691a792f-38a7-422d-9f62-86fbe0151836",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c3c6fe-671e-4585-bc28-27e36b6e9dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9258e4eb-581f-45bf-9665-0d8ae1bcef87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55922188-b904-4782-b03f-6ffb29c3294e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a50ce66-dc93-4d88-8950-29fbe9bb9b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b745c55a-1d1d-4dc0-8ff6-1221aec25b18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f712f830-dcf6-4a7a-9aa9-9bb0a6410ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec24c80-c578-4c14-9a19-0627cb2d6615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d417f61-9997-4331-94cf-4d4db49976fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e537166-2860-4c0a-a2a6-75f319c38b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e38e53b-5dad-4e87-b06c-2501a8d971d1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9923ca98-0490-44a6-8842-bd1a7871f9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e83dac1-190a-47a1-86f7-2758c338e725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1895ef-2c7a-48a5-822c-f62866750687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef35ebc-e6fb-4122-924a-1b5ef57c2949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff094b0-6dc5-4ae2-974d-b7d338e294d1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165d6405-a3fe-4d10-b726-bc1a0e31d0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7b8c05-923a-4e16-8e21-847c4a631a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b9ca8e-2f93-4962-b0c6-aab8bdfbed84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "17a97622-29bf-4d28-9789-eafe07f4a58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2662292-0a0a-4e87-b79b-c2a4ddae9e5e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4346ea69-cb98-49f7-8165-909d0c062a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2f4c83-afaa-465c-84fc-fa7bbc8985fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f851ec2-2dc1-4867-91fd-85bd49f0e6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04438fb-a6c1-4e48-b8d4-e014deba5125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9309f7-753b-49a8-b462-4453fa3299d0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e659b074-c4ca-48e6-be41-2603a3748a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c81360-bf90-49e0-b2da-65d4b67a7a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f05fde-b887-4fb4-9c15-31a66e8f6b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f493ae1-b7a4-45bb-be57-0c42c439ca87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90cc3b9-1e2d-4bd3-99f9-0498374d2f9a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1428663f-0287-4aad-b03c-7eb41c42654e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6681bc4-7123-4ca9-ba03-a3590a830981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063256be-4c0c-4d5d-b010-344267dc8b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd59f19-884d-49ff-bd6f-d8353c61f068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a907f2df-0e45-4008-a49c-30ea16362550",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50e2b06-44fb-42f7-ae9f-9a6360ad9a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88309ab3-a3ae-4fb4-8443-1e16c40382ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d53d27-b503-4dd5-9d47-fad7c4164155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0f47c9-b1d2-4efe-a6a2-c7cef3f03576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3b30d2-c398-4ea0-b9e1-15b33fd1cbc9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88424dda-ad2d-498f-b200-92fe97f074e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e649c179-fec5-45a3-926e-ee9384885bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c805860c-2ce0-45b6-9db2-73a57308a0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1721de05-0dc0-41eb-b41b-26bf20d04f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d9d526-e7a2-43f3-a539-d9521d795730",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b329c8-6e49-4af3-a3e0-ad8938f6fd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772c116a-287f-43c4-bdae-b0d08db5f1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7c1156-9910-492e-b813-81babfa2b82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "88f87ebc-61d3-4a53-99f1-3a34e8f7d018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0714b0b0-8ac2-4bfe-81bf-8c267467b8fd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4efeb2d-d309-4a21-bfcd-962f2e1626d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cbbdf4-d8f3-4e90-bcb0-eadc645956e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6929e7-8b19-4da4-985e-b4c236c301dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "519bfa5d-d3b2-4752-87c9-69e133e64967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae41be0e-3cc9-42eb-86b0-fdbaaeeac20d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063427f3-4212-4d57-96f2-d7a895172d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0afa6f-26cf-4eb2-b077-e9d2c07fae22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3829c1d-488f-4a63-a069-207b6b198703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d86b86-4f90-4bb2-ac1d-f9aa4cb3211b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ed345f-9ba6-4da3-84f8-5d175131839f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d441ee1-4b37-4223-aaf9-f6332850d60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19be274-77e2-47a9-9e40-badbf3e782eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7974d5be-5be3-4fa8-a7e7-309923e4c069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f555d68a-c1a5-4958-82be-1fe37c3e17d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16595aaf-1d7c-4768-a92f-aa82f144ab9b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75de655d-26e3-413c-9d6e-9cb79857f15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0060ce-9246-4458-8125-e03b73347e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43299a2-05cd-4bb1-9a04-7094c9a14f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5112d3d-28d4-48fb-8491-72781818a228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224a8a50-b82d-4a04-93bc-43e1646a56af",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3c5853-6cbf-4372-b725-d68859b04fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3692de1-f66d-43c8-bd44-17326cddd62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e9ac4d-79d1-4d34-9483-8dc3073b4bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c88a44b-c739-4047-a000-17482fff23bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355784a3-30cb-4a85-87ec-29534e2e2e0f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2eda9ed-cd5a-4cee-a254-557b8f8396ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734df668-0024-4270-af54-d714f593a561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a45d83c-5c94-4486-b2c4-bf0d9dd6b12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "badbaff6-6f92-42b7-b8ff-975bcf6b50fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe3aa1b-55e9-4d2d-8eaa-b998cdb7cecb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd978d9a-0de8-476e-90a9-c763a8b40848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc49b3a9-7ba9-4509-974c-0272cdbae0df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64678ee2-5f6f-44aa-8d40-3823a32965ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7140339-786f-4336-b4e8-ff03fd7e4550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7380844e-ca27-4803-93d3-a6e7507d51d4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e604a74a-22e0-449e-9bbb-5eca760b99af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af1fd19-9fd3-49a7-84f5-6736eac803e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b7c74e-968c-4fdc-80a5-3bb7028a8d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a07245ac-bde6-4e66-83cb-629f8f96c684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2917d0a-7d82-4430-b9b5-2e408fccf7d3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8eddc1-469e-4e6f-a71a-dbe9a3e1b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330c1518-6510-46ad-bdc0-ffdb683e0c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89fd11c-7bbc-40c9-9749-246828e24d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb134114-2831-4d3e-b902-f9208b158dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60a1aaf-5b28-4911-9255-524dd3363604",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc0a5af-3f97-4f8b-860e-7ccdefb85fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0752f394-8ef3-4250-8ef0-b8c63665a986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff2b800-d77c-4999-8811-7f43ff0472dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a9b27b-6896-4403-b8ca-d17731cbe4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b039d65-1af3-4316-b70c-3f06d7c8ecb2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01dbc44-2113-4fa7-bd44-964b97522c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf19749d-5bae-4a6a-a17a-64ccb4148eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c0b9448-0c8d-4528-946c-06dec09a78ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "976a2853-0037-4c2c-8ec6-62c6a3840937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58469769-bf38-4a17-a3ac-accdd1acfa09",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcef2fd-937d-4941-a659-5f30585591a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745e497f-56ee-4f9c-b8e7-08204401c307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fafae43-284b-40aa-896c-5b273e49c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9484107-9f12-4c45-81b6-ad686126df02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2470a387-c722-40cc-8510-5ac763d170ba",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb52489-c09b-4f2d-83e2-6d254db6fc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522002e6-8d87-4caa-aad0-7ef76cb59540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b387aa-5a93-49c5-be98-f9d9378c86d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4dfe7a-8e82-4ae5-895a-7c7e6f191bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16114e6c-46b7-41ae-bdd0-9bd4d9aa1471",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8664d53f-54c2-424c-a376-5769d1177dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea7ea31-04a8-473c-accd-f8162afa4a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ee61fc-218c-47f0-967b-9ca1e9260516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "127afa3e-e714-4b9c-8faa-b19d0cfde48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011a1e12-5775-457c-ade1-af6160f95275",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba83811e-c824-4880-81e9-bb8944e138d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf6b016-7221-4bf6-b9fd-ab06f77b8eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f3f869-713c-4e7f-ab79-eb7e5f779486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "059f6988-d880-497e-a7ca-c04a2128249c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd4ccc7-d6d1-43e2-b9fe-794f14497a6d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ae631a-0c67-4b20-aa72-77fd3463c4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8628e7da-17de-4e23-8bca-d973680a663f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7eb9ba-9f1d-4cc3-bc1e-b251a61f9944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80a434e3-ec5e-4ff8-9acf-c82d96bddd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691e83b8-59cd-4559-97b5-3a1361435ac8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71cc5cc-e353-404c-ab75-306e36eba744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9cf052-2e10-4866-a36a-42b32611dd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45402cd-634c-41d3-8e68-977f827d40df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fcf2969-f5ee-4b8b-8b52-b8922c0704a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df2b84c-44c2-4e52-92bb-4d5b90dff4ff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e48e53-bc7c-4f3a-8f52-95c06d889fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30761d8-b56e-43e6-a50d-47420ee23904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5095252f-b2f5-42e8-9730-28503784ef09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aeaeb024-04ea-4177-8628-d7bd286cd6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8967a0-7b6c-48d1-b307-cb6f0ce1a045",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c38e16c-3dca-4288-b59a-509a37b020fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4e35f9-f9ca-451c-8f1a-9f061f3b28a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884e8e21-2b76-42b5-9c47-ab7d7f16ad1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "66e93da1-73e1-4e39-b6df-7df3e28c1585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df024ad6-7964-4bed-9c7c-9ade55e32098",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44db7d3-53bd-4ba9-b77b-843cf6122b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f7f42c-78d0-42f4-a80c-fb46ad94cd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4175c9-88ed-447f-8ab2-42bfd3ab1d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d164e62-663b-4f39-8d7d-822ecad73d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8daeef1d-4ec5-4f51-a9b8-58eb963b99bd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aea1dd8-85c3-4feb-a77b-5c9a45e192d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ded877a-4334-468d-8bcf-e6010b1c0405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11efe00c-c60b-43a2-98a6-7f075b7e277e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c65bb21a-55f3-412d-a6e2-cbb105582f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c9436a-fe59-4835-ac8d-96e8b0a8700b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "996e1f62-e078-4176-84ac-7aa6db7af96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91258f6d-ef18-4035-b109-394ae9342bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cad72f-a013-48ff-823c-c6189aecadd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad36d8c-ce59-4824-b863-2df06cf46c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8537ead7-fc83-4497-9dee-fa870da9167b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19870947-199f-443d-a7a8-9646418babc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f413b975-3faa-403b-9f8f-ef85c052adcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e411c12-0aae-41a4-8ca9-2587de0861d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7ae671-24f0-4ac5-b301-d161b2f0c3ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9666a119-c06b-4bba-9156-362dd5c14fc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0f5c377-1ff9-40e7-a00b-a939b4a61552",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9a2e76-92c1-4767-917f-c8b224bb9b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95011b4e-0ddf-4ce8-82fc-b2cba721a1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba05f378-e11f-403e-9c8d-52d80e9974ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f92ba626-a926-465e-a130-9fdd551282ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b62b2a-0c88-49a9-b58f-08962908e251",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f09148-e5ea-40b7-b5e8-7c1015091d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b3437a3-ef87-41c7-a4a5-61266822c751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91be221b-f0de-4746-a68b-9f3d7a9730b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62385fb4-c49d-4b63-962b-57bdc17803ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ab7b2cd-33ff-4a12-8fb4-d9bcc2a9eb78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df1c8e04-1ec7-4303-8739-6e42039c3fa3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "332a698e-c8c6-4d28-8763-16aea307ed9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a163fd81-0f8d-4e8b-85d7-a66a10945327"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4beb65fa-efff-4c2c-97ae-6190f6fb6e0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f73bbcc9-556f-46e0-aa11-71d9aa2467fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac5e4c4f-f602-404a-ac95-c31243076852",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d571611-94c9-42ed-8662-de5883812add"
                }
              }
            ]
          },
          {
            "id": "62af536e-ef3d-4eea-9c75-7d71abc9d24c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fabc2815-a8a2-4d9f-b5b2-636bf290509b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df93b735-a80d-4703-ac96-44e98396bb65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c182a01f-98d5-47e6-9811-084460549af5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73e329a1-8b0c-44f5-af4b-5db2bc686e62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e9c6759c-265a-4327-9d97-f1ce60e8fafe"
                    }
                  }
                ]
              },
              {
                "id": "f7172503-8744-46bd-8d8f-d648e5d32d6d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "297a4bc2-a82c-4f9b-96da-bdeeb92c029b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96e73933-94ba-4d86-8ece-a1d09b502ce3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f8693a1-8c1d-4965-8ed9-48b3a8b6d9d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b773762-6cfb-453b-8666-ed87bcda8dea"
                    }
                  }
                ]
              },
              {
                "id": "d6eb871a-94c4-42c9-9a7a-9c222c1740a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69e7aa69-097a-4520-b1a7-165d2f0c7fe3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a30b561-7394-4648-8f6d-f1d40399dfa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b9494f6-742f-4a0f-85e6-4ba728abfd0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "85466d07-96b6-4037-8f6e-eca02b31428f"
                    }
                  }
                ]
              },
              {
                "id": "bf624264-5a35-4cbd-beb1-742030198d68",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "248a76c5-15d4-4398-b052-656fb2964897",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17d16b8f-5cb6-43f3-a455-239eca322679"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cb2b254-fb34-47ee-987b-a5be193cc184",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b9635689-9a72-4e5a-abc3-307eaef91afd"
                    }
                  }
                ]
              },
              {
                "id": "3f42b83c-1149-4e8f-822e-7cdf9f73d0d0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d54c04e-5ccc-4a0a-81cd-3f11c5544f4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40091dbd-6b5d-4163-90ac-59c54114b7bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16a43b06-a0a7-4845-84c1-840fc69605ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "235bea67-ce66-457c-925d-7284e0ad1489"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c1d9096-c253-4439-8758-a333a9326df1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4c4cb5fa-8874-414a-9a6f-ef93565bb97d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5a5c5339-37e9-42da-8113-4ad3ba509e4d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45c7576c-416f-4fd7-8bcc-3b13d92e8884"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4ea4a57-1ab5-4e31-9e5f-6f159c9662db",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2a4ebf64-200c-42b2-b2e2-46ea6c43e2dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffe3505d-9ce4-4c68-8ad4-03f3713f69b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3f35994b-5c8d-410e-a13f-54dba6740edc"
            }
          }
        ]
      },
      {
        "id": "770db537-493e-43bf-9a66-8da94e333fba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "489170de-5e98-4bb2-ad25-30c3c6b7da43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a57374f0-75b3-41d1-8e4f-c7b05512c579",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0bc2a3df-c6a2-4557-b0c8-f8c38dd8edb4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6564a4-43e9-440b-8fc4-3dc9852a610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aff5e8c-1e32-4e00-a90e-8cc408bcb313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b168648a-f2fa-44ee-9a50-61094a0ba2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ba8f90-f641-4502-b695-aa8db574dbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085751fe-954c-4064-8da3-7c2ebf5221ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc53677d-ab88-4ba5-a35a-390295978a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2fcdaa-d7c0-4cee-b56e-79ec0b40b831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637f4936-405a-4968-86bd-83b419685fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b15eb5b3-c65e-492d-9cf0-85e095c5f069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0182a34a-332a-4130-a504-6f40017397af",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8fc404-f4e4-4c93-a034-afea9c6faceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4220e22-7cda-417b-8232-cab766153ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7884d8-b525-4376-bbb4-e17268a06e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e64b40-d523-4773-b198-411fc5cd240f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac887bd-83bb-4d3d-8868-3d14a4ff7722",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a6b58e-3b64-4aad-8d60-920df987c2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05357c55-a79c-4b41-9c0b-7f7c36be8726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23659e69-eaa7-4980-8d4c-9f93c1c349d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30df2de1-d9fa-4d3f-a045-52bfe4daa4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075ecd9b-2136-42d1-9d14-61c05e9a28ed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33205931-b685-48f1-9547-9b528fe1282e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb32474-3739-47ce-beaa-5f291140b45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777b92a1-e00f-401c-a89a-d49a611d5a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "291542f7-7823-4f57-8a5e-5d15c2c6e7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9835cebc-f590-4745-abcf-ff9f8541d270",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae4f4bd-8a43-4815-aca2-fb242ed3e970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efeaf30c-a06f-4fe2-9b1b-dfb98af16ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f030cc-d580-4fff-b1e8-91846be3749c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75403d65-97ab-475a-823e-cc28f3c0021f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8c3095-6602-42c4-a120-581c9b76579b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f39d57-4351-41be-95ff-46657f9ff4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d1c4c4-153b-4ef2-a875-97e7bd765769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd058d9d-f9a9-4e29-81d8-d8a045757686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c449754-30fc-45dc-9f99-b827a2c4a612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40c55b1-9d78-4a16-a205-0e777447e60c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d7a968-e73b-4834-9b93-3919a5acf283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d88f4b2-23cc-4e01-8bba-ff5623ac17e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833e8d67-5d03-4b44-9313-5161e69a48ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "641204e3-ba61-4c19-8a5e-4260b7c1dea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e2f983-3753-4db7-bdf2-45789d117d77",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c730f28-5034-4373-943a-cb57a3775cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38555677-680f-4dea-bd84-a847314db781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0045837d-9490-4e4a-bfc5-36ee312b30c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22a7d22d-162b-4330-956c-e76e8525d114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260a5e9d-031f-4f2e-ada0-540731486397",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58067b8-1018-4409-8a26-5c58409790a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4daaddf7-3a06-49b2-9edf-a512082cea64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5214e35b-329c-4755-9335-419141a596d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7da03f6-4f59-4a1d-b6f3-1b6cea12cac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ded48f3-4c0d-472c-a085-14560d1e31f9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd60bd85-2e5f-40f7-ab41-41af067e1861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a95bb7-62fd-4f00-bfc5-23be1c18457c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea19f5e-273c-4bfc-8246-f710155c01a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a542dd5e-b006-4726-9b09-7bbbfb61ed30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0d8c76-ca1c-40c2-ab0c-d88988ef9c22",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b5de8f-986f-4e6d-a8df-048018129cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50cd696-962e-4fee-86f6-7a8af455eaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6723bd-b7c6-41ba-b45e-ac1afe225df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff24c76c-c9ab-46e2-97d0-c22aae6dfb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e240db4-1154-408f-b315-720859e7c70a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c1c0c0-f223-46f8-a44d-9e4e0bdc0ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7e65bf-4a29-4d7f-8253-285ee3091121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472a8e5d-a399-4e13-a9f7-403bf9ace6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1158d52-b1b1-4c8c-b5b6-986a1560e5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8680ba3a-e117-4235-965f-eee671667878",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3678b75-2462-46cb-ab9d-bbe1123932fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3484407-1780-4dc5-aadf-bd263c883ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ad7035-6225-4f4e-b039-e166b4f20e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "67802116-fee4-40e5-8b15-18c74b2dc98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49ac60c-952e-4059-b28d-1e9bd20195df",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f55c57-86b2-4f8b-9781-8587730edc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d31bb73-7045-412b-8ac6-09c48dba83cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6a31f2-5bf9-4cdd-b74a-6f56cd92c7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3167ab30-ee36-41f6-bf63-6f061e1a601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d72e7b-2b5e-406c-a848-53e090d76f17",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918107f1-310e-4b9e-ae1a-53afd9fc2722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff58e35b-5ba9-45bd-b55f-1be909636ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc4615c-eb2d-4d29-8afe-eae5096e31be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a0fc9f-bde5-453b-9a4e-4c7c85c96f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3609f4f-fea3-4013-aa48-b4b45f70232a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c136b-0546-46c9-9f41-4da0656c712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc246d43-8865-4a18-84f9-b9a4588960a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be773e8-599e-47fd-a631-50bfaabff1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce98b49c-3ef3-4578-a037-628fa9e87f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38180734-aa6d-4079-adac-e24c65839ce2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab61d12-ad54-4b4b-9f52-19791e47ef1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39cadfb-a593-4ba1-98a7-693b25ef509d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3561e2cd-60cb-4b17-9918-845be744aec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "21b0a4ce-d2c5-4bc7-8288-b07b9c77278f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70f15e1-6927-487f-b507-53737732a7e5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3614b8e4-e9b8-4382-86ad-83d405e46df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93092532-5a4a-4a1d-943a-f7020265ca77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18335f5d-1294-472a-a208-905c70e4b2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2132f0d-af18-4452-acc0-947beccc059b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c3e850-5d36-4f86-897f-c4c62a2b1f5e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ece321-39c1-4fcd-b043-d7a386054d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f680f2d9-577b-40cc-8444-ded136d1bd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed2b21b-5bf2-4317-a61f-3122e8ece6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "420d5396-27ea-48d8-9a9d-83f5703d7047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cf4f1a-b9ae-4906-9bfd-50c34d0c0687",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0776eea-3aa9-40b1-a7d7-9226c9aeead3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afb23df-4780-4312-b315-2386009f725e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32759922-7368-4849-87ea-3d9eeffa4c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f02b0dc5-ce43-45a8-8e29-eecf6522f76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180a97e3-fbe7-42a7-b00c-69012f794f72",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46f05bf-1a19-43ee-b424-d379bb36eaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a976de37-ff5a-42d6-9871-c672e81c5389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9d30f0-4a78-42ad-baac-0120f6c161a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba84974-1bf5-409a-8382-fc489b403704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1269c9d7-f050-4255-95a3-02af64162ce8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0e0e3b-1fb0-4495-ab4b-713d369f9821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7762d7e-9e2f-4a28-9f3d-72e1d4dbb8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed308320-71c8-48c0-9420-d9be5655ab2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c043b4ab-b62f-4c26-a14a-a0dd22f69a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6c5609-7a45-4a0e-bf2d-d87ad879a6e7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35930cd-6df7-4b4f-bb56-37beb6a53a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428e7cca-1cbe-497f-8fc6-a4aaec7c2d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82cb5e4-bbac-46ea-93c2-36e1dad4c091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a50d0f-7010-4fa9-91e7-58db06138061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c956ee84-e0be-4a7a-bb7e-23f206d48745",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76444c9-390c-475e-b9a6-ddad9a4ec403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42dbd44d-3cb5-469f-937a-ff6e7bfece81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4fbf112-a8d6-4295-b806-c105bcbf8c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f504f0e8-9af5-4490-b5c1-e8b60e64c1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae59e08-1de4-4944-bc11-1ac9b8d990cb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365b59dd-2607-445f-bb25-822721bdf448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c4a974-8fa7-4c86-9f84-c40d1e0ed3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a63de4-5ef8-4b87-959e-1b24bad4ac7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c385d8-15ae-47d7-8171-313fa91eb82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24647770-1918-47df-9c12-8c95f580c15d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b241b67f-d0fc-4dcf-9b83-762593affc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149772c3-b1db-45f4-af11-65ad3d307539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf38092-6b15-4f1a-8ea9-cb6cbf18bdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b144249a-388d-4517-b2ca-247924c2599e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f708d264-5a2e-4d7a-8f52-c9f2b3b65344",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9752a76-696f-4ff9-8636-3a6212993b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659ac4c9-291e-4919-996f-1010d9307b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d0bffb-446f-48f4-baf0-4075aca74fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e06fc2-a36d-4dea-bcdb-35963b5c5f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e4b946-134b-48a0-b96d-3ad3326e297d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcea8c4-4a3c-407b-91ee-eba15845c26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64493cbc-75a0-488b-ba92-2eebca751bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b234160b-fbdf-4e4b-a624-f87958039b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62f3d18-97f8-4fec-ba10-636da0365799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ea7cb2-7da8-4b4b-9c3b-b59d7dc4ebc5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba8bef0-492d-4ec6-8ea2-59d3a904c10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5478dc0a-4b5d-49d2-8336-501e040a6f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92afce7-3a74-4633-b76f-c99d431db851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4afe3b74-a330-4ce4-a86a-41366e602cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0230ba-3844-43f6-a7e2-072973235baa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c73eb87-7923-4efa-840b-9d5d69dd846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9810e6-d763-4d0d-9ed4-a46c86078cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ff5ac8-2311-4500-aa9c-d0cfe8b32d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1b297c-e5dd-40ca-ad8e-a2cc2bef76ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc39fa5-b3a9-4091-96ca-e4fbf2de84a9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84566b1-d9f3-4527-9d36-e816fc94cbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561e182b-4e7d-4a09-b510-6e9519e4e222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496311f7-60fb-450b-b708-8508e199962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0abf2b9-c23e-4067-bc69-663011bfc051"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c5b373be-b5c7-447f-a119-02258fc069a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "590c25e2-e88b-4490-a024-badc2aa16f01",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6393daa0-8984-4b3c-88eb-a447067c660c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5eca18-14e1-495f-b6ae-4c24f748bf01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaf0da5-0668-407c-9293-9056cf10b609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96d9d712-b27f-4fbc-99dd-31ab776591ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f194b90f-be7e-4add-bff2-f488d8acfbd3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa711e8e-f7ca-412d-98b7-e09af2714f15",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d557b176-9f3d-40d2-b114-9061f269707a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48b86ce-1368-496d-a6cc-0783bedcd32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec06102a-9be2-42a3-9548-ba5b7b1ca58e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e691e863-594e-40c7-812a-4d429967765b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed2bf905-bb56-4ad1-8cf7-72d9404bc33f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "808ebb87-8a63-439e-8a3d-ea8210ac6940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f7b9563-ffba-4efe-a2c6-8a7f50898db4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d604a54-68ae-46c7-8ecd-0d02176d9c68",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f8d6c0d-35d7-44ba-ab1d-38a8f94d402b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1205029-a8ca-4ecd-87b5-4139cbf8cfe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8aa4354-d69f-46bc-88d8-458f41443451"
            }
          }
        ]
      },
      {
        "id": "91d284fe-f9fc-42dd-acef-509e62e140fb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2212382e-2927-4599-a186-0f13f50a9ac8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7fab657e-4a8c-4936-8ff2-e0564df30213",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "049fcec7-fba3-44a7-8060-e9a2aa8e4e87",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1c52c3-e1bc-467d-bedb-392549efa054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd2a43a-2e40-45d8-a3a3-f29e2e7543b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba246b4-46bf-4c27-ae72-141d444fbc61",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a973eb8f-2688-43f2-8566-95cd7833675a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcc7967-4de4-4145-8e98-b38efb4fd8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a3893d-bc3b-48ca-8a69-d55efad239f2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274c7242-4006-4d40-a8e8-6b7f6c992496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5c0423-7ca7-4e30-8fd7-a60ac8100a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da697981-32c5-4096-94ff-fe5034d65d65",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcd2040-bf42-43fd-bd58-d5647a4264d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481cf50a-2d7b-43fc-bf23-b8d8fea3cda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510356f3-a4a5-4a12-bcd8-1435b2f03681",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1058d687-ef95-4b8d-8d07-85394785158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6bc774-b5dd-48a0-9e61-22914f387154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f0c413-f1de-4d0f-bab5-b94f8917ce1a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408f1599-c32c-422d-93f5-8278a06a0504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223b3134-bc25-4ef9-a22d-1634cd9c969d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5383d914-e767-4c20-a845-1ea66814caec",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbf7d2d-9995-4d4c-bfcd-a1dfc0a0f02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cca288a-cd05-4d32-9c37-a705781ceec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b380a3da-4a43-4b10-ac6e-1b20e4bf2ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a83fabd-c830-4c5e-9fe0-3fad6b8b4a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05a2dcc-b47a-48ae-abab-997bea72ce42",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec557fad-d9a6-491b-8f88-6febafaf008e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca1f29ae-6e26-4424-ab19-d097a0a43453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce14d71-5bcc-4670-8147-a586feb5c64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3458e0b-f812-438d-96a7-64783e145216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9e83a9-cb1a-47e0-a599-8ac05e573b57",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0c85f0-cf65-48f5-b150-ce9768a59de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13aa7c27-e089-47d5-9a5a-6536a2a334ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d4f23e-ddbc-46a4-9f6e-e08958490363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6a74bf-c11c-4f22-b7f9-00d548ad3ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aad92b9-1d5f-46dc-b72a-5bc3a596c387",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa068b50-2fea-4695-acfe-260f35ef533a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "099646fd-89e8-4adb-a3ab-3d559d13479d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c785729e-309b-4574-b3a7-01af75d5c937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5266bb36-4fa6-4d6b-8ce9-26b2e540c028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d939cd-6c66-43fa-b499-d70a90b6e4de",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faec7616-3e21-411e-8a46-051570aecfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ee846a-0205-4c2c-8930-3fe17dbff77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d64619-db80-4724-aebe-33b0222d051d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4691fd-3dbb-4287-b6a9-05867234e39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aded3b-7c2d-414b-9a94-21abf4c855c1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55f8ad3-17ad-4c7c-a3fc-765bf4c6cb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa80455d-c381-425d-ac5d-dce525cb741f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17451ece-93e9-4e8f-862e-7bc6737decb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5306cadb-ed06-4592-8cda-57df168e38fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6eb15fd-f24d-4d4f-b7a2-0cb882f230f0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72419d4a-3a31-4598-b428-86eba00f4271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "486d6db9-8fed-4f9c-b247-fc7870bdd0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472ed281-ca5e-4660-a019-e8d6707faf8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372500cd-cef9-4b50-ae29-248457758a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68a2967-969d-47e1-b831-efb1ebfec22b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341a8cb3-74a7-49c6-8bb1-888923da0ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "530cd6da-92b1-438a-938b-43f09eed63b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c95320-5548-4236-b1bf-33ad2fe9da03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a957ae89-1763-47eb-9429-52450820b32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8699ba-58fd-49f1-a031-d9db688b7db2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997fcb84-d0d6-4632-a518-a5b63d5bc875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b62ebfe4-5293-42ee-9c7b-f0fb90e52ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff3cb1c-cb58-43b6-b65c-5607bc8a59a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9e9043-93ac-4448-ba8e-73e67a7af5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59289a54-5991-41c6-af10-ba779b026836",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a659fc85-94fc-43f1-a16d-7352a9cdadbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3850fcde-f348-42ac-ae74-d7b30306d450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "190188bb-6151-4d1d-948c-b008486ecf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5209b9-47ae-44b5-b606-0c92c4b618b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ba8ef5-93af-4528-8854-815a2d333f27",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d33cfc6-10a8-46e6-8334-ae3fcf60b096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c99fcda-1541-4265-a24c-1c9d76bba769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b36c011-3573-47b3-8dcf-f5482bfa4177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef3b918-7df1-43ca-ab77-26f257ce0d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bcb55d-d44f-4fba-aef4-38429cf9b562",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e6ec1f-580f-4880-a1ec-f1c9eb3ddbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c4f6be-d980-4ddc-9eca-38b2932f4d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d00372-eb69-4a8e-8fff-2e96bc295292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f76d6b-1ade-4ead-8d12-0aa004aa78f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f095c9b-2d67-48f3-a27b-f66a20854604",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469b633e-fc7c-4cd6-947d-442d1798eddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872a0987-ed76-48aa-aa22-52a47dab1e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3670467-af97-463e-b7d4-6ea80e10f713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9dbcd5-c62e-41e6-be96-e78f22273a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25471164-253f-4a34-9eb8-55833d705616",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f78208-78b8-468d-98e0-e19fa5c027a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da19927-ab98-4341-876e-99225485ceb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480e8a65-8c0a-4e5a-9380-eaf20a09f118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47c1a3f-a4a9-4fe0-8a13-2e23e67361a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61702561-7cf2-4245-9277-da6f76f3bba3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1dc52f-b0b5-4f28-a9fe-a65ac840957d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeebeecb-93ea-461e-938c-a584b880abb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c474a3e-f7f5-459b-859e-113d73dc2272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465ea0e2-eef2-461d-96fe-97de4912ff42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89f3039-4b1b-43d7-8457-f9f5c4d33c8e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866fb785-9a18-40d0-a59b-8b9daa9b308e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309ccb69-c25d-406b-beae-fa05a556e688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646d5814-56d1-4711-bcc0-eaacb9c77a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5b16f2-d601-4f13-bc52-76aa776b5717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4afe40-d1d9-4961-bf2c-8b8f38a2a7ab",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa459a4-c86a-4abc-b1c1-1acc05c284af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15075b62-4e73-4dfe-b9ed-9a02b2f23d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11d1154-cfeb-48f2-8093-07c8aa3203c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d4b0b0-05e9-4e0f-afb3-ac997f50e85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6668128-6d8c-484d-8d15-f87bab5346a9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa54178-b9eb-4639-a27f-f97ed5928b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2651d15f-7505-427c-9387-83c092f8b201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270cb156-8e7c-4ef0-9129-94b4e40fc192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dacc1af-51ba-4a9f-9a3e-f4555d3e0285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb1ce5b-6ae5-4fb2-90d6-c6b3dff7f061",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b690fb03-fca0-40e1-be7f-3ad739820c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec84b7cf-648c-493c-a9ba-e43272de82aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9377db-e336-41e2-82f8-793455081496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef9a8f9-28c5-400e-9ab1-228809a915fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fef94d8-7234-484a-8b52-1e4b38dbbf95",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63c9e0c-dab6-45c9-9d70-0566c7d1d90d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82e26bcd-4428-40d1-b485-47652181c11b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1144ca-b510-4b75-b7c5-b20a6ea44473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2371f5-57a5-480c-b358-57588103dbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38011fe1-ccfd-45e7-a953-a8dda345487d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3792c07-fbaf-4c2e-9b93-90765c1ec7ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70e2562-27ff-4fbe-9bb3-3c428543440e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e569df-7ef0-49c8-83f6-626a716f2a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a907a7ac-14c6-4a71-a22a-03437562db16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b6ad26-1d86-4511-a7d7-624209235677",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5b03a5-ba7f-4de7-a3b5-7a62c3d570ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf862fd-1061-454b-b76d-a4d8695b7a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e66d26d-2639-4880-a065-dbcf9e5b0c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d13384-3e71-434f-89d3-f99be076f5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcefe0-c38c-4287-a99a-63afd52813b3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80a595f-b7bc-4119-a849-548d0c001de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32007227-d2f3-4c1a-9964-e8254b2900e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c1c63c-f5fc-43f3-a313-feee6f9042be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24c6b66-279b-4619-88df-61b5b7861a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62877026-7375-4099-ac74-7a608567f24e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff7cd36-adc6-42bc-ae97-3f66b823979a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10243f11-e4c5-4278-99dd-c9643a514b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b305cb8f-6a22-4c29-8974-8eddaa5a18c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c8072b-08e8-4dd0-b98c-8a4989c04835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a957f2-add2-433f-a8de-65b266cbca9f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e398cb3-7672-4195-80bb-1bc2d9b5b69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef7d6474-9766-4cc1-91f1-99ce7d5ac08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a92002f-857b-4a56-a9c9-f587e03ccb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea44089-00e8-4d5b-893e-6c72b0e1e094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f69ef1-7646-42b4-85d2-b7bcee5e8928",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dccf8bb-a9de-4844-9f6a-65ce53b3db44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e3194e6-065d-49ab-a468-a8afbcebc75f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb79e466-8a07-4ecd-b1e4-a000255d6a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a740ad-ddcd-4b0e-bdff-0214ab0e6e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bea0199-82df-42a4-85cf-36253c42b87b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f70e809-c5b0-420a-94b0-9ff122fe3233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e4a050a-d805-4bce-9498-16c7f92e22c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9720b40-0d27-4222-89d5-bbf4af319baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f4c252-673e-41c3-b2c8-2683c8ae5e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4239fce2-d238-4708-950b-458b985e919d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d887f398-b221-426e-a4d6-6b156183d5b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d711298-0c52-42af-99c2-13fb23308a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ca12b5-a608-49df-aa4c-41374370fd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603db96b-ffe6-441b-a031-8c517f4c1f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c360e8-0e8d-4758-ab20-f949fc2c593e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b287a670-4cb1-4597-adee-ccc203b4f47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a542a8-d1c5-4472-975c-d2ba4a0274e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccdb4bb-8e2a-4e52-9cf4-fb98f2a6583b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb521b0-fb0f-4719-bffa-fc9a7b089821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e1ffa5-ccaa-40fc-9854-405f50def3a8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084b2bb0-2083-4aa2-82f9-2ee49ca75a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4601a80-a5bd-4893-8ee4-3de37eb1d493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2632fff-ced5-4c92-b310-168edeab89c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b758c36-e27a-4d99-a9cf-6c0dd9ce06af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f430d9-cf23-4884-8a0d-351c1638efa0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc9c8c7-a3c1-49b6-b3b4-7185d7d88272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385f22f4-5768-4bfd-ad04-2511e78ff326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4555d71e-d906-48cd-b411-34b158023748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf78323-dc95-417f-96e8-30509cda3836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7ba43e-8962-43fb-bd8d-279d200d5480",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efe8bbf-89ef-4845-8f6b-f7df20bc4c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92af7422-0e76-4cd6-b75b-92b6767a3e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef0d8f9-5205-4186-b542-a820e85b48d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77e12ba-d517-4141-a790-46ece4fbff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29814290-4add-460d-b65f-521cff90f342",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987e4347-33ec-41d8-8a39-9276bd11c826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9632ff7a-db89-4c6a-8ed5-398a18d4c577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a0c2e3-48ec-4732-a798-2311314edd64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22c29bb-dada-4265-baca-896635b89ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf7eac8-018f-4866-ba99-1082c02798a0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf44a8aa-192c-43e6-afd4-9ac534f59014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "834ed7f2-b279-41e8-a759-d0c5ca47ce00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6c66e7-3f89-4df4-9180-97f56645baad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82ab462-d6f7-4933-b3c4-9036c101d9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c47c929-059c-49b4-84a3-aa6fabf17204",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71992ac-8fa6-4633-b274-df27fa4a3b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0302c3c8-0fe3-4a46-a789-4e0ca0ea0b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194de9b7-5fe6-482e-8973-048d5e43f878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf25c40-8a90-4737-b3de-91178628ac06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc1e3d9-5ca2-4ef9-a805-a22550701eee",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b2a6bf-826a-42b9-a425-29fcb068609f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3642afb-5f25-4d23-86da-c709046bc032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344d7ae8-60cc-464e-83fe-f74676b1c808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3533c432-c6fa-4160-b5f7-c2e642d8a133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65357549-313e-4dd8-8166-d289e41cfb48",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b1ef15-3772-4de9-97e3-0716c87ebfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3be4e9-7423-4c16-b00f-c23d6f902295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f07f52-030b-4e78-b032-3be446f46efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42464958-a03b-4b6c-b305-238feb287220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c77182-6dea-43b4-98ad-044faa5d61fe",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa62f4fe-a142-4697-a5fb-92d6e0cc82bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ec20f2-6945-44ba-91ff-40b2eab2fd4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "775e04f5-06c0-4070-bbde-51af24ae140a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b90aba7-5215-427f-bc1f-a08d14c646ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e38894-78a4-47f8-b6b6-cfcbec6fa2ed",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02945cf8-ff69-4020-b122-0b8b7f1dbc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c64521-3eae-4f49-a071-ad1ed0213b00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c71499e-529d-43a1-a51b-1e9a616affe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49995b6f-8657-478b-a37e-f85ca783ce89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfd7c86-4b5e-4d4b-8aab-85e80e1da848",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c17fa2-6527-49ac-8e41-e9016743cedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91299b48-e647-4980-b7ae-1fb410793a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3dc141-49b2-4cfc-a637-8d2156b6b10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c603bc1-1d1e-4522-b7bd-58d9f63dc470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c590176c-8672-4b69-81b9-65ff6104fded",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b896d-d9dd-4aa5-94ed-251d4bd6124d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff23eeef-5a4e-45d6-b30b-8934f37876d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981899b8-89c9-4e62-b9ae-ec86363954cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1103a614-8e69-43fa-9a1d-a93e1083494a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d91422a-9c95-49d9-aa21-74cf3f0821a1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cc95f7-b9f6-4e7d-b8ce-5e7e004c808d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd163c57-8ca9-4504-b94b-3590462e1b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4610b10-ba9c-4dee-8d16-2a019d324a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9a0edd-5bef-4eaf-afe2-169807662889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62fe051-7702-4828-bbd4-c97118e88cea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e922ce-32b1-44a0-ad73-410bd13412a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e97b97b-5e94-4855-96b4-0b5a411f4fa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83939dba-e226-4d9a-9e65-a116dc415218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d453bea1-e9e6-4e4a-a2f2-8ddcbf8b8c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01715480-8b42-4c4a-814a-975514e6eff9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed2f14e-b07f-45db-a9a4-70a63bbbc96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4322dcb6-4e1b-42cd-ac5a-8b58b0dfe289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd9fd12-c2c1-4558-9c97-a46eef4745e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800fee2c-8abf-4036-afd4-67a98fdd668d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a038739-158b-4986-b9b4-78fb89e1ad4c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dda0b1-e413-44b2-a0e2-5b278a983bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55207ebd-d65d-4cde-b96b-48b5a09ae34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e0810a-817a-4dcf-badf-a9f17d805932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df76773e-efd2-45b2-b503-d38d17bcdd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f67ee69-dfd6-4149-a058-d3f4db0f39d5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403d579a-b6dc-48ce-85cc-20cef88fc146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73677b19-ebbe-4273-b30d-8eba32c88401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a99619-d094-4ab5-abfb-a5f06496f768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef356d0b-ce06-45a5-8ef8-f2c89001ee8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a52e15d-933b-47fe-a758-67ca2643461d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12748078-aad6-41e9-8076-d18ad7e3e2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991351fa-7f92-4883-878e-c0c65227169d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84431f2d-8f96-403c-896f-b6cbf49c9a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0071990c-f707-4081-b5b2-2211433aa12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e2f078-648e-4d02-a1a3-319b2617c80c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a5dd0c-3307-4f0b-beaa-6a4cbca5bce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de18dedb-dc8c-4a8a-be51-fead8aa4aff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9d55fc-ba59-465f-abc1-da79228f316e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c445739-a473-421f-a4b3-f92329ebd97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefd5458-7e8e-43e1-9eed-d63d32e85e6c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e9226b-5608-4213-8364-e56da754077f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdc1b48-62e5-4882-9199-baa1036639fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d33d6f6-1db2-4bd1-baae-5d5c0bdeee7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0b33c9-99e8-4011-a093-001ac560e2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebeef11-7053-4358-8a7f-134f798baaee",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e145b3f-0d72-41f9-9611-72c963285d7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a94a49-7adc-4402-8475-60060f87403f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa74edf-a19b-412b-992e-6a080745a0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4c743e-9553-4671-8ad5-8b81a092b9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a81a67-2b2e-44a4-b878-3823c87b376e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28559013-68a7-4415-848c-42d865576157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e700d363-1d48-4680-a476-4f51ade8e985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "672f1756-6f1f-48a2-87d9-97b9f6ae9d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1283f13f-a6b2-43a9-bb3e-7f9ca529a996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdb7a19-0a97-4ef7-b09e-a810b9f61f01",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e5aa7d-47b4-4d31-b2ed-b3c08b09104a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779b6a7c-2e1d-4c5c-8751-7db350748be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b0bd1e-cd7a-4c54-b689-7b2c1d24d30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb9b762-8e8e-4ff4-9928-34f383aca929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c979071-4d99-4981-b4ff-c468667f6e8b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5936b08f-5c76-4068-9628-47e60ab61790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ff162e-4afa-474a-817e-76119dd15f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd9c304-3362-4a58-becb-12e73455b60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbf280e-81c0-4dfb-b8ea-c3544fd01b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fedfd9e-561f-44ae-a3ea-ca7b29e9fb3c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f593d7-71bf-4fc5-b8d0-1e1f4844f340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12f7089-d167-4dab-ba53-223755e61cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ae5fc6-2cc1-45d0-80fd-9b01a6fe87ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a573e562-6189-4370-981d-b096016c1b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3c67bb-17f6-4170-b689-86a3ebfcf7c2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e3ce5a-7604-4d35-b961-6c3fafc204b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc65b25-fe0a-4a10-8428-49113725e96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8700a14-ded0-48ac-930f-fc0fdf8b6bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1fbcf5-31d1-4ad5-b549-902f7debdd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40040f2-0bc2-4092-a4c1-f472940e6920",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0343c8-09af-4a4c-83ef-e02700d0ac72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420e890c-96fc-4d0e-a8a2-4007e4611246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d108f4c7-3183-4a81-979b-64e3edd01199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d474704f-d0e0-4ee9-bb4a-5a66da5c8bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115c6f3e-bcb2-4158-b496-f97043aada7b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bfc9ef-6c6c-4052-9907-39b7aa8603ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d28565b9-beb4-4762-b5b1-86ba976f1558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863d3c8c-ecf9-4d8d-a986-348062b1faa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b50153-6395-4eef-8f19-666abe68cf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e41b08-8f08-4a26-80ee-76eb070ccb46",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb7a17c-f9b1-4601-89ed-6a417795f4d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f04399bb-74b0-44e8-8ae4-2636d769e7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e9a696-c944-4ab7-84ac-2636b0db2e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "378e8116-4d77-421d-a94d-a29e0c63a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63ad82c-cf48-46e1-bde4-65f196a02eec",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b80c07-f63a-4858-bfdc-56e74595529d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb7cfb1-f5ff-4727-a4de-481a302986aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399c7acd-121b-47b8-a0b2-b5e10730f788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdd96aa-0b99-4fb9-bcc1-2823ca93a67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778dba11-2e75-4556-8414-e27d42d1eaa7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7662f3-9ace-45a5-b544-923ea5123d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e57ee123-a33f-4fe4-ac2c-9ee7097701df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716d059e-85fc-4b19-b3f3-7662a415c5a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53926111-22e0-4dcd-b3af-ee442aa51a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd63b60-576f-4522-a9c8-1b35037c6a81",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e3a410-ec1a-4c84-9a13-18129d2dabcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8461dcf9-8a0f-45d0-85cb-7ac1f9892d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6126f0-57ea-49cf-b4e1-b20ee5f2f505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae57c1e9-ee6f-4669-92fa-870112f8f04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe101ef-4445-46f1-a76c-0661c9874b92",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eac2481-ff70-43b2-aebb-7a8fa5c32e26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9124620-12f8-4ae8-bd83-5471b8be171b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56ffe20-8c35-4d0e-95f2-d8f1291c48a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ab4ca9-9d80-40cf-81d3-d6478fed02ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129a83ec-cef5-436b-bcce-ccb8bd17b5a5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6a47b0-6cb4-4f32-af5b-9476382ec733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3811698f-d3df-4c56-8d6b-ce160c58a3a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de62a3e-ae6d-43e3-a139-d5c274a7642b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94deb913-f80b-4547-ae3f-2baebcaa2e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9018d319-cb5d-4258-8809-ebed75d47766",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db1d806-ce47-49f9-8800-b1cee6625419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d8dfda-71ec-4f28-b362-d3e9c2d39241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4630997f-d932-423a-af7b-74462e405b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2ad0dc-0aa0-40af-983a-665b2f9a7ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ae08c5-c4bb-4a4b-ad9c-84ec33460041",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea33682-bc0a-4a98-96d1-5eb9740eac89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca7f9d72-67fb-47e7-8209-d26972c05ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586fff43-38df-43f8-bc4f-d03d2cd2aac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c257abf-11c3-436b-b006-754b28099a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e16ddb-0163-4f58-9af5-6c7810f5cc2d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28d7ada-8024-42cc-a5e1-11df35ddb2f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d5a74cd-30cb-4a8c-bcba-a86f9591f704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e79e9b-1a9b-4fe9-9a94-b61379a029f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d035a834-2a37-40fd-b5ef-3153b6c79a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ffe65f-cde1-423f-b423-e799038c8fa1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e15907-7b19-4941-a68d-84a71962b9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e2d620-caf7-40e5-a5a9-7999631bac5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc34b9b-3f77-46c3-98ad-7de355f7f56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39810293-0255-406d-9a10-994359d3ab5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6c2fd4-aa3d-4f0f-a1ca-a7cd4d98cfc7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dc8695-77e4-4cc3-9891-f6ef335723f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d069ce6-f9b7-4091-8853-656033ec19b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0945c9e9-cc15-4796-98a9-47c1bcbd4b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e1363a-0d87-4c13-90f3-2cf2c39bd052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7e84d2-9843-4c77-95e5-044ea5748b46",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dcca02-2a68-4a96-93be-f78ce5da49f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91659811-5447-44f8-89d6-80093d89bba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3a6609-0e11-435f-a86b-22264c0c2aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d0e8b9-ba98-45ca-a809-9abee3a542fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c57746-ea08-4080-910d-bb38e4d08457",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd9a713-5007-4608-8947-023877122ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "947f550d-e1ca-4b17-a98c-8928885ccfbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2872336-3d3b-428a-ae86-fb4390c85be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e08dbe-f39c-45e9-9e19-d6d0dcf25a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7399d7fe-b1b4-4eef-91f4-4e8ca3fca5ec",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25037cdd-3d51-483c-b955-4f850ed45b97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c2f30c-b4a6-41d9-9f8b-dd4e427eb152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be7bd07-ef1e-4dac-b05a-d1e7f9cf16c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95174f04-8793-433a-bd8c-2dde545f9030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb298535-cb23-4afe-ac38-42f7c9a03d7c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d5c234-2330-4390-8d94-35fbd3e07caf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c428182-a6d0-4f09-b7b0-c94b68404143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f714294-73ce-444e-a8b8-f2fcf2c3c9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb961108-2d40-46b8-be3a-e1180a9cdd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e89b86-7d61-41bb-a7de-156ed9acf2bf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4536d3c9-cdf8-44b1-8659-fd6c72be4d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb159bd2-13d8-4a9d-a2e2-86ec619cf91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08dd7f6-44a7-41ca-b317-e3c99a004a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6b5520-0576-4f5b-8983-534badb5b283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475b4ead-3a16-4b21-be8e-86ff453a89e3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e70557c-ea4a-4a97-8c95-8de34719630f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ab8633-8f19-47f4-9f6e-749cd5422e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0b5840-83e8-4a4a-8ce6-581d7060739c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c83002-d4bc-4a0b-b10a-288cdcc81d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c8a039-d36e-45d7-b45c-2a696877bb57",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0f1af5-84c2-4a1e-a578-d58c9818e408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cbf895c-f423-4a04-ad8a-ec7c5353b27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3caf592-f58e-49f7-b1e7-7a09a26179d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a529f0-e07b-46e1-9cde-ec12aa665227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037abfd9-8db3-4011-9bf8-f893ac07cff5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b566656-3550-4412-98dd-c7b8a0896431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21553300-0e77-4e38-a602-5c9b78c5293e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfebd2d-2b6a-48d8-8d98-8a2c8539e6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ba1fd1-fa4e-4461-826b-e18543a0a500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d269f6b8-0da6-4a38-ace8-ae1548dbbec8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a98dd1-df3b-43d1-88df-3de129e63734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6119148a-649c-4e67-961c-5b8a48d5cba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8f49ad-441d-4b6c-a63b-e9d7b581f660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef6dc3a-0629-47ed-981b-49b3325014fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5055421a-6680-49f9-8d92-7dcaf62e3d5c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d774da-187c-4e4e-b4ef-cb8043c2f903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679caed1-9d75-4fa4-b94f-496ae31b1dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80af6f7f-c42d-48ac-b1fd-f3cb4a97e837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af1c1c5-4ab6-4504-9ba2-8be9483dee10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b788e5-b7dc-4c54-9637-d7429d8ea303",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6c40cc-7524-46cb-8ce3-8c4d8b81cc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1935e826-e412-4872-8ba2-78869738c178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051d94cf-38cb-4e7f-91c7-dcdcbbb769ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ead9fd-6fd9-4c7e-b0de-090ba0f4b032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6435cef-1212-46af-9147-de354cacaef9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8961a68c-678c-4428-9145-7d0514dc2311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34b3f12-b9a9-41dd-9053-0144b0af3fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57bc145-8e5f-4687-9876-1c425782a701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a14ecd-017c-4531-bae5-9aebe0775a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1ed5bd-f570-41b1-8555-3aa377064eb9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea274af-a616-4f43-ac3b-3d39445d8649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d588d0-1225-4f2e-b33e-8d37b7d5b1d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54253b79-6ff6-41ad-b9ff-50876c15b497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88f3a05-75bb-41a8-869a-829c42074039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17134744-3c70-4bd1-9218-7cbc18902d03",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b736266-35f7-4a08-96ff-d97f342e5899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02c31854-8758-459c-a396-a9385ae35db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6255d7-beba-4927-aa29-4c805e24406d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd57a0e8-5e5a-4180-adc6-7a0816e09090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0ca0b0-57ba-4bc0-ba41-2dcc52dc5176",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ef6b0c-8274-4d60-9ea0-d88b5a4719ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "485d46f4-b7c6-41ce-a1bd-1776e653e48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b2d15a-515e-4dea-a016-25c0e569cbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d3269a-9722-4315-9598-47ac91e7fba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6214b6a-78ad-40ea-bb08-6be845a63b32",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e1ba95-2444-4807-b577-74c443d3d8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f265e4-2936-4d12-8cf1-7b989ec5c86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937ad076-80ac-465f-85d2-150b9b3c74a6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c88838d-36de-416d-8be1-6f45749d2f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b8d199-18f4-429b-9d40-461bad27c9ad",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39dd74ce-b285-430b-a11a-83a9859aaa20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09dcffdf-78eb-49f1-80b2-ece5663cdbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69c13af-bcf2-4de5-b743-a810ae409baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4d0eab-c62d-4688-9364-13028e899fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bccd5d4-2f07-4b0e-8e10-2830921fcbb8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f23cce-2b11-4f43-bd1f-6ceb07e75791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f3fec5-258f-4098-8a19-210f7a69ab85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41674c31-b94a-43f0-949a-cefc85768868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac971979-9a6b-4baf-ad5c-61250f294431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55a8910-3e13-4ff5-b0f3-c3713943e854",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1fc2de-4ab6-4b7f-aca9-28a775dc3191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea540ddb-92a6-484f-b47c-217e4c822394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebab903-1c4b-4625-b471-44d6cd3d0af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d751502d-f522-4ec2-be55-7a68bdc657b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f4152f-b6ce-43ca-90af-549c04366254",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59cf2f9f-2e20-4c67-a58f-464999d1176f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf31ebe8-1adb-4864-a20e-3e18f0907f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f7e5ca-d238-4366-9229-91c9e5e3783c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7195ff-d746-41a8-bc79-962bc9e302dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0f4ebe-9761-43ad-9ad1-dbf1a35d5a3e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81251995-81b2-41a1-a155-74c7b2fe39a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05b01e90-c993-4414-a1c7-67385872f7c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafc8019-5d7d-48f9-8f0c-17f294cf10dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952d34b2-a239-4fdd-a981-c7376a9c433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d700034c-8d6b-4779-97bc-a802c553d4f5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8afda24-862d-42fa-970f-e575e1e47074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc0afeec-1821-41ee-bdef-309d5d7838e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a6c9d7-b55f-48d9-9961-0f1d8513d50a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dac4d48-3e96-4444-a3da-4a395dd62349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9857dc3-0b11-4754-b056-c25b088579bd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5233317c-b001-4011-9f52-c573d7ae71a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97491c41-ef26-480d-a1b6-0a4faa54c2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3109898f-75b0-4563-8029-18975994c163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3ac5e1-12f8-47f1-982c-ba8c32a96440"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa44b7a9-1abe-48c1-8227-d1ea5f343b9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd092204-8fda-482c-9785-db8685e41cdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19c00498-10be-4acf-a372-53b9dbbf9cde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c1aea0e-2b28-4c10-8e36-cd913fbf92a6"
                    }
                  }
                ]
              },
              {
                "id": "251b88dc-1971-41b9-b08b-9ad6f286fb26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4c95ac4-5666-4609-add4-345106aa3338",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf86118-b168-4434-b076-96af2e5ec821",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4740e520-2d33-423b-84f1-c6d5ba6bb443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a4247a-a9af-4d6d-92c8-26f29374bbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bbf58a1-110c-4e50-a948-3511454ffd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85b5f22-aa95-41da-a87c-435e15979764",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38756878-2db4-4582-90ae-c3bfcb64fc64",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f09d228d-3984-4d64-b1f7-e6edcf4e2822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a9c44a-25ec-407b-8236-1465c94e8191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27640aad-261c-402c-98d4-bf45a65fe4cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da73e769-cdd4-47e1-902e-603663c7da53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8089c340-305f-42fa-ba43-cac4f2dfe360"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8017da-6d0a-4708-b99d-103f8bf22281",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fee47e31-4cab-4a39-b9d8-7c5463cb39ef"
                    }
                  }
                ]
              },
              {
                "id": "3d846738-cdf9-431b-b3d7-32296563b230",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d4bc1051-beba-4d83-b87c-53f912538f46",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce378af-4b22-4dce-865b-98b6f3599a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "01aa6819-536d-4ca2-be1e-8a9805b11f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d65c62f-1668-4431-8565-9940ca465261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4005d34-9330-49c7-b0cb-72132ace568f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6029e542-a55d-4a5d-bdb8-f173e815faf4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5aaf0f4b-20ce-46be-a84f-5629e9e8b1fd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd50371-a322-431f-b354-77a5be35a5f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "18407181-8c5a-4400-9bf8-fd030ac291c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9c56084-637f-46a2-a7ba-fb373a9ed5fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "929b134d-5fa4-4b45-85b5-c31d30a0fcf8"
                    }
                  }
                ]
              },
              {
                "id": "f50e22a3-28e9-4ff4-a430-ec1ece8db913",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2f24518-b5ff-4b9f-acd3-dedbf76e1dee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8b43d021-2cce-40ee-b75f-18c565b30ef4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f504b5ad-6243-480d-ba2f-468e4a116dd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e62ad3a7-b867-4432-8505-aa1f78bcb6ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "930c4bd4-fbd8-4e44-82e2-04db30de9170",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "649e1cf6-3f8b-4534-a097-b785fea9e437"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "226d4fab-b084-4e2f-ac85-2690191267ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e146c87c-3805-4181-a62b-f5d3c5d01714"
            }
          }
        ]
      },
      {
        "id": "c7b49c22-5086-47a9-ba81-a961c49d1382",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bff52d84-9d40-4382-9f7e-d7bed7192fe0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e15b0ae-e302-4b4b-b2b8-49d02cdc0f45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30ce478-9525-4644-9d4e-349d2921b36e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "307c16f5-0659-49f6-ad5c-812fdaf578ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa68f96-f231-4a29-8a1a-fa086313dc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d41ff80-e61f-4175-8eda-19ae73bcb940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dbf8c6-6b8e-4fca-82e7-ee8da1eba5c2",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bde4d19-8032-4060-992d-1d7cb58018e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "01d52f94-caed-4a40-959c-95e1264b6514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207e8e85-4247-4864-a62a-589c1d71a2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df8fe584-8cc0-42e8-ad33-646765a73822"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74b945e1-ad48-4f20-a022-085347164524",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bd66dfb-06de-44fb-b72a-45ed4fb97c8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444a1dc5-1838-4865-8153-9094d3bda742",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "499bc630-cbe0-4122-854b-dd209b6c6709"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f310d90-1c88-42e4-97f3-6fa5a86dc708",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "843d7bbf-5955-450d-a3cb-2a25455ca1c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20e0f357-0a58-47e0-b94b-623afa6c8fbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e27c849-b824-47af-a259-dc37954c206c"
            }
          }
        ]
      },
      {
        "id": "03156921-ddbb-4fd7-b80e-fecfe9850fd2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bd61a355-6872-4de7-90dd-34a51b012e5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4598e761-566c-44a6-8e20-1a21e7baa40b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f986b94-696b-4608-93b1-28d3b3e363d6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8d721c-493b-4256-8286-af3e8ce65bf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492ce939-85d7-4744-a40b-09a581cc168c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbd1db0-908f-4546-9f1c-e5e039bb6588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6737ab37-2609-417c-9eb9-92c6b2d612d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f8bca8-7f03-40e6-9fb5-92d520d74be6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d7f8db-89a2-49f1-a42c-f2dcc267573a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5328b1b6-545c-45a6-9165-3a72da4d20fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69437da9-0233-4133-9462-1488c4b473b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "352b1c0f-f79a-48cf-8d75-bc6f82d13b5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76bae0ec-be3f-4752-bb55-0b2a4dae724a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f49fa771-7e02-4e98-a290-6cfb49006683"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efbfcfb0-b14c-4f9e-97a6-9c7386a70a73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "477957e3-5e1e-4db7-a93c-8513999d1d3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56433ac6-b2f9-4cb3-a095-48af781bc97c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "83e64d99-1546-4730-b873-25c521f215f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "062430ea-36e2-4bb1-b635-539e61d815a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b80de29e-3be5-4efa-9c74-9e5f07037973"
            }
          }
        ]
      },
      {
        "id": "8d3d7545-3a36-4c39-ad04-7280ae182d04",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "69239ad0-8e69-4b06-b4f8-5b9aae2eff9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce583d1d-2261-4ffc-b893-48098c384ca8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cbfe4d23-b8d5-4bbf-b5f5-8adf8f7e2812",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ccb95c4-752e-466a-9be9-654f663764e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "330d2e5e-c3ee-4291-8141-60a804708920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e9a923-ede9-4c0c-bca1-70c29827f602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "087f8b95-2dd1-4099-8f43-8a0d9d0f6d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdb0b4c-4c7e-4d9c-964d-77195aa4fe16",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b63f05-28e9-43a9-970d-4cbf33f95c60",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c7b379-3139-41b6-b5a1-27b7ea272b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c523ceb-d701-4a19-9886-9d7c9e3c212f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9574a40c-3887-4d67-8e5b-17abe44ba263"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d392d4f-a1d2-464f-9eb6-8449f2c3fe9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25366fcc-dee7-4ca0-9064-9d22e224b9bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36b61b6-d820-49f8-bc20-5ab58defd00e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27682dd8-0ae6-4f03-af05-3b3bc0a7b0bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a5f1dde-8dc6-4abd-b948-326829c93820",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5b539c2-b16d-42af-a886-aea8cabca00d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88b11894-d63f-4da0-96f1-365874dcaba5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3377b5d-1592-4420-a612-523ef438202a"
            }
          }
        ]
      },
      {
        "id": "9e44607b-c355-4aa0-852b-ce489612d8d0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93fffda1-3c16-4b24-a612-b6507b54cd47",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fd04c85-18cd-44e6-b1c6-782b619169d7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7cf06621-06aa-496f-96db-606ddefdb08b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20012a17-5e66-4543-b871-e809f20c4489",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa93c506-e48b-4e62-a2d2-2faf876006d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 239.78378378378386,
      "responseMin": 14,
      "responseMax": 6988,
      "responseSd": 713.2641208881181,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678581721753,
      "completed": 1678581794678
    },
    "executions": [
      {
        "id": "8d2cf057-2a00-434f-9041-e6dce5108e86",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b9ab85db-2580-46fe-bf78-f7c9347bb635",
          "httpRequestId": "d46ff98a-09e7-4937-aa38-d54d9fd62ef2"
        },
        "item": {
          "id": "8d2cf057-2a00-434f-9041-e6dce5108e86",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3736e3a4-9318-4b10-a2a7-bc5b6396342b",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 0
        }
      },
      {
        "id": "0621e1ab-e317-4aeb-917d-737078c1de0e",
        "cursor": {
          "ref": "f9eccd13-be32-44a0-bfbc-0cbd3129e631",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1b4ebeca-a302-45ab-ab52-6283b707e5a4"
        },
        "item": {
          "id": "0621e1ab-e317-4aeb-917d-737078c1de0e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "05cde4f6-c832-4da7-8885-3b7113204ed1",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "61c23d95-a660-4a85-bcc9-322167bb78f0",
        "cursor": {
          "ref": "0478dab0-c56a-4e56-b8ed-8b5fcef5bea9",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1334bc7-5620-4fd2-9e7a-a52b7e48d766"
        },
        "item": {
          "id": "61c23d95-a660-4a85-bcc9-322167bb78f0",
          "name": "did_json"
        },
        "response": {
          "id": "445144a4-757f-492d-98e6-7641b0e29126",
          "status": "OK",
          "code": 200,
          "responseTime": 426,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94904ede-4fad-4b65-a244-e4ee53b454bd",
        "cursor": {
          "ref": "f8fad340-800b-4b3d-89ab-5aafdc76598b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f36059d-dd7b-4540-9ea1-8fe0b5c32a57"
        },
        "item": {
          "id": "94904ede-4fad-4b65-a244-e4ee53b454bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fc2efb2-5030-4230-bb1f-32972e638604",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1188,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "94904ede-4fad-4b65-a244-e4ee53b454bd",
        "cursor": {
          "ref": "f8fad340-800b-4b3d-89ab-5aafdc76598b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0f36059d-dd7b-4540-9ea1-8fe0b5c32a57"
        },
        "item": {
          "id": "94904ede-4fad-4b65-a244-e4ee53b454bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fc2efb2-5030-4230-bb1f-32972e638604",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1188,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "fd2a68bd-ee97-44f3-a54e-4cb3561338e1",
        "cursor": {
          "ref": "73d5521e-3cbc-44e3-b051-04410c29804a",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "17c803e1-9f33-4de4-aaa5-91303ccb9437"
        },
        "item": {
          "id": "fd2a68bd-ee97-44f3-a54e-4cb3561338e1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1a659225-3d0d-42cf-964d-a33898918520",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf3f5d5-506b-46f7-b512-dd8785a0bebf",
        "cursor": {
          "ref": "b3b254e9-a83d-47c2-a4ee-9ea6c878fc79",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e333a5f4-3415-48ed-b0b1-7132341c30f0"
        },
        "item": {
          "id": "fbf3f5d5-506b-46f7-b512-dd8785a0bebf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "91edc17a-93ea-4c8b-9b1a-602983be32b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3775c1b-b4c6-4829-a84a-a4fb0f5c7cdc",
        "cursor": {
          "ref": "d2681485-4c58-4e85-8927-11e4b6b6193f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c378d255-95e2-487c-bd18-076b109ddf8e"
        },
        "item": {
          "id": "f3775c1b-b4c6-4829-a84a-a4fb0f5c7cdc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ab7af921-4945-4f4c-9f64-539664337e42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4fdc56bb-5833-4dd1-84e0-1eec441cd4fa",
        "cursor": {
          "ref": "5883e8f6-61a1-4c76-9c10-0d07064d830e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "57d932c7-1ad2-4902-b18a-649df4ffad1c"
        },
        "item": {
          "id": "4fdc56bb-5833-4dd1-84e0-1eec441cd4fa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4a7663f9-7130-4794-95bd-9fd24c803a29",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4fdc56bb-5833-4dd1-84e0-1eec441cd4fa",
        "cursor": {
          "ref": "5883e8f6-61a1-4c76-9c10-0d07064d830e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "57d932c7-1ad2-4902-b18a-649df4ffad1c"
        },
        "item": {
          "id": "4fdc56bb-5833-4dd1-84e0-1eec441cd4fa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4a7663f9-7130-4794-95bd-9fd24c803a29",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "82a74311-5f7f-49ae-bd0b-1dc19243c0a2",
        "cursor": {
          "ref": "a9da04c9-4600-4a8c-bd34-067ef1371c77",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0e25c4b2-76b5-4445-870e-1af3440807ad"
        },
        "item": {
          "id": "82a74311-5f7f-49ae-bd0b-1dc19243c0a2",
          "name": "identifiers"
        },
        "response": {
          "id": "633c3a75-6a26-417a-a88b-bacd3fb31dea",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb3e686-8a31-4ca4-a58b-c4d833c069ab",
        "cursor": {
          "ref": "9d7d0553-7b13-4c5f-b2ea-5b9b3e5114c9",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "513eb99e-688b-4ecc-9ea2-1d2cf0e0c29d"
        },
        "item": {
          "id": "2eb3e686-8a31-4ca4-a58b-c4d833c069ab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ff33767b-2ec9-4830-94f9-7a7bc48fce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb3e686-8a31-4ca4-a58b-c4d833c069ab",
        "cursor": {
          "ref": "9d7d0553-7b13-4c5f-b2ea-5b9b3e5114c9",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "513eb99e-688b-4ecc-9ea2-1d2cf0e0c29d"
        },
        "item": {
          "id": "2eb3e686-8a31-4ca4-a58b-c4d833c069ab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ff33767b-2ec9-4830-94f9-7a7bc48fce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877b472f-4d43-41ba-a120-7c2ff51ae529",
        "cursor": {
          "ref": "6ba145d3-a916-4b1b-b69d-a997dc2952ff",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f8d27ae8-77cb-469d-a041-9a3264bbe506"
        },
        "item": {
          "id": "877b472f-4d43-41ba-a120-7c2ff51ae529",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1c093083-04eb-4c4d-aac8-d2a0023a79b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cd6d00-7249-49db-8986-b1ab067f6dbe",
        "cursor": {
          "ref": "224de9d3-dd9f-482d-99a7-b193d151e792",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8f94d337-5a63-4dfb-8d37-b50cceed2bc5"
        },
        "item": {
          "id": "97cd6d00-7249-49db-8986-b1ab067f6dbe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "95ea2a9e-30cc-452e-94b2-4ab66bf70d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36399a24-754a-4f96-a16a-03d050810b1f",
        "cursor": {
          "ref": "e58e9a7a-6586-4a2a-8ebe-d959610adc6b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "586ea06d-51c9-44e8-a186-1771b55513dc"
        },
        "item": {
          "id": "36399a24-754a-4f96-a16a-03d050810b1f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3e9b3d67-8e52-4165-8820-f163f763745b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d29a6f3-18ef-4946-8e91-f841c3a0cd10",
        "cursor": {
          "ref": "7082b7b9-4d5c-439f-9ec8-d19120edaff8",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1f8a0858-f658-4ded-bc0a-1757f9835f4a"
        },
        "item": {
          "id": "2d29a6f3-18ef-4946-8e91-f841c3a0cd10",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2c463ca-281b-4585-a03f-e54762153fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae5108-eb48-4a8b-9abd-20e66827b8fe",
        "cursor": {
          "ref": "54b85fe7-a386-4083-bc54-a75c2095b6b3",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8916bc46-302e-4295-b2b4-410566078584"
        },
        "item": {
          "id": "2fae5108-eb48-4a8b-9abd-20e66827b8fe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9a2a383e-4ce7-42f3-9e90-07070da593d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f569980a-5f52-4869-985c-6c1eb4f37701",
        "cursor": {
          "ref": "3b73cb37-1c76-4cd6-b37c-ec0e41501c5d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "da70c5d4-d44d-4b89-9558-835ecc4a8e60"
        },
        "item": {
          "id": "f569980a-5f52-4869-985c-6c1eb4f37701",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "801af449-1b66-4602-abb3-d6dd117e77c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf6e9d8-5309-4235-ac90-b157e0fff347",
        "cursor": {
          "ref": "16a9c5bd-0b71-4b44-b752-7ad4cf49b2d0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "202784ba-6ff4-4e47-8793-75ed430e20d6"
        },
        "item": {
          "id": "edf6e9d8-5309-4235-ac90-b157e0fff347",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "29574b1b-ce6e-4a5f-8bec-2ea4c4fac757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04fea86-ab92-40f7-b675-bfca22977fa1",
        "cursor": {
          "ref": "3bd9e889-a4dd-46c5-80b8-22c69720294a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "82360ebc-66e4-430b-94f7-d35ac40a1c9b"
        },
        "item": {
          "id": "a04fea86-ab92-40f7-b675-bfca22977fa1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6243a432-0c8e-4f7c-91e9-64bc930a8546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b817f48f-042f-4620-8e82-86f1b65d91c9",
        "cursor": {
          "ref": "51a3f0c0-ec44-4bc7-baac-18fd4710c832",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "43e94ec2-2e1b-42c0-aabb-3ab7d2bae1db"
        },
        "item": {
          "id": "b817f48f-042f-4620-8e82-86f1b65d91c9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "85610951-e9ea-4f39-906d-545c2df3ff03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b37568-31c2-4ccc-93c2-a55106c2630a",
        "cursor": {
          "ref": "8384aca3-fe88-4a29-95de-22a5da88c7f5",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "11718187-d8ca-457a-98dc-0869e06c2522"
        },
        "item": {
          "id": "c5b37568-31c2-4ccc-93c2-a55106c2630a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fc705bad-22be-407d-85d8-06ee9d6967dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05252460-14b1-4708-9cfc-1a6f178fda2a",
        "cursor": {
          "ref": "96d78353-2a6b-4e9a-ad44-c405533dc515",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9923a0c2-907a-4079-a774-55bc623fc2a8"
        },
        "item": {
          "id": "05252460-14b1-4708-9cfc-1a6f178fda2a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cf5f34f3-ae11-453a-bb41-436e4db6dfba",
          "status": "Created",
          "code": 201,
          "responseTime": 551,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5b69a7e5-2712-4065-995f-e26cd93fe119",
        "cursor": {
          "ref": "59d51353-ddcb-4c93-a65b-d2ccc7ad3538",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "41d81e5a-bd45-4f10-bf42-01363acefdf3"
        },
        "item": {
          "id": "5b69a7e5-2712-4065-995f-e26cd93fe119",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6ec92721-5447-434b-87a5-7146fa059fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c158207f-6daf-4754-a074-c4de3f280df1",
        "cursor": {
          "ref": "ec71d264-73a0-4432-ba8b-6f52112bbac7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a656e15e-7477-4a64-afef-7f04851677d1"
        },
        "item": {
          "id": "c158207f-6daf-4754-a074-c4de3f280df1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "739c3639-59d7-4e66-9de6-eacf0db605a3",
          "status": "Created",
          "code": 201,
          "responseTime": 6988,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e38ce2c3-2a45-4ad9-bcae-946a8e86022e",
        "cursor": {
          "ref": "4c19ff0a-aa63-4e18-9635-2b04ab05fce9",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4f80effe-f799-4a92-873a-cd754e8f4b83"
        },
        "item": {
          "id": "e38ce2c3-2a45-4ad9-bcae-946a8e86022e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "be678719-d33b-4b2f-bfd0-fbb756a26a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbf7142-2fb5-45fe-af96-36a1edf37cdb",
        "cursor": {
          "ref": "05de0b91-2c09-4259-b3f1-5525e3e43b5c",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e80b4a93-c6e5-45b5-a366-4cf39a4ac3ca"
        },
        "item": {
          "id": "abbf7142-2fb5-45fe-af96-36a1edf37cdb",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "60e38cee-e1a9-4e22-ad06-4aabcf82582d",
          "status": "Created",
          "code": 201,
          "responseTime": 3934,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "ee49723c-2149-475f-8094-48bb446863fb",
        "cursor": {
          "ref": "201d1990-6142-434b-aceb-30986b6feded",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dc8e6e94-e698-4206-bcd7-69bbea941d3b"
        },
        "item": {
          "id": "ee49723c-2149-475f-8094-48bb446863fb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4aef9d7d-f39c-423e-91d4-6d0730015343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6522e95f-0770-444f-bae7-0c3b1470dd80",
        "cursor": {
          "ref": "7335baaf-a640-4fa5-a3f1-7c60fa3fa0d6",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d41b50ac-6026-42c9-baaa-984e90c16f66"
        },
        "item": {
          "id": "6522e95f-0770-444f-bae7-0c3b1470dd80",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3e23c518-bf16-49fa-8da0-d523a2558de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78ef007-c8bc-4e5d-ac39-db8af990d67e",
        "cursor": {
          "ref": "75aa9013-beb4-444d-8b8b-5dbd4072d1d8",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8f5dc9ad-0e8d-4508-bb1f-33b6899b1e45"
        },
        "item": {
          "id": "e78ef007-c8bc-4e5d-ac39-db8af990d67e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b7091e11-725b-4b01-bff4-183283e9d535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e1c2e1-06cb-41e7-a2f7-89e7781e8a42",
        "cursor": {
          "ref": "e48f2b1d-f0c5-4a9f-97f6-a2b7220267ef",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fd819778-df4e-43d0-b0c1-b86ef61b6bcc"
        },
        "item": {
          "id": "69e1c2e1-06cb-41e7-a2f7-89e7781e8a42",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b096e11f-9780-4e27-bb41-a5a4914ae74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3c0d40-be98-414f-876b-81237f41a906",
        "cursor": {
          "ref": "ad2f0ab4-083e-4749-ac72-e8a9602a8ac5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "70137f21-556a-4a85-b3c7-531c0125bf6e"
        },
        "item": {
          "id": "ff3c0d40-be98-414f-876b-81237f41a906",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2a6ec499-2f0d-4745-b761-b08b7047691a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd0dde0-1836-460a-9f87-48c7c5ef01d3",
        "cursor": {
          "ref": "752fbadf-4efc-4ba9-b38b-427124ac4104",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "466fd661-f9ae-4fda-bfdd-ede2f10fcd04"
        },
        "item": {
          "id": "4cd0dde0-1836-460a-9f87-48c7c5ef01d3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "32432f50-2431-4526-b0f4-e50a50e5a94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8394818c-441a-4760-9230-f795cfe8e405",
        "cursor": {
          "ref": "818d9464-5bef-4020-a6f1-883a8b4ffd7f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a15ca7d7-dbff-40db-bc60-1469914a6d4a"
        },
        "item": {
          "id": "8394818c-441a-4760-9230-f795cfe8e405",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "50c99252-8e21-4627-889b-0e5c0ff260f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813737d8-09eb-464d-b46b-47dd696b1e70",
        "cursor": {
          "ref": "04dbe426-aabd-4b84-9e2e-d5b259546f0a",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0fca8345-02fc-4077-b211-37efae462add"
        },
        "item": {
          "id": "813737d8-09eb-464d-b46b-47dd696b1e70",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ad5d251d-aea7-46eb-9b1d-e5cda532747b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283c47b4-7928-4bea-a92f-a0bc739b78f5",
        "cursor": {
          "ref": "b782a56a-6ce7-421e-b5e3-496e4e1cc38d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9bcda861-488a-44fc-9f97-a8d4f98e83dc"
        },
        "item": {
          "id": "283c47b4-7928-4bea-a92f-a0bc739b78f5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "66ecf47c-42ac-4274-87e4-76a77503177b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe3ba25-11b7-4f6e-99b6-db52c87d1574",
        "cursor": {
          "ref": "548e6814-963f-4a26-817d-9037f6c6c475",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0125f6d8-1c45-469f-be0e-229d74fddcee"
        },
        "item": {
          "id": "7fe3ba25-11b7-4f6e-99b6-db52c87d1574",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "75650616-fb93-4cba-a116-3f9297b5cf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c255639-84b2-430b-b2d4-1c06c9b5d880",
        "cursor": {
          "ref": "2da37b06-e9ea-4a19-8fb2-808ff8c58fcf",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "782405a8-fa09-4ea4-b29b-688bdfac8141"
        },
        "item": {
          "id": "7c255639-84b2-430b-b2d4-1c06c9b5d880",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "38c0c605-5cfb-4339-a24c-527afe4e87f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be236cf-8916-4465-b47a-c67cf65e2540",
        "cursor": {
          "ref": "4f28ea13-80d8-416a-afde-bef1ff6ff8c0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d3800890-a908-413f-9871-eeeb496748b4"
        },
        "item": {
          "id": "2be236cf-8916-4465-b47a-c67cf65e2540",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fba3e7d2-6da0-47c2-b1b4-bbff52fa802d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2bda28-7415-4ef4-b218-77a7ddac433e",
        "cursor": {
          "ref": "8baa962b-c20b-4224-900f-264f2d92912f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20e5839d-0555-498e-9cc2-f712ab527a4c"
        },
        "item": {
          "id": "2f2bda28-7415-4ef4-b218-77a7ddac433e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e4f515b5-dfcf-4d57-801c-53c1718d1efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f036f8-f7cb-458b-896f-807806769d53",
        "cursor": {
          "ref": "aae60285-3e61-494c-90fa-d9d6af42cb0c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c8ac0ec0-4fdd-4a6b-aeb4-414558d0456f"
        },
        "item": {
          "id": "14f036f8-f7cb-458b-896f-807806769d53",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2cca7ce1-4001-476f-8f87-42c85fcd06e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a848e5a0-fc2d-407f-b2b1-73cea13bbd6a",
        "cursor": {
          "ref": "22e18065-d0ea-438a-b56f-42900872dad3",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "257d180f-dea6-49d7-a25c-d65c332bbcc2"
        },
        "item": {
          "id": "a848e5a0-fc2d-407f-b2b1-73cea13bbd6a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ced947b4-4cdd-4f96-ab57-13a4cccf775f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035b2e0d-1bc9-40b9-a221-01b520d82070",
        "cursor": {
          "ref": "715560f2-5282-43c7-a68c-0b81d63557f6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f85d4b5e-a588-476c-bda5-684ab2c5c9ef"
        },
        "item": {
          "id": "035b2e0d-1bc9-40b9-a221-01b520d82070",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fe8d334c-9e00-4e54-9462-6317b87c69d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff17f6a-b7b8-4a0b-b88a-d1d356d49073",
        "cursor": {
          "ref": "b33d19b8-d3cb-4b65-b69a-6601bf6ecce3",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "91b08840-71a4-447b-bc29-c27be1f7bce2"
        },
        "item": {
          "id": "5ff17f6a-b7b8-4a0b-b88a-d1d356d49073",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aae9813e-5ead-45f6-8441-ead72450503e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f006d7-2b35-439e-ab4a-b94fc48c3249",
        "cursor": {
          "ref": "ac39cc61-c6f4-46b0-9ddf-f45cdc5569c5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b413623a-d91a-432e-a08d-83fd761b0314"
        },
        "item": {
          "id": "f2f006d7-2b35-439e-ab4a-b94fc48c3249",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "77042080-1d21-4436-9087-905ea66a0649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3b9f76-d62b-4cdf-b4bb-1cc0b2e82f88",
        "cursor": {
          "ref": "f6386fd1-fec8-4611-ba8d-8d514e7562de",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "87206e9b-022d-4ca5-9e48-af8df67e70a3"
        },
        "item": {
          "id": "0a3b9f76-d62b-4cdf-b4bb-1cc0b2e82f88",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7c3cfb83-0eab-4880-808b-41cf386985b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2388,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "598d8f8a-f76a-4810-a781-37d312a0a9b9",
        "cursor": {
          "ref": "eda824f6-2939-4e8e-9cde-bdf4bc0893ec",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "242766d0-2118-44a3-840d-35513581d498"
        },
        "item": {
          "id": "598d8f8a-f76a-4810-a781-37d312a0a9b9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "62ba0f44-63ad-4ed6-a90d-29f2e73ea4ed",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "64cd2002-00df-443a-b476-8e27024fab19",
        "cursor": {
          "ref": "9e49043c-984b-4de2-a6df-fc1febab6f24",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "04a9e027-0f39-4979-b934-6002ca12c8fe"
        },
        "item": {
          "id": "64cd2002-00df-443a-b476-8e27024fab19",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "71692686-b6ea-4e6c-878e-53f9feee34ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2c7c73-ed7d-42f9-928d-1122dc7030d8",
        "cursor": {
          "ref": "5810c1d6-7f43-4a91-b46d-435c796f3a77",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b8a5cc59-ad95-49ae-92f2-7fcaf752ebba"
        },
        "item": {
          "id": "3f2c7c73-ed7d-42f9-928d-1122dc7030d8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "af288e13-2ef4-451e-9f8b-16346ebf6111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95428423-743a-4cb5-961f-2d66e9706779",
        "cursor": {
          "ref": "3fc6d539-8739-4e50-88d4-b5e22df9ab41",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8e8824c2-1ada-44f7-8a92-f48c07a421a0"
        },
        "item": {
          "id": "95428423-743a-4cb5-961f-2d66e9706779",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0d6659ef-7263-4e66-8388-b5271df2c456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e61fc-ddc4-4671-ad7b-98e6ce86d2db",
        "cursor": {
          "ref": "538a9139-1e38-4c3b-901c-15a7abbf2bb5",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2a25b7fb-3fef-4294-9045-6c88173d4400"
        },
        "item": {
          "id": "752e61fc-ddc4-4671-ad7b-98e6ce86d2db",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "30798e94-f585-4c7c-8a7b-f12320fc7763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f594e59-b49e-4088-84e5-3c6ad9f7ee83",
        "cursor": {
          "ref": "2795ef15-b64d-4daf-96bc-8949d4f14399",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3f9a6579-90b5-4d72-95e2-6a14d8cacb53"
        },
        "item": {
          "id": "8f594e59-b49e-4088-84e5-3c6ad9f7ee83",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d580b1e9-3579-42d5-bb1c-0e9c77aa965a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9765ff0-528c-4bbe-90f8-9177df4cac84",
        "cursor": {
          "ref": "8140158a-0234-4f73-9ae9-354fbf1c8d73",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9ed8fd96-efce-4831-8f09-b99831b111f1"
        },
        "item": {
          "id": "e9765ff0-528c-4bbe-90f8-9177df4cac84",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "54ba9cd2-dbd8-4ebc-a399-48d02cef5728",
          "status": "Created",
          "code": 201,
          "responseTime": 2543,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6dbcdf54-3246-444a-97e6-cad33066b4a0",
        "cursor": {
          "ref": "f37d8663-a848-4e68-95cb-a50cf8d17798",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "824fa07e-9ede-4a0a-b576-40be6bc20e3d"
        },
        "item": {
          "id": "6dbcdf54-3246-444a-97e6-cad33066b4a0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1ffd5aec-541a-41e6-852b-02d871b6543b",
          "status": "Created",
          "code": 201,
          "responseTime": 1867,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "85a4240e-cc24-4f96-a058-2004b9c8b7f4",
        "cursor": {
          "ref": "ba65f991-a30b-45b4-a07a-61fbccbe986a",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "29c3fe12-e394-4de9-8d36-6a6a288160a5"
        },
        "item": {
          "id": "85a4240e-cc24-4f96-a058-2004b9c8b7f4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "56dbae31-197b-49c5-8bfd-223bc0e8a477",
          "status": "Created",
          "code": 201,
          "responseTime": 2254,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d4e8f65a-204e-4d12-bd7e-ff161a42893f",
        "cursor": {
          "ref": "3bda624b-b8f8-4e19-a1b4-01651050b7ab",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "49afcb20-6e9c-49ce-8455-d572607e842d"
        },
        "item": {
          "id": "d4e8f65a-204e-4d12-bd7e-ff161a42893f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d8431b1d-fbed-4cb6-8762-9d263da57de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3995a115-8c1e-46b9-a884-da03701479ea",
        "cursor": {
          "ref": "40cd1304-0327-49f7-ab08-209d61b640eb",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7463633a-20f9-495b-a0f7-f683c99e7982"
        },
        "item": {
          "id": "3995a115-8c1e-46b9-a884-da03701479ea",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bf9dc7ad-dd19-4c0b-8704-42fa21001988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b64fb1c-7f91-4bf5-8f9f-89347b2bd580",
        "cursor": {
          "ref": "fd278cf1-1362-48b6-a346-789b36ac5cb9",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "17373bbc-42f4-4ce2-a736-f33fb5b6bf23"
        },
        "item": {
          "id": "7b64fb1c-7f91-4bf5-8f9f-89347b2bd580",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "dd2993ad-84bb-4e21-9bb4-b9165758b292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410adc8c-7d5b-49ec-908a-8196104193b8",
        "cursor": {
          "ref": "8f1d85d7-946d-4a06-923b-7714fd41035b",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c0b53cff-611f-4825-bebe-3c733b77c87e"
        },
        "item": {
          "id": "410adc8c-7d5b-49ec-908a-8196104193b8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e0310ef6-7500-4ee4-8222-a0d2033ff5ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d9d29c-5073-4c54-8cf3-d9017d0d16b9",
        "cursor": {
          "ref": "57339b97-8480-43fb-b220-29278f76720d",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2e555589-f53b-4f54-b911-68fb7dfb2f0a"
        },
        "item": {
          "id": "28d9d29c-5073-4c54-8cf3-d9017d0d16b9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4765552f-6aa0-4c21-bc7f-6cedf0d5f432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2875eac-af10-481c-9a14-abd3235fe90e",
        "cursor": {
          "ref": "2e1a38ac-988b-4460-b4a8-9e12abe938b9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "aa242d26-f57e-4361-a6cb-6d643d14d642"
        },
        "item": {
          "id": "c2875eac-af10-481c-9a14-abd3235fe90e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "343ea44a-ea35-4c4a-9356-dbb7ccbaa639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4fcfe2-03b7-4527-a154-acfdcbf8cd67",
        "cursor": {
          "ref": "bd3978cd-38ec-42ed-bfe3-390064e82a0c",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "98fb1356-9f0a-4eb0-a6cb-68d7e78fb95a"
        },
        "item": {
          "id": "4e4fcfe2-03b7-4527-a154-acfdcbf8cd67",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7a613df0-47f6-4f54-b33b-6ed05caac738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cd80b5-6c57-4531-a34b-363c24cb7b8e",
        "cursor": {
          "ref": "24e0a3cd-dc97-422b-8a90-16ae2e6189ac",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2815e33b-e3c0-41be-9117-0119dd3d70e0"
        },
        "item": {
          "id": "36cd80b5-6c57-4531-a34b-363c24cb7b8e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "239b964e-a08b-42ab-9391-0017a0a8112b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e1aa83-c786-4ed7-b447-6e7b98f46548",
        "cursor": {
          "ref": "8b7ff5fd-88f5-4bf5-a6cc-ab889eba3761",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ff2eff2f-1cf5-46e5-af37-ba1159350bec"
        },
        "item": {
          "id": "b1e1aa83-c786-4ed7-b447-6e7b98f46548",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2e697f20-8463-49e9-a80d-ef90f0ed1124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d9bb9a-7e3a-419b-a1ab-ac5b8e63f884",
        "cursor": {
          "ref": "39631b71-096e-4be4-bb20-dd16667ae3cd",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "94503e06-f9ec-4840-9973-c28d71fd53b0"
        },
        "item": {
          "id": "35d9bb9a-7e3a-419b-a1ab-ac5b8e63f884",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dd89ddbb-90c6-46e5-808b-8eefdb432bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cf5b47-413e-46e3-89cf-68a212713788",
        "cursor": {
          "ref": "d1fc8846-894f-4671-ab9f-7160dfb14478",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "38fb9858-fcda-4e8b-b1d6-340569e50c56"
        },
        "item": {
          "id": "00cf5b47-413e-46e3-89cf-68a212713788",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2dc594df-640e-4395-a127-ff2b78c1c359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b71587f-1f57-4320-8a76-ce3f8da2b108",
        "cursor": {
          "ref": "372782d8-61a8-44d2-a322-cfb7afaf170a",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "049b2e00-7eba-4ded-afb7-7238448c788e"
        },
        "item": {
          "id": "4b71587f-1f57-4320-8a76-ce3f8da2b108",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e3133df9-1935-4d49-a118-b5f5cab780c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ed4309-f6e8-4617-99d1-9d5de8879be1",
        "cursor": {
          "ref": "32bedf1f-d5fc-4610-be60-e4c414007241",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "feb65066-450a-44a1-b6d7-34c568cd4752"
        },
        "item": {
          "id": "51ed4309-f6e8-4617-99d1-9d5de8879be1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c37ada76-5f4e-4834-8955-9800f574f820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5401399b-5d3d-488b-b0c1-ffb5ca749f04",
        "cursor": {
          "ref": "2d8b107a-60fd-47a9-98ca-81d1ab0a4ddb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f3da4bbe-68db-4e65-a487-93cde64f9a26"
        },
        "item": {
          "id": "5401399b-5d3d-488b-b0c1-ffb5ca749f04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f5cb673d-a938-4f07-93bc-8e524131d00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc70a5bf-ced4-4dc5-8c97-b04b55dd447a",
        "cursor": {
          "ref": "c9b54e3f-b784-49a8-bed3-9a43c46afc05",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "63c7f7ad-6b43-410e-a59d-372d8eab4bf1"
        },
        "item": {
          "id": "cc70a5bf-ced4-4dc5-8c97-b04b55dd447a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "122afdcd-ded3-4103-b37c-a1be4a296aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691a792f-38a7-422d-9f62-86fbe0151836",
        "cursor": {
          "ref": "d6d51543-c8ed-4ed2-b4bb-434153408974",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "7052776e-6747-4b5c-b26b-193f8ceec1f1"
        },
        "item": {
          "id": "691a792f-38a7-422d-9f62-86fbe0151836",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bc05c3d5-cdd5-4bd6-9223-9128e29a65de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b745c55a-1d1d-4dc0-8ff6-1221aec25b18",
        "cursor": {
          "ref": "d5b27ddc-a50a-4605-911c-4c9fb1351163",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d6c91201-021e-404a-a1f8-ceaaf428dc18"
        },
        "item": {
          "id": "b745c55a-1d1d-4dc0-8ff6-1221aec25b18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3b095249-04ef-477a-a454-f91afd362bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e38e53b-5dad-4e87-b06c-2501a8d971d1",
        "cursor": {
          "ref": "245e0c7b-3f94-40d3-a315-ebe9bbdc8b2d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "07cdfa86-6e77-4f66-8b7d-04e6f7b38c98"
        },
        "item": {
          "id": "0e38e53b-5dad-4e87-b06c-2501a8d971d1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "daf094ae-435b-4660-92f8-9d232813fc38",
          "status": "Created",
          "code": 201,
          "responseTime": 2298,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2ff094b0-6dc5-4ae2-974d-b7d338e294d1",
        "cursor": {
          "ref": "6f1139a9-91e4-4354-b448-08bdd658db97",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c7e883b4-cbd0-4f2b-8cbd-f6ab3084807b"
        },
        "item": {
          "id": "2ff094b0-6dc5-4ae2-974d-b7d338e294d1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "baeb05a3-7e1d-4611-8a81-e0e3676d9f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2662292-0a0a-4e87-b79b-c2a4ddae9e5e",
        "cursor": {
          "ref": "84e2be74-d3ee-4227-93a5-e6ee0d6aa47b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "89f4c3ed-b98c-4362-8699-7ba207c29556"
        },
        "item": {
          "id": "c2662292-0a0a-4e87-b79b-c2a4ddae9e5e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ffad5b05-bb7a-4cb0-bd3c-1530b42782a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9309f7-753b-49a8-b462-4453fa3299d0",
        "cursor": {
          "ref": "24856c71-b61d-4bc7-a302-0b91e565f759",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fd3cebb0-299c-4cf7-b2c7-8509284ee2a0"
        },
        "item": {
          "id": "5a9309f7-753b-49a8-b462-4453fa3299d0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "75125ac4-3148-44c5-93a4-8c02c3e89a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90cc3b9-1e2d-4bd3-99f9-0498374d2f9a",
        "cursor": {
          "ref": "e50224fb-d811-49f3-9011-c1f8084ac9b5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "560158fb-d267-40d0-a10a-6cc9423de515"
        },
        "item": {
          "id": "a90cc3b9-1e2d-4bd3-99f9-0498374d2f9a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "be1f145c-e01f-44fd-9619-415e1ff3a30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a907f2df-0e45-4008-a49c-30ea16362550",
        "cursor": {
          "ref": "ad01a421-71c2-4474-b125-4ed026daad76",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "af7a30cc-a467-4114-8327-e54d04b3bd0e"
        },
        "item": {
          "id": "a907f2df-0e45-4008-a49c-30ea16362550",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2abcaf43-16a5-4b08-998c-4eea8db17286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b30d2-c398-4ea0-b9e1-15b33fd1cbc9",
        "cursor": {
          "ref": "ec1f1075-b344-4902-b36a-cd8fbbeefb53",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0fee1d88-10c2-4dd7-a79f-58fe2ea3f6b2"
        },
        "item": {
          "id": "dc3b30d2-c398-4ea0-b9e1-15b33fd1cbc9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a751cf13-a050-41f1-8cd8-a3f879070b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d9d526-e7a2-43f3-a539-d9521d795730",
        "cursor": {
          "ref": "5e39ccc4-0b18-45d1-a63d-84653135d059",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7a60d7cd-ca9c-443e-87b2-735d8e78044b"
        },
        "item": {
          "id": "06d9d526-e7a2-43f3-a539-d9521d795730",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "74c3d28e-6869-4018-bd6b-12e336714b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0714b0b0-8ac2-4bfe-81bf-8c267467b8fd",
        "cursor": {
          "ref": "77d83bd8-4fc1-4875-b34e-3ede829eeb7b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "42ddb33d-db53-480e-8948-139e7b6d7b05"
        },
        "item": {
          "id": "0714b0b0-8ac2-4bfe-81bf-8c267467b8fd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "23f1e2bd-1f1c-4124-9830-81fe654c7c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae41be0e-3cc9-42eb-86b0-fdbaaeeac20d",
        "cursor": {
          "ref": "f2d776f2-4b07-4271-a2cd-9d45b817554a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e63c6b8a-eb40-438c-942e-4f414b02deb2"
        },
        "item": {
          "id": "ae41be0e-3cc9-42eb-86b0-fdbaaeeac20d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "26896d52-4b31-4b49-a656-6d5e15aa0a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ed345f-9ba6-4da3-84f8-5d175131839f",
        "cursor": {
          "ref": "f420af21-e3ef-4c04-b1dc-55e055b1ea21",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9a59f1bd-fb44-44d5-afd7-4c632fc783a3"
        },
        "item": {
          "id": "49ed345f-9ba6-4da3-84f8-5d175131839f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "969319e0-a135-48c0-bcdb-2cd3c452e80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16595aaf-1d7c-4768-a92f-aa82f144ab9b",
        "cursor": {
          "ref": "7a3b1332-128f-40bb-87ed-6dde3a4f935a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c91a10d3-0fd0-4e57-a548-8efea3e021a9"
        },
        "item": {
          "id": "16595aaf-1d7c-4768-a92f-aa82f144ab9b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "690d3ae7-ed0f-47fb-ad77-33dff2f35c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224a8a50-b82d-4a04-93bc-43e1646a56af",
        "cursor": {
          "ref": "d893b77f-1140-4586-beba-3e74c552b01c",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "911e1b5c-2794-4092-9a53-16cf39416b0b"
        },
        "item": {
          "id": "224a8a50-b82d-4a04-93bc-43e1646a56af",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d114c9d1-d795-4fc7-bf84-acb47dc807e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355784a3-30cb-4a85-87ec-29534e2e2e0f",
        "cursor": {
          "ref": "fe69e199-da5c-4557-a2a1-120073a69732",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "92deb4ac-56b5-4f2e-b227-8a4fc33121ff"
        },
        "item": {
          "id": "355784a3-30cb-4a85-87ec-29534e2e2e0f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "20724429-80e9-4e65-9b96-715d7d00e058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe3aa1b-55e9-4d2d-8eaa-b998cdb7cecb",
        "cursor": {
          "ref": "47ade645-fad1-427d-bb50-89ca9cb0ab77",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ac1e30ed-bf72-4cd9-bb38-d905a62f6276"
        },
        "item": {
          "id": "afe3aa1b-55e9-4d2d-8eaa-b998cdb7cecb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "492e0467-3447-4ba2-9a7c-122afe8e900f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7380844e-ca27-4803-93d3-a6e7507d51d4",
        "cursor": {
          "ref": "19242920-24b3-428d-a93c-eddfcd868366",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3c6cb659-5892-4e19-b022-30a33cb3665c"
        },
        "item": {
          "id": "7380844e-ca27-4803-93d3-a6e7507d51d4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9fdfc3ab-6186-43a2-ba43-27d2a65a4c74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2917d0a-7d82-4430-b9b5-2e408fccf7d3",
        "cursor": {
          "ref": "d0e89941-a4cf-4fc9-8223-be453d2fcf1a",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6cb23804-24fd-4d32-b019-90fb60d681ee"
        },
        "item": {
          "id": "d2917d0a-7d82-4430-b9b5-2e408fccf7d3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7b4b7629-54c5-41cf-8375-006a6afd7f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60a1aaf-5b28-4911-9255-524dd3363604",
        "cursor": {
          "ref": "f3b15458-99b4-4b58-b980-5622c78b8c5c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b7773311-0db0-4904-a61e-781c09374d44"
        },
        "item": {
          "id": "d60a1aaf-5b28-4911-9255-524dd3363604",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d15b1ecb-a529-4d05-8517-2242091d68c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b039d65-1af3-4316-b70c-3f06d7c8ecb2",
        "cursor": {
          "ref": "707e2305-ba8a-4503-9060-ee95f90bbe36",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "73f87f2e-672e-410f-87c0-9b82a2360ec0"
        },
        "item": {
          "id": "1b039d65-1af3-4316-b70c-3f06d7c8ecb2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d4ba94ab-c1b5-4daa-a38a-b4e6764f65bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58469769-bf38-4a17-a3ac-accdd1acfa09",
        "cursor": {
          "ref": "979e25b3-6c5e-4bb1-8629-51f03b494f30",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7fc8967f-3ef4-4e3e-a2f4-e2739d27a98b"
        },
        "item": {
          "id": "58469769-bf38-4a17-a3ac-accdd1acfa09",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9042befd-f846-4e9d-9bfe-7a069658b6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2470a387-c722-40cc-8510-5ac763d170ba",
        "cursor": {
          "ref": "383ab184-6d46-4bca-90ac-7ba2299b7a42",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f769b6ab-c033-4890-9b01-f43f85803cbb"
        },
        "item": {
          "id": "2470a387-c722-40cc-8510-5ac763d170ba",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ad1c2646-d5f2-4dfb-8534-f0cf1b42b640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16114e6c-46b7-41ae-bdd0-9bd4d9aa1471",
        "cursor": {
          "ref": "e27ef46b-b7b9-4d4e-ad91-f5497068d936",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5d146fd1-8974-46bb-9be6-c48590c979db"
        },
        "item": {
          "id": "16114e6c-46b7-41ae-bdd0-9bd4d9aa1471",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d660759c-ac3b-445f-989e-6137675923ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011a1e12-5775-457c-ade1-af6160f95275",
        "cursor": {
          "ref": "c2028a00-f17e-495a-bdd8-d6f5b10a5784",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "50b16bcb-f913-42e7-a7e0-055b86bccbb2"
        },
        "item": {
          "id": "011a1e12-5775-457c-ade1-af6160f95275",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f4e22de3-6130-4c24-a8cd-2899b567885e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd4ccc7-d6d1-43e2-b9fe-794f14497a6d",
        "cursor": {
          "ref": "ffd5d22d-5932-4c8c-ac83-fa7f4da288f4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d303453b-4d9a-4bd5-92cc-d303943b3686"
        },
        "item": {
          "id": "bbd4ccc7-d6d1-43e2-b9fe-794f14497a6d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9347eb73-57a2-4b20-b05f-836e1046ddaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691e83b8-59cd-4559-97b5-3a1361435ac8",
        "cursor": {
          "ref": "b75c6d08-754f-4a5b-b08f-215ee8c6b3f2",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a1b6456e-ee63-43aa-9054-fe84e78c0889"
        },
        "item": {
          "id": "691e83b8-59cd-4559-97b5-3a1361435ac8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e66ef8b0-4d57-4205-b104-944cd46cf7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df2b84c-44c2-4e52-92bb-4d5b90dff4ff",
        "cursor": {
          "ref": "66ba004b-8744-480a-86e8-ad892c585ffa",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2b670197-c38e-4da0-88c9-cebb49e0be78"
        },
        "item": {
          "id": "0df2b84c-44c2-4e52-92bb-4d5b90dff4ff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2814858c-cc6b-431f-81df-fe31e5d1c700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8967a0-7b6c-48d1-b307-cb6f0ce1a045",
        "cursor": {
          "ref": "4d4caf34-8de9-4cfd-9525-59fa88a3f5d4",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5031a49e-2526-4ac3-9441-1e69be815362"
        },
        "item": {
          "id": "7a8967a0-7b6c-48d1-b307-cb6f0ce1a045",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "882a234b-a280-400b-b0f6-dd80207da4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df024ad6-7964-4bed-9c7c-9ade55e32098",
        "cursor": {
          "ref": "66d6e0bc-44b6-4a43-9d3f-9667493c64ab",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "95c6c825-f9fd-48e0-b611-9462c836b3bb"
        },
        "item": {
          "id": "df024ad6-7964-4bed-9c7c-9ade55e32098",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2c38c73f-be0f-4adb-85a1-290a2cb32841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8daeef1d-4ec5-4f51-a9b8-58eb963b99bd",
        "cursor": {
          "ref": "ac9dbf2f-41fa-4af1-b8ad-d3d401686480",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ae8ea3fb-a298-4ad5-8373-796e49db247d"
        },
        "item": {
          "id": "8daeef1d-4ec5-4f51-a9b8-58eb963b99bd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0b9d0143-ddfd-4789-903d-266cec6599f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c9436a-fe59-4835-ac8d-96e8b0a8700b",
        "cursor": {
          "ref": "be3de565-a8cb-4e4a-a8c5-fc78123db20d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0c7464d1-7e82-4579-aeb6-e0a02435d117"
        },
        "item": {
          "id": "19c9436a-fe59-4835-ac8d-96e8b0a8700b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db0c74d6-0615-4d32-b641-faa00a8d26c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8537ead7-fc83-4497-9dee-fa870da9167b",
        "cursor": {
          "ref": "2bd19602-a44f-4dbb-814a-4f4138e3e837",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "93cd70f2-27e6-4087-b4ef-64406d2bd30e"
        },
        "item": {
          "id": "8537ead7-fc83-4497-9dee-fa870da9167b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dd06ba96-4fb3-42c2-9576-aa033e34af65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f5c377-1ff9-40e7-a00b-a939b4a61552",
        "cursor": {
          "ref": "3846fcf5-af03-408a-8696-a79a0f5319dc",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cd899706-b1e5-43a5-b145-7a04a91adf90"
        },
        "item": {
          "id": "e0f5c377-1ff9-40e7-a00b-a939b4a61552",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "70c6c33d-78d9-437a-8b91-d64b21941156",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "73b62b2a-0c88-49a9-b58f-08962908e251",
        "cursor": {
          "ref": "cad367fc-1398-41af-8ae3-3d194827dadf",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "21f1108b-a56d-490f-b2d2-eb785d8c7649"
        },
        "item": {
          "id": "73b62b2a-0c88-49a9-b58f-08962908e251",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "6dc7957b-0fee-4e67-87f3-1d4a47ad7713",
          "status": "Created",
          "code": 201,
          "responseTime": 1891,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "fabc2815-a8a2-4d9f-b5b2-636bf290509b",
        "cursor": {
          "ref": "40741cf3-4514-443c-8896-3f32beed824f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ea904d03-6655-49fd-8342-6381705b5af0"
        },
        "item": {
          "id": "fabc2815-a8a2-4d9f-b5b2-636bf290509b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7c8c8dfc-12ad-4cfa-8a03-ffba02369385",
          "status": "Created",
          "code": 201,
          "responseTime": 2060,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7172503-8744-46bd-8d8f-d648e5d32d6d",
        "cursor": {
          "ref": "53cbb0d5-fdd2-49f8-9bdf-c49427ed89c4",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9851d1a6-1024-438e-8ddd-6af5b774b0f3"
        },
        "item": {
          "id": "f7172503-8744-46bd-8d8f-d648e5d32d6d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8e900e95-2b68-4794-aa78-09697bf80f94",
          "status": "Created",
          "code": 201,
          "responseTime": 2247,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6eb871a-94c4-42c9-9a7a-9c222c1740a2",
        "cursor": {
          "ref": "a2d8c5e5-b305-4be6-8f6c-db34bdabe739",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7f8c1531-5389-4ac1-ac74-c91e568e03d5"
        },
        "item": {
          "id": "d6eb871a-94c4-42c9-9a7a-9c222c1740a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "48d9b65d-3900-46f2-bfe6-64c08840e040",
          "status": "Created",
          "code": 201,
          "responseTime": 2304,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf624264-5a35-4cbd-beb1-742030198d68",
        "cursor": {
          "ref": "2521d207-2b2d-4a86-8696-f9207848dce4",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8bbf34e2-169e-4c8e-aaea-baa9df41dbc4"
        },
        "item": {
          "id": "bf624264-5a35-4cbd-beb1-742030198d68",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b94dce51-2c47-4544-bc4d-07a74ddce69d",
          "status": "Created",
          "code": 201,
          "responseTime": 2909,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-12T00:42:49Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-12T00:42:49Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "3f42b83c-1149-4e8f-822e-7cdf9f73d0d0",
        "cursor": {
          "ref": "4455c2a2-79aa-4caf-be74-7e887b3299d5",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ce837001-0214-4e66-9598-8a5d6035e68c"
        },
        "item": {
          "id": "3f42b83c-1149-4e8f-822e-7cdf9f73d0d0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a0a78ebf-e7ec-40ea-8831-515f0ae3ded7",
          "status": "Created",
          "code": 201,
          "responseTime": 1827,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc2a3df-c6a2-4557-b0c8-f8c38dd8edb4",
        "cursor": {
          "ref": "4ed85bc8-1027-4ce4-9910-faeac6511cbd",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b8300b98-fd52-4c3a-876e-176c66273434"
        },
        "item": {
          "id": "0bc2a3df-c6a2-4557-b0c8-f8c38dd8edb4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f072d95-ff83-45a9-9eff-6f1752dc8125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc2a3df-c6a2-4557-b0c8-f8c38dd8edb4",
        "cursor": {
          "ref": "4ed85bc8-1027-4ce4-9910-faeac6511cbd",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b8300b98-fd52-4c3a-876e-176c66273434"
        },
        "item": {
          "id": "0bc2a3df-c6a2-4557-b0c8-f8c38dd8edb4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4f072d95-ff83-45a9-9eff-6f1752dc8125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085751fe-954c-4064-8da3-7c2ebf5221ab",
        "cursor": {
          "ref": "af5168c1-8ae0-4ec1-a593-3c6077c37f60",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7b0fc330-eab0-41bc-8e2e-49f0534b0eae"
        },
        "item": {
          "id": "085751fe-954c-4064-8da3-7c2ebf5221ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ea646170-707c-403f-b305-07c3d3cb4087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0182a34a-332a-4130-a504-6f40017397af",
        "cursor": {
          "ref": "3bca5a66-f1aa-491d-9103-a3ee77fd2d97",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "16e5f817-0383-4406-a718-e96957feb654"
        },
        "item": {
          "id": "0182a34a-332a-4130-a504-6f40017397af",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "05dfae71-6dd3-4891-997c-ecd83f2fed81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac887bd-83bb-4d3d-8868-3d14a4ff7722",
        "cursor": {
          "ref": "d6fe4d3c-b869-440a-ace6-e46865ceb1d9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ef187d98-300c-4658-968a-07b6114a1fdb"
        },
        "item": {
          "id": "dac887bd-83bb-4d3d-8868-3d14a4ff7722",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1c42bc7a-0b36-4221-b89a-05dde6d57d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075ecd9b-2136-42d1-9d14-61c05e9a28ed",
        "cursor": {
          "ref": "26e25d47-dd8c-44c1-8de4-2d83464373f1",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "679d72ae-b1e8-43c6-ba09-3a226a8458fb"
        },
        "item": {
          "id": "075ecd9b-2136-42d1-9d14-61c05e9a28ed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b9a74a33-295c-47cb-936b-100f775edee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9835cebc-f590-4745-abcf-ff9f8541d270",
        "cursor": {
          "ref": "b3998e28-ff75-4787-baf4-d103e159d487",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2150b419-4feb-4588-8f71-73f123fe4f74"
        },
        "item": {
          "id": "9835cebc-f590-4745-abcf-ff9f8541d270",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a3a13d86-af45-41c5-bb96-72b49ecec5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8c3095-6602-42c4-a120-581c9b76579b",
        "cursor": {
          "ref": "279e8ce6-603c-4ad8-abc0-d46a2ec03386",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "138e529b-4606-42b4-aafd-e6b8aeec8d28"
        },
        "item": {
          "id": "ca8c3095-6602-42c4-a120-581c9b76579b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b4e3a543-2ced-44e7-a17f-5094ab6128e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40c55b1-9d78-4a16-a205-0e777447e60c",
        "cursor": {
          "ref": "4c5ec017-4a3c-4cb0-87fa-990e064f393f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ed7e115a-b949-426b-9e5d-ba1431348fd6"
        },
        "item": {
          "id": "e40c55b1-9d78-4a16-a205-0e777447e60c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64151aca-4b64-4151-8df9-1074f50a6105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e2f983-3753-4db7-bdf2-45789d117d77",
        "cursor": {
          "ref": "75aa0668-accb-4ae4-b716-ccc77b739a7e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ab908a28-5990-42ba-8704-2966d8c42890"
        },
        "item": {
          "id": "02e2f983-3753-4db7-bdf2-45789d117d77",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a9c47670-5922-447c-942a-9ade6a75332c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260a5e9d-031f-4f2e-ada0-540731486397",
        "cursor": {
          "ref": "fc929381-09f8-4483-ac7b-8ded78e8028b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1354c95d-f94b-4b20-828d-dff847b817c4"
        },
        "item": {
          "id": "260a5e9d-031f-4f2e-ada0-540731486397",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "363414f2-46a9-403d-a65f-3f8be2c04eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ded48f3-4c0d-472c-a085-14560d1e31f9",
        "cursor": {
          "ref": "cce6ee1f-4120-49c4-aa8c-e74ae4e5e441",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "39e398c7-d12f-4dfa-8d9b-fb036a70c231"
        },
        "item": {
          "id": "5ded48f3-4c0d-472c-a085-14560d1e31f9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f9de1861-f219-48f9-be23-3d5a6b1993e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0d8c76-ca1c-40c2-ab0c-d88988ef9c22",
        "cursor": {
          "ref": "d66ccb06-d1e9-4dec-8d5d-1bc9299bf545",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8bed8cb1-3e6e-4b23-97db-abca84a20477"
        },
        "item": {
          "id": "6a0d8c76-ca1c-40c2-ab0c-d88988ef9c22",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2038a8e2-17ae-4441-b942-81471ddd2994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e240db4-1154-408f-b315-720859e7c70a",
        "cursor": {
          "ref": "7f4c2292-47d3-405e-b95d-3c2e693a6ebf",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "77a18c6e-a012-441e-8127-6e6dc2a43012"
        },
        "item": {
          "id": "9e240db4-1154-408f-b315-720859e7c70a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6b79fb18-a39c-46ab-bcb5-b6a2d5700be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8680ba3a-e117-4235-965f-eee671667878",
        "cursor": {
          "ref": "8d980a91-937e-41a3-a811-b9f15d0273de",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "01fbbaa1-0209-450f-a0e9-58a9d5d17e38"
        },
        "item": {
          "id": "8680ba3a-e117-4235-965f-eee671667878",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "96793e1d-b819-4955-8003-a8c9db009f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49ac60c-952e-4059-b28d-1e9bd20195df",
        "cursor": {
          "ref": "2d8954d6-fdb4-469f-ba22-3f47172f4434",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d7ccfd02-9edc-4a89-91e7-11cd464ff9d5"
        },
        "item": {
          "id": "d49ac60c-952e-4059-b28d-1e9bd20195df",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f87258a3-f929-4936-a5ad-1906d32fe771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d72e7b-2b5e-406c-a848-53e090d76f17",
        "cursor": {
          "ref": "6a7813bb-9c00-4770-9616-c1b8a77992d0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23d31b08-942c-46d1-bf18-f55ba0cd14a4"
        },
        "item": {
          "id": "42d72e7b-2b5e-406c-a848-53e090d76f17",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bf4c83f1-2ec5-412e-bf5d-2ef71e30e791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3609f4f-fea3-4013-aa48-b4b45f70232a",
        "cursor": {
          "ref": "59121b0e-c59f-4377-88f6-18c8cf0949a2",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "99f2dc0b-d482-42ad-8db0-7eb7e31f8730"
        },
        "item": {
          "id": "d3609f4f-fea3-4013-aa48-b4b45f70232a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a636b327-af3a-4dd7-93d2-583b99e5f2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38180734-aa6d-4079-adac-e24c65839ce2",
        "cursor": {
          "ref": "cd569b51-7fb8-4db1-89cc-c953a18deab3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d43e2746-1947-40ab-bac2-0cb1d2a1ac07"
        },
        "item": {
          "id": "38180734-aa6d-4079-adac-e24c65839ce2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fe24016c-9655-4a97-a5cb-555b64033dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70f15e1-6927-487f-b507-53737732a7e5",
        "cursor": {
          "ref": "7655d9e8-9253-471f-9086-5599cbe970a2",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "849a408d-c611-4d4b-8ada-5b76724ed2fd"
        },
        "item": {
          "id": "a70f15e1-6927-487f-b507-53737732a7e5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "26628814-7501-4d8c-a470-af5aabd7af9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c3e850-5d36-4f86-897f-c4c62a2b1f5e",
        "cursor": {
          "ref": "4a10ac12-2add-462e-8ad7-37ba6f9998d7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "43c12e5c-2fd2-428f-819f-0d9281044f7b"
        },
        "item": {
          "id": "69c3e850-5d36-4f86-897f-c4c62a2b1f5e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6009681-6e5c-4666-8eaa-fd5b96d98829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cf4f1a-b9ae-4906-9bfd-50c34d0c0687",
        "cursor": {
          "ref": "567ef5a7-ab8b-4ee7-8644-15fc54d6d1af",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "126d36cf-364e-4a13-a536-41c29adf4f3a"
        },
        "item": {
          "id": "99cf4f1a-b9ae-4906-9bfd-50c34d0c0687",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "751f9f4d-946a-41fc-a860-2abf0611d0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180a97e3-fbe7-42a7-b00c-69012f794f72",
        "cursor": {
          "ref": "37b4af9c-0a87-4f07-a215-40bb31e627cd",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c22ece74-af36-4a37-ab98-e2b1bad0bdb2"
        },
        "item": {
          "id": "180a97e3-fbe7-42a7-b00c-69012f794f72",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4f1efefc-60fa-4d96-b284-21eebce3e1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1269c9d7-f050-4255-95a3-02af64162ce8",
        "cursor": {
          "ref": "3686f48e-3792-4cf0-8413-72a1d20f48fb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a05bdf47-77db-45c5-80e8-57e89237bfad"
        },
        "item": {
          "id": "1269c9d7-f050-4255-95a3-02af64162ce8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3add7606-4a35-4ad8-8065-52dc7fddb404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6c5609-7a45-4a0e-bf2d-d87ad879a6e7",
        "cursor": {
          "ref": "03c8fd96-0f63-4c96-97e5-bff5adfd6a72",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "75d97d6e-e2d5-4dce-b0f9-bcaf99a4a83f"
        },
        "item": {
          "id": "0d6c5609-7a45-4a0e-bf2d-d87ad879a6e7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "72fd4e1d-1ed8-452b-affc-8f7ffd916e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c956ee84-e0be-4a7a-bb7e-23f206d48745",
        "cursor": {
          "ref": "d393805b-be56-4e18-8996-abf3c498d8bf",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e65c7333-145d-40a9-9bf7-9ba92345e3a0"
        },
        "item": {
          "id": "c956ee84-e0be-4a7a-bb7e-23f206d48745",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "142d3281-df59-41eb-ab85-2f27115d569f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae59e08-1de4-4944-bc11-1ac9b8d990cb",
        "cursor": {
          "ref": "3a0fc1fc-d29b-4835-92a7-e256c51ff027",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4115288e-ffce-41ac-b6e6-b878e9927fb3"
        },
        "item": {
          "id": "dae59e08-1de4-4944-bc11-1ac9b8d990cb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "49338a43-f812-46e9-adc1-0cdbf1485fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24647770-1918-47df-9c12-8c95f580c15d",
        "cursor": {
          "ref": "928fd783-447a-4796-a113-2f066762871a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bc0295d1-0246-4290-97dd-28426ebb6237"
        },
        "item": {
          "id": "24647770-1918-47df-9c12-8c95f580c15d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1126d7b9-dabb-4895-a204-c29a3ff7f654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f708d264-5a2e-4d7a-8f52-c9f2b3b65344",
        "cursor": {
          "ref": "9766992e-ff2e-4170-abf1-e2b420f2402a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7a07d4a-0a86-4e1c-b469-e3796ea70434"
        },
        "item": {
          "id": "f708d264-5a2e-4d7a-8f52-c9f2b3b65344",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bfefa618-53d4-474c-97c3-13799afe0260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e4b946-134b-48a0-b96d-3ad3326e297d",
        "cursor": {
          "ref": "013388c7-ae7a-4d28-a98a-df6d9a24a337",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "72931cfa-4d62-495b-8180-4421029d265b"
        },
        "item": {
          "id": "36e4b946-134b-48a0-b96d-3ad3326e297d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fd675970-1b9d-4cbc-a612-ebaa6bf2eca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ea7cb2-7da8-4b4b-9c3b-b59d7dc4ebc5",
        "cursor": {
          "ref": "b270a63a-73c1-44e2-8546-d48a6a04edc7",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3d3a3cb1-72b4-4f18-be55-f16cd4d6609c"
        },
        "item": {
          "id": "91ea7cb2-7da8-4b4b-9c3b-b59d7dc4ebc5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b0f0cdc9-6db3-43f2-a6ee-157278a77206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0230ba-3844-43f6-a7e2-072973235baa",
        "cursor": {
          "ref": "ecd69be0-cefe-43d6-a08a-d817f4872dcd",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "72665011-d6e0-4e03-843d-0b30614d7dd3"
        },
        "item": {
          "id": "8e0230ba-3844-43f6-a7e2-072973235baa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "38082936-8f36-4e00-a1c6-bd5b8cd53fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc39fa5-b3a9-4091-96ca-e4fbf2de84a9",
        "cursor": {
          "ref": "8c44f5b7-fe73-4163-b5b3-21578cf50b60",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "eef651f7-39f7-498b-b594-9b81a6866077"
        },
        "item": {
          "id": "0cc39fa5-b3a9-4091-96ca-e4fbf2de84a9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "cabfc035-873c-40db-b059-7d4535f125e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590c25e2-e88b-4490-a024-badc2aa16f01",
        "cursor": {
          "ref": "7a922cdc-c832-451c-a8c2-2eb10590bde1",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6348f57e-3433-4904-a66d-df1350f7b11a"
        },
        "item": {
          "id": "590c25e2-e88b-4490-a024-badc2aa16f01",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0049e787-5c10-4d00-afa2-eeca1951b709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f194b90f-be7e-4add-bff2-f488d8acfbd3",
        "cursor": {
          "ref": "a54725fa-f3dd-40df-8175-df4e918b0842",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c02d47e9-9101-44a9-9d5d-e90be24819f6"
        },
        "item": {
          "id": "f194b90f-be7e-4add-bff2-f488d8acfbd3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4c75b898-8c02-4db6-a02f-f463c39b9a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "049fcec7-fba3-44a7-8060-e9a2aa8e4e87",
        "cursor": {
          "ref": "1111a6ca-599d-4868-8cc4-56c963b7f22a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b7a0b767-68c1-4f86-a6ca-c2e04af2b87b"
        },
        "item": {
          "id": "049fcec7-fba3-44a7-8060-e9a2aa8e4e87",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "70b47bc8-d4ee-423b-9486-1d2fb1f9fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049fcec7-fba3-44a7-8060-e9a2aa8e4e87",
        "cursor": {
          "ref": "1111a6ca-599d-4868-8cc4-56c963b7f22a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b7a0b767-68c1-4f86-a6ca-c2e04af2b87b"
        },
        "item": {
          "id": "049fcec7-fba3-44a7-8060-e9a2aa8e4e87",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "70b47bc8-d4ee-423b-9486-1d2fb1f9fcef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba246b4-46bf-4c27-ae72-141d444fbc61",
        "cursor": {
          "ref": "571f8ad4-545a-4c22-8413-5fa0fc1aa39b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cff14716-a204-483f-8927-eb0dfbf9f468"
        },
        "item": {
          "id": "5ba246b4-46bf-4c27-ae72-141d444fbc61",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "73928f59-87fb-4503-b027-37fee8968def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a3893d-bc3b-48ca-8a69-d55efad239f2",
        "cursor": {
          "ref": "503bc84a-a91a-4bc4-96a6-fc6e87893e49",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4cc11a26-acb3-4676-9ada-b73701a9f407"
        },
        "item": {
          "id": "58a3893d-bc3b-48ca-8a69-d55efad239f2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c4a5bd4c-990e-46f1-99b8-d4caac9ea25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da697981-32c5-4096-94ff-fe5034d65d65",
        "cursor": {
          "ref": "32e4dd8a-a6a8-4616-af1c-0021e6395d5f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "94057126-dcb6-48d4-b51f-0434ccd93872"
        },
        "item": {
          "id": "da697981-32c5-4096-94ff-fe5034d65d65",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "71014e88-fb30-4bfe-b2a8-0e1e3b68c06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510356f3-a4a5-4a12-bcd8-1435b2f03681",
        "cursor": {
          "ref": "0099945a-f2bc-47f8-be79-4d5a48e656b5",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "67daf497-567c-4a0b-8e9d-b73ae97fc046"
        },
        "item": {
          "id": "510356f3-a4a5-4a12-bcd8-1435b2f03681",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ed0134a0-3bd6-489b-b656-ce35b6f848ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f0c413-f1de-4d0f-bab5-b94f8917ce1a",
        "cursor": {
          "ref": "fa6d51a8-9dba-4661-b557-3bc81c82ea78",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6676fb28-303f-4293-88ff-d48679c49d99"
        },
        "item": {
          "id": "08f0c413-f1de-4d0f-bab5-b94f8917ce1a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f35e94d-9c70-41fa-9dce-facd36b69474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5383d914-e767-4c20-a845-1ea66814caec",
        "cursor": {
          "ref": "307ca834-4154-4ce7-b02a-ec0ada67e47f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f96b66d6-9649-43ea-ab4d-ddf621b7e3c2"
        },
        "item": {
          "id": "5383d914-e767-4c20-a845-1ea66814caec",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "07f9cd31-0a1c-497f-a658-a06474c9cc44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05a2dcc-b47a-48ae-abab-997bea72ce42",
        "cursor": {
          "ref": "9bbcd5c0-bfd1-4b34-8591-b33f8ee63151",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c18ba9fd-7cde-468c-bca0-db5a5fca8071"
        },
        "item": {
          "id": "d05a2dcc-b47a-48ae-abab-997bea72ce42",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bde3b5a8-4c48-4278-b7a4-34f9f342ce5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9e83a9-cb1a-47e0-a599-8ac05e573b57",
        "cursor": {
          "ref": "9adc50d1-5dc5-4a0b-a731-c96750f3d49e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "343e0437-c994-4b0e-9651-cef5a7fb7bb5"
        },
        "item": {
          "id": "3d9e83a9-cb1a-47e0-a599-8ac05e573b57",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1e59cd50-aed6-4424-8085-7475dee25a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aad92b9-1d5f-46dc-b72a-5bc3a596c387",
        "cursor": {
          "ref": "516a6d9a-c542-4e32-8b3d-74dd478b106f",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "09d89f32-00e5-42e8-ae2f-a34f2c69bc2c"
        },
        "item": {
          "id": "1aad92b9-1d5f-46dc-b72a-5bc3a596c387",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a8d74533-5734-4c35-8a2f-dd6cb203f19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d939cd-6c66-43fa-b499-d70a90b6e4de",
        "cursor": {
          "ref": "aa01c86f-f3ac-490a-930f-f7b4818d7dfb",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cbc0c26d-ab50-4aa0-9492-7b1775ee3761"
        },
        "item": {
          "id": "b5d939cd-6c66-43fa-b499-d70a90b6e4de",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "07036d2e-1c4d-407b-82bc-35a4ea5221d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aded3b-7c2d-414b-9a94-21abf4c855c1",
        "cursor": {
          "ref": "7d75553a-efca-4f4d-b923-54c9ccc72d56",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "355c7d47-251d-4567-9a45-6374e31a4c52"
        },
        "item": {
          "id": "05aded3b-7c2d-414b-9a94-21abf4c855c1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b0222e02-08cc-4875-b099-4af7eeca91fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6eb15fd-f24d-4d4f-b7a2-0cb882f230f0",
        "cursor": {
          "ref": "d3954db8-40ff-4a85-9818-593f1e267ec5",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c96ce58-79e4-4c5c-becb-da4cd3490a96"
        },
        "item": {
          "id": "f6eb15fd-f24d-4d4f-b7a2-0cb882f230f0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2bf96dfb-de36-4f90-9531-21eeaeda57e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68a2967-969d-47e1-b831-efb1ebfec22b",
        "cursor": {
          "ref": "b77fafb3-219c-4a1f-b5c7-05b09a3c4a59",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2f5c47cc-5bc5-4e63-b31d-2b15a83d6bc2"
        },
        "item": {
          "id": "a68a2967-969d-47e1-b831-efb1ebfec22b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "396996f6-7c4a-4e5e-aec5-33ff40eb4ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8699ba-58fd-49f1-a031-d9db688b7db2",
        "cursor": {
          "ref": "52e61c4e-887d-4e8a-8c1e-f474a84c8e74",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fd1f6991-6768-4e86-939d-82671691ef91"
        },
        "item": {
          "id": "1a8699ba-58fd-49f1-a031-d9db688b7db2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d461038c-4e4a-4dfd-8c39-8c7c71daab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59289a54-5991-41c6-af10-ba779b026836",
        "cursor": {
          "ref": "5d27bf4c-6d4a-4e09-a4a8-530331ed4600",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a6009303-ca18-4fcc-9c40-ab17accf06fb"
        },
        "item": {
          "id": "59289a54-5991-41c6-af10-ba779b026836",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a058fe28-8638-433b-86a1-cf032f547db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ba8ef5-93af-4528-8854-815a2d333f27",
        "cursor": {
          "ref": "01cf515d-1fb4-4806-9150-f273ac960ac4",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cde6b0a8-6f97-4133-9363-23afa0e3cf71"
        },
        "item": {
          "id": "d2ba8ef5-93af-4528-8854-815a2d333f27",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b1120617-63a6-4fef-b667-8a15c8668991",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "e6bcb55d-d44f-4fba-aef4-38429cf9b562",
        "cursor": {
          "ref": "26f164f2-d0ba-402c-8ebb-ed68b330a6b1",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6adc2244-be5d-4586-a8bb-f488c3ede41d"
        },
        "item": {
          "id": "e6bcb55d-d44f-4fba-aef4-38429cf9b562",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4f0d3dc0-c37a-4742-a854-4e2177c76bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f095c9b-2d67-48f3-a27b-f66a20854604",
        "cursor": {
          "ref": "55dba1bb-9ee7-4bfc-9517-c0ced24b57d8",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7be14d2b-afe6-450d-9490-3c0566bb7f2f"
        },
        "item": {
          "id": "4f095c9b-2d67-48f3-a27b-f66a20854604",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2ab75f2b-d2c5-4af9-91b9-99a76085a78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25471164-253f-4a34-9eb8-55833d705616",
        "cursor": {
          "ref": "c086296a-915c-47e9-aefc-236bbb192eb4",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "31e2ada2-20f0-4041-8459-fa61d9cb82c6"
        },
        "item": {
          "id": "25471164-253f-4a34-9eb8-55833d705616",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7705358d-8d2b-4e03-9211-9d8c4f861a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61702561-7cf2-4245-9277-da6f76f3bba3",
        "cursor": {
          "ref": "909b791c-75a1-4b22-b4b0-34cf15ba1f08",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ba36dba6-b6fd-432c-9624-150516adba69"
        },
        "item": {
          "id": "61702561-7cf2-4245-9277-da6f76f3bba3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "af83f6aa-5480-456e-bc39-2b269b36e270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89f3039-4b1b-43d7-8457-f9f5c4d33c8e",
        "cursor": {
          "ref": "d8547be2-a65b-4cc4-901e-2486b62c55b7",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "04c6ddab-d877-4cc0-ae14-53a94782ab8b"
        },
        "item": {
          "id": "f89f3039-4b1b-43d7-8457-f9f5c4d33c8e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3746ad65-5b40-4294-99c3-11c726819fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4afe40-d1d9-4961-bf2c-8b8f38a2a7ab",
        "cursor": {
          "ref": "18449b25-4667-4c0b-8fba-4fbac576d0a4",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b5918bca-b9da-4041-9669-274bcdc57ae2"
        },
        "item": {
          "id": "ba4afe40-d1d9-4961-bf2c-8b8f38a2a7ab",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c13f92de-2113-453b-9a4d-675003c2b876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6668128-6d8c-484d-8d15-f87bab5346a9",
        "cursor": {
          "ref": "71a3dc84-030c-41d3-b9ac-3ded57c93125",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cfc34bba-ee63-46b3-bdab-817cf3fd73e2"
        },
        "item": {
          "id": "b6668128-6d8c-484d-8d15-f87bab5346a9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7a316ca4-556e-4744-b166-d5b6b1be6671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb1ce5b-6ae5-4fb2-90d6-c6b3dff7f061",
        "cursor": {
          "ref": "9c9247ec-d9c8-40fd-8bed-3ac8ce7f64af",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "34dfcd67-729a-4485-9c37-67a356d05470"
        },
        "item": {
          "id": "4eb1ce5b-6ae5-4fb2-90d6-c6b3dff7f061",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8a3a34a2-6d2c-4cb4-836d-4e7556b795e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fef94d8-7234-484a-8b52-1e4b38dbbf95",
        "cursor": {
          "ref": "c0ec3d8a-9699-4c0a-ab79-405bfc766dbc",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9734a528-8b3f-4f1c-8328-83599240523e"
        },
        "item": {
          "id": "3fef94d8-7234-484a-8b52-1e4b38dbbf95",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "788fac18-d18f-4aca-8e91-ba3ad9261e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38011fe1-ccfd-45e7-a953-a8dda345487d",
        "cursor": {
          "ref": "d4c4a254-7aed-4403-ac3f-0d566444193b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8e805a0f-2d74-4eef-a8cd-804e0395f7a3"
        },
        "item": {
          "id": "38011fe1-ccfd-45e7-a953-a8dda345487d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1f7206b2-be25-4f1a-9121-2971c01f10da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b6ad26-1d86-4511-a7d7-624209235677",
        "cursor": {
          "ref": "dee2caf6-d3fc-47f6-ad9e-40a5bb62da6c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a5e92a70-5460-485e-a581-c88527e5226d"
        },
        "item": {
          "id": "d3b6ad26-1d86-4511-a7d7-624209235677",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b67324f8-b826-4190-90dc-ed721a940bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfcefe0-c38c-4287-a99a-63afd52813b3",
        "cursor": {
          "ref": "5555d4d2-5239-4e56-9e07-0aab08c25e07",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "44812c59-0d66-4124-a402-8caf3ff1d9a0"
        },
        "item": {
          "id": "4dfcefe0-c38c-4287-a99a-63afd52813b3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "41f28c38-613d-4087-901a-4035543608c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62877026-7375-4099-ac74-7a608567f24e",
        "cursor": {
          "ref": "5a28dabf-7c37-44ce-be70-1a5e62980d4a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1c82c267-4e64-48e9-9cad-47dfcfff2f11"
        },
        "item": {
          "id": "62877026-7375-4099-ac74-7a608567f24e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8e8aa4a7-7a0a-4eb8-83a7-0077604688c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a957f2-add2-433f-a8de-65b266cbca9f",
        "cursor": {
          "ref": "0d441d92-ef39-4a9f-90c3-33dd1cd6c87d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "676ea884-892a-4524-b3f5-de1a8473ef4b"
        },
        "item": {
          "id": "01a957f2-add2-433f-a8de-65b266cbca9f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eee3a75f-4deb-4e7e-8613-c1b52efd84c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f69ef1-7646-42b4-85d2-b7bcee5e8928",
        "cursor": {
          "ref": "c1081f09-944f-4027-b5d8-87bf1080aa87",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5a9121d1-adeb-4d17-a422-dfd1054eaac2"
        },
        "item": {
          "id": "d6f69ef1-7646-42b4-85d2-b7bcee5e8928",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f0640914-5930-45e9-9529-9c3def966e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bea0199-82df-42a4-85cf-36253c42b87b",
        "cursor": {
          "ref": "2f19512a-82d2-494d-bf7f-03821011b814",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a21d9e84-785c-48d8-954b-f44f97e603ab"
        },
        "item": {
          "id": "0bea0199-82df-42a4-85cf-36253c42b87b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "064ec856-631e-4eb7-ad9c-dc79bf0dcaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4239fce2-d238-4708-950b-458b985e919d",
        "cursor": {
          "ref": "ea8d5313-cc79-4042-bec9-f9916c572d0e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "49748a74-c6c9-4201-afd6-e445b7a94f0b"
        },
        "item": {
          "id": "4239fce2-d238-4708-950b-458b985e919d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "913371f7-dd22-4aa3-80ed-0b2f8e9814f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c360e8-0e8d-4758-ab20-f949fc2c593e",
        "cursor": {
          "ref": "315f92da-7218-4eeb-b974-0bac340abca6",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e19fae6b-73f8-4797-a5b3-71480ca849d8"
        },
        "item": {
          "id": "a9c360e8-0e8d-4758-ab20-f949fc2c593e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7fd42ab4-2dbb-4997-bd3c-b79f931f117a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 898,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e1ffa5-ccaa-40fc-9854-405f50def3a8",
        "cursor": {
          "ref": "47430973-a69e-425b-8450-109ca3559545",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "767b5ee4-216a-4591-88da-e5beaa2611d0"
        },
        "item": {
          "id": "80e1ffa5-ccaa-40fc-9854-405f50def3a8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f86dab34-10dc-48f4-b436-db038f5048fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f430d9-cf23-4884-8a0d-351c1638efa0",
        "cursor": {
          "ref": "aec67bd4-7501-40f3-9bc4-dead08a33ba5",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d3ba3c13-ee96-4598-b7f8-06c8543a359e"
        },
        "item": {
          "id": "93f430d9-cf23-4884-8a0d-351c1638efa0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4cd7672c-1ac8-431b-9a54-a397e2d5832c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7ba43e-8962-43fb-bd8d-279d200d5480",
        "cursor": {
          "ref": "1548a103-d2bd-4e1e-b0c0-609d5af329d8",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "593b220e-4c1a-4908-8b61-301962fac4c8"
        },
        "item": {
          "id": "8e7ba43e-8962-43fb-bd8d-279d200d5480",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "99043b3f-dbe8-4abc-b91c-012e3e399d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29814290-4add-460d-b65f-521cff90f342",
        "cursor": {
          "ref": "cddfac00-0daa-4ebc-bc06-5214d670bf70",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d29d9e3b-f026-4f51-b326-d6ae74452670"
        },
        "item": {
          "id": "29814290-4add-460d-b65f-521cff90f342",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f65d58ff-90ea-4c44-9bb4-e057a08004ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf7eac8-018f-4866-ba99-1082c02798a0",
        "cursor": {
          "ref": "ba1585e5-8d6c-443e-9dfd-4e9bbaa2dbac",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f178576d-d55c-43e2-b9ec-f8edad5239be"
        },
        "item": {
          "id": "eaf7eac8-018f-4866-ba99-1082c02798a0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c598417b-2e47-467e-a3b3-94257efae5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c47c929-059c-49b4-84a3-aa6fabf17204",
        "cursor": {
          "ref": "c1f1bb18-02a4-4ec0-8bf2-1bdb74f79270",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dc35cf3e-064b-4dac-85e2-d000cd4fee95"
        },
        "item": {
          "id": "7c47c929-059c-49b4-84a3-aa6fabf17204",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "143ab8ed-07e7-472b-99f9-1185b1d97df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc1e3d9-5ca2-4ef9-a805-a22550701eee",
        "cursor": {
          "ref": "f8e5895d-bbf0-4211-8a55-952125dd8768",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "91d95703-0158-4efe-940e-030655da9b16"
        },
        "item": {
          "id": "8dc1e3d9-5ca2-4ef9-a805-a22550701eee",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "56cc7ff7-b44c-47fd-9939-cf3c9e68ade4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65357549-313e-4dd8-8166-d289e41cfb48",
        "cursor": {
          "ref": "3a05295e-af9d-4ace-805c-30b41b984a63",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b581132d-7780-41b6-ba5f-87199a5cf807"
        },
        "item": {
          "id": "65357549-313e-4dd8-8166-d289e41cfb48",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "783d5805-398d-4add-84da-8f5ba126d9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c77182-6dea-43b4-98ad-044faa5d61fe",
        "cursor": {
          "ref": "359a5972-572b-41f2-a9be-6b7debf45c9e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0e179247-87ce-4110-adba-8a8986986799"
        },
        "item": {
          "id": "f2c77182-6dea-43b4-98ad-044faa5d61fe",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5aa0b033-5e6d-415c-b4ec-b819ab04f14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e38894-78a4-47f8-b6b6-cfcbec6fa2ed",
        "cursor": {
          "ref": "6a6053f5-b15a-4936-b1e9-206d44e68355",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f26a80b7-e3fe-4900-aee7-eba7574d97b0"
        },
        "item": {
          "id": "b7e38894-78a4-47f8-b6b6-cfcbec6fa2ed",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "742552cd-8507-49ab-9d8c-a6cae5e92e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfd7c86-4b5e-4d4b-8aab-85e80e1da848",
        "cursor": {
          "ref": "b2cc7acd-337c-4f24-883d-00a1b182f117",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b4f50931-5ecd-470c-a71d-26941d78d86f"
        },
        "item": {
          "id": "2bfd7c86-4b5e-4d4b-8aab-85e80e1da848",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9af9c886-815e-4f85-876f-c9862e3e4632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c590176c-8672-4b69-81b9-65ff6104fded",
        "cursor": {
          "ref": "8ec38efa-c66c-425c-ad75-469114f73339",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d866af37-6194-4352-b2e9-aab52fd47f41"
        },
        "item": {
          "id": "c590176c-8672-4b69-81b9-65ff6104fded",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c49850e1-99e1-4030-a613-00dcc14855fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d91422a-9c95-49d9-aa21-74cf3f0821a1",
        "cursor": {
          "ref": "c5a765bc-e67f-4717-a465-27b5855e3770",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "08d700c4-ee8e-46a8-b42b-86b3e68af1b0"
        },
        "item": {
          "id": "4d91422a-9c95-49d9-aa21-74cf3f0821a1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "88ec0d9d-cffa-4fd9-bf94-ddf792dd11ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62fe051-7702-4828-bbd4-c97118e88cea",
        "cursor": {
          "ref": "ff0fc67f-a5c3-4ca0-9259-ffcbdbebec08",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c9b31e4a-8a57-4c16-97f1-fb7ec77c73f0"
        },
        "item": {
          "id": "c62fe051-7702-4828-bbd4-c97118e88cea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c2f573d2-4d69-4242-b990-f0bea6572103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01715480-8b42-4c4a-814a-975514e6eff9",
        "cursor": {
          "ref": "0d236884-de12-42be-857a-0fe3974e60ee",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "477b9220-0248-4bb4-8bd4-ca09eb07df83"
        },
        "item": {
          "id": "01715480-8b42-4c4a-814a-975514e6eff9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "04196b00-d851-43f7-a2d5-f18ba82279a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a038739-158b-4986-b9b4-78fb89e1ad4c",
        "cursor": {
          "ref": "b2d1e66a-3377-4439-9d13-8c47aa13fefc",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "264f730b-1284-49ac-9045-e8fe07cb185c"
        },
        "item": {
          "id": "7a038739-158b-4986-b9b4-78fb89e1ad4c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7373d0b5-9583-4634-ba73-ca01a901ce8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f67ee69-dfd6-4149-a058-d3f4db0f39d5",
        "cursor": {
          "ref": "0c684b7c-44ec-4eba-8e21-3e1bc71171c3",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bd922659-e4aa-4df7-8d63-d801bb04a5cc"
        },
        "item": {
          "id": "6f67ee69-dfd6-4149-a058-d3f4db0f39d5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6a9ffc15-36c3-4f2b-a4e8-c8f86fe3ae8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a52e15d-933b-47fe-a758-67ca2643461d",
        "cursor": {
          "ref": "d705aa98-cf26-4dcf-86e8-98f3d143b541",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8af1fde9-63fd-4761-864e-79cb23929156"
        },
        "item": {
          "id": "7a52e15d-933b-47fe-a758-67ca2643461d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ac68dc8f-8bdf-4429-b8d4-8cca6f88978b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e2f078-648e-4d02-a1a3-319b2617c80c",
        "cursor": {
          "ref": "ba994439-2dd0-4bde-a61f-f1a2c62c32ac",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2bbcf3c9-459d-4356-9f37-a37dd27974d0"
        },
        "item": {
          "id": "d9e2f078-648e-4d02-a1a3-319b2617c80c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "73282348-0e1d-4b78-9408-2d9d224db6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefd5458-7e8e-43e1-9eed-d63d32e85e6c",
        "cursor": {
          "ref": "37d47742-dde7-4a61-9faa-60419e983cb7",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "87a29d9b-c63c-4c26-99f2-865077168511"
        },
        "item": {
          "id": "cefd5458-7e8e-43e1-9eed-d63d32e85e6c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "efe39806-f3e1-4fee-b2d9-ce2439fce366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebeef11-7053-4358-8a7f-134f798baaee",
        "cursor": {
          "ref": "5c7ed98d-8180-4cc5-94a7-7d39cb52b00d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "93d792eb-a799-4967-970e-1a7d2a5db2c3"
        },
        "item": {
          "id": "eebeef11-7053-4358-8a7f-134f798baaee",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e29e06db-34f6-4a22-90ea-8cb80b3252fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a81a67-2b2e-44a4-b878-3823c87b376e",
        "cursor": {
          "ref": "768ed260-29ba-444c-9405-23adaf2ba938",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "86a2e526-fc9e-4969-8bb1-f59e52c1d743"
        },
        "item": {
          "id": "15a81a67-2b2e-44a4-b878-3823c87b376e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "62773494-84ea-42b0-b2a7-db7b04419792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdb7a19-0a97-4ef7-b09e-a810b9f61f01",
        "cursor": {
          "ref": "36c6fe46-6414-4a68-8e8b-b1ff9b3fd362",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "68c2724f-d107-40d7-958f-46fe3d4e8e1b"
        },
        "item": {
          "id": "8fdb7a19-0a97-4ef7-b09e-a810b9f61f01",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c3d63e2a-081c-4d21-b9f9-eacee11f8299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c979071-4d99-4981-b4ff-c468667f6e8b",
        "cursor": {
          "ref": "296a44f6-a817-4829-9bf2-2cd1f2e2ef95",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b52e2445-2729-4838-9fc9-01312ca46376"
        },
        "item": {
          "id": "3c979071-4d99-4981-b4ff-c468667f6e8b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e19ae0e1-d00c-4f3d-b29b-55ce7b1c9357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fedfd9e-561f-44ae-a3ea-ca7b29e9fb3c",
        "cursor": {
          "ref": "e78360a8-5960-4151-92ae-5d923235148b",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d946bac8-84d5-4c6c-8fc5-8355e6672585"
        },
        "item": {
          "id": "7fedfd9e-561f-44ae-a3ea-ca7b29e9fb3c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "be0d1b18-4194-41a2-9a3c-2f309023e65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3c67bb-17f6-4170-b689-86a3ebfcf7c2",
        "cursor": {
          "ref": "1a4a2e93-0d2e-40ab-ad28-60b371eec6ed",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19d80e14-0a85-40d7-8250-b1ec39a81863"
        },
        "item": {
          "id": "3d3c67bb-17f6-4170-b689-86a3ebfcf7c2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ee244017-60a4-4d32-aa8a-5f20504903b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40040f2-0bc2-4092-a4c1-f472940e6920",
        "cursor": {
          "ref": "1a2ba5f6-7a60-41fb-ae40-d43309093e75",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0187d93a-7ab7-4a2d-902a-66daeb85440f"
        },
        "item": {
          "id": "b40040f2-0bc2-4092-a4c1-f472940e6920",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "88ddda33-ea10-4a8f-a0c6-bdef62cc2286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115c6f3e-bcb2-4158-b496-f97043aada7b",
        "cursor": {
          "ref": "18366312-a588-4f8b-81fc-fe618cab5d01",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "92089640-f2b3-4ee2-9943-46b73dcc80a1"
        },
        "item": {
          "id": "115c6f3e-bcb2-4158-b496-f97043aada7b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "60f4a25b-895b-4eb7-a539-fd1bd09e7b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e41b08-8f08-4a26-80ee-76eb070ccb46",
        "cursor": {
          "ref": "cd24b76d-d6b5-42da-b252-5bdbd2a03dfe",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4f37f878-2d0a-4473-ae86-f32b53483cfe"
        },
        "item": {
          "id": "72e41b08-8f08-4a26-80ee-76eb070ccb46",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2d0daa4c-0158-4cfd-8606-7705533031e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63ad82c-cf48-46e1-bde4-65f196a02eec",
        "cursor": {
          "ref": "3ca7c47e-1f49-4bb3-9f9f-9f5bb09484f6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4d875c07-b127-42cc-98d8-9379a5d3f33c"
        },
        "item": {
          "id": "e63ad82c-cf48-46e1-bde4-65f196a02eec",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "24d933a9-f713-45c3-a8d8-172198bf8e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778dba11-2e75-4556-8414-e27d42d1eaa7",
        "cursor": {
          "ref": "4ccb7eae-397c-443e-bf65-3a87db0b64e0",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e9ff11cc-eb95-4968-9474-7546d6dac504"
        },
        "item": {
          "id": "778dba11-2e75-4556-8414-e27d42d1eaa7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "64079bf2-8025-40a5-8982-e33f76ddb233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd63b60-576f-4522-a9c8-1b35037c6a81",
        "cursor": {
          "ref": "b8d444a4-38b3-466b-afe2-811dccca7b38",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cefad13e-698b-448d-aca3-e9d1ee627776"
        },
        "item": {
          "id": "3fd63b60-576f-4522-a9c8-1b35037c6a81",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b65706a0-b745-4c61-9f4c-1180002bc785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe101ef-4445-46f1-a76c-0661c9874b92",
        "cursor": {
          "ref": "d3200326-1ba7-4062-b01a-05f32bc29927",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2d15a7ac-dc5e-4764-ac93-6a898523071a"
        },
        "item": {
          "id": "3fe101ef-4445-46f1-a76c-0661c9874b92",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "abbd08ee-3069-4c85-b727-a4aba0c1c050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129a83ec-cef5-436b-bcce-ccb8bd17b5a5",
        "cursor": {
          "ref": "6e0b57bb-b873-4493-98ae-5bef18b16465",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "798e4fb5-3736-4c6d-95e7-72f64ef24073"
        },
        "item": {
          "id": "129a83ec-cef5-436b-bcce-ccb8bd17b5a5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7e3ae316-3709-4b47-b09e-8f66aacd3738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9018d319-cb5d-4258-8809-ebed75d47766",
        "cursor": {
          "ref": "b805a69c-7bd1-466a-8ef1-e822ed7ea8d7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "40e86332-8947-48d6-84c6-bf6a9ec02280"
        },
        "item": {
          "id": "9018d319-cb5d-4258-8809-ebed75d47766",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0dc0bd6d-ba2e-40eb-aba1-292cba10bf51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ae08c5-c4bb-4a4b-ad9c-84ec33460041",
        "cursor": {
          "ref": "ca462bc6-b7ab-4978-9005-a5a45f351aad",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a4a98b13-d40d-4336-9a0f-3047353238ce"
        },
        "item": {
          "id": "c7ae08c5-c4bb-4a4b-ad9c-84ec33460041",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b6aabf1f-567a-4737-b4bf-82eb1a532f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e16ddb-0163-4f58-9af5-6c7810f5cc2d",
        "cursor": {
          "ref": "b75baf13-a7ac-4fb2-8cbd-be13b2dbc4a0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9b5dac5b-d06e-41f0-bebd-ff99b59ab536"
        },
        "item": {
          "id": "12e16ddb-0163-4f58-9af5-6c7810f5cc2d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2547757f-028d-4b57-832f-bf6e885d23f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ffe65f-cde1-423f-b423-e799038c8fa1",
        "cursor": {
          "ref": "3e71d3cb-39d0-4ed1-827d-c333e7970cb8",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "72f501fb-ff34-4c8d-8469-f7cdf9f30b03"
        },
        "item": {
          "id": "e6ffe65f-cde1-423f-b423-e799038c8fa1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9b1f74a2-f3d0-4cff-a176-7740c304e1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6c2fd4-aa3d-4f0f-a1ca-a7cd4d98cfc7",
        "cursor": {
          "ref": "23caea99-8e5b-4435-affc-de4ebd83c663",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6b47ba9d-f604-4a3c-b85c-d5e5a0223f0c"
        },
        "item": {
          "id": "ad6c2fd4-aa3d-4f0f-a1ca-a7cd4d98cfc7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a7cbc58a-94ff-47fc-be68-c126a842194c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7e84d2-9843-4c77-95e5-044ea5748b46",
        "cursor": {
          "ref": "4e792187-ec32-4d9d-a28c-0bc953814b9d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "81a7928b-f096-4392-9a49-1dbe1a06002e"
        },
        "item": {
          "id": "8a7e84d2-9843-4c77-95e5-044ea5748b46",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0a3115f9-e4f6-42e1-9b03-ad1ac5756ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c57746-ea08-4080-910d-bb38e4d08457",
        "cursor": {
          "ref": "b4ca8c9b-bf30-40ee-8cf6-86e60bd38461",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ce169137-5980-4053-a457-5a2a4fc58710"
        },
        "item": {
          "id": "88c57746-ea08-4080-910d-bb38e4d08457",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "17c954f6-28c0-4264-b854-bd13a2f8e70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7399d7fe-b1b4-4eef-91f4-4e8ca3fca5ec",
        "cursor": {
          "ref": "af0a0112-c68d-4d14-afc1-6e07ec75dae1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e3452d18-7546-4d5e-9fe1-f6e7b2450b0e"
        },
        "item": {
          "id": "7399d7fe-b1b4-4eef-91f4-4e8ca3fca5ec",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf734ede-938f-44b4-ba17-f8379063f035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb298535-cb23-4afe-ac38-42f7c9a03d7c",
        "cursor": {
          "ref": "9034055e-a9ed-43ba-9ab8-7d152bd591fd",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fe457ab6-7c2a-4095-9c2e-112e0ebcfd61"
        },
        "item": {
          "id": "fb298535-cb23-4afe-ac38-42f7c9a03d7c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "30208d28-ff93-43cf-9d46-9c9a2ab2e3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e89b86-7d61-41bb-a7de-156ed9acf2bf",
        "cursor": {
          "ref": "3cb6b8d8-8c01-4c87-af5e-2610fb56d18f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1505c4aa-9968-4357-afaa-56997e4a2fc3"
        },
        "item": {
          "id": "e3e89b86-7d61-41bb-a7de-156ed9acf2bf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fc3c4445-60f0-43f8-ade5-5cf41ca3b21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475b4ead-3a16-4b21-be8e-86ff453a89e3",
        "cursor": {
          "ref": "8164923c-957b-4021-8ff1-b2020f252f86",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6dd73e96-6842-4af2-b093-9bf56fd097fe"
        },
        "item": {
          "id": "475b4ead-3a16-4b21-be8e-86ff453a89e3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3ea95c5a-9672-4203-a785-bf205e09bd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c8a039-d36e-45d7-b45c-2a696877bb57",
        "cursor": {
          "ref": "165ea628-6b07-4215-891a-3a445c3852f7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "edb1714b-d98e-477f-951f-c2b15307b865"
        },
        "item": {
          "id": "09c8a039-d36e-45d7-b45c-2a696877bb57",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "044d66f0-3688-4e46-b768-91feaf3942b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037abfd9-8db3-4011-9bf8-f893ac07cff5",
        "cursor": {
          "ref": "9faf7a4f-2bf7-41ca-ac5f-60cb962c64bf",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c0c150ef-cd40-479a-b0cd-da9900bc5a40"
        },
        "item": {
          "id": "037abfd9-8db3-4011-9bf8-f893ac07cff5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "95e88607-46bc-4a37-852a-f6ddc941500c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d269f6b8-0da6-4a38-ace8-ae1548dbbec8",
        "cursor": {
          "ref": "2a974209-ed78-43f0-a6b3-b8efde711b9b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "79c5edcf-3d2f-493e-949f-bd5e793a08c6"
        },
        "item": {
          "id": "d269f6b8-0da6-4a38-ace8-ae1548dbbec8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5530f901-378a-4281-974c-f7e8ce678b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5055421a-6680-49f9-8d92-7dcaf62e3d5c",
        "cursor": {
          "ref": "c257020d-2c45-4bfa-827a-f98e97c45121",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f9c20d69-c235-4bbb-a6b2-b6d0973cf2cc"
        },
        "item": {
          "id": "5055421a-6680-49f9-8d92-7dcaf62e3d5c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "db875a3c-41c3-421f-8552-2d5f151373bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b788e5-b7dc-4c54-9637-d7429d8ea303",
        "cursor": {
          "ref": "9c0de7e0-74f1-41be-b4c3-1d3794029eea",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "04b2be59-c805-4634-a73b-613ddb57a3bb"
        },
        "item": {
          "id": "54b788e5-b7dc-4c54-9637-d7429d8ea303",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "acc139c6-eafa-419c-b01c-631c0830e5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6435cef-1212-46af-9147-de354cacaef9",
        "cursor": {
          "ref": "a53ecdc1-5337-40f4-b5e0-c67b4d1fcc92",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5e4e79af-ffdb-4c73-8f6d-2692d69c092f"
        },
        "item": {
          "id": "d6435cef-1212-46af-9147-de354cacaef9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "36e92e4d-02f2-46f7-8823-ca44825eac5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1ed5bd-f570-41b1-8555-3aa377064eb9",
        "cursor": {
          "ref": "1f91b2cd-1ba7-43d7-9faa-4eac7d8cb5c0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "40fbc61e-3263-4741-b6b6-541369397c9a"
        },
        "item": {
          "id": "6b1ed5bd-f570-41b1-8555-3aa377064eb9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5c7c1cdd-abc7-401d-a31e-8e6dd8d78155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17134744-3c70-4bd1-9218-7cbc18902d03",
        "cursor": {
          "ref": "c3c52d5f-f49f-40ed-a19e-43ed87d62544",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "464c3d59-6152-42de-9472-bbd33053cdc6"
        },
        "item": {
          "id": "17134744-3c70-4bd1-9218-7cbc18902d03",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ac7f1f8d-2ec1-4309-9aa9-877c278d6b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0ca0b0-57ba-4bc0-ba41-2dcc52dc5176",
        "cursor": {
          "ref": "e2d2a7f3-4a48-4f0e-8f70-10b0af7f0d31",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1b6297d0-8a59-4508-9145-fa2f5eafdcac"
        },
        "item": {
          "id": "9e0ca0b0-57ba-4bc0-ba41-2dcc52dc5176",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "10af313a-7836-4bc4-8cb2-842db31a24f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6214b6a-78ad-40ea-bb08-6be845a63b32",
        "cursor": {
          "ref": "c86b534f-9004-410a-a5d1-f63020d113d6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5967efc8-2356-437e-8745-db64361591de"
        },
        "item": {
          "id": "f6214b6a-78ad-40ea-bb08-6be845a63b32",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "28184233-518d-491a-9226-c5adbc3788fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b8d199-18f4-429b-9d40-461bad27c9ad",
        "cursor": {
          "ref": "e5957ed6-f8e8-4488-998a-d4a5182fa128",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f7c96383-d9c2-40cf-ac30-78c105420d1e"
        },
        "item": {
          "id": "00b8d199-18f4-429b-9d40-461bad27c9ad",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bc47b14a-f3bf-4b57-8b42-b5ad65ea6583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bccd5d4-2f07-4b0e-8e10-2830921fcbb8",
        "cursor": {
          "ref": "f7cf1432-c05e-4f54-85aa-e5127f388df8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7181376a-238b-476b-a765-b59459269e1e"
        },
        "item": {
          "id": "6bccd5d4-2f07-4b0e-8e10-2830921fcbb8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1887545f-7f43-4b2f-8757-7bdc153f95ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55a8910-3e13-4ff5-b0f3-c3713943e854",
        "cursor": {
          "ref": "e56d8c88-5c52-4022-a53d-984e385affd9",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e313722d-79cf-4682-b574-22863628a1f5"
        },
        "item": {
          "id": "b55a8910-3e13-4ff5-b0f3-c3713943e854",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "31fc699a-b40b-45d3-ba12-649a8db44712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f4152f-b6ce-43ca-90af-549c04366254",
        "cursor": {
          "ref": "a4a3a621-78e0-453d-8bdb-c0c3420d39cb",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "937f7ac5-895a-4ba8-bbd8-7749f896c32d"
        },
        "item": {
          "id": "65f4152f-b6ce-43ca-90af-549c04366254",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1d3d907c-36cb-4631-87ae-bbdc7f1775ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0f4ebe-9761-43ad-9ad1-dbf1a35d5a3e",
        "cursor": {
          "ref": "fcdce76d-865b-4426-9eb3-5763b7d88f2b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1ed697d4-1cc6-4c56-ab59-f63696bbfa47"
        },
        "item": {
          "id": "2d0f4ebe-9761-43ad-9ad1-dbf1a35d5a3e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0f4268f5-9d13-4c7d-848f-1021b454a058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d700034c-8d6b-4779-97bc-a802c553d4f5",
        "cursor": {
          "ref": "bd29cf95-323b-43a7-a620-3844ee38174d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "13ee935a-fbfb-456b-901b-87cd83bd1518"
        },
        "item": {
          "id": "d700034c-8d6b-4779-97bc-a802c553d4f5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2374efae-b21c-4215-986f-874c895eba34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9857dc3-0b11-4754-b056-c25b088579bd",
        "cursor": {
          "ref": "e984d9f9-fc1c-4dd8-bdfb-1897780b649c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a122e245-c89b-47a8-8bee-523aed9b4993"
        },
        "item": {
          "id": "d9857dc3-0b11-4754-b056-c25b088579bd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9c7cab11-c7a6-4a76-a130-376cf03d831e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c95ac4-5666-4609-add4-345106aa3338",
        "cursor": {
          "ref": "236111d2-da40-43b2-807e-09b80d081688",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3dbe87f4-641d-4244-bab5-00ceb82078bd"
        },
        "item": {
          "id": "f4c95ac4-5666-4609-add4-345106aa3338",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f05f4087-c5e1-4542-af4e-c9209d52ae6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f85b5f22-aa95-41da-a87c-435e15979764",
        "cursor": {
          "ref": "c564d548-3040-4925-9073-88211be0b9b6",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "85ee2f66-a759-4ce8-b5df-4cdcbd66d5eb"
        },
        "item": {
          "id": "f85b5f22-aa95-41da-a87c-435e15979764",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "de2a0ac9-65ec-4de8-b408-ac84a29506b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d4bc1051-beba-4d83-b87c-53f912538f46",
        "cursor": {
          "ref": "836ff2e2-05ce-4889-91bb-877f79814ba7",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1b637fa2-3d75-4036-bfa5-ccef36bc44be"
        },
        "item": {
          "id": "d4bc1051-beba-4d83-b87c-53f912538f46",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9701bda9-19e5-4296-bc9f-ecca12eaa4aa",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf0f4b-20ce-46be-a84f-5629e9e8b1fd",
        "cursor": {
          "ref": "25fbf0bc-7a27-4b6c-b5af-88854a29b10f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "de35686b-fd5d-4fff-9bb2-59947f36ef71"
        },
        "item": {
          "id": "5aaf0f4b-20ce-46be-a84f-5629e9e8b1fd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aefc525d-8255-4b79-a812-c02b0e80f018",
          "status": "OK",
          "code": 200,
          "responseTime": 2902,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50e22a3-28e9-4ff4-a430-ec1ece8db913",
        "cursor": {
          "ref": "6748db86-7a2a-44c9-b093-ee6eeb60b723",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2a414088-80f6-4608-ae6a-c923984ec436"
        },
        "item": {
          "id": "f50e22a3-28e9-4ff4-a430-ec1ece8db913",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a9a09b90-574d-41af-ad2e-bd4906880275",
          "status": "OK",
          "code": 200,
          "responseTime": 2256,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
        "cursor": {
          "ref": "fcf301bb-9a49-4f89-ab6d-3f1c02ad3283",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "942e1781-fe5d-43be-8707-02b9262f9798"
        },
        "item": {
          "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b2ee2b5-80e6-4c3a-8d27-36fc84e88f66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
        "cursor": {
          "ref": "fcf301bb-9a49-4f89-ab6d-3f1c02ad3283",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "942e1781-fe5d-43be-8707-02b9262f9798"
        },
        "item": {
          "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b2ee2b5-80e6-4c3a-8d27-36fc84e88f66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
        "cursor": {
          "ref": "fcf301bb-9a49-4f89-ab6d-3f1c02ad3283",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "942e1781-fe5d-43be-8707-02b9262f9798"
        },
        "item": {
          "id": "90a4a1ba-4dc4-44f1-bb2e-72d421f366fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7b2ee2b5-80e6-4c3a-8d27-36fc84e88f66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "78dbf8c6-6b8e-4fca-82e7-ee8da1eba5c2",
        "cursor": {
          "ref": "74ce265e-6551-4ab3-a29e-8d93e3f2222e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "aea39e5e-d89c-40c6-93df-d44386cc72a0"
        },
        "item": {
          "id": "78dbf8c6-6b8e-4fca-82e7-ee8da1eba5c2",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6499482a-51c5-4c8f-9056-77c8e5f5a5ab",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2f986b94-696b-4608-93b1-28d3b3e363d6",
        "cursor": {
          "ref": "9fc8873c-be7b-420c-beba-5f18b66bca58",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6975fb47-255d-40cd-82b9-8466202ff716"
        },
        "item": {
          "id": "2f986b94-696b-4608-93b1-28d3b3e363d6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8dfe6b04-05bf-4786-9423-49567755a58a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2f986b94-696b-4608-93b1-28d3b3e363d6",
        "cursor": {
          "ref": "9fc8873c-be7b-420c-beba-5f18b66bca58",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6975fb47-255d-40cd-82b9-8466202ff716"
        },
        "item": {
          "id": "2f986b94-696b-4608-93b1-28d3b3e363d6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8dfe6b04-05bf-4786-9423-49567755a58a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "05f8bca8-7f03-40e6-9fb5-92d520d74be6",
        "cursor": {
          "ref": "5349072d-84ba-4ca6-acbb-fefdf6d4e852",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4cd3b258-5e99-464d-a260-de551d991c0b"
        },
        "item": {
          "id": "05f8bca8-7f03-40e6-9fb5-92d520d74be6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4aa10fc9-c773-4a87-9003-f546bbefb9ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "cbfe4d23-b8d5-4bbf-b5f5-8adf8f7e2812",
        "cursor": {
          "ref": "d447e17d-425b-4de7-8d71-e5e246acfd7a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a16b637d-044b-49c9-9c68-b3527d1d0d2a"
        },
        "item": {
          "id": "cbfe4d23-b8d5-4bbf-b5f5-8adf8f7e2812",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ce7e3a67-70ff-47ac-aafb-98238ee646cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cbfe4d23-b8d5-4bbf-b5f5-8adf8f7e2812",
        "cursor": {
          "ref": "d447e17d-425b-4de7-8d71-e5e246acfd7a",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a16b637d-044b-49c9-9c68-b3527d1d0d2a"
        },
        "item": {
          "id": "cbfe4d23-b8d5-4bbf-b5f5-8adf8f7e2812",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ce7e3a67-70ff-47ac-aafb-98238ee646cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fcdb0b4c-4c7e-4d9c-964d-77195aa4fe16",
        "cursor": {
          "ref": "f6d28f31-2839-4b60-85cd-e00bc5145494",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2abb39a2-1f3e-4831-9400-5b8131998a61"
        },
        "item": {
          "id": "fcdb0b4c-4c7e-4d9c-964d-77195aa4fe16",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3869843b-20eb-487e-8686-bb58a3c7d121",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 143,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}