{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "12ebb9d5-4cd0-4636-b228-9d82d147849a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b6f118bd-3ffe-4679-a0c5-3548c4c243c2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04ae3eb7-68f8-45cd-a7c0-4610ed6de5be",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a9e19015-bf8d-4524-9c40-20e3a376a0ca"
                }
              }
            ]
          },
          {
            "id": "91239e52-4379-4b65-aa3c-3596d003937c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4d28d17-b281-4133-ae3f-99518f63bf84",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "853943ad-9b44-4f6d-8e62-76b2baeb2551"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "18ab8532-f041-445a-99e5-5644522a51ed",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f21d2b50-6cf3-4c5f-b418-98b458f1942a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eea562e7-0003-43a7-914c-73528b7fb00a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b03577d-ce90-46a9-98b1-58f1231fb4d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "794f0ebb-853e-4ce5-a8dc-86a876959add"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0b1476e-a8ea-4cac-9bda-a711c4880d8f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "059544bf-1f45-477c-b20a-4b1eb377eebe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "755f5fe3-875b-4722-bfa0-a76dea18c975",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "122cf1aa-6dfb-4a1e-bf3d-6005c6b5e94a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e956bad-c97b-4753-a492-a29fdae70ef9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "40572054-b5f4-49c7-93f9-1ca079a995af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0567ee0-ab2b-4df8-b466-87baee1cb0ab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be4c54b3-4ebb-41e3-afad-5a822202e275"
            }
          }
        ]
      },
      {
        "id": "b37f19f4-4b59-4e14-a82c-f3ce4a14e00e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ff889f14-9614-4374-b1f3-6f45413664a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cabfc1a7-0d22-4ae0-a81b-24ac3145f491",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ffd4bb5-ffb9-48a3-8792-bfec430e9286",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6feb833-da1d-4a7d-bc80-7cf9dbe9058e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aad835ed-cba1-424b-9a80-9fd1eb2040dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b7ec34-d105-4ec6-a3dd-4f61eafb2eae",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bccbf443-0133-458b-a2e5-c23b9573a29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72689c2b-5101-4bfa-8b55-952fdd343407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9383a8-7460-4eab-874e-82f7a2120d5d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be2264b-6e81-49ad-bef7-2c2e1ca3df51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ecf456d-7e04-4832-84c4-b2c485790f0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2f4f28f-2576-4c04-a8ea-cc340c8fa349",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45039dd9-42b7-4d62-8d97-f4cf6c384356",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977d68b4-eabe-4d53-8e60-ca57dc704ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3a60af0-b9b1-42e8-ba0d-4fc3014ede2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326392f0-37f8-4b6a-9f8a-aa67a2810cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b45ba2-fc94-442c-baee-4b813237b12d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "14463fe2-f878-4b2b-b936-58fb4f93098e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82c51905-0516-4398-8e3c-d33271c4d302",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b537a033-a629-4c65-9d99-a0bb461e1b44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f4a1896c-5383-449a-aba6-610382d28576"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "426073cd-376e-4c64-b096-0091b7923965",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ce8fb6ee-9424-4040-ab1e-905b200b325d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa98d00d-a4c5-470d-abee-3ad1a017febc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3006827-f690-4f5b-874b-1d83ab3716c6"
            }
          }
        ]
      },
      {
        "id": "55a514ff-5623-48e8-a4f9-06b810b46cf5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "38c0b859-ada0-413f-b3cb-fe824ca96f51",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26acd13d-bbe7-4e1d-b1a1-ac2cd59173ad",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "124fd672-67d2-487c-a08b-c1ead25551c9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c3a45d-dce8-4bfc-85c0-6e35628cfab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f990cc3d-b9c2-4c4c-9fd9-877108fe753c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcceb0e9-d708-47ee-905b-5577cc9502b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d6d228b-f7bc-405e-a39c-714392e39008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a229c2a-2237-48eb-8cc1-5dadecd3757d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cd972e-1762-4b0d-9399-e699e4b6f205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fd3051-0f56-4a09-8f7b-46c622f853c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09abf4f-42b8-460a-9a13-76fad382b0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7b06251-6300-4323-a5c9-6ce120037d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b242a3f3-d9cd-4486-a565-4efd37788895",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4caa5b1d-e429-4ffd-944e-a642f2b991cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5aadc2-2671-4a36-b1fa-c2e958ff0289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb69cfe-b3c1-4e13-9ee8-790cfca8a8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bd1ce32-d39c-426f-8187-130dd1a57b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a2ee2a-ab50-40af-ac32-41701e5a41c7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322ce47d-8b61-4668-95d5-28f6f447c7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a551128b-a91b-4d05-9936-cdd448aa2ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132f5770-02cd-4b5e-9c03-1ab77f1ba5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf9321a0-e584-4aad-b45f-2a25314b9621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34de0a69-bc2e-48c3-a44a-727356aaad06",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242394e2-40a8-478c-b3d6-68fafb0021b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c3c029-5045-4e05-b2e4-562ef8eee011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33afe753-19dc-4e95-853a-47137bfafcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5e08935-1e2b-4e0a-9bb7-35b38f1d352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7887d2b3-954b-449c-aaae-b4e3fb68c88e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b47734-f3c6-4e49-9a7a-51f43275c076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fee1ab5-4acf-4bcc-a20c-1db0c3f70aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa18fe32-408a-4d84-a161-3b6a0b12664f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d53c8e95-e414-4ab3-80e3-5be82a3c8e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b581ed0f-5eec-4cdc-b956-ebdd71fdbe97",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee8a8f0-eb27-4489-bf7c-f711825eff82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b78077-d112-4f7a-8a26-2b56e9d1238a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5907ca-3820-4978-b0a7-e86f492a7a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56e1b525-b5c7-46ca-b5bd-d0df1a6eebd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42257521-6284-446b-81fc-dd24b5300942",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ee16d7-d96e-49c0-8be1-41260f574087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65b5b7a-71cc-46b0-b5d0-e929c9565b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a624c0-0eae-4cfe-95cf-511e8c7fa2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3b666ae-15c0-4598-a91f-8c3d35e3af77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a43bae-b290-4ea6-9763-2291a47a84e6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c2c8e3-0dc8-41e7-8bdf-33ea9d0645fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9d5169-09c4-4371-9cca-c7cf1465f02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759183cf-7111-452c-9f07-804e538d8725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed1e9529-1af3-47a7-9508-901ea38ae2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827be5c7-5a99-48aa-9389-0ca10d2b561b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef6f2f5-829a-418a-9176-e7a2d1785f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488d55c2-bd8b-4b0c-b1e6-d1170be95583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ebd523-e155-4ecb-83e3-2a3181e454ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "938ca8e4-043c-4250-bc53-42f922fa6a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4a1c84-7e0a-496c-893e-bbc111d0493f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b89dd7-9917-4bad-a0c5-88cc55fea64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb1359b-631b-4ad4-9f7d-5dd4279e2bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cdf183-8052-4c19-a084-0a1b7af0a132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a520c88-dac7-4775-b8fa-1cfddfbc7b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91557a7f-613f-470e-b0bc-88a80a09557f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dda5768-c07b-473b-9e01-04cf0f4c6cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8c893f-9aa2-4d72-82bb-be53fd5f46ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfaaa3c-54cf-431a-9624-440147da9c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6860293-ab1d-4273-a187-a3d2f85b26a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06788ee-1ba4-4326-b7b6-4fbab6e9380b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64a6b2b-3244-4710-a7f4-67ba06e5746f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2fad83-7693-4cc2-ad5e-ac2f788db569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f63ee3c-b20d-440d-b166-bee50f879280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb4c194a-96ea-4b0d-864c-ba3a3b0c9e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6db2c6-460f-4e75-b108-587ca28b8a15",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38b263a-3257-473a-8937-1624e8cc519f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e777f0d-47aa-42f4-8f80-5dfdc865649d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13003e27-56da-4dcc-962b-1b4f85315ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f84c6de7-ba59-40fd-979c-99f3d67f2dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2603f901-a456-41f8-a2a3-dc6a5496db21",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c1cd7f-fbbe-43bc-a6a9-fcd2260bf3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b5fa76-f604-45f3-b107-ac8f34213136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10bd111-15d2-47af-947b-78be9de0886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "663a2896-d99f-45d7-b7c4-975b72c30927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adbcb0d-cafc-4f0a-afdc-55f86801d83e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d1cd31-24ba-4cd6-9b0a-1074983140ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45064fa4-90ff-4e37-bbba-d12694c9d2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cdd53f-145f-483d-a123-044387eef9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ef4d1e1-b4a4-4962-90ea-04777f37b3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750688da-78b5-4e1e-abbe-0fbc7c268b5c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496dd21e-078c-4b49-9e56-644870537703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71c5d8f-194d-4d69-a790-4d10677ccbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bd9028-85be-46af-b9cb-cc2860cf5d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e9233c0a-610b-466c-a38d-2cbcd47a0642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6827bea1-db0c-4a1e-ae3c-4cf200739807",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25326e3-85d5-4f1e-b984-87995f729aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81457cf6-8487-4aff-9d3a-df1492e58f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c27781-b2a3-4153-af42-080c285304dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "273e8834-d0df-41d3-8646-6cbd850b8736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40846905-f80d-4407-a3bf-dc5ea7353101",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9db2ad-40dd-4770-b985-b190b2fa54dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e20ec14-e85e-4f7b-a2ff-e59225c10cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ef9542-d77d-4e2a-b44b-b36bf713266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69cd19d2-9e2c-4a01-8a70-9b95bdb129a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b4fd6a-97f5-4dc9-b41f-9637312aec83",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a970a195-a3c9-403a-ab92-55af5ba0d894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5c0082-fa5d-4e08-a8ab-a5fafa6c1d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cab287-d83a-4a42-99bf-d36c92daf60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69b00a02-ff12-4361-820e-2773d1e6a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bee6e49-0737-4cda-a49c-bacfe3eb5120",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b97bdb-9fe4-4c8f-be4e-743eb29594bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a0b5ca-d8c3-474d-9da5-4320ea71bbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f9e70d-bea3-4410-85c8-a3ad644817d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85f7c0ec-a9a1-4f8a-85d3-65230f6b4700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65235fe2-5f1c-41fe-a81d-5855638f5c7e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88868aae-e303-447b-9e7d-5e4a868e8aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6111818-83c8-46af-912d-bf46ea36ca27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5f5b75-4f2e-479f-a726-b69f8800045c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f831e2b-c119-4920-a4c2-ba95571d6fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf390933-39a8-42aa-856a-957c5e52cf63",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0ed783-3ef6-4b41-834b-64b294d58697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa4e113-6534-49c9-bf4b-17337456cbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003948ef-f0ce-406c-bf79-5181bd59ae73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "619e20f1-197b-46b6-89a3-4339d89a3b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009b89c3-9caf-442f-88ce-5594adafa772",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54ac8a8-1048-45a8-aadd-c0856b714322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cea2b1a-548b-4995-9412-1369e79a49d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0232ff27-06c9-442e-9ecd-5167d713d70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9923bfc5-23a7-4248-bf66-bba8cce26479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f972d72-6f5c-413c-89e3-4272d0c914b8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f30006a-c358-4548-8994-4e7ee663899c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0604d398-f78c-4c46-822e-322e0a942bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e651dd-63bc-4466-a824-667c7a5262b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2467c942-378d-4685-98f2-4d26d5bbcc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22caf296-35a3-4791-b11b-34a74ee27a45",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526d09fc-a7e5-455f-a614-53f32cec1445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a465eea4-7a20-4a3c-b156-05d176ada37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337f9875-81ec-4ce6-9715-6fd2e32734f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee6e782-f457-4e6d-bcd7-4eb077e8fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8024d4c-e64b-4550-a16a-7dbd06aff7d2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6ff3de-906d-4f20-8d64-c4cb618ffaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81105f6c-4107-40b2-86c5-f56f741b701c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661eea2b-f77b-4d94-b33e-098efdd8dc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22470b71-08de-4ec6-946a-af4b5a8e31aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d322588-8565-4999-8ad8-5308fdba66f5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1aa847-8570-4323-96c5-2ab6899ce87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51f2e80-89fb-4f7f-ae81-3dfed62047ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f086728-ed3f-48ad-b88c-8c69f77c4244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05b97420-6b3c-4910-9693-93230d9ef415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59caecf8-4b92-4c10-8536-db6b57835709",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a019670-3740-4ba9-8a43-0028cda88d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bb57d6-f0a9-452b-88bb-8fe9f0472776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ffa943-0607-47c7-a8f4-a11bf3f6c842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b82d29-0831-484f-9d35-baecc397b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382ffe33-e65f-4f9e-9bde-bfe34c8d1d28",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d526b8-b293-4ff4-9671-e3938352716e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef2b28eb-5b01-49b2-84eb-6b17936c5582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a299b7b6-aa6e-4dff-b687-9dac3376177b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0e1436-14e5-41c5-ab47-96b0de0326b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c320d06a-3340-4870-9d16-47d077349155",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ca1384-bafb-4add-804c-abb8cbf777ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20392195-cd74-4834-a601-2d47ec368625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0807a9e7-4e62-40e5-9d03-35f511643a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52529d49-6f4a-4b42-b336-78c54d49e650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d915edba-a9c9-4d72-b82c-0d8baeb9c75d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386f6c3e-f3be-4ffd-8a83-6f96e62dae32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d63761b-42c8-4917-8832-a7f11b4705c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f677c0e3-9df3-472c-80e4-bd3d9c00887e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5ac5d2-b327-4c98-aab4-c10b8aa43d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a87303-25fe-47f0-b3dd-bf6c04a6ab50",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b59278-0694-43ea-9f36-dde5abd5a4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b926b54-2253-4be4-9333-a7b642b4fa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76ac95c-4f0d-401a-9b56-8464beb08ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "841421a2-d192-488e-aa8d-a164f7caa4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51d1fac-3070-4d3f-b4f5-56eab06ad403",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c284e49e-bdfd-4cb2-972a-bb23903a2603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd220bff-9420-485d-93a6-157073041155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab39ea5d-cc0f-4c9b-84bb-56862168061c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd0eb9f-98bd-4253-8c79-353e251b9940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c245bb2-a772-45d0-b46e-a179013b03e3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d5d62b-c118-4eaa-8a4e-3b105aaab6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1fda93-a771-431b-a5fb-f42869d6bec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3b6b2c-0f20-450f-9aba-c6612363ecc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "19a70200-38fd-4edb-b1bb-f576c5313c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75937443-47f4-48b6-b2e7-057937b0f829",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1349fbcb-bd03-4c00-b12f-ee7c0b246db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20ef5f03-8fa0-4296-b852-aa42289c36ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f79895f-be3e-445c-82ad-5af715c3a0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed898f86-cfd8-4643-b687-84df10cb0e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57f78d0-b9cf-4180-a043-86ed7887461f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd9f97-a002-4893-802e-3d832bb57627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65f4103-1f35-44b7-b68e-3032420aaeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d354032e-370d-4269-bddb-1d8293f53353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90236b11-f170-40a6-b68d-0c9a686a74c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd74351-101a-4241-8307-51520aba046a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2dce5f-15fe-4ca6-9fd5-6bcb3a385a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b985f194-0b32-442d-bf27-8bc512836f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f02472c-9574-412f-93a3-43271f83b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "420bf55d-3d21-4e69-868a-6134a8123e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d3689e-adf9-4a65-a918-86b637d9c055",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2183ca-436f-4b75-826b-fc7671842996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f5a8ad-81f4-454c-a883-68fae11f56fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f71bc7-920c-48a4-90eb-8e98554d515e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f97200-6ffd-4f5a-b4ca-b049a8857739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c70d0ef-28fe-4ba9-9849-60f95f7e5412",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27df7c8-a14b-4d94-aec4-87e78fff7911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a768bb9-489e-4a36-ad7e-e68f5607fff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eec6476-1088-4e15-845b-21aa47c5596b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6bf294-3f1f-4f88-aebb-a296ed2c2b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4488a6-0edb-4a5e-9b75-d7f9531dcef1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c5246e-8b37-4049-8cf3-ef9605669934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcde68e9-12fa-41a7-ab8b-fba9efc0458a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842a43a8-2567-483f-a528-5ddd67715b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8484b904-4c0c-4595-b8b7-ce3c55d98183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5adc74-cc61-4594-8bc4-71cd31b378d5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b56b0e-c15b-47b3-abac-769015af4ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2cb3f45-b1e1-4419-a75c-c7537cfc0fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143a1e1c-87c8-4ad8-a6dd-74c051b6869f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0c044093-2ba8-407d-a7ea-a6ab75323ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6b06a6-ac8b-45a6-acda-a5106a116aee",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07160a8b-64df-4079-a41b-59ec535351df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775d2eee-d48d-41be-b3e2-08b237d5f954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce2fc53-c005-48e8-b4e1-a0f531e5680c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "29378130-e1a8-4de7-b105-585262547402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e366a38f-3312-4e84-91fa-bc5797be409e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605a6f49-bf6a-4e44-8547-eb6ecef2e49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43bb91f8-c88d-4941-b955-c4fc6ebc96bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d47bb8b-fa01-43ed-bd3b-aa55d29a6fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "338d5841-d5cf-42f5-aabc-59d42cda530f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131eda56-2611-48c0-bdc8-027dba16bea0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ea8b2d-5bf5-4f9e-9d93-1ed351cabc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b4e413-cf1b-4ce3-92f4-e2cd8a3ce6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6683e-e6c5-4028-a528-80b93211de52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b33821-563c-4b8f-83fd-0335e71b78e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca895498-a29c-4fbd-b0f1-416b75313a99",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9927b75f-71a8-4c03-a0d4-cef53ca0116b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6d479b-8f11-444f-b853-40743a993fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050b0d22-ef63-41c1-b948-0ddb845353af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af33ef9a-fbe4-482d-8601-2969acf08fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3078b6b3-5b18-4d56-9aea-6d0a943bdbdb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e131544-be5c-4efa-b94c-3c9192989330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dc231c-6f0e-4308-b6c7-10bcefdff1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5838b400-5a8f-4369-bd42-eff2a952f45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da27c409-5cd5-4e5e-8489-6d2c5e8ec188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f30c27-dba5-47d3-ac07-08d309613049",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60540b2-be6f-4298-a8d9-dd9fe97c739f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d4e40b-b938-4f45-bdba-e39063c0f494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dca7c93-3857-4af7-a6aa-6e4849041e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "951790ef-57cf-4380-82e8-71662fd31dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae56217-6c93-474d-80bb-ce59c5875200",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e482b373-dce1-420a-8280-0f2c31c9181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85889c3a-9144-44a1-b8f0-976d858c82d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a62c99-bf1f-43cc-8b02-dd3ce6d8288c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0a9f15-ac3f-4e70-84ab-dda46d2bec4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cc8be9-1a4a-4aa6-b6f0-c4fb54b2464a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b7460a-0fd4-4c04-90c6-033ae5245229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6515628b-47d4-4efe-bed2-8086182816f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fdcb57-8650-44bd-8df2-0db2580b6247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1b12fb-fecd-44f6-b467-8bb9cbcc6652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea21d70d-1ced-48d4-9c68-01298503858e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c07056-f3df-4c09-8ba5-44239fd26f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1243f4-ab9e-4b90-adf8-76be360ce1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f8f09d-31db-47e1-90d8-ccff40b6bf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "524bf37c-257c-47d8-9000-85de308398af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9a8a75-0362-4a3c-9013-8b19fa28a178",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d044093-d14a-47be-ab4e-0ba1e45c721d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5108b815-70be-4ce3-a0c0-16f99a4bc427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2450fd3d-afd0-4645-95ef-6f1d6c60d09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "142e33c9-96e0-4056-811c-b88a9c1111bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734fa948-021d-49f9-a908-e98988ac3562",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bd43c3-d6fe-4008-882c-ddc927558d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5ecc5e-bfa8-4983-82d2-484c16bb56cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcb2061-3161-49e7-8f16-9619485e10d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12b3e31-2b7f-4d37-b19e-78a52f8c134a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5c185b-b278-4edb-ae51-01d7048d855f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37766cc7-1881-4514-8bc7-e5a419be5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfef4534-6874-429c-b6d2-b87ce68dab8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b42ccee-8ef5-4f89-9d5d-84302373e897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c93c2f08-8f32-4382-94ed-07f28fe43763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df72aa33-8380-426d-81d5-89ae8b0daeaa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750d7ce2-58bf-4b63-aad9-d4216ec7f70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6107204c-5ef5-4f82-9835-14a215b61a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e58abe0-30e1-4430-9181-c7cc150d6c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "103d6911-9303-49e2-b0fc-a6ad25bfeaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5566ec6a-fec8-475c-80bf-552241158e09",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf37e514-a7d2-4972-a8bd-af698fa7f5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0ed63e-055b-4215-94f9-f4690f78e23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c86e89a-73b6-4de2-9851-46beafd350d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "46fd63cc-6673-49c4-b64b-22f6eba3b18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa081e9e-71d3-4c48-8b28-aed1934b4b91",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9aa98a-ec05-4baf-bb67-d93dd7ffc251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e9a5a4-7b1c-4a1e-8422-f6b9d1c17c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5fd8b4-b7cd-44a0-93a8-b36e0c15b570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9394c5a-73ea-450e-8fe0-497dcdcc4edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ee098e-c78b-44a0-9478-a5781dc3c483",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff774a1-6787-417f-8199-167357f934f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0984a8eb-a6cc-4604-b39b-1d22f655a860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02a3f89-49e1-436c-a3ce-849fbee0552a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d647f8d2-cec2-4d75-9997-980a91d74f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aea2ee-f92b-40ea-824d-1cc010fb8784",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e86b507d-e085-4840-8e58-a37f439d86b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14ad108-4a91-4828-80c5-692ff7cc37b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2e34d9-f42c-44b8-8a9b-5e0ac0e31ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "50f51dc0-80c1-44ef-8422-17b40c77c15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6649eadf-4c52-48ff-a577-16868bb2d471",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e23d07-e963-4559-8260-9a3ecc4b3166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57642bea-6142-400d-94ef-41c5f60d0a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d0fa75-818a-4bbd-888f-8822088c1a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e520ed5-4163-401d-84e9-dbf4e8f66e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a922a813-b769-413f-854b-cdc63662ea3d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a90d628-9def-4dd7-96cd-6475082e3bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d52de0-c6dd-444a-9b06-5344eb6099e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84faf475-90ac-4c6e-8ede-55881b2bc614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5cc1804-c4c8-4cde-98dd-975955fa9e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc719390-be94-4c6f-ba91-20792c0e6ca0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af88464-0b76-4341-ab09-b443a2155ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4ad78a-c3bf-4c97-a89f-d9c04f6ae3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f963b21d-4e27-41ca-92ad-6b5c4e724ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "181231b8-64e4-4447-b673-e50b7705cd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149675cf-a538-4646-9f39-b453aa8740d3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565b7bfe-7568-4893-8642-75f966db934e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecd6209-717a-469b-b604-079d440f1f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383db4b1-1359-487a-a2e9-dbc4d9ac7804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b65030e0-b4d0-44e8-ae04-dd6de065a007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee577cf7-6a61-44ec-add0-eee21bcc95b8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f211263-7bf7-4cc2-af18-3efa52596c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d88924-5426-4f6e-b0eb-70126bf15750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5442ccc5-39a3-42ec-b221-6c48079dd248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b5fd91-78ae-4372-862b-974feda6be29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd1f030-8d2b-4664-8296-a47229cea3ea",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abb1a9d-0feb-4d73-8cfd-58e81cf4d1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477064cc-5769-4a08-b088-229aad8f1f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3c201c-0e5f-40a2-be61-0426492a5f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa80160-3213-4f88-bc7f-643192d654a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af57c93-afe9-43c6-ab93-44ed2c87d51f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65ca765-9dbc-4fae-b7dd-4f98c8222b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e681e8b-5454-496e-9d14-0caf8d249f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30db5a1f-e678-4dd5-9a2c-21d9245083d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee895b9-44e1-4045-83d3-3db7b3a03213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a684bd21-a1c0-4c63-8c24-f5585d00111c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c499c164-251d-4101-a845-a9c2e5539294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686d431f-40de-4331-ad65-1ace18f31a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a63b309-01be-490a-8340-145edcfb565f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bddf8970-507d-44db-82a0-974a575d80da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2640c3a-e1ab-40c1-a1c2-c249551ade57",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f0623e-1668-43e5-821e-03239d7f9ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ae8db7-588c-4179-b0a8-f0242cb84157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb7177e-ff65-48bf-b80d-92550299683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "177de6c6-0465-411a-b7ab-c1a73902ebba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235012a9-0c60-4331-a2f0-7d9c894cab41",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf5d9f5-67fb-4273-88f3-bfb513f5116d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a65bdb-79b0-4f6d-bdc9-6e8be72630a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d64c548-b0b4-4e6d-8247-ba2caf730610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d572c529-c016-4078-b7b6-5f8be3beacf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf323f0-ce6b-42f3-847c-67eacdaf941e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07334001-05a4-45be-b745-aa3e39d29be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c626db2-73ff-4f2f-9e60-fb6ca922e1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511f9295-08bf-4e2f-b411-f93e7412f963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6abea061-7d84-445d-90be-cacaa9a04f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364718a6-5e18-44c3-a128-1e7b00c69be3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beaa91a1-ae8a-49e1-8a19-59f870ad7300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98784279-1ef9-472a-a19c-15d7b757d408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef284769-dd12-4fa1-95bf-e5cc26676c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a70cf78d-39c7-41c4-8d5d-25723d332477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1419a073-a8c6-44cd-9cc8-2922ec4ceec4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfce3e3a-44fe-4901-bf86-252c983a02ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9d8d9b-a37c-43a2-9115-45792653b578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe67976-32ba-47a5-b922-c6989bf3e2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cbb7e6-aab5-4ed0-a58b-bc6e001815ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291ca37b-f4dc-4dc8-85df-74fe6d625f78",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe5fea5-37c4-4083-b59a-9747aedf3d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f8588e-c8ba-4ab6-866a-6a53e3d8cd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd783a36-ff6b-4732-a89c-6702639622ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67267ab4-6334-44d4-b6e5-7c3f8e41e07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b20173a-2570-4b73-9de8-b9374d7f5923",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbecb89b-59ab-473e-a729-e291b4239f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170f21c8-b179-4783-8b59-00df8f7edef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8ca40d-170f-4d2b-878d-5dd7b7e16e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5ad3df8-af6a-4160-aacc-c5534597926f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b10c1c-c55b-437d-a85a-5ab9f61907b7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da671d60-ca0b-4b75-9226-8471d60fd89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0443f61b-4489-4f65-9285-edcb6a5c07d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3212d9-fb67-44bf-861c-f9705d70aaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86672416-ad29-41cd-9e1c-fac2b87ed810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc82756-20de-498b-9822-5772995a8480",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e16f79e-5217-49e3-886d-baeecfa810e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf598cd-3e03-493b-bf1d-f16942024250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adebd572-1f52-4ffa-bbdb-599070b7a4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2b75bc-7f26-4ad9-b0ad-e0ff7b62f1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112e2979-3355-4bbb-868e-23a614933736",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d7dbb3-d449-4362-9d03-b3c1990fb8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f45aa1c-c74e-4169-aefd-da6cdffb001f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56bb268-97b0-4432-bbb7-c5d3aad4924f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f8097a-b11c-4c28-9f8b-ffe7a11dd81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52671d9-1181-4832-b275-18224a9a75e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89923e5c-46ed-41b7-a33b-e91fc3bb7e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffec66f-4bc8-4c27-a06b-73c023b8deec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9b33c9-d755-4cea-8091-86eaf7a5f7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "931b116c-a357-40f8-a2da-9da803efc6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5273793-449d-4eeb-bf2e-7c429bf6a52c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42bc903-b002-4b8d-901a-ecb53a05a578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb87f95-1987-4c10-82b2-a1c6f1d88db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046eaef9-7d7d-438b-8105-ca4d04ffdfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80eb10ff-2c82-4da9-b497-6e8d5fed6cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6b288b-1529-4872-bdcd-935b9cd72487",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da439dd-d48d-49e2-921d-b7d7dec8941f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98050735-6c59-4f40-9dd1-54141bf4f3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a518f8a1-6d7c-47b0-bec8-af6bc0636a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f20bab-3526-40fe-89ec-bb06b83f1bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa7c9b3-ae0a-433c-9b2b-11eec5fc457b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935351fa-b178-4075-a626-bc8a626a5592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfcbf63-5d5d-4732-aae5-acaffada1703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03e9019-bd47-4ce0-b3d8-c5bc6cb1dcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87970c1a-d7dd-4faa-a08a-6fb712250379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39de3782-4eeb-418e-be1f-3cf07928d8c9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15830bd6-4e98-4b1f-a8f7-e0f5f66f186a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5988801-d713-4042-a735-13f5ea1b9516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d55810-d99d-4fe6-ac7e-8ec28db193e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c196fb-89d7-4621-8be2-e7252a298892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f53b54-b404-4a29-ac54-561a793a9214",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220df16d-1faf-4bc8-98ff-38ce0ef66141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3fabe3-c8ec-4d05-b6c5-349274b6a9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71500371-d413-4a13-9f6f-39de5d56a5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b8bf72-d34f-489e-940c-a3da21ceb28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8555b0c-f321-4742-ba6f-d8f8d909bc70",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc49cad1-069d-4ec3-b4f3-75a240c61335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c6d5cc1-300a-43f2-9c46-e3d551cd97b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcd5734-003e-4bd0-b214-4e70586b4c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "295ade65-b16a-4a26-962c-9e0c1677b045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfeae56-be75-4b89-a2fd-f8f930e04056",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5898493-c277-418d-b631-36c8ab0e573a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79eae774-78c3-40e1-b713-cb2072e0c69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a98dba6-d5dc-4eca-b08d-996a8de05059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bff8e9b7-6067-4af1-9b12-658827cd2945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da55835f-c225-4a84-85c1-29fb11cda81e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb347c-9bb4-4438-bd33-02fb57efb3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006b03d8-0273-4e1d-acc3-0111a7d81abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78413d9b-ce43-480c-b91c-1acf857038a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d558964d-0669-4153-adb4-57a3475a5fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d770aff3-801d-49d1-bc92-836ac83bde40",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d47a6ee-1bdd-4ccd-a9b5-bd332c5b420c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be296a6-5306-4132-8683-267bf05a0b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306b629e-5b92-4a38-845a-35ec6cebbbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "02b594f6-c937-4b89-933e-8294b3cdec28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6604d66-b7ad-4e81-9ff3-b41d73f7c346",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5901ded-d18c-4ef9-8992-e1fbec2b60fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9958a4-7db8-4c50-bcc1-541b3f3694ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1985d5e-9d1c-464a-9cc7-b243101ef7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "596937d1-4c72-4f82-98f2-226d4621a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86d1e8e-1921-48cc-aa85-3d3425811f27",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81857dab-e1e1-4f4a-b15d-27dea03043bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8dfe5e-17a7-436d-a8fa-f72218c50841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9d2ed1-759d-4ea1-9f67-26ffdcc487ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "41cf94b7-93df-4587-ba2a-8640baf3af3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6744ed1-361d-4c7e-ab45-65833678db80",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155de2ed-2d02-4e1d-b579-63eec2b04023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633eca26-a8f2-42a6-b6d0-6bdb92fe73b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458931e3-5af8-4382-9fa3-8819ef462499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6abbecd3-d3c1-478a-91e6-8c88fb7b7c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe77dc-d243-4a94-a050-967a89848d77",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e540abae-afca-4c6d-a8e3-6340d8ea28ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aba3a16-4231-43f7-b3dc-627484c6256d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d127cce-651e-40d7-9992-d1bb20b1c010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8977b08-a894-4288-8b03-08a188accbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e891732-0402-46e6-93c2-4c57315011ba",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6fb1f26-dac9-4517-8127-032a15574dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "12c7bd7b-b1ae-4b06-80ec-257ab0c11f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbfed63-3d25-4d94-847e-ea45d63c5f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "238ed661-78cf-4de1-b2c7-f3b460a9617a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "823ee568-87cf-4fc3-b8e8-ca18cf8f6c79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b80dc07-f61f-4df3-bda9-5105c8c20e32",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d24fc12-6eb1-4ab7-b443-d41214d3a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b8c6b24-6405-4ca0-9af0-290f299d84af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139f89a6-80c0-4abb-8c7f-c27842dd8bb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4a5a62e-3ece-4d08-931e-47c45135469f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c11594c-3fc7-48ea-9837-49765e49a6c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0aefaee2-c72a-4cf6-9480-07a117577c17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9c0f776-b0ef-48f2-aeab-00a5c8241530",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e50c4580-b536-4de3-a500-a966d7364e3c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bebc8fbe-4d01-4596-9fcf-4894d5b7b399",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67c672de-b6ea-49de-8a39-09819f9f2dc5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e032217e-93ed-4569-9c9b-77a0aa652db8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "863c8f4c-e885-4edf-8de7-2f0cd0967675"
                }
              }
            ]
          },
          {
            "id": "8d7fbd44-21c1-4106-9132-efad05f73e72",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff579e45-9e6e-47c8-87bf-e2b068354d8c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c0789f92-33b8-4cba-b97e-766924115e82",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7c97bb-33c9-4bee-bb1d-865af695ae07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0e3b1224-56c2-4321-a39d-041c7c46b1a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fcc84a-9118-460c-95ba-a8865a6bac64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e50413-f586-4b0c-95ec-edc59d5e8e5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8174c43e-aba5-4539-8f25-5dd559209865",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49a7706b-cebb-4d7c-9fe9-2bc6a6670668",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da77b6f0-0379-4ff8-88b6-dcff05dd6dca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1703d6eb-5078-4c45-84d0-9b53daef9623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7793f02-2dfb-48fa-bbb9-c5ae1f5f979c"
                    }
                  }
                ]
              },
              {
                "id": "6a63f72c-01f2-4a32-ac97-9f1a7b1185f0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6001078c-b4e1-4573-88de-9290a2f4ed64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "347fd834-8db2-4426-b7c8-6c4bcf18d263"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9151b82-edb6-46de-a793-2905de69e60e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ada70b3e-a5a5-4c44-8eca-54e341935557"
                    }
                  }
                ]
              },
              {
                "id": "54215c69-54b3-4e31-804c-18ca030da1f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1b79c7d-1d7b-4941-a3ea-6b2ff5b9f827",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc556010-1a80-4ca0-b7c1-504e9c157d0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "768b3de2-6a29-4148-96c5-5812767119be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4be5b256-829e-4bab-afc5-05e3cb8f33da"
                    }
                  }
                ]
              },
              {
                "id": "2b10d1a6-3aa6-46b2-91ef-387947817566",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "111735f8-61df-4a35-a201-2165b682412c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30cf5571-88d4-458a-a6a2-addbdbb7a17d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a3d6046-dd70-4c3e-915b-26555b5d9f8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c985f745-d7c1-4934-be79-1afdf17b2432"
                    }
                  }
                ]
              },
              {
                "id": "9eb70aa9-8244-460b-bf57-708904ea4a0c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b37128c7-2a81-4f5d-a9c9-bdafbabbedf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e154f4ae-b2b0-45fe-8ad3-0064a7886ca3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63627743-337b-41f5-82a8-6cac516bed56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3a85083d-75f2-4173-8828-b6fda038af28"
                    }
                  }
                ]
              },
              {
                "id": "09114f9b-3bd3-4e4a-b96f-ae2f7eebce59",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "196be73e-c07f-47d0-817b-bb0f1e43fc2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf26522e-e672-4ad3-9bf8-ace54c0213ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bffaf7ac-0c26-4357-9766-ad972c2e2a03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "45130484-073e-4e62-9313-f3b0202f8109"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c1b7ab3-a4a2-4d9d-b962-f88e0b3680c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "206e2761-2d6b-4702-9b92-9e3e58c61bc2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3e4eac8-7a9c-4b2c-a6ee-a4ca6f933faa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69790942-c76d-406e-b35d-5fe67ad4b19e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "660b6c78-c9d1-46a8-9d56-459c75807586",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ec0afafc-1f53-4530-9104-134f135cd7d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e7704cb-968d-4038-8435-f772559aaa2d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "885368cf-743b-406a-9327-25e90c088d66"
            }
          }
        ]
      },
      {
        "id": "2a349908-e51c-4a61-b15c-a46ad7e789a3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7f7fa3c9-ee6e-482b-a6ab-acf37b70a835",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d8f70ed-eb85-4075-84a8-9b83785eac27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dde946e0-4b63-447a-af8c-dedb842f5e8b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc85503-7b73-4594-9123-41ad3bdac142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8bd4cf-591c-4aa7-9e7a-a9ea1af30ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b684b4-6518-4de1-bbf2-21fe92bb80c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc4f6b4-ee2f-49b3-9beb-353c31a60f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5fbc69-af40-4741-b473-ae6a668e27a7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c180e0c-ba0f-4135-aec6-351c334ac7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016b173c-bebd-42a1-8904-8374a430840c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12037d1-b3f2-4e36-96e5-9997314c76f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d478ed-72e2-4aea-946a-8910ea19d8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513408b5-7ec1-42fe-b0a2-b56c81dab6eb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9037a3-f060-4585-b68a-331266a587c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425df7fd-1f20-4adc-b290-2b1b4950e344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4204ed-4145-44f4-a37b-a7504db4b94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3c8fa3-6ab8-4a7c-aa47-e24cf0b8ac9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b81cae-d1d5-4657-a105-360bb1401bb5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4a20b3-229c-4a4d-988f-e297439a4c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2764f697-6580-4444-afa3-af5f4f4b513b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02a3dfc-cba0-4ae7-8ac5-c0c967bea6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc18e244-ce4a-4a3e-acf9-5ca513dabd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4798bc3b-ff58-49bc-a1cd-203f187351bc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5fd96f-62e5-45bf-b0e2-8b7ca01cb563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd5d6b1-e153-464f-974f-99d7aefde5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e204b2e7-9649-4a81-8f23-0aaac7f750af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "916b6d30-0c02-4188-bec8-229dc2c0ccaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6528c7f1-be91-4d4e-a12a-251e5017147a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955edb60-bfe6-472e-aca4-f9f8686d5652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af60faf4-f554-4634-b34b-480e23a886e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1fb7bd-cc2d-4cc2-8dd9-0a8777177a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4caef307-e766-4821-88d2-5c7cdf980598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009be1d8-080d-427b-819d-e4abd0773f32",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fff5294-9fe5-4192-86cb-c155c690b5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d96f59d-f5c4-4c7e-bdfc-02e764ebb050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a58485-fd80-449b-bd57-f98cf17e7cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeeb1319-8f6b-4b7d-97d8-fba6b5b8e903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3924672-94eb-4b37-9c5b-875c7b1c70d2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00828998-8bea-4713-bb40-14b82bfda17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc4f5e6-392d-4068-9efc-c6d5d70cec7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4741987-173f-4f60-9b79-9aa9ee7309d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8bbe4d-b798-4326-aee7-c4d523e92b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435935b4-cc77-4692-8225-546655fb3055",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d0b631-cf98-484b-b2ce-4148d26a217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e54dfb7-c932-4844-8c63-d7a37ef34b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bf8d89-8532-478f-9079-e91f79c9f1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0bbe87-b1e7-4fa5-87b4-31785470d45a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1411e9b-3c69-4cbb-a754-6ac7f5f7f04f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ddd588-da98-4501-8fa6-bd202e52194a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf732b3e-aabc-4752-86c9-6ebe215ac54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add8d714-4209-4bcf-85c6-a0d393c7bca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64cfccf0-4d65-4f51-bb3e-5807f5c55d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7f4e10-cf72-4168-a942-0f19cb7fff25",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f068c43b-6b3a-40d2-9d40-c7b6b364b223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78fc3d6-9a54-497d-800a-b80cf405f424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac446f8d-5ede-474b-a3e9-34632d4c9598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9fc73e-0db5-4769-96ce-92e19b285c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9200e1a8-f512-4554-9390-f84bae31bf90",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c70adfa-f682-4919-8449-0ad0e4782eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e406c676-a337-48df-85d9-a0b08a9c4f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f69793-cb83-4b79-8712-d8db02f443cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d630d0-8c12-4ab5-8ef1-be91a1b3a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff78b38-d081-46ba-a7fd-adf628b00a3d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b366e8f-1e1a-4039-8e60-240530285aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2ff943-d135-40be-a147-eecf179ad0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89982a29-885e-4f96-8aff-b3ac8d98d32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cac9ac37-17e4-40f5-aa84-70d8a0d64438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dd82b6-f6b6-4442-bc9c-8fc2fd10f844",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8f45d6-72b9-45e2-af70-c8ed8c175b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2af6eb-ddc8-4144-9031-d8f1b8570521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0506cb06-5eae-4b22-9207-d4d64d3463db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb6aa31-ee92-4254-aada-9119259ec89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b63608c-017b-4b58-9928-f68012b85abc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5debb07e-c8c7-4d0b-bc19-0b944d7f2ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34473b80-4592-49bb-8357-0b7264e5553b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23541b48-15d6-45df-b74a-5aed6cfbda42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ab786f-34fb-4599-bfe0-5a0111ac62ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6486c523-05fe-4551-8fb9-7f56e51fcb5c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34d2579-4eb9-4345-a01d-33a4c3f91f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5419589-8dec-43b6-94b3-fcca46167f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2befede2-a349-4e90-945f-dd7f0ed8e4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "af1be8a3-5d04-4173-ae6d-85f4083d1358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581b8755-e0b5-4d81-9284-d6b4f2857e94",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56e6bf8-2fac-4ecf-a9e5-4e415cd4344b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab3fa06-18c1-41de-8e62-c21756502b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc7ab31-338d-4ead-8fea-400a5e469837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30dc9ad-6910-4556-a3ce-f6e3a66f3451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28511f9-1172-44e5-b413-17adce0de2b0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514fba0c-8ac9-4c79-bf69-e65774ab0b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c552a24c-8a40-4e22-9949-1331fa023635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b673a1a4-0769-46b3-9794-fae7d8fb1ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "067fcc63-e1a7-453b-a070-5a369f928ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb721226-dcb6-4ff9-a202-422cd26938ab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faf949a-8e04-4c9c-a56e-dd6e64ac9473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db3ce5e-7bd0-4c34-85d0-a924ad375336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e0af2-52f4-4902-90b6-1866c69293cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6075cf-cc04-4060-9eaf-fdd66624beeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c703edf9-3406-46c7-a710-9c90d0515b4d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bf9619-9cd5-464f-a6ec-067fff654917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4623a063-90cb-4190-bdb7-39303f7616f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03193658-c5ee-4a92-9408-a50892101aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "037f1a07-f3ac-42b3-9515-4f01c2814c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683fb9b7-68e4-43af-a2fe-b67412d8a6ac",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f17570-8241-4975-967b-2876161340c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1835364b-3ca3-4cb7-8557-f7d48704fe89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd338efd-b075-4125-b86a-9ff12f77d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b002eaa-7b6a-4a07-90ee-0993bd0616d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1a6a48-78db-4685-b639-1b8c09315abe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8985835a-dced-4309-b5aa-292bc54f27ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f51bf63-ed1a-47ff-8aea-e6ca64ed84ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af38b39-1ba8-4cc9-b39f-76876036d322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b6f39c-667f-45d4-ad18-61d2da7c27e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7111907d-3def-40d1-b247-dbf98d49b4fd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e980b2-fa96-424d-85c9-793faa3977be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674e07ba-7ace-4446-909a-089ccc79fbe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cd3f8e-323e-4165-acd3-e99387333f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fab203-e3f7-4c39-8f6c-48d6900d98a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30962dcd-80b3-43b6-a39a-aa971d203798",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f221a2-86fd-46dc-8c87-e11611f9a56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b57f9f4-abc6-4768-92ea-09fd04bc7c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f77c05-bbc8-4d55-974b-52a310c6c0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1154b9-5b67-4ff3-a77e-4530846a40c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2ab656-d788-4300-942e-ae0240e1a9b4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4cadc9-4276-4ed1-b14f-9e4bc67268b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc38b71-a807-4a76-a8c8-9df78b01d3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb74afb5-b00e-4842-b00f-46396a143de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80a0697a-b047-470d-bd69-10b22412548f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117ca81a-1bdc-4593-b613-2a93a29c6ae7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602f3904-656b-464c-91d4-0ab44c31d88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bad08856-85ef-4493-b368-2349c1e20bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658d918e-ddce-4b1d-849f-c23885ba338a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f71062-0f54-4b95-aa67-fd4196bb93f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013ee5d5-6693-4872-8215-17f252e95f74",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdf4b04-ffd9-47d7-93df-e2f935150d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b30c143-49b8-4ce7-8d3f-71e0fc446057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dced0618-ef01-4fdf-8153-c5ccac0035f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8b808c-ab0b-4ad2-b6d5-76f4f61940e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e437c6-dd76-48b2-b70a-ebed6b203b3d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e71b82e-8138-4ec3-8067-485533e222f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f2a51e-1221-4f78-a291-abd203cf3260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010da74f-0055-45ce-a8ce-b1929ef3754b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c49b2b2-ded0-4bac-b1a3-4136ba00e3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf49286-91e6-4042-abae-bcef525a7280",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6babe1-6216-4150-b7bc-1d909f7d6f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b91d1d-b8ee-46ff-b597-e8fd11213e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86f4550-1884-42b4-8074-cd50dcd421a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c55d2e-451e-44fc-821e-9414ce6f0ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925e6f0a-188d-4c6c-98bc-82ca6d8ab987",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f5bc81-d665-4d10-b08e-94d48f5b7350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11700120-9a1d-4e2b-8b81-55ed296c8e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd004c5-2b02-4062-a1dd-e4379c5aebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "943ea723-3c1f-495f-8548-1715eb28f66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec16b65-387b-4f71-baa2-ef21786addc8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f72156-3eb9-4bfa-988b-532f18c37566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a325d1fc-7c78-4c05-ad9d-8ebd9268d136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48817533-65e9-4e52-aac8-b32fd45fa450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "044a3b66-c3d8-4caf-ad06-c9f83b53fd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c925613-5efc-482c-808e-74d6bf726d67",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130fc73d-8215-4882-844f-888b8f583caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe31478b-b3bb-42d4-8c45-abc2c5e47aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7d501b-7336-439e-bc35-195f6dcbaa40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8adf26db-bcd5-4bc9-8f94-1afa5014183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99430e5-dd99-41da-89cb-5ec94feea62c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d772a1d-afec-4735-bc7b-27824a5e91de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bcfcef-6583-49ec-8958-aff10c212f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977619cb-275a-4447-ae7b-eded27a210c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a19537fc-9bb9-4b74-8e01-5285aa449fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7107e4-165d-4894-9701-e01d894d75a6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4eeb43-d8a4-455c-9802-acdf8bcff5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7950d8-4071-4895-95fa-36bcfabd2647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13f35f8-0322-4a82-a1a6-b6817dcb3822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d19d9784-7a29-4417-9fff-54a1052b95ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adc8f50-544e-4072-a43f-aa5eb15c7915",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6064b6ae-3198-4967-a8a1-1da6dcd994d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2312dc-816e-4310-8c05-21adbb2aeabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daef5690-88aa-445d-83c4-f4cd18ce55c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a68587d-ac44-432d-a1d7-e6d04a60db72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ab3767-8b8b-4f3e-97ad-eb88319e9842",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c990d088-4a71-47bf-a127-579d27ad4353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7958764d-71d0-4624-a588-e9e104e94fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca112c48-b325-4aba-9e6a-ce579df3e747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d96da5-f1e1-45ca-9197-40e7faf1ffcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e97f2c-5df0-4e47-93d7-11e3111cab73",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fff2a2-9c2f-4751-9fa9-c713a1d3a65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05e62f0-d79b-4bda-9844-3aa491c002c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db1d468-e506-49aa-87d6-5e48510db79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff06c7a-2f27-4827-bdad-e6a687c158fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f33c3380-0fdf-404e-a5a4-5d7b4c6f61fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f57b1494-d68a-422c-aff4-26741ef66caf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6db3a7-eebc-4cf5-9fc3-471bb19aa85b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "24cd62b0-2aa9-43dc-84f9-231585afb73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5252b05-fad3-44b9-83a0-1babb3a5d2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "352378f7-be8a-47c9-92f5-622d0efacf1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b5e8043-872b-4f9f-8fc5-4b1f19a25164",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd08aead-fef4-49e9-873e-76ed92d6196c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa98b3a6-cf5e-40d1-b7b7-731ffe69fdd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58436a35-bb4a-4c79-accb-8ce13862d63c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01d48f20-0cb3-4a7f-bae9-9d71fff0634c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "69784265-f8fb-4a3e-b8a6-837d328b97ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0c69a1f-97ef-42a1-91ea-878493c2353b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd33841d-29f5-495a-8f62-ab35013e31f3"
            }
          }
        ]
      },
      {
        "id": "0f8d62fd-0c94-4645-a401-3e34ed5371e9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9daa5269-af93-42ce-af17-71573d7175d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5fa65a1-f922-4cab-a0f0-a20686c8367c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3004880f-2717-4c4b-9bfc-9230bcd5f77b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f484d056-79ae-4860-9df9-8aa5d6e99b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41a1ca4-000b-43c5-8f2b-e88b062e7971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23233a5-bcb4-4c4d-b161-38d2dae251f3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d64f0b-bbd2-4ef5-b740-866cdfdb0c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8cdb1f5-feab-427c-b722-ed06186b0f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef40ae28-53d8-4eab-acef-14c361630883",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b1deef-1cd2-4cd3-bfd6-c1b27eeed57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386695a3-51e7-4d0e-a938-63349a6a9ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4533f908-01d2-4d61-acfb-9d909c4bb618",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeba8cc-1ffc-43ff-9909-4afc55c3e0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf0a80e-af11-4ec7-b48c-7ea15d6a651e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbdef58-8e36-404d-88e8-ea31b87d0e08",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcd120c-55c3-4a91-bb6e-7772b18b37a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0169e10-9fc3-4516-b0c4-efa92abd3e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68b5c4c-3598-4808-9dcc-130dcbb27c61",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b9e822-ff53-4687-b42f-85d8b73b088c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05478e87-45b0-46da-a8a4-7d90216e5ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66267648-f76b-4534-ace7-ee4e554a31d3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c30efbd-d8c8-4c4c-922d-46e6838e3a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9b5852-4c65-40bb-b892-9d4cc425fbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d786833b-16b5-4634-9e45-44e8c81dbfe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36c9973-da36-40c2-8d71-4fd405ec11ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccaac26-670b-4c42-b3fa-bd6c1647e072",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103947c3-2e49-4849-bda7-c465fce0a525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a088f27-cac1-4f03-8f86-3a3f20ec5c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0916aa-c580-4809-b4cb-99832d1346e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6855ba-e58c-48c7-9598-43513b43cd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a4130a-419f-49d7-aca8-dbe967181281",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af02564-9984-476d-91cd-e8f12187c174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55a40d52-0978-4580-b955-eae3cf3a0fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3b5d4f-7517-4b53-90b3-9e24f0a150f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef721aab-2226-41d9-8435-525efe55e791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f3c73e-b019-4871-9cb8-53f152101a3a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ba40ed-4092-4c7e-8b71-25699a230a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ceca77e4-ebb4-4f8f-9ff9-9d841267ef13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd14e226-b83c-4139-9f53-3e3909ac49b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad95793d-795a-459f-b817-c5250c517e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e266257f-3f02-4c83-ad27-2e7cb1f93660",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267cf30e-8345-49ae-b026-9c7882296ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564ae117-a4f1-417f-8127-2e3c926e3c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8d0b98-968b-4178-be3d-0c31b5ce4495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "627a500b-fbe1-449b-9801-461311f5ce41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735f96bc-a971-4088-b705-cf1fbe58e2ca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e905c8ee-feb3-42ef-b5b3-d8b3c7cb8847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc1463d-dd09-4903-9e4b-5db080a5b49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0483e434-21b7-400d-890b-273613100d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403ce3da-cd93-4c41-858d-77bb77bfd48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8cb7b7-c627-4adb-bb7c-ae01943ba087",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0f5df5-4311-4ace-980c-83ad01766afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d682a544-1a27-443a-9494-04c77c214807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40cf946-4e37-449a-97ad-8afa931bd5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a39eae-1591-4f99-beb1-99f5b5db57cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdb0320-3d42-45cf-9b90-ddeaf4b1987f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40044d0-ae29-4cf1-b0b1-3d0fd63a59bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ed162bf-6ed4-4798-8041-e029095044f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d020c92c-fe25-43e3-af2d-556139177cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb6caed-4e46-4a92-985c-37fdbfb8c58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea7cec8-5d9e-498b-a199-96c716f64084",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5ad9eb-2680-4cfb-b9ec-ae26c1e05741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8cf2ba9-5833-46b8-9cf3-deab2921a24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01a9961-49fc-497a-85b9-44f2667b9e6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5796fbe2-970e-4a27-9174-802152b06d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7b4ff7-475b-419e-be0c-3d2c38b0b354",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4222baed-4932-41c1-93c9-33cb84208ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52382e42-44d9-4854-bc5e-bdecc243552f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4c1f47-71bb-47c4-a833-c0ef137b0a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7286940c-20c6-4055-b0d7-c9b3512a6677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539353b5-3820-4019-bfde-206fcc18b112",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4bbb04-b8af-4c32-9c3b-1b82e30be106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11194c6d-bdd2-401f-b92d-643982f6d385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b55e32-d78b-4ea3-8fde-488c6e971890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a948c46-ee32-4fb6-8ffe-9006429252a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90adc35-45cd-4f20-8409-48082caa68b8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c6ebc4-1945-438c-b3ea-b0cfa60f53b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ff7e03-3c22-446a-9798-1c567fbd4aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61aabf1-37ae-47fc-9e42-89a0b3ab3c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19ea3c0-fc2f-4dfb-bf0f-e38d032ae576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f014f25a-808e-4b85-bb89-596afc851728",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0a6d49-9ab4-4a90-a38b-60b67557891b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d57236-52a7-4f7e-8f3d-53f6fd450d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae5d903-bc81-4e56-b624-7a6433677514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ba49cd-35ce-4c22-b029-a7bd92493d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb18013-fd40-4e46-9470-d8b9cc32a07b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dabb4d-6df3-42a7-8816-b7057f8032ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f151950a-7a55-472c-8546-c7c75a7ea9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355c063c-ff9d-4d23-8055-603ea70e983a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc76059-edc8-4aab-81d7-46c64de50d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d681ffb3-ce31-4d39-b572-df718252184a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e75b4b-fb56-4c6e-a31f-ab4ea504b676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b86f12-ae12-4353-8fb8-f120e21637a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c933d4-c719-4439-8ea8-a41366b11e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb8a1df-b732-42fe-9256-43d4fe608d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bc406e-02b4-4135-8b92-c091a5e156e2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa7d51a-d848-4620-8792-3b94e3284402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6db361-be3e-4f62-9dde-b845246394c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee2bae0-107e-4052-af7d-58fe0c519a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6aaca17-650d-4efd-8242-106ee4183cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9289b89c-7ef0-4b32-9340-ea4efe9f53d8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4372d01d-6e75-4c3c-ba6e-77811f455dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969fb24d-97f8-4912-a18c-b9b4d7bf701c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ead328d-f238-4076-87d4-6a115b205be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b80a35-6643-4bee-85bb-9e267103849c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfccc461-135d-4770-b9d3-5282c9208104",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70dfbff0-f809-43ca-bdf7-63bf0c5753ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb69ce93-8e52-44a9-a68f-ded419d3d059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f17f52f-c874-4f8d-8ef3-4c63d4b24d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809a57c0-831c-4d06-bd51-dac50f957246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a33ab59-adcb-4367-a8d9-b3a5eba900d3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ab41ad-533b-487c-a5b7-21d54b713d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1736d8c3-d964-4f69-bc8c-6edc6536dba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f67878e-8d79-43c7-bc2b-1990b54c2571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0756ba6a-17b3-4cad-a55c-325e13e7c1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77477a17-b374-4f86-9ae0-e139d85a203a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8d8039-3e42-43d6-8f39-686d354adea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1066b6a0-a18b-48e4-984a-77b20d6316a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3349fa5-0adb-44e9-a60c-cd8d956ea7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656bdc85-9d46-4a56-8324-98d4c2b87435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b7eae7-f2eb-41d3-b1b2-e57c742a5fb9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d24817-ee62-420d-9b23-14a55b729c5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140fe0de-71d8-4b0c-a0b5-981e3ecfb756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedd75b0-3101-4a66-9e63-d3b0b9b7e172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed631ea8-81b6-4481-a735-35bb6b12a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7367fc6f-2734-4b8c-bc09-ab5c9579ef12",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61f0c5c-53f4-48db-a15b-4c8af78883fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4743affc-74de-4e71-8698-407700c2fd0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973e094c-0605-437f-8c63-b8369a046174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f8e214-44d7-4891-bd11-a0604395cd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24d282c-5b75-4eac-b8d0-16b56d18ec80",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033eb371-5361-4685-9bab-e15515214379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6cb1ad7-4ebc-4405-aa23-4dc1f92c52f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9746eaa5-3418-4f71-81a2-b56fa020e747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7be18a1-88cf-4fa7-a2e5-80c3127dd586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1552017d-76ed-415d-906d-3b1868ecd394",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982ec2c5-b98f-4bd8-af49-577a6354e137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5218c672-3489-4bc0-b816-f6d32a117c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66958b5c-5719-42fc-b7d7-30697eef0dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ef2b9f-365f-4de3-8f72-9d8b95612c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e2c1ea-4983-4a3c-bf2e-b558febeb9b2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67698617-e5ac-4a06-9256-f5569ecb795e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ed31f1b-3803-43c7-95ea-b9804f03c878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0ef485-bb39-44c2-a5a0-b29249f4be9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6297a50c-47c8-47ef-b11c-c57df43e8a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff742491-4cbd-4c6a-bc18-4b7eff1fd1b5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65309cf-5803-4c65-9c03-099337d4fe73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5c6e03f-874e-4850-a27c-81ea4aa695b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e790a92-ffdf-48f4-b2d5-b71d19afed24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1ef616-5239-4703-8793-df33ed7afe16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fab8714-1b89-47ba-8d07-5374ddc7b359",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fc4f4c-c4a4-4a2d-bbd8-85b9720e7ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5efcdd7-fd0b-4eb4-adcd-03fa1f0fba3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09036a3-6a91-48b3-953d-3c44e19e3461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e2c044-3a04-4ff2-8b36-be3b2e82b52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b306cb2-f231-4079-abe2-18a2caa9a761",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812de1d2-6d67-4edb-af07-3f2c78ac85ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6cdeb3d-b5ad-4edd-92b6-6b757beeebf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d4746b-e0f8-4a0d-bcd7-d68ce115f367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c452e9d-1960-4ec0-aae3-2ff259f0443f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50183be4-62f1-42e9-b458-4f20d1c6ae71",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b33c0d-ec82-4b8f-98e8-4a363857faeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41095231-6aa3-41b3-9165-4cb5aba53525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc65808-0bd6-4913-92ce-81188a765c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eea95a2-1dc9-480b-92e6-b8fdbc40c6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7718c852-598b-4b12-9f11-fe20852331cf",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88365d8-ce9e-4e36-b2af-bfa3fd21e561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47a5c6a-e377-4009-98b8-0559d926d10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259c689d-20a0-4ee2-a80b-14320ed4c19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888a824e-7703-4357-9c22-bd0714aa19a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8028dc-92a5-4a6a-8b9c-97a9f4030943",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2076a3-b641-4420-8414-1e05a5422817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea8ea5d-0a65-41a1-b7c6-b02c0b06498e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e257c1c-fe19-4bc9-b325-ad85f0b3ab26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13ecf68-bb4e-48e8-aab3-55c5ef7f98b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6cb49c-2b17-4fd1-810c-8514be49f93c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc22cbcc-507a-4a87-a6cb-401662226148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512132cc-93ce-489b-9ca7-b4d481992505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7238962-4901-4a92-bc39-84e5322b899c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2bb2e2-8cf3-44ac-98aa-cd4f4d6446e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77cce33e-8869-4390-b020-ac08c735fd63",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e25bbf-9b34-4f60-a5f2-48d0746dfc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b806493-44a1-4e48-bc77-48717723cf5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03bd128-cd6e-4484-bd8a-423a4048799a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65c8195-3b33-47fb-8712-bdac2e6365f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c533f7-a2ce-49c0-96e1-5f790148cf4b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef45c3c-9669-42e2-830c-600f9c474af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faf1f04-8312-43dd-a532-3a76a4913ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6ce828-7019-43e7-b87a-e8e69f37e27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6895d593-fd48-42e4-aaac-9780d384591d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9584794-a6f9-4136-a358-53ec51eb751b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f264d00d-d2a1-4d4f-ab3d-ecb0c9c3ddcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8c1d21-2ce8-48ed-9610-851068c6c180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137a0841-48d4-4fb0-9a9a-731593e65858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15bb31a-de80-482b-877e-10a6ef9d8766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ffa8a3-a4aa-42a1-bac5-9bdcf073f088",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2aed985-056c-4070-94cb-e0de40ca9e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a734a584-c58f-4c6f-a54b-a99c7d9e7301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4dcd5e1-08e9-467e-8102-965f485a1d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4320b49-34f1-4a73-975a-b4d6f59545c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a74af0-f600-46d9-b0d8-aea021db1f09",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2017dcc-3df2-4bca-b36c-88522388a6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1afbd1da-6f6f-4ed6-822f-03fe94c681a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b14b0a8-ef38-43a6-a181-09daa9c0d11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996133ac-26fe-4347-a8f3-d577f5eb3a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69fb0e6-d821-4445-84a1-7baad0d897e7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec4b114-0163-4169-a499-1b7056f33330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f0d4cb-20d3-4ce0-8622-115d8779ac51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdfe40b-3325-4e85-9785-5dd8b33b37a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca5579d-0595-4c63-91ad-46fea1c170da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc23f12-8030-4f14-b82e-d99ac7ca3f62",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178497d5-edc4-499e-807e-59359408108a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf1ec09-052d-40e9-9b88-2c2fbbafa79f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d0e925-2159-4c1b-9d66-921654c0c332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f099cf-6e2a-4f64-9a8d-051aee78b9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb75ee6-efea-44da-ac53-16a819f6ed28",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d549c8-dbb3-415b-8b9c-6bd83bfbd694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a2a5ce-2d9e-4109-a8a0-35447a2fb30e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddfc32e-9a40-4e7e-a142-abc7cf366ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c546be-4b27-40b8-80e5-28019cee2ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2305313-10fa-4f48-abde-866a2edc1aa4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d80fd5a-98c8-4e6b-b17a-0810eb7d051f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e747bc91-9642-46bf-95d3-4b4885a9d717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcad789-48f3-454c-a5b3-22c4828616e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1106011-d6a2-473e-a54b-f78814f9ddc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c323977e-2edc-4273-9ec1-2b34a73dc057",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89c245d-a349-4ad9-ba26-00b7ca0b97be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872f29e1-f9ec-4063-ad6a-854fda522cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671f1db8-c678-4fb9-b781-ab867b3509df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8720b86-421a-4748-9136-7d6009cb29be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd544f50-e412-4118-98c1-4a088cb03476",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8251cd0-50b3-49f6-aca6-1c672a8d1d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4e6e69-1b4b-40e9-8a85-281138f74846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90e6a16-e953-43fc-8894-930441eff914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87b3632-5424-45cf-bb2c-ec96c5442feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45054bb6-3302-4392-99f5-e6e588b6d383",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81440595-edb5-4541-9650-86d931050ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2eaf51-e34a-4e4e-bcec-7987b613d1f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0622bb-5a36-48a2-80e3-8050fcf937de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da83cad-0af8-4b57-bf2b-28a07cb17bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad24aca6-a578-460f-b715-98db5fb5cda9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42169d8e-865b-41ff-8394-17871b6ee186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79342596-dd80-4062-ad4c-d41b177bc9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27a95b9-2477-481f-9faa-5ec078f55533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763edfba-9ab3-498d-9c4c-3ccfcff17669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53294ff8-eb26-473d-bf1e-3c6c27aa44bb",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434a1414-df71-4d1e-87da-3a462cc8d6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88072152-1375-4ced-a5fb-d74f8a66c7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d285e680-241e-4bd0-b6b1-8a5ce13eeb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a84eef7-3a77-464a-8378-cfe2fcaf7bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e296e000-b732-4f24-a5ac-37a170b40603",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181f670a-df8f-4511-b39c-dc8c681c0d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4949ce07-da1b-4b73-8020-9c9ebc96f7da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77612471-f625-45aa-9c52-77b7256dd384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d416320a-ef43-484a-bf74-b7d691f205e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f332fd-d506-40be-9e41-ac79f92d6cac",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4f78de-5f54-4538-94b4-1bbf6e7fce2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d1583f-78eb-40f0-a065-e86351743260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ac8091-48d3-42b8-b10b-4228d1e3441a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c727ff03-d1ab-478a-8d49-c5c6c9660f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c9b277-aee7-4a9b-8b6d-569bf95aea59",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8df47da-76b5-49b5-9dca-5be5bf525a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc22eedb-cc7b-46f2-9426-edcce78a9125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31212b9d-a7e9-48ee-bd2f-6cda15a676d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef6466e-d39d-4cf3-bf3f-00b931ee491a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284a09df-5f67-41f6-b2b1-b657d5edd802",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f8d240-5017-4c4e-8c8f-01b2b2f33028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d423bf-5e12-4177-90c7-247d078633a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c987b6-3474-40fa-9a77-ffe859fee8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16e8eca-8dc4-49f9-9e90-fc9f18b1d7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64080119-0c00-4800-bc87-5574decfee98",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c298913-3aed-47e1-8ef0-72f86f114305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577e14fe-dc17-40e2-85ed-1cab0507034c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de895e18-2851-40a2-9f79-bcdc3b8c3fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34660c39-5f46-41b5-b3d2-cc597624aedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a288884f-21be-401e-b4f7-2bb14fa63c41",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bedef98-629b-4ee9-9035-1497235c3456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ea12ba-d86c-48ac-b3f0-4a267c8dbb0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5f2c0f-1c18-4766-8735-451813f10e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d868850-ef8b-440d-8f5b-81e37f440492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d5abbe-e88e-4d0d-bccb-8b99c694d585",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bf9d9e-954a-40fe-9ad6-3f75f1c9d879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5298ca-18b4-4870-ad46-ead891440ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281e47e2-b2a7-41f8-a987-88b7a9e717eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d71d636-2e84-469c-9a2c-9d9c5ec8f031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9107eaab-ce86-4762-8161-4485b3f7c957",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdf5008-c2ef-44f4-b5e4-f06464a8f7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a32cc3a-5f33-49d9-aa4e-3a62bc3da835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f2c181-511b-405d-b1ea-67b7c2fd9112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d1d8d8-6280-4dad-9684-44f52671145d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8189300d-7b09-40f7-a006-33f10f721b22",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66d7c93-3e33-4633-a16f-ea0d633a6a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb81e0-0083-4c1f-95f9-cdcbef77aebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da132c4a-8c29-4c02-9dc1-9aa3f7c7e936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1724052c-e2ce-4bf4-97de-e877bae423ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd2889e-c160-45de-b223-787d461a6ac5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112546f8-414f-44bb-a789-a4fe5fb80c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a10c948-047b-420e-ae5a-ac86ef373a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8a0b27-3676-45c5-9a4f-e69c8ee378b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cab16d-a4f2-4fce-a52a-81bd5cf80a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e8a77e-c3d3-48fe-94cd-8cc2cb33d703",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822b4359-cca8-4c94-b4f1-0dde4dc42141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cfcf98-4b26-46c5-98f9-3f70299ad7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26eed9ec-1991-4fea-95f4-0988171e0912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89041bc-a736-4bf9-b009-c7ec834c3a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5085bbba-2298-456c-be12-dd25a30dab51",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b98e07-df79-4aa5-ad9d-dad627477f5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc0485c4-18c6-449f-9a5c-51a315653b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07763686-9a9c-4689-bb77-41aa6f22a6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b6686f-b604-4da5-8a3b-3f699166f0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b170feae-904f-4c09-8176-bfddf9099d8b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a762aca-d77e-4082-882a-673506b0de84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb0fbc9-0844-43de-8169-6d2deaf624b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fd0e00-3603-41a7-8d06-4d7c611c9708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4a7032-194c-4e00-bc21-432d74d3d1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261827c9-1f4e-41d4-9221-79accc6355bf",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41914fb1-c012-4150-bc46-c8b119155087",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80618b04-56a7-4a79-98a1-a3004db3d250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee5ed59-28a2-473b-a871-d4f101636e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7d242e-7f14-46f5-bcc5-f9bf3b107dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77dfcdc-6cab-4b45-87aa-649131b1269a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cea755b-8940-4f1d-a3ed-8be80663482b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "235972a5-4ed2-45cd-a716-91a859cb62e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2416e4-13ce-44eb-88a8-e6e6ea057f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c1b90b-9487-4a93-ac40-2fd06b700c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98791b85-dd0b-4241-a907-ae339bd9b135",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5faeb27c-3fdd-4395-9cfa-b163a5b99f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd45e333-e843-4b4a-9d73-78d0acab4a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450a1ce3-6f7a-48ea-9253-1858a1092be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47047187-0a22-4fc9-98fe-cc55308ce95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e435f92-4cca-47c6-a881-27612f91f804",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7833e684-ef5e-4ce7-a41d-8c937b9a3c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47a28b42-75f4-45bf-84fc-cb5b687597a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81de8d0-a325-4e1e-90e3-e065fce3d932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cfb555-5789-4905-ba71-ffcd757f6114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27748e5f-3a6a-4e32-9bb3-7c433335d7d3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78850f9-3d25-4fe6-b53f-3db2101ca585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba02115-1cfc-434e-ba35-25e59ae33447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c1474b-6a56-4e10-9a87-4583ebf1afce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cea91e9-164a-4002-bee9-df2eaee40788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64893f3b-5989-4747-b42e-384ac706e461",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a30ac-41f2-4b75-b273-4411489b472b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1820b668-17f0-4ee4-b497-730393b5601c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac13e4ba-ed7d-41e4-9909-300a52367808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b349e3c-a49b-4023-8e6e-753229d205cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1a426b-82f4-448f-b676-524e7f70eab8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8f9b2c-caa5-4799-a881-c89d4973f6d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1078908-5871-46d3-a7f7-ebc3c2408fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dae21b-b4f8-4004-8856-b175d723c9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e11cf0c-415d-4c6f-80eb-1a0238cfb370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c066ea-e8a5-46be-b858-177bdf79def2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdaf5e9-f1cb-4078-b96a-c916d251ad78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f96313ad-c19e-4392-ae36-cd62e2fb30b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8447b962-c526-4f9c-8def-5d9676b17df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a470fb-ad29-4102-a3d6-dc5fd7b02ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a532ad-0e43-43e6-8fa7-da70623ed48e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad284c7-8b12-43f0-8ca4-56ed44288b2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea63632-3420-4513-9f32-a84df0408b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb50ca1-3b8e-4eec-aa91-08a41af7fa08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08525a94-0fa8-421a-95d7-e4276f9e475b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec3a5e-445a-409a-bc67-1c2c29082f3f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60d0d84-59f5-4378-9822-11fc974bb61b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b19ba83-a196-47bc-b3d0-4d3bcf5a3de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72843589-0302-4e36-8e28-ea180e49c5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d4807b-904a-455d-b808-faf44796d8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445a0b05-828a-4865-bd82-34394028b374",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f88694-475f-4338-8b3c-32babe2a8d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1ad1a57-772c-4ed1-9d13-c5c4146928d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97c1fbe-a019-4738-a631-0349cfae5e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdd2855-c481-4fa7-9df4-cc855fb5542d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c63279-bb5c-4364-bcdc-80c0a9b6ed8e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13f320c-4d51-4d37-94e3-2172f31066c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2d2cb6-bddb-4d3f-89b1-3b197d5427ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0dd3b0-7144-4cac-94e4-5ab2ec6c3022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e273198-c290-424a-a0d2-1d3f4177f286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02b1a50-a2b6-473e-aec9-6e15b7753c5d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfc8040-6499-4aa0-b723-49518ace1cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c117df2-937b-459c-b912-58085fbcc183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c3fbb2-d826-4a83-97b2-1881c44eef44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50f36e0-32f5-4363-9e99-7badb7c6e6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c577f7-c44b-42b4-8179-16e7c7290cb7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e592230-1d00-42af-bd61-141c6bd968e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "376880e3-4fba-4f40-8207-77dedde9b966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faace77-2993-44b3-8649-e427bc8d43f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b7e81c-2072-4a18-9c00-2fe3b0339184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e144cd-e7cf-42fb-bcc9-d6991df50579",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959107e8-4163-496e-92f7-60b1dc6cb251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73bc633-7e5d-4fed-9423-6161f3bfa788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e02ca9-0368-484c-aafd-97dd80014f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621d86e6-6e59-4cf7-a476-28937dc9b248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bfacd8-1f0c-4c5f-a055-52f717798f4c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d04bfc-2ae3-4790-be11-dedf5e4c859e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53a6522-0063-4a85-a662-6f2548830a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fe904a-fc53-4860-93ce-a1626aab9871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76afc65a-31c3-4882-ba96-3c11b463c35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f76e3d1-68f3-4226-8f94-ed4f30d74ccb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fb50c4-9185-4c99-bf2a-a02c167f408b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b713803-8030-423b-8110-0ec1341a801b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73e06ca-4d4f-421a-99c1-8a00b71a26ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82349425-07ed-4be3-9189-490dd7e8cd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fced4be-21fd-4ea0-8edf-a9f70bc1b337",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19010bd7-b427-4ddc-9aa5-52a2ffbb80b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d4c344-e368-465b-8bc6-8dda41f6363c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fce2cf3-72ef-41d8-bc2f-5a9a36972459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f7cb7d-2083-43d6-ba71-60f85771bc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7206ce3-120a-47fd-972e-24e6141c2cc3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2449b45-e125-4f35-addf-01d02bac6f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "166a6945-3647-4e44-b258-504c3954323f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcd3283-11b2-4e3b-8348-4cb55b56e832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6b0ee6-f334-4766-aba9-ce2aa5c7104e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d8c759-2e14-4eb4-8fe8-cdd28d65dbf3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e254360a-d50c-4278-a5f5-5e7b809333fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3497dd5e-9f95-4e07-9b70-49f33073d1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82a5f87-03fc-4c40-bd9f-6606ce14a8d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ddb710-c7e5-4d55-a06b-5b479728f328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f7a382-cfe6-4499-83db-cc4a862cf608",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f996b486-e652-4a0d-a023-63d9b9574daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c76e6ec3-41cd-43ce-8efc-3bcfc749cd03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c7d88a-c17c-44d6-98e6-5a761398986e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b45cc6a-d70d-45bc-8d3d-feebc0c82212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc9c90d-c0af-451b-811f-a21474132aa4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8c132e-8850-43b4-8eac-a2049a4164b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b74f4b-24c9-4b08-85cd-9156599a02e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4d8dfd-001a-4ac0-84f4-27488cdc3203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5376c6b9-a7d3-4f1b-9ceb-7003af9aa962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462795c3-28a6-4cba-9430-884b836c7830",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538588e2-5472-4d5d-a161-4515177c9fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "589d6da3-9ba2-45a6-a48d-9f8e2dc4f482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae1a434-1d96-474f-8b52-38ea4481f674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ef13ba-91e0-4dc2-8804-df72847c2f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78a8f63-77d1-441d-9bfc-be01590198fa",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9973402-ce02-4bb3-8de2-d34bf2b4f9d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91e18529-9b62-434c-893d-5930719f2939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc6be19-01f8-46ef-9a41-940a3215b256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1c861d-94b4-4cf1-995f-5814186517df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c76ee89-9048-4af8-bdf8-ad83734b97c9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0531854d-83ee-4070-b47c-1d1b7f25350b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd937a71-80c6-4ba9-a67e-793bb0f4d8c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7f7a8e-6e48-401d-b149-d4fd103888dc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc56f6b-c904-4dd4-bed3-b94d94feca89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a9f015-b783-4b08-ae62-93f2622915ee",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb0dccd-0930-4f32-ba28-1c2bd947cdaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e0aeae-7e2f-4cb1-bfb0-94d60fea3c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d19989e-5407-4c7d-8603-58bec526fd72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52da523-d1df-4d24-9dd9-38e9fabffcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f7fc75-3814-4b4a-b874-33ca8bdb5b95",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc78ff9-e115-40c0-8c2b-c3859e7ae5df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b5f96cf-e944-4721-a737-5c2e742007df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03718fc0-b4b4-4f07-a89b-b6bab5d18a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5c00c0-7666-431a-9a26-101f14ee86ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ce6bd7-335f-4d7f-baca-45d621137b2c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da40ef0-21e2-4082-a067-05f21617a371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d856d6e5-8466-4049-98e0-a7f5490ea055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab2ac14-0017-4918-9e47-e9eeaea3cb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12d8ce5-2b1e-4230-b59e-806833e11921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0ffdfc-473b-44f8-88f3-f8b7940264a5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8594541-f3cc-4b73-8986-0d797a5fb2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9d791c-d400-4e15-af2b-2a266a688d47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1084e8ac-b71d-499b-bc8d-da9912c8f94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbb9578-9f23-4bea-82d3-82b9181dece1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb3850a-3895-4d13-8f6c-3187776bc52a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507eb25b-208a-4e06-a015-7a2688553708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee0faba-7e2a-42b5-8b4f-d3d0e1a49005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508cdf39-bae7-487f-9533-7b9d71088c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440d9ecd-2ecf-48d6-8bd0-5b5e9716019b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362e17fa-b738-470c-98c9-24e68c023f46",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510d9a91-48c6-4093-8b8a-2d46ef9dab2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bbb51c9-fa13-44c8-869e-1d886f74c2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54b61a3-a742-45cc-8764-e0c5afa74923",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9deadb3-a7d9-4d41-8a3b-4aac7afaacd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afecdd88-f80d-44b7-8743-25f8f2d3fe91",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdfb3ed-6679-476d-9b4d-a028a2f35f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ed457f-474f-4599-b3e9-baca33fc17b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee453d4-9276-45b4-9295-2c68d7dc63a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7f1230-5e43-4af1-bc6c-903ee97d4f64"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bdc0e95-4fe6-43f4-ac87-071fab993199",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2243e2e1-58f7-4eff-904c-ef4b514a5323"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbb90775-06fe-4d88-89b4-95712137b08e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b19fe45-6ba9-4be3-b84b-d95017d4c146"
                    }
                  }
                ]
              },
              {
                "id": "58a3f1d2-bf4d-4b02-b6f1-a74319b875ba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdfa0b33-6eb6-4b8b-b323-6846406a8ccd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f5ff81-0708-45c0-9968-257266773c05",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6d3463f4-08fe-4665-b3c5-88723f2556d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f08545c-ed69-4c8b-8b34-9a676030131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da77b3a0-fbf4-40d2-be1d-8addd6c13310"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14d76997-8dba-4582-8ad7-e855198cb800",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03b8bc20-7c23-48af-b7ab-ae2fbe8cdfc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36546a35-d9a3-4819-8bb0-f06ea713b8a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d1a85ca-1786-4361-ac9c-e79add7a990f"
                    }
                  }
                ]
              },
              {
                "id": "59c60aa4-b41e-43a5-bfb7-384de1c38c8a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "85b4e473-b08e-4db1-ab57-0212207cb747",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a658ba9a-d94c-415c-b570-d941925c063c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fff52b12-2551-4ced-a046-21b08e28693b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1549f4-e446-44f7-91a1-7b39bb0c432c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2785c442-6eac-44c9-a202-eb6fc77ab25a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "31a6fd91-a03f-4502-aab4-7b99cdbf51fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6885fcc7-e27a-447a-87e9-70f237f2ae6e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "410581fc-e2c9-4738-b47e-1d2708e76c7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d92e38a5-4b87-4ea5-9b9d-80fa777c0ed5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1522774e-ca4c-478d-a7e4-d752a5be9805",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaf9b277-630e-4536-9487-9c21ab745e95"
                    }
                  }
                ]
              },
              {
                "id": "dd0e75e5-8ecb-44c2-8683-137ee2615bea",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bb4c8df-b8f8-4d18-afad-fe3f766960a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c81926d3-24d7-4d4d-bc1a-10b8a377cfff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c33107d-11be-42ff-a913-482736cfe73f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49c25a3e-2ece-4fdf-a3aa-9dd483f309e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0456c11-6876-4ad6-a91c-77e7b0851b26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2a1a324b-7239-48e1-b11b-0ffc27059ba1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0093f478-8371-437c-8098-3524f45ee11a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "014dfc47-4aa1-4462-93c9-a7f5a6f7d3bc"
            }
          }
        ]
      },
      {
        "id": "65bc30f2-743f-47f3-9649-dc4167c32635",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0461d524-4eac-498b-8f9f-973ff850b738",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39ddee76-88a2-4ff4-8adb-4ab62d64cdfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6e94381-ebeb-4415-9f3d-fc737f3bd05a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c9bbbc-38be-4193-96c3-9926379aac3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "be721af7-85c3-4218-951c-61d62996eb1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229e8961-a90a-4f6d-81ae-fa5200239e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47363109-bd3c-4cb6-b9e6-23c5bb626576"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b17c39da-1cbb-413d-9b4e-723f0025011e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "808f9c78-e43e-4100-9f87-d708d5a596d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9c558b7-788a-430a-8571-4a6c0dffa4ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5ae8468-7ff8-494e-a29e-22286a6c866e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45975232-8bfd-45b0-bc62-96c58b521235",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "25f41e2e-e294-425f-abcb-be14d823d45b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ab4d6d3-67fc-4261-ac9e-c6bb0ee7fdde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "553c203b-111e-4149-ab69-e47e13d2ad69"
            }
          }
        ]
      },
      {
        "id": "d048518b-6174-4115-befa-6da8ba8ac9f9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e795ad57-241b-4276-963e-4fdf95400f11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae6b7682-1a60-453f-96f6-3b282ab350a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4547b20-6dd9-439a-b611-86c97c13a0d5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c2f192-9ee9-4883-b2c5-f32ebe1d5ff3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37a63116-7b55-4771-8053-c81d586c3af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa433565-bf35-4486-a06a-6fb3f304de74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9bec161e-c85b-4ed1-bba5-3a8aad7de479"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e12c8ba-5372-458a-9003-dc635f2d8a84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b730164-f4a9-4702-8650-d5dd098cf39b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f092a65-7b76-4509-bd06-8d5a5df98a70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e3e177d-ce18-46ba-ba0b-1e48b6282910"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "155714f9-5fa8-49d9-814a-38fd6aa240be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "231ba818-6c80-4c43-b6f6-095e3a49f714"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "170c78db-6aa8-4d81-9bc6-7d6568c5b308",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4649811a-3d1b-4c2c-89d4-3e006375d75b"
            }
          }
        ]
      },
      {
        "id": "e7936936-a043-47e8-8578-f8c3a3a6f7fe",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8ebec0c7-cff7-4dc8-8944-bdb667d7cca5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0061d244-1094-4359-ac80-1f0c9480e006",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44dcbcfe-7a96-4232-a7af-d2cc1e843d37",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de7d8a0-f0a6-418a-b9b6-0c24913ad664",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "052b7cdf-c3ad-445c-a515-50039ffacacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa9b836-2056-4425-8405-02450853e6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e3a06f8-08a9-4779-8415-dfcb6fedaf7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50d8e185-2ea6-42d3-9d3e-11be492f2292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd14c2a7-a2ae-4449-b370-82dca2dec2c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d50e87a6-6889-4a00-b352-48a3919e2f4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7091e95a-ff0e-44b1-8736-9cc2ea1eab75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fa2ce50-77db-4160-aac7-9d5415e1d883",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95d9f485-0dd1-487c-b832-a6e0e36adbfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed5dbda2-ce1b-4dd5-af3b-b232530a833f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ccc759c5-4569-4e31-8a45-ee0d7abc1178"
            }
          }
        ]
      },
      {
        "id": "e9ea8f42-7ac8-4785-ac1e-d5d14981f4fe",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7ad8c81-dc07-41bb-849b-38af9405c405",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4faa58ce-b2d5-4fc8-a9cb-f37485fa4f1f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "94e23f36-b8f9-4647-93ba-37606b27a4a8",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a766eeee-456b-4ee5-b925-48942d63b432",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af6f02bc-3228-4823-addd-7f89f9c79b46",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 76.39682539682536,
      "responseMin": 8,
      "responseMax": 765,
      "responseSd": 82.75567207003506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715042159138,
      "completed": 1715042187449
    },
    "executions": [
      {
        "id": "b6f118bd-3ffe-4679-a0c5-3548c4c243c2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "681a49ef-a0d5-4c4f-be23-08a6ec79ff5a",
          "httpRequestId": "7426aa6e-d3f0-4953-a16e-6e8c1a453184"
        },
        "item": {
          "id": "b6f118bd-3ffe-4679-a0c5-3548c4c243c2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cb9de142-6803-4c0e-9e5b-e5eb89a536d9",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "91239e52-4379-4b65-aa3c-3596d003937c",
        "cursor": {
          "ref": "962cdc25-8ebe-4a21-a8fb-ca1a3323ce2e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3b84c7b4-ba23-480f-92f2-f7ff8604df9d"
        },
        "item": {
          "id": "91239e52-4379-4b65-aa3c-3596d003937c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "71a43103-8c36-41ff-ba6d-ebe8b475e868",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "eea562e7-0003-43a7-914c-73528b7fb00a",
        "cursor": {
          "ref": "4f030335-c077-4efb-a6fc-e40f704ad66c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d9d1a32-f432-44b7-91bb-9bf19531ff6f"
        },
        "item": {
          "id": "eea562e7-0003-43a7-914c-73528b7fb00a",
          "name": "did_json"
        },
        "response": {
          "id": "33bcf1df-6607-4c00-91d5-4a6e96cfcce7",
          "status": "OK",
          "code": 200,
          "responseTime": 408,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffd4bb5-ffb9-48a3-8792-bfec430e9286",
        "cursor": {
          "ref": "325b4488-0040-43e1-9391-d9c76aa38ac4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92f7a969-625f-4de5-adfe-10f9c5903dff"
        },
        "item": {
          "id": "3ffd4bb5-ffb9-48a3-8792-bfec430e9286",
          "name": "did:invalid"
        },
        "response": {
          "id": "72a11fa8-0291-4d6c-84e8-a4acac755128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffd4bb5-ffb9-48a3-8792-bfec430e9286",
        "cursor": {
          "ref": "325b4488-0040-43e1-9391-d9c76aa38ac4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92f7a969-625f-4de5-adfe-10f9c5903dff"
        },
        "item": {
          "id": "3ffd4bb5-ffb9-48a3-8792-bfec430e9286",
          "name": "did:invalid"
        },
        "response": {
          "id": "72a11fa8-0291-4d6c-84e8-a4acac755128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b7ec34-d105-4ec6-a3dd-4f61eafb2eae",
        "cursor": {
          "ref": "1daa776a-5d19-4131-9165-2430cbd63449",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9c5ce80d-8ef7-4362-84b2-e75b06dfdf98"
        },
        "item": {
          "id": "b1b7ec34-d105-4ec6-a3dd-4f61eafb2eae",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "52ce3dcd-d310-4ad0-9b09-33ac6a6cbc6d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 243,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9383a8-7460-4eab-874e-82f7a2120d5d",
        "cursor": {
          "ref": "c7ec9bf3-b3e1-4d77-91d0-c3d2686ab594",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aa9417d9-d7da-425b-afe4-e0944531232f"
        },
        "item": {
          "id": "4e9383a8-7460-4eab-874e-82f7a2120d5d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5f1495a1-03b6-4057-b8bf-31565c6aae50",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45039dd9-42b7-4d62-8d97-f4cf6c384356",
        "cursor": {
          "ref": "137855fe-6d79-456c-b51c-1d79c21e1fe7",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1a5f7f08-d5af-4322-a685-cf5afbb5b069"
        },
        "item": {
          "id": "45039dd9-42b7-4d62-8d97-f4cf6c384356",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "15d2deb9-1236-44f9-837f-3745c01c14d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c51905-0516-4398-8e3c-d33271c4d302",
        "cursor": {
          "ref": "9b6bb0bb-72a4-46c3-90f0-1428ac0b0e41",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6c68aae8-b87b-40d9-9c99-5d1b8782366c"
        },
        "item": {
          "id": "82c51905-0516-4398-8e3c-d33271c4d302",
          "name": "identifiers"
        },
        "response": {
          "id": "3372da49-461a-49f3-b0ca-6b003b57b9a0",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124fd672-67d2-487c-a08b-c1ead25551c9",
        "cursor": {
          "ref": "0eb9308c-f0ae-494c-b214-2c7db3ea65e8",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "735d6627-fa94-4376-90d4-e8532d31d452"
        },
        "item": {
          "id": "124fd672-67d2-487c-a08b-c1ead25551c9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "133d6741-72b2-4625-a6bb-9008f12fb9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a229c2a-2237-48eb-8cc1-5dadecd3757d",
        "cursor": {
          "ref": "962b7026-051a-4807-ab68-6999e08c6b0d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "55700fd3-77fc-4ecd-8fe7-074bc1801ea2"
        },
        "item": {
          "id": "9a229c2a-2237-48eb-8cc1-5dadecd3757d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "16eb81f6-1ec6-4f2f-b22d-eccf019fdbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b242a3f3-d9cd-4486-a565-4efd37788895",
        "cursor": {
          "ref": "eb0319fa-44f9-4d8d-9a20-2e074925ede4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b9a04abc-0506-4ed3-8de7-092e7c4e2216"
        },
        "item": {
          "id": "b242a3f3-d9cd-4486-a565-4efd37788895",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "47ad2f36-541d-4688-8156-a2e9e05792b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a2ee2a-ab50-40af-ac32-41701e5a41c7",
        "cursor": {
          "ref": "360da383-16c8-4419-a566-d3ca46c990bb",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2f517436-9954-461a-b939-2e94caa0dcde"
        },
        "item": {
          "id": "94a2ee2a-ab50-40af-ac32-41701e5a41c7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4ab0967f-29d7-4d6b-bdab-fdca461dbec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34de0a69-bc2e-48c3-a44a-727356aaad06",
        "cursor": {
          "ref": "82625670-69c0-414b-91e0-96671d840c82",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05538d6e-f843-456c-93f7-0ef5fec1edb2"
        },
        "item": {
          "id": "34de0a69-bc2e-48c3-a44a-727356aaad06",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f3fd4221-d988-4626-ae22-aaf5a7ff749e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7887d2b3-954b-449c-aaae-b4e3fb68c88e",
        "cursor": {
          "ref": "b96aa111-4648-4d82-938f-a4d48851ff4c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c61206e7-a993-490b-bba2-ab9e84b044a9"
        },
        "item": {
          "id": "7887d2b3-954b-449c-aaae-b4e3fb68c88e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a43ab416-8f13-4aaf-9cd5-70b837c1d68a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b581ed0f-5eec-4cdc-b956-ebdd71fdbe97",
        "cursor": {
          "ref": "1de51982-c6c3-4d42-b2f2-529369901df5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a9257a7f-475b-4e19-b928-d8a624530ca5"
        },
        "item": {
          "id": "b581ed0f-5eec-4cdc-b956-ebdd71fdbe97",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4fe105a5-4961-439c-a5db-1b6eec4f6443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42257521-6284-446b-81fc-dd24b5300942",
        "cursor": {
          "ref": "e17bc66a-6590-4e94-a1fb-e64ea5631413",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a431d6c-d135-409e-933d-c7a0b56efca6"
        },
        "item": {
          "id": "42257521-6284-446b-81fc-dd24b5300942",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1b915cd4-2b98-41c8-aa0d-70e6be220ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a43bae-b290-4ea6-9763-2291a47a84e6",
        "cursor": {
          "ref": "9396a09d-c034-4907-8a9d-7d4501bdf69e",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aa91fb14-8fe1-4350-9078-9e9c2ddbacb5"
        },
        "item": {
          "id": "93a43bae-b290-4ea6-9763-2291a47a84e6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cc9429e2-2142-4dc7-9613-6914b521ea53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827be5c7-5a99-48aa-9389-0ca10d2b561b",
        "cursor": {
          "ref": "1ba8adb7-b200-4f76-b7bb-1d854fb0dcd4",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "454e7a9b-bbdb-45d2-9612-c9b851c53842"
        },
        "item": {
          "id": "827be5c7-5a99-48aa-9389-0ca10d2b561b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6084e47b-f6bc-4fd3-93cd-23e05b25b0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4a1c84-7e0a-496c-893e-bbc111d0493f",
        "cursor": {
          "ref": "9920251e-1fe4-4e35-ac83-9be6c08d0f2e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "de00b0c2-fdf6-4fba-86a5-96bdecc017b0"
        },
        "item": {
          "id": "6a4a1c84-7e0a-496c-893e-bbc111d0493f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1a34c5ed-d027-4557-861a-a842cf4ea883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91557a7f-613f-470e-b0bc-88a80a09557f",
        "cursor": {
          "ref": "3640b527-473e-46fd-915d-65fa2fa60de3",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7383a461-2e65-4e7d-ab2b-fcb8db4935bc"
        },
        "item": {
          "id": "91557a7f-613f-470e-b0bc-88a80a09557f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9eff4d3f-460b-4424-8814-ce34de1ef58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06788ee-1ba4-4326-b7b6-4fbab6e9380b",
        "cursor": {
          "ref": "fb2e0520-4aef-4ed7-8093-71106bee777a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ad3c9c8f-b154-4845-bc0f-837b46a802c4"
        },
        "item": {
          "id": "d06788ee-1ba4-4326-b7b6-4fbab6e9380b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "582c9a01-c2aa-44c0-8459-781b9d5902cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6db2c6-460f-4e75-b108-587ca28b8a15",
        "cursor": {
          "ref": "0d8389ae-0071-496d-93a4-852da5abb9b9",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b529fc2e-082b-4b81-84d4-9403d67b4155"
        },
        "item": {
          "id": "ac6db2c6-460f-4e75-b108-587ca28b8a15",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "79b64bf6-e5ab-4cf5-95ef-15bb4ebab2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2603f901-a456-41f8-a2a3-dc6a5496db21",
        "cursor": {
          "ref": "585c6a74-e815-4cde-8071-2bc5ec35e930",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1ff2b037-4399-4e07-8694-0e84e0fe9903"
        },
        "item": {
          "id": "2603f901-a456-41f8-a2a3-dc6a5496db21",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "892f0fce-e772-4cef-ac96-b106a64da71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adbcb0d-cafc-4f0a-afdc-55f86801d83e",
        "cursor": {
          "ref": "ac0f2727-4189-4720-a932-7046d57dc365",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a68ff43e-e518-4322-a930-54b78af1d2e0"
        },
        "item": {
          "id": "3adbcb0d-cafc-4f0a-afdc-55f86801d83e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d2cb2bb4-b364-46f4-b9e1-9fdf97f57e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750688da-78b5-4e1e-abbe-0fbc7c268b5c",
        "cursor": {
          "ref": "e089f8d9-3b10-42a3-8a53-2ce271d5e849",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "203142ce-945c-434e-9fa8-4ba2df241911"
        },
        "item": {
          "id": "750688da-78b5-4e1e-abbe-0fbc7c268b5c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "44e229ea-8a18-4fa3-b188-5f9a6aabe32e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6827bea1-db0c-4a1e-ae3c-4cf200739807",
        "cursor": {
          "ref": "ba5320e5-5913-42aa-b0f1-565c86c6d1cb",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bfc1f53c-e359-4f61-8185-67b914cf2469"
        },
        "item": {
          "id": "6827bea1-db0c-4a1e-ae3c-4cf200739807",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fcaec398-70f9-42d9-98ff-d9d13d6ecad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40846905-f80d-4407-a3bf-dc5ea7353101",
        "cursor": {
          "ref": "a27581e3-4dd5-49a9-926f-811d4fa765ed",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b26b9efa-a322-49b7-9c24-8d4985ce3af6"
        },
        "item": {
          "id": "40846905-f80d-4407-a3bf-dc5ea7353101",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3e2f5c6c-e396-41c9-9e02-53b32b72b3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b4fd6a-97f5-4dc9-b41f-9637312aec83",
        "cursor": {
          "ref": "72df54ce-ddcb-42da-b432-f5917bedf4d5",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "989c3c0a-799c-4105-9fca-ad22275aa739"
        },
        "item": {
          "id": "56b4fd6a-97f5-4dc9-b41f-9637312aec83",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6038cf06-c677-44ac-b931-bbe15f77167e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bee6e49-0737-4cda-a49c-bacfe3eb5120",
        "cursor": {
          "ref": "9c074b7e-ec4f-4f20-af90-d882503b6e60",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "229f46ff-b695-414f-bc10-c4979f5c6f20"
        },
        "item": {
          "id": "2bee6e49-0737-4cda-a49c-bacfe3eb5120",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e679d552-4939-4744-af41-66e9d3c0bd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65235fe2-5f1c-41fe-a81d-5855638f5c7e",
        "cursor": {
          "ref": "692f866e-45da-447b-9e01-571c67533157",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7117847e-7f6c-4782-8ab9-e8744367796f"
        },
        "item": {
          "id": "65235fe2-5f1c-41fe-a81d-5855638f5c7e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a3b79296-d14e-4a81-8356-6464b3fb227e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf390933-39a8-42aa-856a-957c5e52cf63",
        "cursor": {
          "ref": "cac17a08-9885-4f99-8522-baa8a38c9941",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5d5688b1-38e9-4e55-9e53-c2dcd626ae2c"
        },
        "item": {
          "id": "cf390933-39a8-42aa-856a-957c5e52cf63",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ffe68ebe-0987-46cd-aaf3-a1fd25d7218e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009b89c3-9caf-442f-88ce-5594adafa772",
        "cursor": {
          "ref": "027206b1-ecd1-4557-b1c1-0759e176a4c9",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2bc624e5-9c5f-4236-af34-bcb900d820db"
        },
        "item": {
          "id": "009b89c3-9caf-442f-88ce-5594adafa772",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "df0cd877-73b4-444c-a473-c6cdec5c8491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f972d72-6f5c-413c-89e3-4272d0c914b8",
        "cursor": {
          "ref": "03429354-a7b5-4dc5-885d-9e75997eb117",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dc24ddb2-672a-4d19-9a4e-eb1b7a65b988"
        },
        "item": {
          "id": "9f972d72-6f5c-413c-89e3-4272d0c914b8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9aedb5ae-f948-4768-8ab8-4dd307b57cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22caf296-35a3-4791-b11b-34a74ee27a45",
        "cursor": {
          "ref": "6e5acdfb-d1b4-4cc4-a569-1e771d4b6942",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "96486e27-d5c3-48ba-bb75-e3f2feadbe12"
        },
        "item": {
          "id": "22caf296-35a3-4791-b11b-34a74ee27a45",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8f6352fe-f36d-4e9f-8949-2d765b19bd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8024d4c-e64b-4550-a16a-7dbd06aff7d2",
        "cursor": {
          "ref": "c7ad9c66-52f7-465a-bd87-812bcfd6a3cb",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c86815ff-c624-48f8-ad3e-1bde11d77957"
        },
        "item": {
          "id": "a8024d4c-e64b-4550-a16a-7dbd06aff7d2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8e469b79-efe1-4ba5-b420-391a3ac00836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d322588-8565-4999-8ad8-5308fdba66f5",
        "cursor": {
          "ref": "25c5a3d5-e0b2-4dcf-98a6-955ca3898ecb",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b1772eed-f845-46d6-b93d-2d538c91fbc1"
        },
        "item": {
          "id": "8d322588-8565-4999-8ad8-5308fdba66f5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f68ab4f-e096-4f20-b616-f5439d6d901d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59caecf8-4b92-4c10-8536-db6b57835709",
        "cursor": {
          "ref": "7cbf7717-f91a-4277-85cd-f6bf4e7bdc1a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1aa9e77c-be53-4285-a4d7-8200578ee63d"
        },
        "item": {
          "id": "59caecf8-4b92-4c10-8536-db6b57835709",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e8f67c60-533b-4745-86d4-54fa77da2d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382ffe33-e65f-4f9e-9bde-bfe34c8d1d28",
        "cursor": {
          "ref": "32186244-d26f-4c83-8f33-2677e761c458",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8393c85f-797a-472e-bc69-aaffa8d9c3cf"
        },
        "item": {
          "id": "382ffe33-e65f-4f9e-9bde-bfe34c8d1d28",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e269cf92-1d2b-4689-ba0d-08486868f8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c320d06a-3340-4870-9d16-47d077349155",
        "cursor": {
          "ref": "e24d66c5-3ce9-44c8-87bc-2b455381649c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "26e8abd4-74ab-431d-a03b-4748750a1ea3"
        },
        "item": {
          "id": "c320d06a-3340-4870-9d16-47d077349155",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c2f756c0-92c6-4bbd-866c-03b29d736038",
          "status": "Created",
          "code": 201,
          "responseTime": 765,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d915edba-a9c9-4d72-b82c-0d8baeb9c75d",
        "cursor": {
          "ref": "63b437f4-b0f7-47b8-8d89-526caed0ef9c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2c481c8d-1403-4dc7-bb8a-68a3895088a1"
        },
        "item": {
          "id": "d915edba-a9c9-4d72-b82c-0d8baeb9c75d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "68a61026-09b5-4f0a-bb42-086c3f582ee9",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b2a87303-25fe-47f0-b3dd-bf6c04a6ab50",
        "cursor": {
          "ref": "c89bfd92-a78f-47d1-a057-b2b72000632a",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "88c92615-b51f-428d-ae26-903352e55f27"
        },
        "item": {
          "id": "b2a87303-25fe-47f0-b3dd-bf6c04a6ab50",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7c1950ac-9aad-431e-bd4e-ae114b9776e9",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a51d1fac-3070-4d3f-b4f5-56eab06ad403",
        "cursor": {
          "ref": "f214908f-c2f0-4aa1-a855-b210eb22757a",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1b708a78-89e7-4207-8745-1e999c8ce788"
        },
        "item": {
          "id": "a51d1fac-3070-4d3f-b4f5-56eab06ad403",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d787f50d-6fdd-4a26-9d97-1c57cab42f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c245bb2-a772-45d0-b46e-a179013b03e3",
        "cursor": {
          "ref": "9ec84780-9822-4493-9b59-f638ab859861",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f927a8f4-695f-4dc6-88e8-e591fbe30a9b"
        },
        "item": {
          "id": "5c245bb2-a772-45d0-b46e-a179013b03e3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "68d91e2f-9d3b-4e4f-a630-e4e25a0e47c5",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "75937443-47f4-48b6-b2e7-057937b0f829",
        "cursor": {
          "ref": "041dd9cd-2698-4dbe-89df-f625872514a8",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "838fb90b-b059-4f29-8378-43b9eac00971"
        },
        "item": {
          "id": "75937443-47f4-48b6-b2e7-057937b0f829",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "05e5a1a1-5866-4dd9-9677-1e368bb3f66c",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c57f78d0-b9cf-4180-a043-86ed7887461f",
        "cursor": {
          "ref": "4515f559-bed9-45a7-bfc5-e2b1949544d5",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "212011f3-b3a1-4274-831b-2d2603a36f8e"
        },
        "item": {
          "id": "c57f78d0-b9cf-4180-a043-86ed7887461f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ffeccc75-bdaf-4040-a549-8b83475e82b4",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fcd74351-101a-4241-8307-51520aba046a",
        "cursor": {
          "ref": "5284d221-2fb7-40fd-a225-81433a7a55f7",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "43c9af99-f722-42fe-8213-554c077a4a0f"
        },
        "item": {
          "id": "fcd74351-101a-4241-8307-51520aba046a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f8967078-a0d3-4d3e-ab6e-c893f6915ce1",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "11d3689e-adf9-4a65-a918-86b637d9c055",
        "cursor": {
          "ref": "cd09f946-0647-446b-b47d-9e87e2f09c09",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b26b971e-a4a1-45fd-8610-600fcedf0642"
        },
        "item": {
          "id": "11d3689e-adf9-4a65-a918-86b637d9c055",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3c77234c-af4e-4b79-9661-55ec0e0896e6",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4c70d0ef-28fe-4ba9-9849-60f95f7e5412",
        "cursor": {
          "ref": "11f63170-5f7a-4c1f-b4db-8cc5fe28a925",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "df7e83c9-a912-49b5-9d99-f122d59c1fdb"
        },
        "item": {
          "id": "4c70d0ef-28fe-4ba9-9849-60f95f7e5412",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6f718796-43e8-41bb-9950-1b89d08ea5f0",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7e4488a6-0edb-4a5e-9b75-d7f9531dcef1",
        "cursor": {
          "ref": "98e77932-028d-4c43-bca1-56be3a3f622e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b8ed8d8a-3e59-4f6a-a45c-678ec22b8093"
        },
        "item": {
          "id": "7e4488a6-0edb-4a5e-9b75-d7f9531dcef1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b3cfb586-2064-4a7b-a458-41dc810ddb03",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8f5adc74-cc61-4594-8bc4-71cd31b378d5",
        "cursor": {
          "ref": "3bc3363f-4649-49a0-86e0-4fb685bb56d3",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f80e48af-adf5-496f-a62e-dcd5465da264"
        },
        "item": {
          "id": "8f5adc74-cc61-4594-8bc4-71cd31b378d5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d0882fbe-6342-45bb-a3f1-6c5e7ebce248",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3a6b06a6-ac8b-45a6-acda-a5106a116aee",
        "cursor": {
          "ref": "46dedc2d-2e82-4fc8-b31f-9dbacc14f4b2",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "72b28923-465e-42b1-a295-c1c9563483f4"
        },
        "item": {
          "id": "3a6b06a6-ac8b-45a6-acda-a5106a116aee",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f270f948-9ba1-48d8-ba25-ee535f75fe84",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e366a38f-3312-4e84-91fa-bc5797be409e",
        "cursor": {
          "ref": "23bdaa80-85ae-4ed2-adde-87eab9d0fdd6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8813b404-c3f2-4bcb-af4e-1c855cf75dbe"
        },
        "item": {
          "id": "e366a38f-3312-4e84-91fa-bc5797be409e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "38172d4c-9ff4-4699-ae93-e0204a5eae72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131eda56-2611-48c0-bdc8-027dba16bea0",
        "cursor": {
          "ref": "88417a73-e6f4-4300-aa1e-1e580545cc0b",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d0609207-6b0f-4849-af32-ad5699502a75"
        },
        "item": {
          "id": "131eda56-2611-48c0-bdc8-027dba16bea0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e743cdf5-29fe-4607-ab87-0763af8b6e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca895498-a29c-4fbd-b0f1-416b75313a99",
        "cursor": {
          "ref": "e8952f90-1a2e-4a68-b95d-d4da052898b9",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "74fee758-e7c8-40e3-865f-10819e839d7c"
        },
        "item": {
          "id": "ca895498-a29c-4fbd-b0f1-416b75313a99",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d4f7f5ec-d674-4dbf-b44b-08f32dab3452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3078b6b3-5b18-4d56-9aea-6d0a943bdbdb",
        "cursor": {
          "ref": "835a68fa-9f2c-4d7e-bc0e-ba5e055d28c0",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a428b174-8f9a-4d3e-a93d-bdeabf58b55d"
        },
        "item": {
          "id": "3078b6b3-5b18-4d56-9aea-6d0a943bdbdb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "782a911b-a60b-4bf9-841f-f3c97301b6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f30c27-dba5-47d3-ac07-08d309613049",
        "cursor": {
          "ref": "59933bfa-5019-4542-9bbe-88fbd134a063",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2c082fb8-7a8d-4229-9c21-480c785c597a"
        },
        "item": {
          "id": "b1f30c27-dba5-47d3-ac07-08d309613049",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b9a0b6b3-e36a-40c4-977a-5926d2240899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae56217-6c93-474d-80bb-ce59c5875200",
        "cursor": {
          "ref": "f9fbe869-a7fb-49b9-b06e-81616745d2f6",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "23fb3830-3a58-45d8-a880-f1cbaafe7241"
        },
        "item": {
          "id": "2ae56217-6c93-474d-80bb-ce59c5875200",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d2581cc0-4e7a-4105-97fe-7ca9070c7231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cc8be9-1a4a-4aa6-b6f0-c4fb54b2464a",
        "cursor": {
          "ref": "bc2d13b5-d869-41d9-a16e-453a90337560",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "39acdf77-0fb8-4716-bb2d-64280b4e397e"
        },
        "item": {
          "id": "48cc8be9-1a4a-4aa6-b6f0-c4fb54b2464a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ae0a33d4-c300-4923-8322-2855a217890d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea21d70d-1ced-48d4-9c68-01298503858e",
        "cursor": {
          "ref": "523c531e-0bfe-48e3-90f2-af5444518626",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5dde9b28-0ff2-49c2-b085-ce0cc3eada2b"
        },
        "item": {
          "id": "ea21d70d-1ced-48d4-9c68-01298503858e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fcb1bbac-e103-4de8-9564-191240b37900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9a8a75-0362-4a3c-9013-8b19fa28a178",
        "cursor": {
          "ref": "bdb5d376-d2dc-4375-a8c6-79dade6a99bb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8dae1e42-7f0e-4b85-81a7-dbb48bbd7cc7"
        },
        "item": {
          "id": "1f9a8a75-0362-4a3c-9013-8b19fa28a178",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f33959ce-109a-4d5b-ba03-2eefcfdedd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734fa948-021d-49f9-a908-e98988ac3562",
        "cursor": {
          "ref": "24dfd0f6-4401-4724-af99-8be799a621a5",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "71172360-1166-4dd4-a69c-d22f5bd1a2c3"
        },
        "item": {
          "id": "734fa948-021d-49f9-a908-e98988ac3562",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b330245d-83dc-4644-9ee5-37b1ff1948ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5c185b-b278-4edb-ae51-01d7048d855f",
        "cursor": {
          "ref": "dd2f0ac9-50cc-467e-93ed-1e7433523bee",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "264f7627-1897-48f0-9a30-131901ce8168"
        },
        "item": {
          "id": "3d5c185b-b278-4edb-ae51-01d7048d855f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "21c01a25-ed5a-4a8a-8e09-1c7ab3c8d1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df72aa33-8380-426d-81d5-89ae8b0daeaa",
        "cursor": {
          "ref": "d3d98718-e7ca-4a7b-97bb-81a0c687d14b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d6f4950-9b53-4b23-86c8-3b36aa84da7a"
        },
        "item": {
          "id": "df72aa33-8380-426d-81d5-89ae8b0daeaa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8860892f-1e44-47c0-80f2-cc1eafa18d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5566ec6a-fec8-475c-80bf-552241158e09",
        "cursor": {
          "ref": "fb58511d-badd-47fa-a2b4-6a5f21a1d936",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f63d2654-fdc1-4169-abe1-0717dda2cb1c"
        },
        "item": {
          "id": "5566ec6a-fec8-475c-80bf-552241158e09",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "515c433f-d98d-4643-9f6e-98a9c2932061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa081e9e-71d3-4c48-8b28-aed1934b4b91",
        "cursor": {
          "ref": "704eb1e0-0ff6-45ef-9e85-2413124cf1f9",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e0c18596-2047-4af2-9640-da330bdd6560"
        },
        "item": {
          "id": "aa081e9e-71d3-4c48-8b28-aed1934b4b91",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4367b6d3-fa6b-42a4-9079-e9afcdc03034",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "39ee098e-c78b-44a0-9478-a5781dc3c483",
        "cursor": {
          "ref": "fea1a74c-1915-4f86-aedd-0c6b59d6686a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cb1633ce-5f5f-408d-b8d8-01c28c5cf603"
        },
        "item": {
          "id": "39ee098e-c78b-44a0-9478-a5781dc3c483",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "25a166f7-f84e-4fb5-bf28-72d12461f8f7",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "27aea2ee-f92b-40ea-824d-1cc010fb8784",
        "cursor": {
          "ref": "dc9e8a05-8aa2-4630-9fc5-53ea63eaef95",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44e3ce29-12c0-41d9-b8cb-5ac98e2fbaa6"
        },
        "item": {
          "id": "27aea2ee-f92b-40ea-824d-1cc010fb8784",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bded4b49-5827-4fd9-b3ce-f434ccb65f62",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6649eadf-4c52-48ff-a577-16868bb2d471",
        "cursor": {
          "ref": "d21e4c12-92bf-4c7e-bc00-22c0efc564db",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5a95d414-d4cc-4724-ac5a-87d5c1999cb1"
        },
        "item": {
          "id": "6649eadf-4c52-48ff-a577-16868bb2d471",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4e0c76ca-5e8b-4f27-b563-e47c3291d92b",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a922a813-b769-413f-854b-cdc63662ea3d",
        "cursor": {
          "ref": "c8148d98-4ee9-49d9-b7d7-643cd960f90b",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e2e629cf-ce2c-49da-bb07-44c5e353a366"
        },
        "item": {
          "id": "a922a813-b769-413f-854b-cdc63662ea3d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d4190d6c-7978-4f3a-ad43-8334c18443af",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cc719390-be94-4c6f-ba91-20792c0e6ca0",
        "cursor": {
          "ref": "d2b6fe90-6371-41f0-aa0e-3c6cf25d6de6",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7aece1f9-6a29-4347-8bf7-5d03770f029b"
        },
        "item": {
          "id": "cc719390-be94-4c6f-ba91-20792c0e6ca0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "04055c7f-111a-4fd8-8cbd-9ba82849d760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149675cf-a538-4646-9f39-b453aa8740d3",
        "cursor": {
          "ref": "f4fbf899-e704-4a5c-83fe-efadb7ba4f5b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7eee59b6-6ab9-41ac-b89c-95bd9fc68c90"
        },
        "item": {
          "id": "149675cf-a538-4646-9f39-b453aa8740d3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "96601f94-489a-4ded-b7fd-222c92246157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee577cf7-6a61-44ec-add0-eee21bcc95b8",
        "cursor": {
          "ref": "21cee0cf-8d8f-43b5-907a-3c8a8041c115",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2ad2a334-78b9-400c-8bcf-2ec22d695e1e"
        },
        "item": {
          "id": "ee577cf7-6a61-44ec-add0-eee21bcc95b8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b023cbd9-7169-4c76-9b5c-5a9c77d6fa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd1f030-8d2b-4664-8296-a47229cea3ea",
        "cursor": {
          "ref": "455924ba-ffeb-46bc-8310-1fa94da58dd6",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9873538c-a946-4747-adf5-1653671838b4"
        },
        "item": {
          "id": "3fd1f030-8d2b-4664-8296-a47229cea3ea",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3e213687-5b2d-4f21-8495-f5d06981d80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af57c93-afe9-43c6-ab93-44ed2c87d51f",
        "cursor": {
          "ref": "3360921b-633d-4e9c-99fb-8a0d79e0ddae",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "be41101f-ce4a-4acc-bd6c-0d98fe30cd57"
        },
        "item": {
          "id": "6af57c93-afe9-43c6-ab93-44ed2c87d51f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6daa11e8-513b-47a3-b534-c90e1ab481fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a684bd21-a1c0-4c63-8c24-f5585d00111c",
        "cursor": {
          "ref": "0c37399c-ee9d-4168-86de-4cba64872e7e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ea3dd206-aa46-4eb6-aeb5-559a30a423e3"
        },
        "item": {
          "id": "a684bd21-a1c0-4c63-8c24-f5585d00111c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6be84486-e299-46ac-81e8-562d2a4f265e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2640c3a-e1ab-40c1-a1c2-c249551ade57",
        "cursor": {
          "ref": "e5388c14-9b55-4b18-a943-0f65f6231ce7",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "49eb1e7b-0118-46d8-ab98-a0f64d22797d"
        },
        "item": {
          "id": "c2640c3a-e1ab-40c1-a1c2-c249551ade57",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "61c97b6e-73f3-4bc9-913a-12525a256830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235012a9-0c60-4331-a2f0-7d9c894cab41",
        "cursor": {
          "ref": "afdde20a-479a-4c9a-85fd-97cabeafaae8",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1e4c4b1d-89b4-4292-87bd-9f7f8a28a13d"
        },
        "item": {
          "id": "235012a9-0c60-4331-a2f0-7d9c894cab41",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fbf2debd-2740-47cb-9eee-93e026ea9ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf323f0-ce6b-42f3-847c-67eacdaf941e",
        "cursor": {
          "ref": "c2b30044-4119-4392-bc73-f135208924a4",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3f0f9d25-b0e8-40f3-8d53-2eb9584c0f38"
        },
        "item": {
          "id": "bbf323f0-ce6b-42f3-847c-67eacdaf941e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4568895f-f622-4e37-b397-bf9edc1a8adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364718a6-5e18-44c3-a128-1e7b00c69be3",
        "cursor": {
          "ref": "a704044a-7865-40d3-a393-5ecf88d76a1b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7e4cfb4a-b429-4e1b-9e8e-3fb86192b163"
        },
        "item": {
          "id": "364718a6-5e18-44c3-a128-1e7b00c69be3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ca8a9908-ca70-4179-96e8-36dde79d4b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1419a073-a8c6-44cd-9cc8-2922ec4ceec4",
        "cursor": {
          "ref": "f4f70b45-3341-4bc5-bb17-a724be3d52c1",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a6132492-9fa1-4472-85d0-c488b45415bb"
        },
        "item": {
          "id": "1419a073-a8c6-44cd-9cc8-2922ec4ceec4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "774841e3-80ac-47b3-82c1-217dd484f240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291ca37b-f4dc-4dc8-85df-74fe6d625f78",
        "cursor": {
          "ref": "b07fa978-5bd5-444b-847c-f81a4e03575c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3ab41938-fd82-4d34-abd7-7ddbcfb4e2a0"
        },
        "item": {
          "id": "291ca37b-f4dc-4dc8-85df-74fe6d625f78",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b97d9708-5c7b-40f1-8e8b-7ba85ebd56a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b20173a-2570-4b73-9de8-b9374d7f5923",
        "cursor": {
          "ref": "38527ae4-78aa-411b-9517-3aa97340d8b6",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "342b079c-a3d9-4551-8443-ebe2cfd70279"
        },
        "item": {
          "id": "6b20173a-2570-4b73-9de8-b9374d7f5923",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e1a9524b-e7b3-4d2b-8b76-627e50e12c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b10c1c-c55b-437d-a85a-5ab9f61907b7",
        "cursor": {
          "ref": "2aca667b-8fb9-4841-9e2c-071d87ed1ffa",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "798abf32-fb75-402b-b525-2204757a7445"
        },
        "item": {
          "id": "80b10c1c-c55b-437d-a85a-5ab9f61907b7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "da81291b-56a0-45f7-aa87-552f27e3bc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc82756-20de-498b-9822-5772995a8480",
        "cursor": {
          "ref": "6630c6c4-651c-4bdf-aaf8-f69bb380bb50",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3893f875-8f72-4dfa-a97b-bead2340f300"
        },
        "item": {
          "id": "fcc82756-20de-498b-9822-5772995a8480",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7a88fb8c-c96d-444a-a648-7de89752cc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112e2979-3355-4bbb-868e-23a614933736",
        "cursor": {
          "ref": "9bcecfea-fd28-4cca-b2b9-3431201d90b1",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d487b248-7c57-468e-bd25-236717479cfe"
        },
        "item": {
          "id": "112e2979-3355-4bbb-868e-23a614933736",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a3b6dd45-2148-4b46-abbd-87b3b7a2e91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52671d9-1181-4832-b275-18224a9a75e1",
        "cursor": {
          "ref": "433a7617-86b3-4ad8-8568-434194b0412a",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7bd47545-54fa-49c7-97db-3e1c7205f68f"
        },
        "item": {
          "id": "f52671d9-1181-4832-b275-18224a9a75e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0919ab3b-6de2-437e-8e53-44fe1e36111a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5273793-449d-4eeb-bf2e-7c429bf6a52c",
        "cursor": {
          "ref": "490240a0-a340-4d9e-b7b2-d312a21c753c",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "354e5e65-7dc7-4e52-a6e5-642ee6393a58"
        },
        "item": {
          "id": "d5273793-449d-4eeb-bf2e-7c429bf6a52c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cfccd779-76d0-4822-b183-8fdaed9dcec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6b288b-1529-4872-bdcd-935b9cd72487",
        "cursor": {
          "ref": "ef111c4c-7579-4bf3-ad93-ff3b99058f2e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8b0aa117-e022-4664-abe2-c7389f186a48"
        },
        "item": {
          "id": "fa6b288b-1529-4872-bdcd-935b9cd72487",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c90b9d75-e339-4870-86f5-1c1ebfaa6f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa7c9b3-ae0a-433c-9b2b-11eec5fc457b",
        "cursor": {
          "ref": "59b5a3ec-b5e1-4924-8a84-2c3f59f1f104",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ea6b122a-cab0-4e95-96ef-4d85bef2acdb"
        },
        "item": {
          "id": "eaa7c9b3-ae0a-433c-9b2b-11eec5fc457b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "75c5bed0-eeb6-4893-b251-bec5f2b9f40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39de3782-4eeb-418e-be1f-3cf07928d8c9",
        "cursor": {
          "ref": "3e6b9e61-a3e2-4f95-847c-7c4ab8f0c742",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d9f2a9d8-13ec-428f-8b00-373bc4c08832"
        },
        "item": {
          "id": "39de3782-4eeb-418e-be1f-3cf07928d8c9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a11889ad-7fb6-4bca-ae76-c6730219982c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f53b54-b404-4a29-ac54-561a793a9214",
        "cursor": {
          "ref": "98e51439-a859-4558-8694-c0731db583c0",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0ec1988f-468b-4813-98ec-e5bec57d6476"
        },
        "item": {
          "id": "50f53b54-b404-4a29-ac54-561a793a9214",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "512f154d-cae3-4213-89aa-595bebb2f218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8555b0c-f321-4742-ba6f-d8f8d909bc70",
        "cursor": {
          "ref": "3f0ca3c3-5135-4b2c-8987-2aca1af24dc9",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "16ff031e-7f0f-448a-b1f4-5c3ed6067c09"
        },
        "item": {
          "id": "e8555b0c-f321-4742-ba6f-d8f8d909bc70",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "98a299f9-aecf-4f90-92ff-5fbf4d18e71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfeae56-be75-4b89-a2fd-f8f930e04056",
        "cursor": {
          "ref": "3bebddc2-672c-4b05-885c-2164296169df",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cafd60f1-ec91-477f-a4ce-84543ddf2a83"
        },
        "item": {
          "id": "8dfeae56-be75-4b89-a2fd-f8f930e04056",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "743fb829-cc78-48c5-a053-5e85f63fc4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da55835f-c225-4a84-85c1-29fb11cda81e",
        "cursor": {
          "ref": "d29949c6-6117-4123-9eee-ea335985fd67",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cf32558b-a5b7-41ed-bb7b-98bd43f13931"
        },
        "item": {
          "id": "da55835f-c225-4a84-85c1-29fb11cda81e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dc09fdfd-536b-422e-ac22-2ab398c4d5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d770aff3-801d-49d1-bc92-836ac83bde40",
        "cursor": {
          "ref": "4d6f48ff-946b-48ca-a462-01540cb9b09d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "82307760-bbe4-4027-9979-eaec1d825077"
        },
        "item": {
          "id": "d770aff3-801d-49d1-bc92-836ac83bde40",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2200aacc-39d1-40ae-aa8a-3e0194b02a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6604d66-b7ad-4e81-9ff3-b41d73f7c346",
        "cursor": {
          "ref": "8c478d4b-883b-4f0d-9fb6-4fd6815d7eab",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d6800214-ff8f-490f-84c2-30e298fb7cdb"
        },
        "item": {
          "id": "e6604d66-b7ad-4e81-9ff3-b41d73f7c346",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "99b87b9a-659a-4de9-bf87-e73c2a97b8f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86d1e8e-1921-48cc-aa85-3d3425811f27",
        "cursor": {
          "ref": "fdcbb998-3216-48c3-8cae-02d9385b4c0e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e3e61023-3781-4110-a183-7f2f56a2ad87"
        },
        "item": {
          "id": "a86d1e8e-1921-48cc-aa85-3d3425811f27",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "623f2838-1d6c-41de-b496-124fd8979795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6744ed1-361d-4c7e-ab45-65833678db80",
        "cursor": {
          "ref": "624dbc3c-ef93-454b-99a7-5281921db6ad",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c8aa87ce-59ed-438b-b6e0-8ec10cd3568f"
        },
        "item": {
          "id": "f6744ed1-361d-4c7e-ab45-65833678db80",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "95dc36f1-196d-4dc4-ac1b-37c06972aebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfe77dc-d243-4a94-a050-967a89848d77",
        "cursor": {
          "ref": "86786c64-b0f9-4f53-88b8-32bf81b9221f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4bb5dd79-3a8c-45f2-bb3b-fcd0f48ca0cb"
        },
        "item": {
          "id": "dbfe77dc-d243-4a94-a050-967a89848d77",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "36c434b3-aef8-4b47-8ebc-0888657cafcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e891732-0402-46e6-93c2-4c57315011ba",
        "cursor": {
          "ref": "e7267236-3547-4a5a-9558-986559f9016e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b16a535e-b34a-4e8c-a2b7-4568e2327617"
        },
        "item": {
          "id": "4e891732-0402-46e6-93c2-4c57315011ba",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e4afbf6f-f5d0-4fba-b9e3-b3bc6766e482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b80dc07-f61f-4df3-bda9-5105c8c20e32",
        "cursor": {
          "ref": "631d3c0e-e9fa-4574-8b2e-3d358ed1e088",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "030608e4-528a-40b0-b6fd-4cf1b0d4e41a"
        },
        "item": {
          "id": "4b80dc07-f61f-4df3-bda9-5105c8c20e32",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "80847ea1-4b30-4ec6-a7c5-fc46b942b783",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0789f92-33b8-4cba-b97e-766924115e82",
        "cursor": {
          "ref": "41165745-c342-4e70-a986-06b3f5e971d5",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fce7e2e0-c33c-46b6-ade8-3b32f2d833eb"
        },
        "item": {
          "id": "c0789f92-33b8-4cba-b97e-766924115e82",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c809e6c3-db5b-45e9-802a-35ac2c6d49c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8174c43e-aba5-4539-8f25-5dd559209865",
        "cursor": {
          "ref": "3e5b0367-ed40-4e40-9a4c-139548fec7aa",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8a5866fd-bd4d-48cd-a8cf-265e6733c8b7"
        },
        "item": {
          "id": "8174c43e-aba5-4539-8f25-5dd559209865",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6721eb83-a44d-4921-8ac9-19d3c1dd6e63",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a63f72c-01f2-4a32-ac97-9f1a7b1185f0",
        "cursor": {
          "ref": "561f1387-5632-4a4b-89ec-258f96479a9c",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e8528f6d-dec6-4a33-b5c2-7619410fdd47"
        },
        "item": {
          "id": "6a63f72c-01f2-4a32-ac97-9f1a7b1185f0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "16013dbc-dbf7-4a64-bf97-b9d8cf77d4b2",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "54215c69-54b3-4e31-804c-18ca030da1f1",
        "cursor": {
          "ref": "42273110-f520-42b8-b240-0346e898d1df",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "48a8c54b-686d-4121-8bef-0f151f519c01"
        },
        "item": {
          "id": "54215c69-54b3-4e31-804c-18ca030da1f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5384f391-ca24-4ba1-8331-9846251abaf4",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b10d1a6-3aa6-46b2-91ef-387947817566",
        "cursor": {
          "ref": "982abce5-3ce3-4469-ba85-95102d3522b7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cbe5985f-b3b3-476d-8c91-60350d46c40c"
        },
        "item": {
          "id": "2b10d1a6-3aa6-46b2-91ef-387947817566",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7514676f-26f1-47ec-9025-89b0e26aed57",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb70aa9-8244-460b-bf57-708904ea4a0c",
        "cursor": {
          "ref": "072d9738-f6f9-485a-8a29-8424e1f41f6c",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0e1077de-02e1-4597-b00c-12ac1b5d4345"
        },
        "item": {
          "id": "9eb70aa9-8244-460b-bf57-708904ea4a0c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d1c0a15c-0dd3-44f8-a196-cd62280679de",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-07T00:36:14.614Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-07T00:36:14.614Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "09114f9b-3bd3-4e4a-b96f-ae2f7eebce59",
        "cursor": {
          "ref": "f9f17765-d184-493a-92ac-5014c8446460",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6679e8d6-0115-4a77-bd03-812416bc1de4"
        },
        "item": {
          "id": "09114f9b-3bd3-4e4a-b96f-ae2f7eebce59",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0458aeda-9191-49fd-8d13-d1b95fb3c0ae",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde946e0-4b63-447a-af8c-dedb842f5e8b",
        "cursor": {
          "ref": "d06558c4-a3e3-4fad-ba17-94c179089378",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1ce52b2f-bedf-432a-8ace-00fae461815a"
        },
        "item": {
          "id": "dde946e0-4b63-447a-af8c-dedb842f5e8b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a2581269-45d5-4491-8384-4d11bba21f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5fbc69-af40-4741-b473-ae6a668e27a7",
        "cursor": {
          "ref": "20f49c28-f44e-4c99-815b-8bff5e646136",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5877649f-dbf8-42a1-9d57-403a22a52b0e"
        },
        "item": {
          "id": "6b5fbc69-af40-4741-b473-ae6a668e27a7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2f9316e2-e0ac-436d-b005-b04bae7bbb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513408b5-7ec1-42fe-b0a2-b56c81dab6eb",
        "cursor": {
          "ref": "4bd54b27-74d7-4a17-8ab8-2eade55e0232",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "716d8caf-39b2-4447-acc9-7af21ad6ff18"
        },
        "item": {
          "id": "513408b5-7ec1-42fe-b0a2-b56c81dab6eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1901e912-af20-4ace-82fd-0b22a2068247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b81cae-d1d5-4657-a105-360bb1401bb5",
        "cursor": {
          "ref": "c75e0f4c-f7d9-4cf1-87d1-3577171d1d6b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "46417c50-2182-4355-8852-9b2f32089187"
        },
        "item": {
          "id": "a7b81cae-d1d5-4657-a105-360bb1401bb5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "328c217d-b603-47c5-a236-c76bf424f996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4798bc3b-ff58-49bc-a1cd-203f187351bc",
        "cursor": {
          "ref": "a906dd3a-642e-4a19-a8e9-4a5a820a608b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9a88c2d7-f604-481f-bdaa-4ec96538d8fa"
        },
        "item": {
          "id": "4798bc3b-ff58-49bc-a1cd-203f187351bc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c57ef6c8-9f8e-495b-8439-79586869a92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6528c7f1-be91-4d4e-a12a-251e5017147a",
        "cursor": {
          "ref": "13c7556f-1b96-4686-8ab3-94e0c80f8a00",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "036826a4-ca79-4c05-9b43-deaa69fc7a7f"
        },
        "item": {
          "id": "6528c7f1-be91-4d4e-a12a-251e5017147a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "09cef7dd-fd68-4036-9919-0ad97fc9c113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009be1d8-080d-427b-819d-e4abd0773f32",
        "cursor": {
          "ref": "9f5c9c71-0b58-4ff6-837b-ea53d60d6b8d",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "587c1e12-6c1a-40d2-b43f-15edfd0774b7"
        },
        "item": {
          "id": "009be1d8-080d-427b-819d-e4abd0773f32",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cbf574fd-92d7-4b86-8fe4-7d0347d08e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3924672-94eb-4b37-9c5b-875c7b1c70d2",
        "cursor": {
          "ref": "1d6f84d8-ea69-4fa1-8760-36f00b7fbd15",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d5df4b2f-54c9-4ef8-9428-337967e36142"
        },
        "item": {
          "id": "d3924672-94eb-4b37-9c5b-875c7b1c70d2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "00e294f5-73df-49aa-902c-6c7881ea58a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435935b4-cc77-4692-8225-546655fb3055",
        "cursor": {
          "ref": "ae359248-09bf-4ea7-9dbb-c8c1e8746089",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2e3a1ad6-8417-4ad1-8e4c-f78000b9a9cb"
        },
        "item": {
          "id": "435935b4-cc77-4692-8225-546655fb3055",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5bc86960-3943-4ac2-a5ba-1cbb45efa4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1411e9b-3c69-4cbb-a754-6ac7f5f7f04f",
        "cursor": {
          "ref": "46c93916-899d-4d26-94dc-ca1d19d2a6aa",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a3e0b8c9-1bb9-42ad-8063-ba98bda9b334"
        },
        "item": {
          "id": "c1411e9b-3c69-4cbb-a754-6ac7f5f7f04f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "894ea8b6-ea39-43ae-80c4-2f6fc52ae98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7f4e10-cf72-4168-a942-0f19cb7fff25",
        "cursor": {
          "ref": "7145a285-dbd5-4277-8830-44ff6d1b8af6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8bd59eaa-4387-4895-9d1a-71af9b74fbc8"
        },
        "item": {
          "id": "ca7f4e10-cf72-4168-a942-0f19cb7fff25",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4e62a7e6-e171-4fb5-8563-e2e21d5be62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9200e1a8-f512-4554-9390-f84bae31bf90",
        "cursor": {
          "ref": "a677a602-5482-47b8-ac06-29f06995da6e",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1f54aa99-a6e5-4ee8-a5af-1643594712a6"
        },
        "item": {
          "id": "9200e1a8-f512-4554-9390-f84bae31bf90",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f4a7bde-728a-47f3-9c47-7905bf031d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff78b38-d081-46ba-a7fd-adf628b00a3d",
        "cursor": {
          "ref": "f0ffc030-0485-4aa8-8222-5746c0bed4b3",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d7b1772d-4666-44be-8869-0a79a756a961"
        },
        "item": {
          "id": "8ff78b38-d081-46ba-a7fd-adf628b00a3d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1bbc2788-6d22-414e-b34a-1349c751f2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dd82b6-f6b6-4442-bc9c-8fc2fd10f844",
        "cursor": {
          "ref": "0fd67592-6ebd-46b5-8056-c9444d8deafb",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e6f12337-e93d-4894-80af-279e0e3eb97e"
        },
        "item": {
          "id": "13dd82b6-f6b6-4442-bc9c-8fc2fd10f844",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "69875730-79f0-4f76-be41-5e50f2e00d43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7b63608c-017b-4b58-9928-f68012b85abc",
        "cursor": {
          "ref": "48ca29d0-f221-459a-8b0b-3c2803991cb0",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "206b35b8-6944-4eb1-b1d3-b0c27fd85183"
        },
        "item": {
          "id": "7b63608c-017b-4b58-9928-f68012b85abc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5cdb1da7-daaf-4374-b777-bb42c8413aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6486c523-05fe-4551-8fb9-7f56e51fcb5c",
        "cursor": {
          "ref": "f90bf398-ea73-4b2e-b7d2-0ca56110492b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a4fa8bfd-41e6-435c-9191-8152f98eaaa8"
        },
        "item": {
          "id": "6486c523-05fe-4551-8fb9-7f56e51fcb5c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2e05ad50-bcec-4711-8349-b024e16e78da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581b8755-e0b5-4d81-9284-d6b4f2857e94",
        "cursor": {
          "ref": "167a254d-ba15-4035-8cec-4733803899d3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "67cc248f-7fb2-4700-ba41-5266bd5c40cb"
        },
        "item": {
          "id": "581b8755-e0b5-4d81-9284-d6b4f2857e94",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "782a1a92-7181-4e30-ad14-0bef65dd748d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28511f9-1172-44e5-b413-17adce0de2b0",
        "cursor": {
          "ref": "ca36e2db-12c8-476f-8004-2ebf59eb3313",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3eec0e17-e97d-4ee0-a3e4-c43278b9adc0"
        },
        "item": {
          "id": "b28511f9-1172-44e5-b413-17adce0de2b0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bc94fbb8-fa5d-47d6-97e7-2f685729f600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb721226-dcb6-4ff9-a202-422cd26938ab",
        "cursor": {
          "ref": "f4550168-38de-43d4-bf57-8fd508af9673",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8c5eb1dc-525c-4d0d-a46c-12a1481fe679"
        },
        "item": {
          "id": "eb721226-dcb6-4ff9-a202-422cd26938ab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ee872d15-06c1-4834-bd8e-72b2594cd498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c703edf9-3406-46c7-a710-9c90d0515b4d",
        "cursor": {
          "ref": "75d2504f-ad5c-4aa8-b683-7a225f6c3cfa",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1d14f45c-aee8-4d57-9510-05d86c9ec536"
        },
        "item": {
          "id": "c703edf9-3406-46c7-a710-9c90d0515b4d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "493851a8-57d4-412f-9115-8fa92d82f2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683fb9b7-68e4-43af-a2fe-b67412d8a6ac",
        "cursor": {
          "ref": "9e574539-888c-46ea-a581-50fae00a6a76",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c91f83d6-7eeb-41d0-a270-b3872521cf29"
        },
        "item": {
          "id": "683fb9b7-68e4-43af-a2fe-b67412d8a6ac",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8a800e28-7575-483d-acbd-cf303fb786ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1a6a48-78db-4685-b639-1b8c09315abe",
        "cursor": {
          "ref": "d3266cd7-08da-44ca-bdfa-6dbe76ade5cf",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "066532d9-f6b3-47e6-85de-5c5e1da8bf19"
        },
        "item": {
          "id": "3f1a6a48-78db-4685-b639-1b8c09315abe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "86714868-d245-4a35-bd06-28bef000f386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7111907d-3def-40d1-b247-dbf98d49b4fd",
        "cursor": {
          "ref": "bcf271c5-81b0-4da0-8161-428c842af6eb",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c0f7727b-1a49-4a66-80cb-e861af983a50"
        },
        "item": {
          "id": "7111907d-3def-40d1-b247-dbf98d49b4fd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a02090f5-1cad-44b9-986a-91763aa0feae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30962dcd-80b3-43b6-a39a-aa971d203798",
        "cursor": {
          "ref": "2209eec2-fa2b-4907-b03f-b5fb744c414f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c2dffcea-607f-4e14-b96c-cbdbe3e8a7f5"
        },
        "item": {
          "id": "30962dcd-80b3-43b6-a39a-aa971d203798",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d1b1eda2-e24b-4be9-8593-652114dd115a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2ab656-d788-4300-942e-ae0240e1a9b4",
        "cursor": {
          "ref": "9640fd8a-54dc-4043-8f45-7700d716501f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3da34611-002e-45ac-b248-95fdf66c5ba5"
        },
        "item": {
          "id": "7e2ab656-d788-4300-942e-ae0240e1a9b4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "05f37e01-3484-47f9-9ee0-a367891a4f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117ca81a-1bdc-4593-b613-2a93a29c6ae7",
        "cursor": {
          "ref": "567e6a13-ee1b-4d95-853a-c5f6e8aaeb77",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "72828c1c-3241-4104-8657-95a8ee875ae5"
        },
        "item": {
          "id": "117ca81a-1bdc-4593-b613-2a93a29c6ae7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a77231f3-ce53-4dee-a51f-c30cc52e580f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013ee5d5-6693-4872-8215-17f252e95f74",
        "cursor": {
          "ref": "efb3423f-124d-484e-90de-ceb1a65a70bb",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0c8dc6a9-4506-4427-b00d-584b870c3d8b"
        },
        "item": {
          "id": "013ee5d5-6693-4872-8215-17f252e95f74",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "204204bb-e2f5-4b3d-adf9-2fe0c9171dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e437c6-dd76-48b2-b70a-ebed6b203b3d",
        "cursor": {
          "ref": "e4fd4da9-06ea-4990-bd29-2af04a0577a6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4aa40c83-d4d5-45c2-9d84-6143c0f45610"
        },
        "item": {
          "id": "28e437c6-dd76-48b2-b70a-ebed6b203b3d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c987f07b-4763-4df5-94da-5d223d0749c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf49286-91e6-4042-abae-bcef525a7280",
        "cursor": {
          "ref": "aa61146d-383a-4527-9584-272ad444c8d4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fa41cf76-0f0d-4756-8cae-259ab2691946"
        },
        "item": {
          "id": "dcf49286-91e6-4042-abae-bcef525a7280",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2f11c9ff-02fd-4317-9d30-8eacda2c9b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925e6f0a-188d-4c6c-98bc-82ca6d8ab987",
        "cursor": {
          "ref": "c1739867-ba7e-4a29-adfe-10dd688191ba",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ad1c1a8e-4408-4b29-af5e-7eab812dcd5a"
        },
        "item": {
          "id": "925e6f0a-188d-4c6c-98bc-82ca6d8ab987",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "53cbf0e5-9e1f-4dde-8fb4-66eb28733d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec16b65-387b-4f71-baa2-ef21786addc8",
        "cursor": {
          "ref": "f65ab8e9-38b0-484a-becd-e6e05a3042dd",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f1a515fb-2649-4c6c-aabd-36626198f722"
        },
        "item": {
          "id": "1ec16b65-387b-4f71-baa2-ef21786addc8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f329f863-4fd6-4d58-a71a-6492a1e4f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c925613-5efc-482c-808e-74d6bf726d67",
        "cursor": {
          "ref": "271d9f25-b498-443c-816b-74fc47c5020e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "30064a8e-7e07-4881-81b9-a85cb1cd4811"
        },
        "item": {
          "id": "6c925613-5efc-482c-808e-74d6bf726d67",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "00e9c311-2549-43dc-b6a5-e7f8f3f874eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99430e5-dd99-41da-89cb-5ec94feea62c",
        "cursor": {
          "ref": "a048f884-21fc-42a7-a02a-da976452125e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "224f5d9b-766d-4287-81c4-4e01bd1623a6"
        },
        "item": {
          "id": "c99430e5-dd99-41da-89cb-5ec94feea62c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9b852d76-9bcd-4cb4-bc6a-15924e4e5d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7107e4-165d-4894-9701-e01d894d75a6",
        "cursor": {
          "ref": "998b0da8-812c-4d66-bba5-1c5119315d61",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c06cb847-0f23-44c9-9f73-df6a74451552"
        },
        "item": {
          "id": "ca7107e4-165d-4894-9701-e01d894d75a6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f068e7a5-8900-4b28-b805-9edc14b66b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adc8f50-544e-4072-a43f-aa5eb15c7915",
        "cursor": {
          "ref": "ff405c18-28dc-49c4-99b6-d1f465f847ed",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0d9c5db5-033a-41a8-9cca-4a4e4beaf51d"
        },
        "item": {
          "id": "7adc8f50-544e-4072-a43f-aa5eb15c7915",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9d489b3e-d78e-471a-a778-b3c3ad7a7cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ab3767-8b8b-4f3e-97ad-eb88319e9842",
        "cursor": {
          "ref": "1c86091d-833b-41f0-a901-46399df38afb",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "487a7d9b-9299-4018-a2ef-4bf13e08d020"
        },
        "item": {
          "id": "77ab3767-8b8b-4f3e-97ad-eb88319e9842",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7ba73381-ee44-4e6c-86b3-12786185551e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e97f2c-5df0-4e47-93d7-11e3111cab73",
        "cursor": {
          "ref": "0e39de06-83a1-4527-a43d-ed438f920848",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c8a39065-802e-4297-976a-aa05afccd1c6"
        },
        "item": {
          "id": "37e97f2c-5df0-4e47-93d7-11e3111cab73",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3bc13c07-3e3b-447f-9df0-ac136558d3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57b1494-d68a-422c-aff4-26741ef66caf",
        "cursor": {
          "ref": "cb395160-746a-4b77-a699-6a74ae3edf5b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3e14ebe3-b3da-4b50-877e-d79c12f4c2ce"
        },
        "item": {
          "id": "f57b1494-d68a-422c-aff4-26741ef66caf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2eed0517-d202-4448-b6d6-4f3098353b7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3004880f-2717-4c4b-9bfc-9230bcd5f77b",
        "cursor": {
          "ref": "1bf69ac5-7877-44cc-8636-6316454d46da",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7b7e6727-4539-4929-ab33-785c38b6a2f3"
        },
        "item": {
          "id": "3004880f-2717-4c4b-9bfc-9230bcd5f77b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "63aa968b-f9f7-42a0-9d94-ab5fe9214597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23233a5-bcb4-4c4d-b161-38d2dae251f3",
        "cursor": {
          "ref": "215e3e50-7931-47ac-9fdf-8726cbee0eef",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d082e60f-6c26-461a-99a9-aae3f6960cee"
        },
        "item": {
          "id": "b23233a5-bcb4-4c4d-b161-38d2dae251f3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3182e1f4-485d-4b0c-ac61-6d2a4f8e1162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef40ae28-53d8-4eab-acef-14c361630883",
        "cursor": {
          "ref": "794eeb60-0cc5-414c-b15e-ebf6fa36b227",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "37b10500-3bb4-4a73-812b-f8ea4bc4a616"
        },
        "item": {
          "id": "ef40ae28-53d8-4eab-acef-14c361630883",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "fdd0b4d7-fb73-4ff4-b5cc-ee551083d355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4533f908-01d2-4d61-acfb-9d909c4bb618",
        "cursor": {
          "ref": "0b0a0413-941a-4950-9875-22b6b1071db8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "33ef23d9-f132-49df-9a8c-d9d0a2696312"
        },
        "item": {
          "id": "4533f908-01d2-4d61-acfb-9d909c4bb618",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f239f6f-7c15-4637-9baf-48989b4561fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbdef58-8e36-404d-88e8-ea31b87d0e08",
        "cursor": {
          "ref": "7c5cebe4-30d9-456b-aeee-c67d9b90fab6",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d1d7869a-11d7-4318-ba18-3dd575ba0e3e"
        },
        "item": {
          "id": "3bbdef58-8e36-404d-88e8-ea31b87d0e08",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6367d544-6dae-4063-a484-575744c49f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68b5c4c-3598-4808-9dcc-130dcbb27c61",
        "cursor": {
          "ref": "6eb25cf3-c36a-4280-b2c8-a687794d0c54",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ae6f60be-c314-4dc2-af78-d7b8fad9606e"
        },
        "item": {
          "id": "b68b5c4c-3598-4808-9dcc-130dcbb27c61",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7c707bc2-dc31-4c1a-83f8-a3487414d578",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "66267648-f76b-4534-ace7-ee4e554a31d3",
        "cursor": {
          "ref": "9d399dd9-3e23-4004-829e-f0954b077e28",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "588b63ed-0436-4cc6-b23b-eba7e1d6eb50"
        },
        "item": {
          "id": "66267648-f76b-4534-ace7-ee4e554a31d3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "73c8ad4b-cfbb-41d9-9a8d-6011deb3abce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccaac26-670b-4c42-b3fa-bd6c1647e072",
        "cursor": {
          "ref": "ea76b442-7e27-47d0-8836-8d3247f91ce0",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "33fb4a6b-d24d-4dd7-9d9d-16328ab98f98"
        },
        "item": {
          "id": "4ccaac26-670b-4c42-b3fa-bd6c1647e072",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "786b9c88-93f4-4ee0-bc8b-d15d6f10efe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a4130a-419f-49d7-aca8-dbe967181281",
        "cursor": {
          "ref": "06cce89e-d7c8-4885-bd86-90de6d4a0050",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "90f507fb-c7d5-4b7b-9f2b-025372cf887e"
        },
        "item": {
          "id": "c7a4130a-419f-49d7-aca8-dbe967181281",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "91e06f68-502f-4876-b1c5-fc633e4dd0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f3c73e-b019-4871-9cb8-53f152101a3a",
        "cursor": {
          "ref": "1c43cc84-d7c0-4b92-bc1f-dcc750f4873e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9ec5a27f-c8a4-4274-9a01-dac80ca06f76"
        },
        "item": {
          "id": "60f3c73e-b019-4871-9cb8-53f152101a3a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d52266fc-77ba-4021-a2c7-58a44ce2df62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e266257f-3f02-4c83-ad27-2e7cb1f93660",
        "cursor": {
          "ref": "bbd81800-b4c9-42ba-ac43-f44e3da6e4c6",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "66c9617e-88a7-406e-8083-0616dfa58a99"
        },
        "item": {
          "id": "e266257f-3f02-4c83-ad27-2e7cb1f93660",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6b0a3f70-56ee-45f0-955f-916c6c939d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735f96bc-a971-4088-b705-cf1fbe58e2ca",
        "cursor": {
          "ref": "16e9faea-5765-44ca-96ba-eea2e3484a56",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1f43762a-748c-4fe0-bf76-f5925fdb32f2"
        },
        "item": {
          "id": "735f96bc-a971-4088-b705-cf1fbe58e2ca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a32144e6-75a3-406f-b074-06a3439eee32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8cb7b7-c627-4adb-bb7c-ae01943ba087",
        "cursor": {
          "ref": "cbfb52c2-5288-4214-8a7a-8ce0f0135187",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "60c5accf-7cb2-4b31-bb21-5a2f6fd6cd64"
        },
        "item": {
          "id": "db8cb7b7-c627-4adb-bb7c-ae01943ba087",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "515a1968-99eb-40aa-9ded-fa25ebb6fa87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdb0320-3d42-45cf-9b90-ddeaf4b1987f",
        "cursor": {
          "ref": "bc37ac13-1429-4d2e-a8b9-113bf74afbb3",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "76c1a293-72ee-449b-92b6-fab8a567542f"
        },
        "item": {
          "id": "8cdb0320-3d42-45cf-9b90-ddeaf4b1987f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2e041dfe-f015-48fd-9796-a13db49c38a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea7cec8-5d9e-498b-a199-96c716f64084",
        "cursor": {
          "ref": "86633dee-7d5a-40ad-b852-d552c1cbe4ba",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e5f9ef0e-4056-424c-95dd-24adca6d61d5"
        },
        "item": {
          "id": "7ea7cec8-5d9e-498b-a199-96c716f64084",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a375e28f-1722-4fb6-8ffe-1dc87ecb5c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7b4ff7-475b-419e-be0c-3d2c38b0b354",
        "cursor": {
          "ref": "c8d40ecc-db12-4693-a0b4-6446d063677f",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dc5e8d16-f0ba-4b20-b3cb-b13e5fab1855"
        },
        "item": {
          "id": "7d7b4ff7-475b-419e-be0c-3d2c38b0b354",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a4bb5a2e-35e5-478f-99da-8136810f80e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539353b5-3820-4019-bfde-206fcc18b112",
        "cursor": {
          "ref": "cae5e20f-1882-4525-9609-7b7389abd637",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "25c67322-297b-4dee-b8fe-cc0a727723b6"
        },
        "item": {
          "id": "539353b5-3820-4019-bfde-206fcc18b112",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a7387da3-293c-4525-a0bb-a008f3053cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90adc35-45cd-4f20-8409-48082caa68b8",
        "cursor": {
          "ref": "084d5928-8816-4b74-952a-3a57860fedce",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b4aa08fd-c091-473b-aacc-c24bde9c3459"
        },
        "item": {
          "id": "c90adc35-45cd-4f20-8409-48082caa68b8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2a0cf933-d7c9-4686-add2-cb619524344c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f014f25a-808e-4b85-bb89-596afc851728",
        "cursor": {
          "ref": "c2931979-becd-486b-94e3-aba4073dd426",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "44f6230e-43f8-48de-85e7-cd065b3abd02"
        },
        "item": {
          "id": "f014f25a-808e-4b85-bb89-596afc851728",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d1662576-1ce0-4ead-9287-eeca0a6ee17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb18013-fd40-4e46-9470-d8b9cc32a07b",
        "cursor": {
          "ref": "68660b02-8ac0-43e2-ad08-af818aff880c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "074e9089-ff2c-4449-b7f3-b93574692691"
        },
        "item": {
          "id": "2cb18013-fd40-4e46-9470-d8b9cc32a07b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "60692071-6be6-493e-a5dc-4917b04c023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d681ffb3-ce31-4d39-b572-df718252184a",
        "cursor": {
          "ref": "a6e45985-e2c1-4da8-be13-2ad9cb7cd539",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4a557687-9c5e-4faa-a954-58189ed6a9db"
        },
        "item": {
          "id": "d681ffb3-ce31-4d39-b572-df718252184a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3d6b09f3-facd-4b17-abda-5a6c5d30cd34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bc406e-02b4-4135-8b92-c091a5e156e2",
        "cursor": {
          "ref": "c6fc8499-023f-4614-a0c6-e33fbcac0481",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ee5a0dd3-a9b9-4235-951d-2c74879f195d"
        },
        "item": {
          "id": "76bc406e-02b4-4135-8b92-c091a5e156e2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "aafad952-c209-4271-a68f-6bdb7c3efbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9289b89c-7ef0-4b32-9340-ea4efe9f53d8",
        "cursor": {
          "ref": "9e60f056-1e84-4b4f-99ea-e09655436a14",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d8f53f68-c1db-4e54-b067-56651269a634"
        },
        "item": {
          "id": "9289b89c-7ef0-4b32-9340-ea4efe9f53d8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6a313747-f372-4e21-bf5f-75653e1c926d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfccc461-135d-4770-b9d3-5282c9208104",
        "cursor": {
          "ref": "6f59f228-f9b0-4334-a0c0-0e0704210e9d",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9133ab59-6b3c-47a1-8834-3692c75ed31c"
        },
        "item": {
          "id": "dfccc461-135d-4770-b9d3-5282c9208104",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "840c92e6-bcf8-4d92-9f3e-eba29b3db7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a33ab59-adcb-4367-a8d9-b3a5eba900d3",
        "cursor": {
          "ref": "0c415ded-5b55-421e-8ac9-823d5230fd93",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "79d0efba-1efd-4f35-ae90-f43417f083cb"
        },
        "item": {
          "id": "3a33ab59-adcb-4367-a8d9-b3a5eba900d3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "09393669-ad4d-4502-abd2-cdee1a070f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77477a17-b374-4f86-9ae0-e139d85a203a",
        "cursor": {
          "ref": "bd4031cc-e1a7-4ab2-83cf-b6109c505710",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ff07c62-81d1-4169-be0a-bce3ffba6a8b"
        },
        "item": {
          "id": "77477a17-b374-4f86-9ae0-e139d85a203a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7c8a9900-80c5-40d2-9173-40e1eb96346f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b7eae7-f2eb-41d3-b1b2-e57c742a5fb9",
        "cursor": {
          "ref": "4c96a7e7-fc5d-4438-b9c0-bc928bb4a434",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c89bcaec-6c14-4fb0-abe4-735470d381b6"
        },
        "item": {
          "id": "09b7eae7-f2eb-41d3-b1b2-e57c742a5fb9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b069f4c5-d57d-44fd-acc4-8db9594e461c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7367fc6f-2734-4b8c-bc09-ab5c9579ef12",
        "cursor": {
          "ref": "20b570c1-d488-4678-98d4-f35ed792a12c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "47a15fde-1817-4dd2-ae5f-16a131b6639a"
        },
        "item": {
          "id": "7367fc6f-2734-4b8c-bc09-ab5c9579ef12",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c2e8b1a4-4a34-4692-8d66-17ed98de5479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d282c-5b75-4eac-b8d0-16b56d18ec80",
        "cursor": {
          "ref": "a14d0584-516b-4c07-a5d2-fb5eb2066676",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c1abd95e-d397-42e7-a503-66dcda98cfd2"
        },
        "item": {
          "id": "f24d282c-5b75-4eac-b8d0-16b56d18ec80",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "49de7455-57cf-4d72-a87c-921cc9898f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1552017d-76ed-415d-906d-3b1868ecd394",
        "cursor": {
          "ref": "84807ef7-abdf-4cdd-9f6a-09924cb08813",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "09511d29-25e7-4f3c-8c2c-43402d43b174"
        },
        "item": {
          "id": "1552017d-76ed-415d-906d-3b1868ecd394",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cc410939-71e0-45ed-b7d8-908039b2fd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e2c1ea-4983-4a3c-bf2e-b558febeb9b2",
        "cursor": {
          "ref": "a20b89ee-872b-4a52-bff4-1bf7be3ef64e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "88a9d102-2e21-4ae9-9cf1-353feea7a942"
        },
        "item": {
          "id": "52e2c1ea-4983-4a3c-bf2e-b558febeb9b2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28f3d4f4-9cb6-4ecb-ac1c-d47063bb3f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff742491-4cbd-4c6a-bc18-4b7eff1fd1b5",
        "cursor": {
          "ref": "f78241ab-2dae-4ecb-9203-eb884b4f40e1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6b6b179d-cfeb-4bbe-aa2a-c28afbbd853c"
        },
        "item": {
          "id": "ff742491-4cbd-4c6a-bc18-4b7eff1fd1b5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "10011112-6240-41d7-89ba-7ab5f76cbeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fab8714-1b89-47ba-8d07-5374ddc7b359",
        "cursor": {
          "ref": "bf644fdb-f054-4e88-a989-2e53efce45d2",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "10c56ced-a831-4246-849d-b4fd1f07eb4d"
        },
        "item": {
          "id": "2fab8714-1b89-47ba-8d07-5374ddc7b359",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "228d2c6d-7e94-4ebd-b069-08f84faca667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b306cb2-f231-4079-abe2-18a2caa9a761",
        "cursor": {
          "ref": "dd01f0da-0465-418b-a271-0500df578d7b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b2c0459e-ec74-40be-9490-60c65caa6e33"
        },
        "item": {
          "id": "3b306cb2-f231-4079-abe2-18a2caa9a761",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "30bf470f-8168-4d08-86a2-8e4a5478b5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50183be4-62f1-42e9-b458-4f20d1c6ae71",
        "cursor": {
          "ref": "57ef7ada-68a7-4f28-b53c-48db0893b15e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "903e9b49-152b-44de-9353-51800925aa64"
        },
        "item": {
          "id": "50183be4-62f1-42e9-b458-4f20d1c6ae71",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5d3f3cd8-0775-4f61-bed0-58e7f60ffd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7718c852-598b-4b12-9f11-fe20852331cf",
        "cursor": {
          "ref": "5d83dbdb-fdc2-42cc-ab29-8469f03a1164",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "51138874-2819-44ff-ab1c-6da07cc4cae4"
        },
        "item": {
          "id": "7718c852-598b-4b12-9f11-fe20852331cf",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "342a3d34-c743-44f9-8fca-477d327efe15",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fb8028dc-92a5-4a6a-8b9c-97a9f4030943",
        "cursor": {
          "ref": "bc3ae343-657e-4669-a0b4-abf065ac5d7b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9620ea08-f6ea-4af7-b694-d7d97b8af76f"
        },
        "item": {
          "id": "fb8028dc-92a5-4a6a-8b9c-97a9f4030943",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2d9874d1-dd4b-431a-9cac-cf275b583033",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "7e6cb49c-2b17-4fd1-810c-8514be49f93c",
        "cursor": {
          "ref": "098dd7a6-2a06-4778-8539-729ae82a01c5",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f026e751-c781-4a70-a87d-7a5110232435"
        },
        "item": {
          "id": "7e6cb49c-2b17-4fd1-810c-8514be49f93c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0dc0e97-ce86-4800-9428-944addbb2c74",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "77cce33e-8869-4390-b020-ac08c735fd63",
        "cursor": {
          "ref": "d7da7759-3cfd-4806-a72b-1cdd874ce06a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8fc8470c-df30-48dc-91f3-1469102c09b7"
        },
        "item": {
          "id": "77cce33e-8869-4390-b020-ac08c735fd63",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "09c9b805-f69c-40a7-96ff-66fd94f47116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c533f7-a2ce-49c0-96e1-5f790148cf4b",
        "cursor": {
          "ref": "64756840-8990-4906-ad11-b07bcc5de7fb",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c1d488f-8b21-4910-9833-d895417ba0e4"
        },
        "item": {
          "id": "88c533f7-a2ce-49c0-96e1-5f790148cf4b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a326c42c-b517-480f-be1a-63da96c8e31a",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "f9584794-a6f9-4136-a358-53ec51eb751b",
        "cursor": {
          "ref": "908ad8e7-1d18-4037-9955-01fa8640e44c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8762cf3b-8c65-47b4-b37f-5da2f1859339"
        },
        "item": {
          "id": "f9584794-a6f9-4136-a358-53ec51eb751b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ca09857c-b773-469c-a66d-e84512371938",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a4ffa8a3-a4aa-42a1-bac5-9bdcf073f088",
        "cursor": {
          "ref": "ef185938-777b-48a3-a8f4-64fdeaee3a8d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "aee9f42c-daa7-4c6c-bf95-ec66267241cc"
        },
        "item": {
          "id": "a4ffa8a3-a4aa-42a1-bac5-9bdcf073f088",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b4166a7f-d545-47a8-8175-1fc7b9d9b0e9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a1a74af0-f600-46d9-b0d8-aea021db1f09",
        "cursor": {
          "ref": "9b179ed9-ca38-4234-b84a-10cef7a981da",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "008a9619-45b5-49eb-974b-3c82feece70f"
        },
        "item": {
          "id": "a1a74af0-f600-46d9-b0d8-aea021db1f09",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dca83bd8-af8c-4904-9444-400b56c135e6",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e69fb0e6-d821-4445-84a1-7baad0d897e7",
        "cursor": {
          "ref": "70a01bd3-7a1f-48a4-97ee-63661bf3f87b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f198858d-34d0-41a5-bb08-ebcb9309161c"
        },
        "item": {
          "id": "e69fb0e6-d821-4445-84a1-7baad0d897e7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fb152d7d-14b4-4845-b565-8a0440283595",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ddc23f12-8030-4f14-b82e-d99ac7ca3f62",
        "cursor": {
          "ref": "9a4b5c2e-e93e-408a-922f-c5469f149caa",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d5f3e6dc-58b8-431f-a722-465f29b735c6"
        },
        "item": {
          "id": "ddc23f12-8030-4f14-b82e-d99ac7ca3f62",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d4a7796f-9af8-4f49-8583-d39bb3ea1c58",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ceb75ee6-efea-44da-ac53-16a819f6ed28",
        "cursor": {
          "ref": "6d798983-47aa-4da8-8f1a-efacea224fe6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e01615b8-15af-4ce1-906c-ad1e4498edf3"
        },
        "item": {
          "id": "ceb75ee6-efea-44da-ac53-16a819f6ed28",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "57dadf92-c3af-4cb0-aa07-d08e77859d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2305313-10fa-4f48-abde-866a2edc1aa4",
        "cursor": {
          "ref": "873f502f-acc7-46ce-8275-3b6d83b246f4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "39fb3dda-e8cb-4e36-87f6-57057e695e0f"
        },
        "item": {
          "id": "f2305313-10fa-4f48-abde-866a2edc1aa4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "155706a6-ace5-4bfd-aff5-0e61fedcc404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c323977e-2edc-4273-9ec1-2b34a73dc057",
        "cursor": {
          "ref": "56b8d3b3-f748-46b2-afff-3e38a1697676",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8ad31004-64a0-4540-9570-6e22e990be1b"
        },
        "item": {
          "id": "c323977e-2edc-4273-9ec1-2b34a73dc057",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f0033fcf-6fef-42c2-ae33-064d1f213b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd544f50-e412-4118-98c1-4a088cb03476",
        "cursor": {
          "ref": "5a194b24-5fcd-4d13-b406-d17d85320c46",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "69b0f38a-dbf1-49bf-82ab-f8695a200628"
        },
        "item": {
          "id": "cd544f50-e412-4118-98c1-4a088cb03476",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a775c73-8581-494b-917f-6e55cae94ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45054bb6-3302-4392-99f5-e6e588b6d383",
        "cursor": {
          "ref": "e212f30d-7657-406d-aa6e-25abe2e237fe",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "076367a6-2268-4152-8d23-dbd28be9de0d"
        },
        "item": {
          "id": "45054bb6-3302-4392-99f5-e6e588b6d383",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "09e82209-9d5f-443b-9c03-873e44246e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad24aca6-a578-460f-b715-98db5fb5cda9",
        "cursor": {
          "ref": "90bf181d-871e-449b-8f00-7771d2192fa5",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "cf374b53-3123-4ff0-897e-e80f57f92a96"
        },
        "item": {
          "id": "ad24aca6-a578-460f-b715-98db5fb5cda9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "526b9ece-3ac7-4efe-a887-0d73409c001e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53294ff8-eb26-473d-bf1e-3c6c27aa44bb",
        "cursor": {
          "ref": "c05bfce9-5028-4d4a-888f-425c29e453f0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "24524226-29c0-4bbc-988e-b23ff140099e"
        },
        "item": {
          "id": "53294ff8-eb26-473d-bf1e-3c6c27aa44bb",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5e53fc37-ed5c-4096-a9e8-69cb1a75278d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e296e000-b732-4f24-a5ac-37a170b40603",
        "cursor": {
          "ref": "4cf01f6a-8827-49b0-b4d2-fc82a01d9502",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "93687bc5-5a72-455f-9925-06ea633de8bd"
        },
        "item": {
          "id": "e296e000-b732-4f24-a5ac-37a170b40603",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7a7d78f5-0082-4d17-8270-7fa0ff603dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f332fd-d506-40be-9e41-ac79f92d6cac",
        "cursor": {
          "ref": "baafe782-c44b-442d-8a84-d86996fa67b0",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35a2c531-d054-47e8-84e9-924fa7e2a8b8"
        },
        "item": {
          "id": "82f332fd-d506-40be-9e41-ac79f92d6cac",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9519d6f1-e14e-48f2-a075-762088118fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c9b277-aee7-4a9b-8b6d-569bf95aea59",
        "cursor": {
          "ref": "747e0042-a4c4-479a-ba1a-3e28b382a9d6",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "44646c10-46a0-4ad1-9423-ee260d8883f5"
        },
        "item": {
          "id": "08c9b277-aee7-4a9b-8b6d-569bf95aea59",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "27853371-3ae1-4b63-b643-c39eed539ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284a09df-5f67-41f6-b2b1-b657d5edd802",
        "cursor": {
          "ref": "2638cc97-43b8-4f0b-9ae6-6eb9af0fb3a7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "866e19b8-b4c9-4640-824d-2783b43ff882"
        },
        "item": {
          "id": "284a09df-5f67-41f6-b2b1-b657d5edd802",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8e9e81f9-d667-4de2-a379-250e9fb6059c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64080119-0c00-4800-bc87-5574decfee98",
        "cursor": {
          "ref": "99c4e294-332c-466d-99b5-656381afc074",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "141e46f2-c985-4e98-b25e-c4c080412aed"
        },
        "item": {
          "id": "64080119-0c00-4800-bc87-5574decfee98",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2798f3a0-d6a6-42bb-8aad-a30a760adc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a288884f-21be-401e-b4f7-2bb14fa63c41",
        "cursor": {
          "ref": "5653d8a6-5e06-4410-b50f-acc58bd205c1",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b7b734b6-0823-4ae6-a0af-5a588538af61"
        },
        "item": {
          "id": "a288884f-21be-401e-b4f7-2bb14fa63c41",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e9e6bb5a-1e92-4e8f-87da-28b180633e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d5abbe-e88e-4d0d-bccb-8b99c694d585",
        "cursor": {
          "ref": "7e2cec9f-11ab-424a-9262-83da83136334",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3333bea6-64b7-47bf-9f6f-96c96ff9a3ba"
        },
        "item": {
          "id": "08d5abbe-e88e-4d0d-bccb-8b99c694d585",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ed73849b-5b61-439e-9d49-6ecc29e6d956",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9107eaab-ce86-4762-8161-4485b3f7c957",
        "cursor": {
          "ref": "00e9a841-3462-4955-a7aa-f99974090630",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "25ca1f56-236b-4354-8a77-40185bdb8350"
        },
        "item": {
          "id": "9107eaab-ce86-4762-8161-4485b3f7c957",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e6e1b19b-41a4-4f1e-bf87-dda11cc100fc",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8189300d-7b09-40f7-a006-33f10f721b22",
        "cursor": {
          "ref": "fbb5e0f8-3b8b-4520-9ff6-cfd8831fa13e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4a1d32d2-1ba8-4ea4-a719-41a6344b6b24"
        },
        "item": {
          "id": "8189300d-7b09-40f7-a006-33f10f721b22",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "838fe18f-e1ba-48ac-b5c5-deffd19252b0",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "6fd2889e-c160-45de-b223-787d461a6ac5",
        "cursor": {
          "ref": "e5447e0c-9b7d-432f-90fd-00dc67a7b71c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "344d1ccf-113b-42cc-855d-8eb425d035b7"
        },
        "item": {
          "id": "6fd2889e-c160-45de-b223-787d461a6ac5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "31ed2860-f04f-46f0-92a3-af2272c5c3b7",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "73e8a77e-c3d3-48fe-94cd-8cc2cb33d703",
        "cursor": {
          "ref": "89c55cc4-81d8-4b49-b936-301a2dcf96d6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "db7ca75f-f94f-46de-9c9e-c966e9725b01"
        },
        "item": {
          "id": "73e8a77e-c3d3-48fe-94cd-8cc2cb33d703",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bed6a765-b51c-4607-a33a-ed8c83ae10ac",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "5085bbba-2298-456c-be12-dd25a30dab51",
        "cursor": {
          "ref": "0a1abf48-76c4-42b9-80de-dc4d1f0e3309",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8b62ccbf-3127-4d28-bb29-35debb9cdf65"
        },
        "item": {
          "id": "5085bbba-2298-456c-be12-dd25a30dab51",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4803c791-6ae7-49c3-b541-09e880c627a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b170feae-904f-4c09-8176-bfddf9099d8b",
        "cursor": {
          "ref": "b930f30b-3966-46dc-a70b-57bfabe55c72",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fe690d40-f89d-468e-8457-3442bc96250b"
        },
        "item": {
          "id": "b170feae-904f-4c09-8176-bfddf9099d8b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6a2e7f1d-8e26-4e72-9389-1b043642f355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261827c9-1f4e-41d4-9221-79accc6355bf",
        "cursor": {
          "ref": "b987a712-b3ff-4724-9e8e-40f742a2a4c5",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "97af57c7-2573-45ad-ade3-7eb9c6deac7b"
        },
        "item": {
          "id": "261827c9-1f4e-41d4-9221-79accc6355bf",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fe26b3c4-f716-45d2-a545-61c001dc3437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77dfcdc-6cab-4b45-87aa-649131b1269a",
        "cursor": {
          "ref": "663176a6-1e28-4ed6-8073-285a8a765753",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "df6924ea-f6ae-4d32-964a-5783a73ccfc4"
        },
        "item": {
          "id": "e77dfcdc-6cab-4b45-87aa-649131b1269a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "42cb534d-0371-486f-8eaf-047f86d370bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98791b85-dd0b-4241-a907-ae339bd9b135",
        "cursor": {
          "ref": "c8ba3efc-dcbb-42a3-8367-27ffb7838660",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "276d8847-b59f-4226-b23a-b7c1ae4d32c8"
        },
        "item": {
          "id": "98791b85-dd0b-4241-a907-ae339bd9b135",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e6b39f60-11b8-4ada-88e4-8ace0f5f278f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e435f92-4cca-47c6-a881-27612f91f804",
        "cursor": {
          "ref": "74837342-9cc6-4e6d-8e53-d37aac67563b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4ac9fa8d-c996-4bf2-86d9-71b6d2306b8f"
        },
        "item": {
          "id": "3e435f92-4cca-47c6-a881-27612f91f804",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e424994c-5f6f-4936-8aa9-7f9a2c0dbb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27748e5f-3a6a-4e32-9bb3-7c433335d7d3",
        "cursor": {
          "ref": "b604f413-5ae3-45d6-af6d-8df40a240feb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9ca001d3-142d-4ce6-b01d-c2b60ee0d6c8"
        },
        "item": {
          "id": "27748e5f-3a6a-4e32-9bb3-7c433335d7d3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4d6657b0-0827-453a-9e3b-600483621f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64893f3b-5989-4747-b42e-384ac706e461",
        "cursor": {
          "ref": "19c47c51-1bb1-4379-b160-11eeb9714c93",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "373d969d-215b-4e36-9ff5-6491e87f52d5"
        },
        "item": {
          "id": "64893f3b-5989-4747-b42e-384ac706e461",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bd13dc5c-6b19-47fd-b1fa-4a75df05772d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1a426b-82f4-448f-b676-524e7f70eab8",
        "cursor": {
          "ref": "013fa32e-5726-45a8-a2ea-5b2e47532251",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8caa0863-edf7-4101-9d10-e1083e55516a"
        },
        "item": {
          "id": "2d1a426b-82f4-448f-b676-524e7f70eab8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c43de102-1834-409e-aeda-c270be3f3fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c066ea-e8a5-46be-b858-177bdf79def2",
        "cursor": {
          "ref": "8c606488-021a-4706-92b8-303d1f61a97c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ff4cc7ca-4466-446c-ad6a-36d70fc62fcc"
        },
        "item": {
          "id": "e9c066ea-e8a5-46be-b858-177bdf79def2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "89d74d2e-5ff8-494c-b3e9-fd7b7b04723c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a532ad-0e43-43e6-8fa7-da70623ed48e",
        "cursor": {
          "ref": "c29a5f39-c1e9-4fc5-b3a9-fbc496ba19a9",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "07281a9d-14b1-43d2-9f0f-28854b8f55e0"
        },
        "item": {
          "id": "40a532ad-0e43-43e6-8fa7-da70623ed48e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "954b15ec-10a3-433c-abe0-c1a918d2d254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec3a5e-445a-409a-bc67-1c2c29082f3f",
        "cursor": {
          "ref": "266fd6f2-acee-45ed-9e44-88afbba096db",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6c459cb8-cdaa-45d3-9fba-8e2ebb3b7fa5"
        },
        "item": {
          "id": "42ec3a5e-445a-409a-bc67-1c2c29082f3f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8f9e7586-3c10-4b27-ba07-416524507939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445a0b05-828a-4865-bd82-34394028b374",
        "cursor": {
          "ref": "9f0ce276-81ee-4142-9b4b-642158438ace",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c5276976-87f5-4197-88a6-c89ec2633f24"
        },
        "item": {
          "id": "445a0b05-828a-4865-bd82-34394028b374",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a94d3013-938b-4a65-9204-a142df7f8e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c63279-bb5c-4364-bcdc-80c0a9b6ed8e",
        "cursor": {
          "ref": "5de71314-1a62-4ec9-8979-b2f35fd16eed",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1119e396-6e3b-4d7d-97b7-2167f1dfc3ba"
        },
        "item": {
          "id": "45c63279-bb5c-4364-bcdc-80c0a9b6ed8e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3eb0d2b2-9777-4d5b-979f-6204bc9a35ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02b1a50-a2b6-473e-aec9-6e15b7753c5d",
        "cursor": {
          "ref": "bf3182d0-8b61-48ce-ab8a-b9f73ff23737",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6ca0822e-43d4-4d31-b81b-d6c1328bf5a5"
        },
        "item": {
          "id": "a02b1a50-a2b6-473e-aec9-6e15b7753c5d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "faba4478-23e8-43da-a887-33b5dbe3c5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c577f7-c44b-42b4-8179-16e7c7290cb7",
        "cursor": {
          "ref": "7bf3ca7f-c388-467d-be9d-1bec6329eb8d",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2c32fef4-eff6-415a-8bbe-bc591e72e892"
        },
        "item": {
          "id": "d5c577f7-c44b-42b4-8179-16e7c7290cb7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "083d0578-ae0f-421f-960d-f3e509a7ba36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e144cd-e7cf-42fb-bcc9-d6991df50579",
        "cursor": {
          "ref": "482cb2d5-56ad-42b4-bfaf-f1749cbc14d7",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "312b004f-4657-45f4-83ac-f057f715e084"
        },
        "item": {
          "id": "04e144cd-e7cf-42fb-bcc9-d6991df50579",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "91e966ca-60c5-4dd5-8afe-93ae8f3fc0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bfacd8-1f0c-4c5f-a055-52f717798f4c",
        "cursor": {
          "ref": "90217c89-28a6-491e-ba48-82696dbdce85",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "de5c307c-5173-4575-8347-cbc8f147c08f"
        },
        "item": {
          "id": "78bfacd8-1f0c-4c5f-a055-52f717798f4c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dec6f442-42ee-425e-a60e-9728103f4b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f76e3d1-68f3-4226-8f94-ed4f30d74ccb",
        "cursor": {
          "ref": "01cd491b-8bf9-40c3-9350-61305cf415f8",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "908ef69b-c7d9-4d55-a759-1e6bcd43146b"
        },
        "item": {
          "id": "8f76e3d1-68f3-4226-8f94-ed4f30d74ccb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "db38fe57-9330-4fd3-a3a7-b7ac45ef7c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fced4be-21fd-4ea0-8edf-a9f70bc1b337",
        "cursor": {
          "ref": "8adc382b-e063-4991-a361-7df5d3f4307d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9cc8ae6c-a64d-4b17-832d-7496de30922c"
        },
        "item": {
          "id": "3fced4be-21fd-4ea0-8edf-a9f70bc1b337",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8e5ffff3-1770-4fbd-866d-27b88eaa4d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7206ce3-120a-47fd-972e-24e6141c2cc3",
        "cursor": {
          "ref": "0925f84f-4be4-4165-9fca-41f6f4588d31",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cb954294-796b-44ad-9213-a9171b2912f3"
        },
        "item": {
          "id": "b7206ce3-120a-47fd-972e-24e6141c2cc3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f5fe2e93-3915-4c14-a281-046a73086783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d8c759-2e14-4eb4-8fe8-cdd28d65dbf3",
        "cursor": {
          "ref": "0835503a-0a13-4830-a9cd-5d5583293e17",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "997b3ea4-3cb1-451c-b9df-cc154806f38a"
        },
        "item": {
          "id": "01d8c759-2e14-4eb4-8fe8-cdd28d65dbf3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c1830804-05a2-4a5f-9f21-ee5f0e56e3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f7a382-cfe6-4499-83db-cc4a862cf608",
        "cursor": {
          "ref": "6e02b647-e60c-48b2-89a2-b5e812b46cfe",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "af377cfd-5767-43cf-a82f-43637f5a7d93"
        },
        "item": {
          "id": "d7f7a382-cfe6-4499-83db-cc4a862cf608",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c9e7bbfc-d1c2-424e-a0ea-4cd6f572499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc9c90d-c0af-451b-811f-a21474132aa4",
        "cursor": {
          "ref": "fbbdf8e5-3724-405f-b7f9-61abc70ce715",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b2cd2b37-5f32-42e7-9a11-7a4c2d3598a7"
        },
        "item": {
          "id": "fdc9c90d-c0af-451b-811f-a21474132aa4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4012285d-f8e9-4de2-a87b-a1b8ea95fd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462795c3-28a6-4cba-9430-884b836c7830",
        "cursor": {
          "ref": "875db71b-e14d-49f2-bbf9-d4a4b36ff6f0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c16637f3-6f83-49fa-97f3-327e66fe38b3"
        },
        "item": {
          "id": "462795c3-28a6-4cba-9430-884b836c7830",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d07d387d-d95c-4bb1-b537-b178db93c785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78a8f63-77d1-441d-9bfc-be01590198fa",
        "cursor": {
          "ref": "21d4cd19-5bce-4374-ade7-11e1826f76fd",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "68a43146-f71f-4241-9ee5-2a23e600412b"
        },
        "item": {
          "id": "d78a8f63-77d1-441d-9bfc-be01590198fa",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0307b2a0-c83b-4e34-8888-691aba329d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c76ee89-9048-4af8-bdf8-ad83734b97c9",
        "cursor": {
          "ref": "c5c81929-1b8f-4b9d-8d38-b7151130972b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9fecf288-33ed-4410-9e93-58991b0b6c66"
        },
        "item": {
          "id": "0c76ee89-9048-4af8-bdf8-ad83734b97c9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cf44a628-f20c-47ad-aa17-6188b114597d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a9f015-b783-4b08-ae62-93f2622915ee",
        "cursor": {
          "ref": "143c9703-40bc-44e1-a825-57a6289f627e",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "19c03cbe-08ca-44db-b545-f20995630973"
        },
        "item": {
          "id": "f2a9f015-b783-4b08-ae62-93f2622915ee",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "00081230-aae5-47f9-9d86-07ae276d3262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f7fc75-3814-4b4a-b874-33ca8bdb5b95",
        "cursor": {
          "ref": "b4e08fd3-7b57-48b2-8646-f1606d36aea4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b19adde3-95d4-4edf-90eb-bf9bc9855bcb"
        },
        "item": {
          "id": "44f7fc75-3814-4b4a-b874-33ca8bdb5b95",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f573f512-9038-4141-ba7d-458de876bffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ce6bd7-335f-4d7f-baca-45d621137b2c",
        "cursor": {
          "ref": "a4a25fdc-66f9-4b9d-a8f2-419f0eede202",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d3babe54-0924-470e-a892-684145b81899"
        },
        "item": {
          "id": "68ce6bd7-335f-4d7f-baca-45d621137b2c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5fd74a3e-976f-4b08-9395-e24350a69d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0ffdfc-473b-44f8-88f3-f8b7940264a5",
        "cursor": {
          "ref": "174d275f-8d00-4887-a8b3-e247e048cff1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bf212232-b2f8-41d4-818a-6fa5da1e0b7a"
        },
        "item": {
          "id": "ed0ffdfc-473b-44f8-88f3-f8b7940264a5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "97729e4c-bc16-4288-b204-f9b99265b8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb3850a-3895-4d13-8f6c-3187776bc52a",
        "cursor": {
          "ref": "22e676d8-3a30-4369-ac60-f5cd3f08ef66",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "86e9a499-4569-4012-952c-dc05f39f11f5"
        },
        "item": {
          "id": "1cb3850a-3895-4d13-8f6c-3187776bc52a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8c5c843c-783d-4881-92cd-640c94e47e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362e17fa-b738-470c-98c9-24e68c023f46",
        "cursor": {
          "ref": "5c4c7ef2-f65f-4889-a3c7-c581afa58bcd",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "859459dc-db4b-40d7-90f2-3baabccd1669"
        },
        "item": {
          "id": "362e17fa-b738-470c-98c9-24e68c023f46",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "09a575df-8ed5-4091-93fe-ca9625f61e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afecdd88-f80d-44b7-8743-25f8f2d3fe91",
        "cursor": {
          "ref": "9ea180fc-841e-4255-95c0-9b9b66fb9774",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dc3cce3f-f7a9-4976-aa83-1a25d86f46e2"
        },
        "item": {
          "id": "afecdd88-f80d-44b7-8743-25f8f2d3fe91",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d9729880-f5ac-41ee-955f-8b7cfb004f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfa0b33-6eb6-4b8b-b323-6846406a8ccd",
        "cursor": {
          "ref": "77766bc8-2228-4aca-b737-6a3c7506cc7e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "244f5f79-5b6b-4c9e-beda-cd782a677965"
        },
        "item": {
          "id": "bdfa0b33-6eb6-4b8b-b323-6846406a8ccd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8d02d1e6-1e81-4163-b9f1-4f45d70c9214",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b4e473-b08e-4db1-ab57-0212207cb747",
        "cursor": {
          "ref": "debb4ed4-325d-482f-b7c5-fd80e4694705",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "01a34121-da94-4582-859c-d6772444fa81"
        },
        "item": {
          "id": "85b4e473-b08e-4db1-ab57-0212207cb747",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5af56956-a7f6-440c-904e-342270962633",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6885fcc7-e27a-447a-87e9-70f237f2ae6e",
        "cursor": {
          "ref": "8ca1b7f6-b8e8-4570-b782-452f72e5535d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1afda456-36ac-411a-86e7-15aac5a5af4a"
        },
        "item": {
          "id": "6885fcc7-e27a-447a-87e9-70f237f2ae6e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "968483ac-7e4a-40f6-b60d-60d21d378e89",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0e75e5-8ecb-44c2-8683-137ee2615bea",
        "cursor": {
          "ref": "a0965fda-b841-4fad-9ef4-e06ac2883708",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4cc09edd-7903-4909-86f6-69856917cce8"
        },
        "item": {
          "id": "dd0e75e5-8ecb-44c2-8683-137ee2615bea",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6964fbeb-cd8c-403b-bf1c-e1a1bfb554b9",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e94381-ebeb-4415-9f3d-fc737f3bd05a",
        "cursor": {
          "ref": "6a32713b-ea01-4b30-9a53-88ff9d3f433a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d49056a-e92e-484e-b27b-003104b352d0"
        },
        "item": {
          "id": "e6e94381-ebeb-4415-9f3d-fc737f3bd05a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "af65791b-65fe-442d-8b70-927a9b18b84a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e94381-ebeb-4415-9f3d-fc737f3bd05a",
        "cursor": {
          "ref": "6a32713b-ea01-4b30-9a53-88ff9d3f433a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d49056a-e92e-484e-b27b-003104b352d0"
        },
        "item": {
          "id": "e6e94381-ebeb-4415-9f3d-fc737f3bd05a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "af65791b-65fe-442d-8b70-927a9b18b84a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4547b20-6dd9-439a-b611-86c97c13a0d5",
        "cursor": {
          "ref": "29f1051a-e955-4132-af1a-6aaa197a3d0c",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "30cbdd1f-5df3-46f1-b37a-1040a32ba3d6"
        },
        "item": {
          "id": "e4547b20-6dd9-439a-b611-86c97c13a0d5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d869a1cf-50fb-47c2-8cab-e5755875502c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dcbcfe-7a96-4232-a7af-d2cc1e843d37",
        "cursor": {
          "ref": "6d8af2d3-6dde-415a-8ea5-6aec42dec0e3",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "790b1012-3425-4cf8-8332-c2e766233318"
        },
        "item": {
          "id": "44dcbcfe-7a96-4232-a7af-d2cc1e843d37",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "991a0fc8-1b05-40cd-a91b-a9653488658a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}