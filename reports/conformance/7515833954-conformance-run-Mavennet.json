{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "13692f98-061f-441d-bac3-65e4d00a80b8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "13836a2e-c44f-4be5-97c0-64a67d08ebc1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "85751f13-8ca2-4eaf-8158-38c50cad8fe7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f0603fff-5c79-4b61-93f1-836bdf346301"
                }
              }
            ]
          },
          {
            "id": "7447cbe8-673a-48da-aea7-e3e457068d0f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e29c4753-4b51-4b26-b8a7-6c25887a9996",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1d2a3b9b-a9ce-4562-9707-92beb20f64ef"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "06a76bd3-7243-4cd0-8f35-0dcd87d8da41",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3be7773b-b368-4abe-910f-3cf4d9074e2b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6c2048c-0c45-4889-98eb-827e2120e651",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44fd55c8-cc30-48ec-91ec-e02eaef570ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d6bf0e6-18c3-4fc9-9430-f06ea4850ebf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57d1a6ed-63c9-412d-ab37-b26df89ae60f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "202532d9-0b42-4014-9ebd-82414a3a00c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f96811ea-3dee-468e-a409-a20f29823239",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22e5c03a-4ce7-496e-aa16-9f9a9c2a73a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56badf19-b845-46a9-8c29-2a8418a69f2c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "509e661a-350e-4cb5-8c45-3dcf78d2e982"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "769a6970-50b7-4464-b058-d8479e5fe0bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3739fdca-5f8d-453d-90ab-638a27df84fb"
            }
          }
        ]
      },
      {
        "id": "b5418fba-7708-4676-acd1-7148dfa13d3d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "14b93f13-bad5-401a-aab6-a0cc536a2143",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64d77bca-5d3a-4eac-821e-e3601dc79337",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3acb89db-a1c7-4cc9-82e3-3b378d185358",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7991279a-8274-4238-b6af-8088cd265652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28167df4-007c-4a12-95d9-283f4994cb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab2b036-ef5b-46e7-8f92-6845fe4f9785",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32d0174-6b03-4ff4-a35f-35230c615cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62106694-4cb6-4096-9ad4-c8eaa4520209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabb9efc-0ac8-469c-bac9-bbd5770e73b8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee71fac-787e-4138-b9a3-1e0f2ba346d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae032e08-f6e4-4e37-ac61-f8e6c6e57b5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02e89a90-4493-473a-a82f-9f6b47e64213",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a44178ff-8b93-4f9d-bc73-353f06109342",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c43116-2a2c-4f0e-b640-20a5a99497b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20cf7308-ef75-45c7-b85d-cec78a44940f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac54cc62-c122-4348-9f8e-6ae543ad219f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05b94ba-6421-4e30-99df-76cc433ff1c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6ced216-5a63-4b20-9def-fa8895f85fdb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "07eca91f-1cac-48e1-8433-6e367489171f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a644355f-23e5-47b7-af11-fce729ea9663",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c282eae4-cf99-4ca2-8d1a-bdd3a7129a98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5666b050-1ceb-4d0b-b435-17a8b9834941",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5e1a012d-e73d-40cc-ae56-3ec4e2c2f36e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13fa14df-51e5-49e3-baaf-01d11b10f7b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "324e60cd-25e4-4dd7-8923-f3a8cfacccb2"
            }
          }
        ]
      },
      {
        "id": "4904ddb7-c2c3-4d5f-a568-84b0a3c89b56",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "426a8fa3-affa-46a1-9e5f-794a8a81b9ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55629145-a0c3-4ea4-9e59-a1ee623ed039",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fb599539-e5cc-4775-b0b1-f63148e72468",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc90547-3414-43c6-a554-ea2c6d34080a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d483a21b-075e-4e55-95f5-9d3f5d49f3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13564e94-c7e4-49c5-ad19-d36a522c01f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "401aa40e-2326-4791-a0aa-872b1e05cd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b73d91-8e32-44c8-97f8-f6a841b39aa3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d385649-5ac8-4adf-a5fd-8ce2e2fdd436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fbb268f-d9fc-4fd8-bcd9-9b92a1875e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6865193a-7c8e-4032-a4ef-c0f14821c6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3212e4fa-ae08-4dd3-b49c-084030483c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e863e34-6b7a-4ef9-95b2-6437ce30b03f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16dbfb9-da4e-4a3c-8d7b-403a2647eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf19acea-485f-4253-9605-f6cc8553c8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9410e07-b2ad-415c-8afd-480e68ce8976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd38003f-d18f-4228-8109-3f864ae3cfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac5884b-a598-4b62-9b23-09d4906ed362",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6298e8-f546-4c4a-a251-acd80416ec5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e6b2b3-3c55-497d-8444-d6632a99dd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab99b271-7c12-472d-b3b0-1308bcac44af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "233b047a-41b0-4e25-904c-96c651e1e60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d164d052-ba34-48ff-bf8e-9a2e761196af",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e360ee2c-570a-4c6d-8950-ccc3f952dcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee8b012-ad71-4f75-8847-116e29334ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0895b512-4cf6-451d-abb2-6d234919de1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4b1c657-8b79-456f-9545-bcb6ee6cef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cdeac7e-e1d7-493a-bff7-6042d4b16901",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecebec94-6c24-4dc4-abfe-2a5df4623ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e8f938-0c61-41bd-a056-127b1849296d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673f3440-9f53-47e1-881d-8a45a2c838ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d55d866b-251d-4b51-8906-f7670dc5b92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ef5258-36b3-421f-b4f6-d737a6967f4b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f88f0c4-bdd0-495d-96b3-402877da1531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad47a6e6-2c4f-40fe-a8b3-3425d4b0323b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebd81c8-40e8-489e-a57a-2aab51a50f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f8e3b96-a692-447e-9570-1e319ed3c0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593100d4-ae0b-4c35-9b9f-a064d3c675e6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74a53fb-22c6-4c74-a33f-e74db249f8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a09841-9306-4777-9532-69ae66f3ef01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ad3eab-ea74-4090-9e1b-a8b0dac3e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07830a9e-b2c2-4707-b0f7-ddffdcad5c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be71f91-a075-4a2c-9708-f756f0dfe0b2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114a8a62-9c74-4168-be03-8c1f05f75bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e07ec5-6243-4ba3-af09-f18a706dd89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019f9e78-b794-4237-8596-aba8cab7d227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f8955b3-3f4e-4ffc-be86-3b2078bce11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a678d4-1606-4173-8ee0-582c4358f402",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3694003b-523c-40c0-8ae0-60afae14e502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987a58eb-0325-4041-a1b8-f87654b63572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b256c168-3441-47a2-9e79-92f8f7d6c4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3937958d-c06e-4b3c-a4ea-06a87a5f2b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556c040a-47f5-4d11-bda9-bd96bc997828",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fb2b94-8983-4f0c-91d8-c1967d2fbcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f35cd1-e302-4b9b-92f4-e1c6f7c48b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2961f6bc-0a0b-4f95-a0b8-64060da177a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c5d402a-422d-44d4-9722-72b9a85c663b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866f2250-1d9a-43c1-8c0e-d42fda211ed3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2921e0eb-7863-4eac-80aa-05c85ad0946d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ab6f62-ee8c-4993-8f5c-5316dba3cdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854d3ac5-9772-454f-a164-cb1b1775d9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a76b1100-ecd5-4b6a-9d16-d96785a8b939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ebe335-f942-4ed1-8d86-2712a4238976",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b26d8ea-e558-45a2-bd24-b83d93deee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302a1754-15ee-43b7-9d8b-dd6ee34d1132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa42dbf-0b99-4a5e-9ba1-25aa1f9d29ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8e7fbc2-0af3-448d-920f-a7b284d97c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4166f674-8a56-45f1-ac7f-664458253009",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a15febe-01b6-47fb-8c62-992cf5b1073f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a23d755-d127-481a-8f82-c7784e4f21f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48578610-36ee-48c4-9074-0418b89becd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56585a8a-c739-41fd-917b-2b420f18e035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914ce877-c894-4879-937f-decda2dfa965",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8197069-c6b0-4f93-92a5-05baf731ef12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8789198e-9960-4329-8e3e-8c31e682cf6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88015ab2-267f-4a6a-b707-8e4bb32dfcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3125f8ef-85b8-48a3-8f2f-0527f9699074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ed388e-54e8-41be-834c-7393fb226414",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffdd18d-32cf-425c-a8ed-7d330f83cad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddd371a-6c0d-4954-94d9-494d53b38fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1964984-0074-4707-842c-17aa5699cbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45349afb-6cda-4a31-93b3-f51992a06532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761f60a6-ba83-4bca-ac83-9f043f6787f8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f57c848-0fd1-4231-85da-1928614a1522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c10b3f-7cc1-4d0b-9d4e-51f29ebad4fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2e1889-930e-40d7-9b9c-6ae44ad5f4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ba02399-5c35-43dd-a0d7-bd2ec71993c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac67d5f-34a6-4e1a-b541-8c53c7a6a5f7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01133a2e-3a99-484f-b484-88a8750689c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518b1683-1c22-4bff-b3ff-a14f71b4427e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08ea55a-854e-43bc-ba6e-2888d74e7e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bf8ff8-410b-4c21-b305-07d107ea46b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76305f40-4e49-4ca8-b805-6a832e6703a2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6400a33e-3867-48a8-96be-9ac534304116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd41598-69b8-4926-9f44-080821cc1ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c0ede9-e968-41eb-8fec-90fd4d4e48b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "020e750c-ac50-4e13-b088-bcdb0a882858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b5bce1-2b0f-42e2-9213-0fbd1ba5ef66",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f37949-3283-4fdd-a034-5a74cf44b218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd584e0-6740-4b17-bb54-d06016449a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ff4832-5482-4a50-96fe-7fc26df16612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "987c5c09-11d4-4ac1-bcc9-29ed9189c2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189512e0-5a3f-4cc1-814f-d7b054165eee",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded357a-9bb7-4381-b5e6-baeef97d2eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e93257-774d-4127-8e98-93d947fc6858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836704f9-3ba2-49f6-b0b4-e1152e079fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25907a18-04a8-47d3-9644-e65e25c0da87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a56e1b-a08a-47af-9952-4832d6ec043a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f923de64-0acf-48be-988c-247e3b396880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680d3f5a-e567-4100-8732-e34dc6ddd7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bb6969-3872-47ff-a4b6-72ce00829609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc432a9-8518-442b-befd-8e96046c88cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b6f8b3-c3d1-47c2-b46d-d131eeb0b7ee",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a6ddbb-cac1-445b-8944-f80febaac034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a85aa72-cf8d-462d-add0-4dbc33eabd3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9493ba-35c0-49a4-a4e7-6a8e02afd7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90d70349-5970-4dab-8ac3-a7e12c6e3f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4c3715-b652-40de-8286-ee38536548b4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ff312c-35db-466f-b467-90ba9dc1b380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec6db8d-8107-4585-89f5-714aa46f5e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4256d3ac-ac9c-413a-b810-5259f59c3f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "30584ec5-6ceb-41ea-852e-3ee3396469a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00131017-2cfb-4920-8b27-24bf4eaa6402",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524f59fb-e3ba-408c-bbc3-f2aa5ad566a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efff22b4-469f-4d25-a848-8aec0d73e472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162ff55c-4b7d-43c5-9789-a898f1f96acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdeab868-a6ab-4ede-8d06-960fa46ff02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bea496-3959-4859-b80b-463175cb369c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2750b230-a3a7-45dd-8ff2-8ec2cf5e987c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93435241-c7f5-466f-a766-a2bef92acc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2abf8e6-cde2-4136-9d6b-73e8e7f6f2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbea793-802b-41c7-9404-be0595066148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4b78fe-47e8-4e86-89e8-8a2ca6dfe9e4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022214cf-f721-4b11-8ff3-fe3f6297f5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb63355-ed82-4b38-91e4-9e2769ccad0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5624c0-5727-4332-bbfd-54a8531c3318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6393e46-edae-4769-9be2-78b2e8e68866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7afc123-995b-4fd1-836d-9fa8717fd0df",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c239ba6-3991-4c3b-a0d3-23c7fa3df61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459f6676-3cd5-44a0-9af1-de8688058b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280a5735-9cf0-4cfb-91a3-92d1066f6414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8186a4-ddea-4b96-aab4-6f9b37891040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f07e212-2cd6-4960-88ae-c54223ed3634",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e540b8-5fc9-4328-9882-9c4089184cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cda0d4e-e9bd-434c-97e0-eef535807d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5fbfa3-9d8e-484c-a778-8974489f46e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "654370fc-d324-42ae-b64a-ee044f90adc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff7aa38-7cb5-49f8-ad25-84d61b1f1055",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33feeae-2823-4b3b-a688-aec1669dc241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc50670-5ea9-4bdb-be01-b8996d9e6a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71617f05-6731-4ee3-b50a-2c2640a59eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e576a3d4-001c-4a62-9325-c12c1ba4c008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75932128-9dfb-49d7-b520-99eaaa82422b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe7b429-f1d4-472c-b3de-fce2b4ea0c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9b8f8e-6130-42b0-9018-dda8612800ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebc812e-769b-4b00-871c-d72d97d831e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb42f043-e4dc-49be-9585-bb686f4e9dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff46a9e9-3698-424a-aaab-bc4bdd0dc0e5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d5a185-9027-463e-898f-0dc66160337b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b0716c-3778-42ac-bdff-9ca7e0c22c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9494c5bd-e3f3-42ae-be87-55559a951ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e819a99e-845f-4b64-96ec-2f48fe3ea436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a69d499-5d39-4955-b099-a5f30257f5cd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1118713-4fa5-4dc3-8aa9-3def0bec8c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fe620a-d694-412d-8ef0-0ea17dabde6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ed2032-83d7-4e40-9361-665781142115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc79627-0821-4c05-bf8c-a9b55205d87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c526086a-c803-445a-8d54-cbd600ca99c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e8e8d-2034-4d8c-94b9-db8ec774f09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b5fe4e-e678-4018-b900-1c1c87eb7ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56635ec3-38da-426b-a8fc-908c70218db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc0fe72-5363-456c-a2bd-e68b72f1a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66848a0a-9b0a-4e20-ab3d-b825a59eeadc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c782ff-0080-43d3-b6a7-025cb652c947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47516cee-1b59-4d68-938a-10194c102e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7be4386-b170-4d58-ae92-6e97949a7ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "97126875-fe3c-4499-a373-6ad59b8a77d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632af7c1-69ba-4b96-9f5f-5fec006abda7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3961c1-38d5-4f09-bdf5-0089f81ca17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46072ceb-ef2b-45c3-ad4b-8a8e8d9ee5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da0f533-fd4b-4848-b974-a818037cb58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9ce960-4cda-4271-b28a-c94015eda72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91969faf-a030-4b45-aa9e-6adbe523a1b8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db2c70-3cad-4dd1-a32b-d1121210a38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a435646d-2513-41cc-b402-a2235f38cc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b5ab41-6af1-4939-8368-b459da6aad2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14387a46-2ce5-45aa-9fec-f37dea774e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4225bfec-c4ab-4c1c-a1ed-f8f7d4b2ab5e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7de56d-f6b4-4b50-9e79-84a21c54fb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0204bc0b-a551-491f-b6cd-d01268e64f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8438565a-d4f6-4aac-a70a-c5deff87863a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bbab37-fb74-4f22-91a1-d66f3a2bee45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1173316f-b785-4b25-b07c-9a62e513a066",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71e0499-1fe2-46e5-a222-20148fc13626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5074474a-5adf-4d9f-9be9-fedd71e94b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed8d809-8219-46a7-8ba6-d59fdcd9a58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "151382e5-e43c-463f-bdde-6df3b2461314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ac22d7-df6e-44c8-86ea-3578b7fd6630",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec498de-e7c8-424b-bb67-dca3bf4481c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59820a99-9e04-4666-a5ed-0094c045a9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bdd341-773e-42dc-b181-e5f066c4bd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e31137ef-3f95-4280-a85f-170f8f45b14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92ca153-d3c7-4f58-8bca-8cf79693d2db",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7af070-199f-4cce-b9ff-7902bab66359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2455920-5188-49ff-a1d0-feaa4c1b1a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fc3c42-403d-4a55-bde4-e50b13a2b7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b648f0-22e2-4a35-bfda-e504aeeebe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490b088c-db96-45eb-a2d7-85860df065a7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebc626e-cf35-4b24-bd14-bac7a6bf015f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb38358-4f85-4ce0-85e2-fd22fb06170f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e70df9-9646-4f4b-843d-c0a07473b77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2e7933-fe5c-4bf9-b040-5d72965865a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03425202-744b-4efb-8b71-4b96c8663c26",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d140e5-5f9c-4725-a98f-abf005399bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1b21e9-bcda-466a-9fc6-9e9f5f7652a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d50758f-3f46-4ee3-a207-c9cfd0c4e6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "53ba0b32-b612-4699-b579-3bf62dc8a6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c897176c-f740-441b-9a25-98eb52f460f8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b14e52-e5e1-45c4-98dd-06227743c0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d29c4f-39dd-48d2-9e5a-a48876c9354d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab2b1da-2ab4-4c4a-b036-9e7200ba3847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "27146b04-9d5b-43b9-be05-8a39690a721c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8d9fe0-8761-48b6-99be-d8a274deafb8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31065bc-4e43-4230-96c5-3d4408f59d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ccdc3b-a430-4767-a7f8-83c810d2e913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7341b551-1932-4cb8-82de-b00ef03311d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a78e6e-b0fe-41d4-ad8f-559becccca4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be93023a-530d-49fc-9c6b-70489494ba55",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "801aba5b-ca86-4c01-a9ef-8a6f3c2919a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93722bd-9c29-4e53-a100-a8d2632ed9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05daa177-f153-46d0-8c7f-1449a501f1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae73c505-fea9-4f96-be4d-151d4e39269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ac7338-997c-43ec-998f-0bb092df8f96",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893e5338-4e07-44c4-bef4-367bd72eb3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977b348f-64c7-4e86-b94c-15e287731b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36e1acd-3d1e-41c7-b9cd-538307ba8580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7e270b-df51-4650-929a-c4a68bf5a0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e4e4d7-212e-4a99-9095-52fd7a4719ae",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d6c054-edcf-46e1-824d-c72d188b5416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9200bcba-518a-49e7-84b2-4fed9c394617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff7dc64-5683-4c4a-90d0-d844258c0ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "82239201-b3f3-4b97-b0f5-c038d74c6f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d3cb98-0137-427f-b4b9-33c2632608d7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df52b477-a436-4f26-b33c-32d06ede7498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0dd6e4-2369-44d3-9557-c213556d8594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89601d96-b592-4b85-a8b8-e1c2ef9cd174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "83fb3430-a8b9-43b2-93fe-53e40db79d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb14aad-cca1-4144-be99-3b42488ada5c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b685dca-33ec-40e4-beee-c6321644d413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868b53e0-1ed7-42e4-980c-507bda747710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29cd715-b73e-4b33-a826-3fd716c5d6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5057f1b8-5808-47a4-8b59-7fd4fb2a372d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070f2c4a-d607-4b9b-87fb-714a8f2d3563",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3cba4e-1c32-42f1-b625-130e2ee7cea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de21a0b-f951-42f0-8dd3-fd308a9508db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b96dafe-410f-421e-a1ce-43e476ad80d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f21a3cfc-42dd-4f84-b340-156c65e2fc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb730915-1266-446c-b5f2-ad997c85c3dc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f718e854-126d-4091-b40c-779840663e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c42bde-0c9e-491e-b9f3-308fbdeb6f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d002895-e47b-469d-b5a8-641d477fc1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e1414f-4126-4eb5-b029-1ecd5eb051ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d693246c-14d0-4d4f-a245-fcc79dabc781",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431a08d9-17b0-4c43-8edd-1b8911cb19ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8fdf73-5e02-466f-b6df-017a8a2c3a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb2662c-b6b8-495e-9ccf-5260eb47de09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1dbdd5-c6f6-41ff-b8d6-94adfe0a0a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bd05fb-7d5b-498a-be5d-ce194ca04c16",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4a0604-c25b-4fbf-b35d-86a8b6dd034c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c795ea88-2020-4135-92a5-7c7b7c84b910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e7251a-7dfd-4e8d-a028-50a86b4fca09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "435e781f-0f4f-4434-a379-f004ea00ef41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c5e5ad-7502-4a92-8747-6711e2b86ff0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff4d103-0131-4528-8a98-98cc5e365ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f45c131a-c02a-4b01-9843-f3d77afe06c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ead3a6-bfff-4940-8b59-5d227c8ce680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11981b42-a00a-4393-91b5-0e36529d3719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf7a972-b755-4758-ae50-21717b2e7e54",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d574f7-36a8-48db-bf8c-9a8da1a8eabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479f7c36-a3a4-4093-bdd6-c59f94d22f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7acef4-ec7c-44f4-872a-4e9797933368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "010412bc-0e79-474b-a09d-0a7e4dddd6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae97bfe7-e4f9-479f-b21b-67f00961c0d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d234209-6a24-4196-8400-d86b07c53581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3d55ce-0f0b-423f-913d-752e7cce06ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cd7fe6-2ecd-461c-8def-0a2d8c01b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55cb30e6-9bfd-4d14-b634-942184568ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc6c5fc-8d04-4f53-aba9-6786e04b94ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3fb5c6-689c-48c5-9d02-ec15799ff466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14214e2e-f56d-4df3-8399-fbb814204e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21fca1d-00c4-46f5-b4c8-944114176ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "85f8d800-6459-4d1d-8b21-0602c7837c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7543e6-5c8e-448a-a398-b2b18b8b342f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31568630-8165-4cf6-8864-526352babdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e8c702-cd0d-42e0-a083-b3d2fdc809ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c21b134-cca0-4b36-a711-dcdf8551eb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7a88f8-07ca-4339-89d4-5196dbbd2d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0bb5d0-e42a-470b-80f9-3d3b8b7725c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c396a6b-fa57-42d2-97db-760c99b69c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb57d43-6008-458b-b571-b762742ca8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f6a9ed-a652-4577-a645-5188d4a8ddfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd1e5e8-08f5-4c7f-a48b-c9f0cb7bc2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6b70c3-1e8c-449d-a88b-1a309ec43056",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e4b8ac-1bec-44fe-8cb3-3701d4ff42d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b1365d-f4a3-4b67-a8c2-b2bcce40dadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aa7493-88a0-4d56-8e75-21a698be2293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4bdb32-0dd5-4cd9-aaf0-17756f0e9465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103e1882-5a69-496d-bdfe-32961c10cfd6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab7c64a-7a8e-4268-835c-96e9eec22f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0907b8-abb5-4e15-b206-e6e655d5aa61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3705d015-c58d-474d-9b5f-62fa5428f7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee5da5-79ff-4caa-9c39-7ed763fceef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b898da0e-9d45-4cfb-846e-3923d0cf688c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb35ca5-5be8-4436-9f7c-0f5cbee545a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6581a41-2d6d-429c-b772-92f747982109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de18114e-dcea-470c-a526-f998981a6830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb41aa0d-05f9-4e26-a210-7ea1e2d4b58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60566d12-d48b-4151-8675-a640d47ef01e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee67d67-a238-417f-bccc-977fd2b92e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd1568f-43b0-4f27-af9f-214d3851f5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146760a4-d684-4b0f-b1f8-54166c13406d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de6c100e-47ea-4051-adbc-d7f7f2bc4751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc62594-d35d-416d-a4c6-e603f41f0da8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572886ef-311a-4c21-9d69-9e60f855c1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33292b6-ed61-4419-82ed-b9c27aebd203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500ef8a7-f1cb-44f5-b214-75cb6a884404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf24df2-6f52-47d2-9ce6-34eafd0fce5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce155286-02f5-46dd-ac72-c148e1c93ecb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb4a94c-f22d-4f02-b4a7-80ba4d987737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db6197b-2793-4ed1-90bf-06b81785ec61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1a0e8f-cb98-43fd-abf7-32db1902c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c67746e-60b7-45f8-b20e-4abea8e06a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2213c2-8b67-4a87-bf70-0b757266a5d8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdac908d-2769-4013-8065-02898676b8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65467d4a-6387-4a56-85fa-a4c392aa6572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c1788c-85df-46ae-ab38-7a2ee434c35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "464909b8-8fe9-4d48-93bc-d810b90dd6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e891ee-2ade-4716-8e67-8fa210c702c4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8157af07-7eaa-439a-b471-e4fba65056d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a33be6-dd23-40be-9991-44d42615442d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25eb764-e1cd-416a-ac13-1cf763ddc88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "067f403e-7125-4207-b8df-d4a771b5120f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63af443c-5d8c-417b-9dba-cfdf028aefb2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe32ca62-cbaf-4157-a4fc-577ee5d552aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28edb71-6476-4b6d-aee0-1d5fab23e87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f98c391-7b2b-45fe-ad32-a75a9e6e3df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecc8ea9-2909-4f2a-b897-3f5a70078ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6428c0f-c24c-47f0-ba08-a493b69ed174",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ade47c-694f-47db-9c58-a46461c3056c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b55c5ee-5f80-4dba-8eab-5b0b9dce4694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f575a2-fca4-4a7e-9dc9-48a6d61a96a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25830da4-f6be-4de7-8bdb-1c82bd0d0b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5f173c-beda-4506-a4d3-53b54a790c19",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e0944d-f00d-4533-992d-c80314c7aff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e5a1900-b32e-4ca2-bd22-9db2d7748e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd09194-3561-43ff-b531-febcf1b31b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "048c61c7-af98-40d7-95ea-6187d162fd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0033536f-2274-4916-a32a-b65d818b9237",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957da8ac-5350-4af8-9fef-7fccbf8d0650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0e9719-13d1-4db7-8009-245615c179a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3482b2dd-c324-400b-886c-98bf548aa9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e93a5fa-9b2d-4b2a-a213-5d553456ead4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39548054-40f7-4c53-8a95-33f17fb7d267",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6cdf01-f63d-4802-b520-4312629378ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8e9bfd-4539-4a8e-a593-af2e505deea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae85460a-73e2-4968-87f2-edc756892406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6607b8f-6a1a-4105-a7d2-43c99d0135f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f24658-bb23-4e95-a781-007101352c66",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f488ab-2323-4212-ae57-09e85c5e43ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cec5b04-299c-48cf-a0ac-d11ddc6198ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7d886e-9cd3-419f-b038-c8ff138cd37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c11fbfcc-a68e-47ba-b1d2-3086743dea48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65038c69-9933-481c-81b0-b37ddda7ef06",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e81672-7fd7-4743-8a75-158ea321e1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430e69fb-cfc7-43ce-809b-b1a00e86943f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e248d-3239-497b-ac1e-970f3846215d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e26d53db-a1fb-4f0e-bbd9-2fd18cb62e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f074c558-003e-4bbd-b034-ad9df5829bc3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449c7cea-2acc-4422-b6c6-46196b755bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb50b2f-f962-4586-ac9e-2355ce22573f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaeba09-3c0c-48eb-a495-32af33122718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cdb0c33-a33f-4ef2-85c8-4ede8dcaefc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15acbdf1-1f26-4f84-8599-e13b175a63c0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d238289e-87d1-411e-8743-a0379f5cba16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d33a0df-bffb-4043-804c-2a7180056872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6ded91-6fcf-4639-ad17-006b469b8f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1bfd4c-8581-4271-a4de-ee85391d3469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158a9915-defd-4337-956a-83208fa5bbc2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089d2f33-fae9-46c5-bd9c-802eb01c3b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d61e0a-c224-4cb8-b3db-25ea224fd37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d69aea-f600-4ad6-8f04-4079ed2588e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "623ad765-c323-4b52-8f3e-a43888330cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e491eb6e-b6ec-41b3-a9d6-a8b02e8c4b34",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc0765-dc3d-48ae-b19d-ddd8882d57ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9276f144-2c81-4af3-acde-e0fc678601c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e96320d-5358-4ae0-b4b9-70cc62467b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e6111f-fee4-4e75-bc4b-2d66a4bec323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dd03ff-47ed-480e-939e-8e24e8f39339",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a248f63-ac7e-41c6-b70f-03dbb9af55e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9727485-cc96-47d2-940c-2aac2d2888d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178d7eb8-3233-4390-b33c-e15adae6492d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6b6fb6-4e89-4195-acaa-6298d969498c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d3857-cebe-4aa6-959d-53dbb7bd6717",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a376cd-ab5f-4b8b-8550-705d07c649d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3db21f-662d-428f-8cfe-23ebb8a26d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2c7f48-625f-4a48-ad92-f2e27a17c13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d7741d-8625-484a-9d3b-59a117b0457d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ce4b4a-35a0-4785-834a-8760ea42cec4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f7b11e-8223-4b4c-a4c8-c070c98cd581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a119f06d-536c-4cc7-a876-caac2c1112f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bc26de-47cc-4d21-a7b9-4d5a20d334e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37b5950b-28c3-4f2e-82a5-1ffbdfcfe66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9d8443-7190-4edb-9d16-9fe60478fcbf",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3876d6c6-b7f6-4dc6-ba50-20ca85e78a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d260c4-5de3-4a8d-9709-38360c71ef3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2372d236-d79b-4ccd-bf54-6fc956d4919c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "444eda30-c10f-4fd2-bfe5-be6c1444ef41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c41371-4b4c-4462-acf6-bc3dee5e76d6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ae3dd3-9e36-44ea-a7b8-2bf9c3c880a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5700acc6-4a2e-494d-b6aa-42d744b8cf0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70add6a9-f24d-4312-b0ed-f5bc99ef1a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be9348b-7ad9-46cc-ad91-e55361bcb1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c47551-20ff-4daa-a5c6-8f0bfafbdcf7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239e535e-79f3-48a0-ad40-c06a0caa2580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d8053e-8f82-400a-a441-36f264ad1c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6003fd86-4911-4f57-9e39-4e5838449cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc95490-56ef-46d7-938c-741955e3a084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e79eaa-8b5f-4a9d-8186-4dde261b54ba",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b877c05a-1c98-4aea-a84f-5f677bb26a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "954c1604-7e23-40c7-a1ed-9948ea753b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c568f5d-0645-4981-837a-47da01d01082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "08593d66-6198-4c26-8fbe-496d02f9c894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613efb49-a270-4339-a377-b0fcf9d6fa8f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf61a4dd-9b8f-491a-a379-f4dac421777d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803e9cee-9478-44ac-aab2-dbedd2f9944b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c51c89-2020-477a-bd2d-05cf459fcf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a06c67cf-f68e-4223-bf0f-17a60514ba00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eff77fb-b07f-4756-81b9-c270c63bb397",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa262c91-be98-4d3e-bcef-67b68d60a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36b6f33-f079-45c7-9b3e-388a83b43fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf26f821-cf1c-461d-884f-4acab1c13dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "afb89256-d897-47e4-b3c7-6614448513a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b3f63f-0c24-4093-a8ed-93bda9d11624",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cd6aad-63d0-49ad-9b72-44d0ff6bf1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422c768e-f493-4e54-abf2-52d044319ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7092096-9db3-4175-9c87-5c3f0fadb796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba78b3ad-60b9-4715-b169-e350806ac029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0cd953-d063-491a-811f-ef4372f9d2d4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e91a5ef-f72b-4fbd-9605-488edc958a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dbef7c-1e52-4311-b59f-5151b57c0f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c478d9c2-415c-4b42-bd94-f93175e10579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "827dee68-9def-423d-bb15-299103cec77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9267bb15-2036-484a-a6ed-48e25b11c3b2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8497d302-defa-4bc2-8bf5-2a63b73f90bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfa27eb-9adf-4209-a9f1-0b56228b1c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efbb972-433b-4840-b5b0-a1fb48ad80ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f834bfb3-77da-4bd8-9010-4c08d6e0e59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e85981-d1af-40b1-ac53-ed7d2bac75f9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6484a351-ff3e-4376-a6e8-8621352e7290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "86609395-d4f7-4931-be40-4cc8b89b1749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da95c9ef-389c-4d4c-88f3-20f67b30e8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f649ce98-e35b-45fb-9c0c-621dfc153c95"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a5d73402-954f-4165-8ffa-295875ab757e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e9c7ada-ea3c-470c-af9b-55a5dc7beb70",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb43fcd5-b085-4a6d-b62c-1bf3c0619ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91bd428f-4346-45b2-be4e-7ee4fc4b7db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553d26e3-42cc-41b9-bb7d-a419b9af7949",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a02f57a7-706f-4a06-8fc2-88e6b700ddcd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f7a95a8-0ea6-42c4-901e-4e82685121a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4571aca7-ac19-4809-8f04-04acf49244fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6a5336f-b932-43f6-be55-5b1da48497d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89542c37-acad-413c-b81b-e9d08f8c366d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54ad9a81-0427-4249-a5ea-185019b076b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74e35115-2808-40c7-99e2-174078157fbc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc579668-1d8e-4e7c-9f36-16be89f349ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f873a52f-ce08-450b-9514-bc2082d4cd3e"
                }
              }
            ]
          },
          {
            "id": "970e4ad1-5592-4299-8e80-4e0081b260e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fd02ce68-80fb-46d3-a5ca-41e3ff3ca4af",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b900e660-2290-4a8e-bfea-024d7a49218a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e91463-9059-4124-938c-accc827ed5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3e2479d5-8feb-4a9b-ab8d-a3a00f1ad442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90b1936-9b66-4b00-9a52-4533c35fbe27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82e2154-c6ee-49be-9687-50379dcfc389"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ab6125b-6082-4ad4-b13d-718b95d38071",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8585540-21cd-4a62-8cde-969564b732a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf0b31ea-d0f5-4b5f-a8f1-21d7abf46ce4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3be2cdb1-c00b-4f0e-acd7-54e97c6f10ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a692151-54af-4d4a-9f50-87e99b4f28b4"
                    }
                  }
                ]
              },
              {
                "id": "30651f75-06f5-4020-938b-e03fdeff6fa1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf737739-6de1-4359-8bf5-65c4dd85d080",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5552ff84-336d-401a-9644-a2ad2facf6f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47120fff-347b-48e2-aa88-13ba1fcd955c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5cd54619-9d9f-40a6-9ea2-5c78dbd98539"
                    }
                  }
                ]
              },
              {
                "id": "118925da-db73-45c7-8872-880fe37276d4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a54ecb7-b396-45e3-a831-038417a31270",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89341300-b6e5-4a95-bc58-0f26ce30d2c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f814661-8510-4787-bf86-0c7d4f393138",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e4905cb-eed9-46d1-bd04-1287129ae355"
                    }
                  }
                ]
              },
              {
                "id": "10be4c18-dc64-41c7-82bf-1a36e961816d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4336ab7f-d5ee-45e1-95b1-2560a926c21c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "881edcfa-fc44-4a75-82f7-a67dbe942238"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ec51619-90f4-4341-8f7f-667555a3988b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "240e3283-777f-4014-9674-d22b336e9ff8"
                    }
                  }
                ]
              },
              {
                "id": "55e7257e-d0b6-480a-ae63-149d1b927d65",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57a2ce1a-5306-4df3-8eb5-9631032612af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c6701ed-90a0-491a-b0f5-e34d38b51ae8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19322733-7ecb-4901-9c7f-ac137d7439af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c18cd528-bc6f-4079-ac7e-56a8773cd411"
                    }
                  }
                ]
              },
              {
                "id": "f3f348e5-9bbf-4c31-9e40-9b15d58b4af3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e4e92af-343f-475c-b62a-572ced952492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25e62c49-58c0-4908-b10f-76733edbd819"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd1442fe-650b-4479-b9db-de27995772dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfb87ba9-2709-40d2-a8e9-8e2454bf8810"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5255da2d-0572-4a0c-8c9d-d5c940b8006a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94267c20-c699-4388-994d-e8536ed607d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41c14fd0-2c11-4444-8665-7f4e55cc4f11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4a73c1b-b7a3-40aa-9256-a374b68c1ae7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef1961f0-5647-4f73-b151-170b4b89c67b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b3e97cfa-b069-4242-adda-a54d532e236f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e33fb0c-3fb7-4ca1-b6a8-837ed59e3bec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d4be129-3f04-47a8-a2cb-24fc7632e74e"
            }
          }
        ]
      },
      {
        "id": "f4bde2f3-99c0-4d22-a087-6745147027d8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4983cb2c-dc29-47ab-b3b9-a64a7c7ef217",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d9b95e5-1e25-4513-84ec-e3f5a3204257",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b15ec2b5-825e-4ee6-b1d7-19ffe208d058",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e4f3d0-1249-442a-ab9f-ac8d5db210a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7eabf8-02c1-45ec-82b4-7154f183a47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee49adf-50df-48f6-be38-a610fa79d437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e4cd21-1fde-4345-add2-21f1004d57e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cccb6d-32a4-4321-8b34-007657a8f59b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd039158-43f6-4fa8-adba-99edddeb01c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd29cfcc-06c6-417b-b940-c6017c6c5169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487e48da-0876-4c5e-9f53-12c791840e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa1afac-0dc6-448d-af79-58d9833075dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06263a2-9633-43a8-bce1-545ec25f9cd2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac074f8-d5c4-46e4-8a96-e130205aee0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647d15eb-0f6c-4968-ae2e-5e3525942c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3adb5e-48db-4707-a59c-5c8183f1d409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4723bdde-fff8-439e-b7d1-53ea056c1bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a40f277-3368-4248-a904-6ae6c78de18d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e2cd72-685a-4296-9a70-da84794c131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274f1031-bdf6-45b0-8dcf-b7d2b4f566e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1188db95-d8b4-428c-bf4f-55afb0907184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aca9efa-2dd5-4eb4-9f9e-53fc31bdc623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23462ce-887f-4270-9f18-0b2b1213e54d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e84e20e-1255-486a-9c5a-673a0d12c744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c28695-bd0b-4730-bda1-a4bec32754b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14185f65-0141-47a0-8172-d2a3f8d20fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeafad3e-52dc-4008-9b89-8e9dfaaa54a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602bdb20-f275-45f4-bdcd-4965877059a1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5153d3e-0a12-4a38-8ab0-b97ac03f1f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6074d9ca-bac7-4d1a-8160-b2bad9446441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380e389d-aba4-4726-ad7f-46aad6d4e2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b509da-ffe2-42f2-b559-7c714972c051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05de8a97-08d4-4d08-b085-043562fd16bc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d2acde-8d63-40aa-8a81-d5137952a6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2652752-19d2-4fb0-8aa5-36a506063364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d0b8ba-9886-4a11-bbf7-5a2011d1e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "be44f00e-5723-4e76-a1e4-3868b172ff0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3557b137-de5e-4d48-b381-f78d37733053",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53067c3b-2e6f-4911-9320-ef5835d1857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb82892-450e-4157-a2f7-0762c77a1b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77885eb-a1ff-44ce-aa1a-0588f0fa26a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7896ca5-b8ef-4e1a-ace4-b4f49db08873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf10cef7-aa72-442c-8ce3-5a10f873530a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5bb1a1-5547-4856-8e94-23d4c9970dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121684ab-1188-42f2-b8a1-a15e06c9b953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b2a924-acb3-4105-afd0-d6b8f5bc0deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61efb1b0-4bcf-4bd8-bf4b-61e16fd1e652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d51039-66c5-4bce-8461-65f91dcef1db",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff13e96-88ca-4457-ae8e-b007f13b0b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c60684-22c3-4fe8-ac37-890714d8dc50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e49f2a1-92bf-4c09-ab98-4ef07d839e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "500de8f8-6c53-4fd4-98ba-da951ca58d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ef5e0a-70ca-4f09-89e7-9c00dd22c1c7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a939625e-14d5-4136-aaea-e5c63493187f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ed9c0a-dffe-4c8e-9921-0cb9eded6222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95df1467-3655-4b72-bec9-e3c462839853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f75cbba-c5be-4cf5-87d1-3153c0a5e239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f20f092-cec8-4aef-8ac4-1f5b22f18d39",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6a52f7-99bf-47f4-b000-4e717bc9ed57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cea332-4a17-4df2-8d3a-e07a81afad93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dab728-f42a-4374-968c-a040f3b3b090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba09115e-7b5a-4cb8-b744-52f589075b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02db12cf-9749-4fbe-abd4-e2c0eee8c34e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f148bb77-9c54-4ae7-b4df-5af58d8d3bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69988c2e-4652-4c87-97ac-bb27788511d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f75ba6-d8b4-4cdd-bad2-99e6f7e1afda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "430e1dd8-9e54-469d-8e39-e69dccbc7c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1725928-0ded-4bcb-93a8-2648987bcd36",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f9e975-5ecf-4f26-9f51-e7a5ce9e8722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e885485-11b3-42b4-a892-e1d16913de71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f1a31c-8170-4671-8ac2-abab3e0d04fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "57a02afe-cbac-40ad-8808-3cfb7b7b20d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fd1981-9ded-449e-b069-115395c34dae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7151fa67-851a-4986-aa34-7a103669cf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4afbcf-1822-4b4c-be59-f5d8541fedaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e76368-3046-48c3-af49-e17694fe0c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ce16a6-cdd2-463a-91e3-0e72da47b6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8d90d0-8223-41d4-ac55-41a2a812e1ef",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f13819-7bbc-4e28-9d60-609315923f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c4cb30-23b8-49ad-9e44-1eff8822586c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7b0aca-5ca0-46c1-a207-1de27f1816ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f994f81e-e69d-41da-afcb-44723a84af73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c08799-a807-407a-b344-6545b2de521d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c6a002-e266-4a01-94d8-37be6be966af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70724f4f-fb0c-4df6-ad97-0262524fa131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0db1e3-e182-4ac8-a98e-3bd9794d6cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6e4a4a-9145-44f1-bfcb-66f5c54e96b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca5ade-01d6-4d6d-bee0-0ee8d506b660",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639f0e22-3787-4787-b029-75f4308bc4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69088cf-3594-4e87-be60-5da646267a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373d37e1-9e3b-439c-aa4e-9750adeb1a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a981aa-af78-496b-82f9-99a61aba2436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d8f88e-c82e-4768-ad16-d93d116fe539",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c91cbd-bdc1-4f2e-b5c7-bba43391845b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d51b65d-20a2-44f1-b38a-3e63639b73b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7b4310-c0ea-4884-9f84-6f94a43ed984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b5dbb4a-3f98-468e-b67e-b49eee185772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a8c21d-7c29-458e-9fba-ca858277862c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896f8c4b-42de-4bf6-bf97-4c8d873b8b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68011846-7788-4f46-955c-54fc4ec029f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572a3309-2b38-4099-8b00-75c357b89c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52ef7735-d595-4f0d-b9f9-b333a1d2f212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e26c00-92a2-462a-9eb4-c36b32a46e52",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de9ddee-2417-4435-bbbc-e8be6d78becc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ebdc9d-8ab7-4541-95c6-e45fbbc1ec03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04495769-aeac-4c98-9c9c-9c88a91ab6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9de01b99-cc73-4375-bef1-69b87c66ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d0ee3e-2ea2-4420-a95a-0d511acde2b8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e921d3eb-1174-4932-8525-99fa618a85e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30622ebb-9039-48cd-8d5a-5795a26969fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42159679-d743-4da8-96ad-e71f66ff8beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c495f5ea-8c77-4691-8723-1d52ea20bbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b49ac0c-5474-4924-97fc-24e3991c0a8e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e27c712-4bc3-4c96-80b2-e3a60ab7c600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e098bfb0-20a3-448c-8d02-08c88776c16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b36154-b191-4ab2-b91b-b187f190fd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cbd2e4-96fd-4953-a44f-2fc4a5f39dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201b2490-a8df-4671-b7d8-e6d0d10628c6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7de557-7fae-479a-86b9-91677c512c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129e4ec8-b9ef-4536-a0e0-2627d15654aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e2da9-a171-4b76-bf9a-21c424bec51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c221938d-3a1d-491c-a7ba-554fd76407af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f832151-b4ec-4eac-91f9-1581596ee2b2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ddefd4-cbeb-4c15-9920-64bb5e79c9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e324cf8-eba2-43da-bcf2-084333c9a7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4354b118-f702-4fba-b284-d51f341aa14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25287384-7c42-486b-96c5-8ad91610a369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc57f028-b5c8-453a-b19c-a90d360bcfe4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b04cc55-5e04-4610-b1d7-902e44bf426e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec31a33-4b05-4a77-9ca5-fa182a99d143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61af2a6a-8db8-4fd7-a4e0-0d1ecc86f680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11ec7c30-2b3d-4f38-8926-e4b87c905f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b590e750-e098-4a2e-927e-3b75f74c22b2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544c8d6a-63fb-49cc-8db1-597b1980669b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c455ac-3949-4f1d-ba9a-ff6da11471b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b10cec-a16f-4a8e-9bfb-f3d1cabc541a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b19b905a-68e5-466a-9b1b-0cc039bd5657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd8e9e9-38c7-4107-9240-2e078d20d02c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3e746c-9cc4-4ee9-a01d-21fc78d32cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bf3662-b8c2-4f64-98c9-d3f8a0f65670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141a876c-9b55-491d-a24d-b1cd4097fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5025f2-b10e-41e2-b3e8-fc832452c6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5af1dc0-4bd6-4139-bae6-12561bc75e41",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748f196a-6f95-4c05-9594-2e6f5a90ebfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8449efe7-5ff2-4ae8-aa1f-7b93a9774d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e39948-4d45-4feb-b332-1255c801829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7c993c-5b94-4858-8210-faa45a80b713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6862a63-010a-40b1-b2a9-466ea52407fa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bdafcc-ffe3-48d0-9bb5-3b4d68472557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e166a6-7ebf-4995-9e88-a8c9528b4287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a281d1e-0ade-445a-a545-7104c2bdb205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f6e218-1c1b-4057-a050-067e1fe27504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194ac767-0d03-42dc-88b9-19204f7c295c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3944f1-2b59-49d1-9516-c2a948cea594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915bbce7-faa1-4184-a0e6-ef167c75aba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ded222-6f4c-474f-80d3-be88e356ee13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7b9eab-e106-4bb0-ba33-26c0860b2485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da54cd8-b09a-41c2-8db8-daacf06bcb58",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378ef83b-6ab8-44be-9bcf-61c29aabb45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8f1f92-209c-45a9-bca6-53f7320334a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adbae37-c7a7-43ef-b097-d68aea5e9d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c33e30f-8209-4172-8034-7cde837cedeb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ff93db3-ed2c-4605-a91f-6e800692c145",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bdd5cf8-acd0-484e-b329-41b04d057f62",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eff1966-e189-4730-9819-e02a4a965145",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "da3ed15e-9c47-4da8-be6e-98f658709474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf6e0e2-15df-4df4-a4a3-d6a459c41373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ee9d343-65da-48b8-9501-0b144059a1ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "974585fc-7e06-43ee-a8fd-9ada2ac4bc6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3ba4461-a666-4cb3-9ca0-9b7738463ffa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81eb3ca1-d8d5-45de-a33b-0f70191f45d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85d987fc-458b-419d-9304-894c3450c0ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7507a13d-6926-4f43-816b-4a1dfbcf40c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa894416-57d1-4835-9e16-98b9a1571a7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "169607d9-18f1-4be3-99e9-3788df3b036e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6f26481-a26b-4671-ae92-4c01a450d665"
            }
          }
        ]
      },
      {
        "id": "902d3ede-fc2a-401c-867d-282d91ca1d73",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "953566a0-a503-47db-968d-15c8b47982bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5485ed39-7a6a-424f-8977-a4803fe92506",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb3a4270-bc73-4d1a-83fb-e4dc439f0498",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820e6194-5c86-4944-b076-49748fc18161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0078e939-10c8-4a65-b2c7-e965d3aa9556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb2123f-422c-4813-b52d-b1bd67d0941f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8754a56f-127d-42ff-9434-dec9e923745b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9784ed-86d1-4b37-a490-bbffb97fdfa5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cfc50e-8b38-4a20-8333-aed74349f1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947cbe1c-73c1-4c8f-b2ad-1d1d9c1b1a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7097dd9f-148c-4b93-a722-18f33217801c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fb411c-f2b3-4d55-9326-b6aa5d173856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6583d73c-312f-4c19-b8e0-91b89077536f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2805a41f-03eb-4095-9960-28856d8c51fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88f84fa-aac7-46b1-94a9-e96b7e771fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2590596f-1271-4ddb-88e2-5d4c5202b311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a353f29-a04e-4b30-a084-c36ca91c81bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d587d-b24f-4604-964c-8a77a7877683",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c0c68c-7c1d-4348-a7c6-d4a6e16f77cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caef4ee2-74cc-480d-9cff-f035f7c46b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b654a42b-948f-45e6-9363-e6069bb9cc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16608435-a382-4f49-b520-4fe79fe9d2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08651b4b-7d49-4df5-a207-1b988f77e93f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1d29e6-f161-4484-a1b3-0c08e253c04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7b11e9-5a3c-45a5-8935-6c9555f59a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26df4c5e-9f61-49f8-93f7-b044756d76bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b52766-6e2c-469a-ac75-c3ca00961bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee4023a-b0d4-4ee3-84cb-7b042340ea16",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43afb316-ce1f-4f31-86f5-ca6e200b88bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6134e8b6-6c3a-446c-9d74-e76ccea27b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0073ede-3653-429f-a0c8-b789ef23f264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eda97a42-486f-4584-a716-1d270b3e8856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a991f67-bf69-4575-a16d-3f303773c5b3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241b3270-9d7c-43d3-b887-2136a251b3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc5eefd-2334-496d-89d8-9d6cf143b572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82655e9-dc9d-46c7-a7a3-2a6bd0ae541c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff74fd6-5921-43ea-8810-9b82af7f74c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c6e103-2153-43b7-a439-2bedaf94ff69",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ac6e85-a3b2-45fa-b25c-196b19792a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a449932b-1603-4881-983f-1d73ebefcc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cc2a5a-3aca-40b4-b276-425fdb9d91e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab56778b-9fcd-42a8-ad47-542db4d121d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd3c013-9d7b-4e4f-b24b-47319233feb1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b007f47-e2af-4742-b771-6f33d3f3c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660238c4-c0b5-47d8-bb36-0c0024335d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50a078e-9395-4292-9612-e85d2826f470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a710bb4c-7108-4425-84ea-e0d27ce9a96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3e8ebe-83ac-4554-ab79-4596bd5ff8c8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f24aa4-5c78-4eeb-a6c5-453b6a253d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00ae8f8-afe0-4a0d-a70b-99f885466dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0e7f49-2233-473a-b3b0-165babc67ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d804b7cf-5a53-4936-9294-8dae5091e835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683e8884-aa5c-4bfa-8e74-bf23a991df41",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e02307c-fe16-4b2a-9d71-b5c4028f57d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d6e7f5-de20-4a67-9839-0882e61cb6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8770f531-412f-4dc3-bf2a-93463c022ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bace32-db8e-49ea-a772-b0007407cb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a4a75f-b7ae-4929-8d47-0588988ca61f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c55df6-0cdd-4239-8029-28acc734b361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72db1413-7b44-4872-8e6f-302b57f53bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fda85e9-3e97-483a-b7fa-dd915854c378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3819774a-a420-40bd-9162-fc8451cceb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f7de7c-42f5-4335-8961-55ce77ecd7ca",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654e4cfa-f76d-4138-81f1-b1c262cb9a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fb2ee1-cc25-432b-bc26-8093a54929e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cb0217-abdf-4655-a20b-7d78aa7eeef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "061578fa-6f99-4b9a-ae0a-032beef770a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86539a5-2cdc-46c4-9ff1-6ef75158ea32",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bf6b73-e5af-4c3f-8678-9141b93efefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2769239b-a9df-4c83-9515-ef928a390849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84df8687-4282-41ca-b3ef-ca3e9d48bdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ac9a5b-ef1f-48a3-828f-f76e33482a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6559193b-7322-45f4-b3ff-0628e1b5cc06",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea76855-26e2-45bf-89cc-7a86daf137f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681e77e5-f0ad-44ac-b63e-bebd17efe61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b8fa54-622f-46f1-884b-05726be39ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae6a6ed-9143-44a1-9a6a-24d1141cf9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6661df82-2b60-44cf-98aa-847f31425c8f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e90000-b410-42d5-adf0-28b23f667150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2aadac-2b76-4822-b677-2aea067e04a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98c685a-9a0c-4e2d-88e2-ac7a8ad725ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccb58fa-e73f-4e3d-a10c-9dcb0b211224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89494b8b-6023-4450-8654-0974ddc64c05",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d81cf1-0d2c-4370-be6b-050a7b97e6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b443e5f-bd99-4439-a905-4dd66b706e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f174dd1-0731-458e-8ea8-b54480fb68d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f363375-520f-4163-b730-80f1b11c4d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836d2ad9-ecaf-4482-9f73-fac5fdd9438c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321dfdf0-f084-472f-b564-e416e535267e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33c9971-f353-422a-8e6e-4eaaf48bef0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef2d45c-4dfc-4dc6-94df-252d4a9b64fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11ca62df-acb2-42ec-af59-36f5d68737af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef6cf6-2a6a-4a5d-9463-ece4902a5755",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a04682c-1f75-496f-b6bd-d29bfc5e5887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d800fd4-1a9e-4a6a-b77a-c95939a63a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85df25a-0802-4bb5-af1f-20065bc68aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5924edf3-e433-413b-9a04-ed621f98acf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6c5dad-f962-4646-a74f-57857fea4a73",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d94674-30de-4ce2-bfbe-b888f8560f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81c91c2-52d6-4177-a1ab-0c90d93c0dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746134f7-f301-4791-b372-4f0418d247ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a13096e-f7f9-4ff9-8bad-96ff32c287c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5956d43e-836d-441a-bf28-602d64aaf10d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac61f7e4-a494-41fa-8a92-400f514da962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9a4943-e5c6-481d-ad60-c1c57ecaf273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b684a6a4-ca32-4845-a30c-2f10e8b362f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bba038c-b726-47b9-9bc7-1c4352e3db8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c834494f-5201-48a7-a56c-1dedb39af0cb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465637d2-b7ac-44c2-aaf3-d1c9022dd8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f34fb49-c21b-4de2-9988-71c4c98fbdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a68a250-bfe9-4021-9922-a0019d3b93bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b84d8ab-0a9a-439b-872c-7198f1f0cac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b30ff4a-d92e-4702-8163-5c6d11abd4d8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b9c79d-b5ef-4774-b63b-79a7f2398cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacb011e-3358-4387-8739-d5addf2f048f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff71347-79a1-41a3-b2e2-ddb0226533c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb49c29-5244-4f71-abbe-1f0f3ecb9b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2af202-06be-49ac-8167-5a2bf16dab34",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca99771d-9a36-4e80-97a8-97732748a66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb4ee690-7892-4e91-b353-a84f3cedbfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6ea4e1-18c9-4b5d-b1ec-384ab7f4a988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a72582-6bd9-42ec-be4c-f208067b13cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac2cc6c-0f99-40f9-8e16-90f39b2b64f3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc0a6e4-5540-4bef-ad81-3029a09c8855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c4fe15-a7a6-40d2-aca7-8a4d6ea43005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f8cf51-0aeb-431d-be65-4920886b3e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "678c10d8-332c-450b-a198-83f86a81b0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6aef64c-c7b5-48a4-a3a4-08ec9d505924",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badc78d6-a009-43a2-9c72-595085facef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8bb18a-7f92-430c-bfb3-56c360d4b622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e8c631-61e2-421b-aefd-c6b4ae4b281c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abbc920-6fc6-4d4f-9cef-4e2d64ddbf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c62841-28cd-4c46-9cf0-4c8f41aea945",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3072094-e011-48d3-9117-a8064f372dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae945cb-b597-40e5-a200-9ff3ddff8fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480c4930-9e9a-46f9-a587-b262eb2bee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ec144e-b601-45dd-803c-39006f5f3c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d1d3ec-3fa7-49ec-8b78-5672e38fc452",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6739780-7707-4c93-b4d3-e8513d2dc2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8371ff56-cb00-43a3-b1cb-0f00f5df9c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae580e1-daf4-4f4a-926f-a000c1e6d15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac75d7e0-5ce2-45fd-9c80-b789865786df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fb041c-60b6-4a51-9485-4f80351614c6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927eaf39-cfed-4d56-9cf3-30098f5dd266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6810c657-31b2-4dbd-a59e-e840f7c32bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e74cf8a-c756-4d52-8bb2-d16c1699a6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f154d1-c43e-4748-a558-f6254b3f3940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d22d49-a69a-41a1-8fd8-0c7f53adce9c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0eea48a-13bc-47da-810e-e7862d516ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8768d6-6bf6-4154-a390-ffde36c54d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed08c98-4f7b-4a7f-a3c1-462fcbfd7c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c51a7b4b-c465-4047-a5bc-99487649ba2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16678d8f-a519-4543-97c5-da45a63e9039",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a20637-0301-4892-af3a-2f941f832fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49172b7c-2d65-4904-ac35-74406df54546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95836d1e-1c8d-42fd-bc4a-4f6cb85ee7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d30f707-febe-441e-9a8d-d65608a64198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49a6055-3469-44fc-beb6-1b3f0fadf13b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed0c62a-d272-4305-b2af-8867eade426c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151210d1-4348-4687-85a7-68ab7d95eaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24178fc-ba7c-4a06-aeb8-e3658279e522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c0176a9-f9be-44b6-af65-0ae3190fe1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2b7a44-1f53-4272-83d6-ea01ace52113",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7274dc-f885-4a26-a74f-a847dd686a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4209eb55-6ae5-41e7-b894-9c231a6b7046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9afb284-c6ff-4f78-bdab-84a82e847c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9157ffcd-5335-46de-a337-0b222cf7d3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3061e6-433a-4389-8771-6003df0f6e55",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6b42ea-277f-4455-b10a-15d372efdbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba6dc68-fa00-4ab2-a9db-7118a5a72e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f66a1ad-e6a4-451a-92c7-b275f3dc0299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b490e3-ec94-4372-9e61-24f46dd67646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f1f35e-fbce-406c-8eb7-39587b6dd24f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bdd175-a030-4061-9d31-7410ba4f58d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64c602b-5aa8-4bf5-9dd8-ee2197eb701f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68127490-d946-41a4-99e5-670db7391b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3194f8e3-70f2-4eaf-9be1-5121c6032fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f227c400-2b11-4f84-8c8f-f843743b70f5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae10fca-3cb2-4a7e-9601-3cb40c71eccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b98add5-89b9-48fd-8c60-48bad83a95dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879b3b83-0ab1-4136-9563-c3e3cc6f9736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5a887e-506e-45b0-83ee-49d4fbab139e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe20fe5-8391-4231-93bf-b135b3bc6123",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20559820-14e6-4f05-9230-85659fa755a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9fef27-ef8c-4af6-8677-36f41f1f5222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5601706a-ba2a-4ba3-976e-c12af3308f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e25e651-0b5f-4be7-8d3c-6a7018bc39d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "502bbf6d-12f7-49ac-9e6f-13a02c6709b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8c9a4d9-5597-42b6-a016-33d4aa96f460",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb99334-3976-43e5-a8d7-850da74fedcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "31fd15a4-7e58-4318-bbcf-9151b5a79cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f129de1a-d3fc-4a3b-bbb1-8947034966bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b7d5262-98de-4f91-8de2-8ba0a694075d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df422be0-197d-471f-aa70-6370916becc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05c59dba-6866-4b30-81da-d030e95f906a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b46d4262-744f-40e5-a00f-4054a37e8da5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3718f52-44a6-4b1a-af95-f8f280237eea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffc908f4-6d3f-4f16-a672-c80b5a378b66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f1a2a8ad-5afd-4c71-8ead-d2e79d483dff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ede61f3f-ccc9-42c0-a3d5-77c8f54b2e6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5520d538-d0a4-438b-a3ac-dadb37121a5a"
            }
          }
        ]
      },
      {
        "id": "5e0d0150-186e-47c0-867b-5be56411c4f6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4534d9bd-1134-42d6-8cdb-cd82aaee5585",
            "name": "Negative Testing",
            "item": [
              {
                "id": "878c8903-02db-4f0e-bc87-cac033b337d5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d56ffa88-fb54-4840-ab22-582d874f12a3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3047985f-f9a0-4709-a8b4-f5837892e76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0355c4c-55b2-444c-a5a6-2a7f843a1847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886a5322-ff11-4c8f-8823-1c28d50b661b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c449634-c611-4605-a857-f964b22c312d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0609e6ea-0a8e-4c7b-915e-bc87a3a8f7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be77c8cf-3869-4736-8057-c07ba2ed295a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cde5183-a7b3-4eab-ac45-2aa49c4c6ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8649b575-2feb-4f5a-a9e4-9d329105100a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5f9bf6-068b-418b-9642-20a58752de8c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1955c5b5-7be4-4995-a313-eeeb9ebdf34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d87ec6-d671-432d-8b04-0d39cfe333bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96211b2-520a-44b6-a51c-c42a6a21bc54",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c76ca3-0ed4-4e4a-a068-0e4dec1b3be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911a2f76-1290-4684-991f-cf72b14a25af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5835907-9872-4814-a771-bd8f19fdfe81",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8b64d6-f151-4e01-b44b-6ec82b8d51ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de35f945-8e52-417c-ad85-0d714cf918d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a80fd5-86e4-416a-aa17-a351533b1265",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607b533e-f312-4b34-9d40-982558d895e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86ab416-055a-47d6-9f87-b65008f92ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7b91ee-cbee-4e10-8503-70a87f123d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60ba5f5-1399-4fde-828e-1364efb8ce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b5304e-36fa-4ce2-8cd8-4eb844772ab7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb54751c-efdf-48eb-a481-5d729342c829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "289492dd-7890-42ba-b3da-b0a9b3cdebf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0a484f-8bc4-44a3-8100-1969aafc1379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1626e128-6098-4550-9ea2-6155c0e22c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2128eee-daf3-4d38-88ee-a5cd421c62a7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111467bb-062a-4c4c-bf29-c8cd9e563d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e65fa4-fed7-4c3a-a885-9eb86ad8ba90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d448af3-7bd2-4415-b124-1b0ec7c4cd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478e374f-f299-4142-9529-406708947173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d270f-3bd0-4eb7-9b7d-1364811d79a6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08ebcbc-eff1-4240-a4a4-0e563bc45a1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4fdfa2-288c-466b-9f09-d66e4c80ce94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e27c324-d5e5-4d10-96f4-6286010f841d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319a78cb-ca9a-4d45-8353-60ec08688342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1689353-8b37-4c53-9dc6-6b34387658c6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9705d1-d4ef-4fc4-aa8b-cb46c128d368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc45721-dde6-4ad7-adbf-6df0715420f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacde967-e343-4dc6-a336-bff4ceeaab10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596091a6-c107-4c92-9641-fb05bc5a0deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809d7e83-0090-46f0-92a8-a0a2d7ad883b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8fcf9f-efff-432f-ac8e-0b77f58a4b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324cb6c1-5fdd-4489-a996-a79d01c9a73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46bd291-a8b2-4976-a264-0ae7d6f056ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9440e0ce-1e7e-4e0f-8432-15600ea2ebdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5ca742-5775-4dbe-84bf-32d0aa154e00",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d038a4cd-898b-4eb2-9947-6268ee54184c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69253d29-1176-48a2-aef9-2488d9923eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc05892e-1e4f-4564-b758-8d744457b7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0afb81-b204-477e-8f0f-fccac0072c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3c1b4b-e0c7-4527-9d33-44fc9b620311",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ce9ba7-e7df-4ae0-a3dd-0756d608ee4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ece684b2-50cc-418d-a9e6-1002b3ccdce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57cbace-f983-40da-96b6-9762de3ac87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfdcdcf3-3621-49d4-a311-de544eb1cef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee9f85e-1a40-4c78-92ff-4b3d3094591a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b01317-c1d4-40cc-aea0-3662c180dbb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0813c2ed-939f-4741-8629-3f05bbb0a066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8a30ae-080c-4412-b92a-e2c11e824711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb501b2-26d1-44a5-93c7-83e5d54794a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbecbef-c6f0-474f-996b-152439e3b957",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb6037-123a-40e6-9276-c6ca6361f28b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c17240f-adf2-47a3-9b18-7b519157368c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fef1761-a3e5-4132-a6ab-9e8c1815e0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6987ef1c-13d3-4051-8ca8-7def31066967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991a64e7-ea32-4c64-ac09-b0cb9c56d1a0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0725b999-2613-4117-899e-519a6afb4e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dde75be-33de-4e0f-908e-8d84a288b53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7787c9b4-fc16-445b-8f67-5572696e0427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f5d724-977b-4b94-8926-c6d8116a1c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44388977-b462-4c10-b904-6c784b7cadbb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab4f9a5-af15-4f0d-a6ce-a26efbbe7403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b794339-5870-4390-855e-be73851fac97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7837f032-8435-427e-bce1-8a5d41bf8549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6201e2f6-239c-4009-9a3c-e0b44e460576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0b2d85-4185-4b18-9916-2e6c45145f1b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582a0060-2876-4dc7-878b-69c7badc3dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8657629c-3d0a-4bb3-b44d-9f6a9a49500e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3452ba-352d-4918-b0d1-8d833f521879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61a5a9f-a5f5-42ae-a4f5-b0d6147860ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d57a3f7-9f5c-4805-8dc0-e5bc0d902abd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069eb178-3435-472d-902a-c63db6a95cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219ed4ab-7c18-41ca-a888-e5bd311bf0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2760a18b-cd27-4621-8562-1a2c740cf29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45aa64f3-3892-4781-9f76-b7366c47be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead3ed9b-41d2-4036-8917-c1db57d86f1b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349ffc8a-2287-4644-8b41-574ce8f51e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b629c1d3-1e18-4acd-b6a9-aca7d76604f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171ed9a9-055c-4d06-8ca3-9ab77c0b3547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c456a9-671d-4152-938b-1ba8790ee6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71758424-1dcf-44dc-a2ac-3f3b1a962f99",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99d8e17-e1cd-46f5-bfdc-d64672e7c467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01c3df0-38f3-4e45-85c8-8eccb42c7921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72a7732-b0ac-4fa5-8c9c-f5e9202c0040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e840196-385c-4800-82f5-316926ec60a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9b1b2d-d7e8-4484-84c5-e17633ddf26d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59d9b01-ee68-46d7-82b6-9fbcdfc455e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a07493-f93c-4b4b-8d07-70dd4e8b0cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbde1b14-e3aa-4d63-8202-185a2c70edf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f145e09-abbe-438d-a5a4-adf6bf40f512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ba683b-1fd4-4944-a2ee-812ae9e7b0a2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2829c586-21c6-413c-8e23-6d1cd258d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e92dca-685e-40d2-b810-789a33e122db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513e996b-4c0d-47c3-b5ce-c28ae0b52478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1382227-d93b-4138-92d8-40d23afedfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9b54c3-e4ed-41c1-bbe7-f552c6425f22",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e092515a-fe24-4ef9-9b52-6a1cae5dd54e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c136ff1-344e-4e31-883b-2d9a8767d6f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe88bc7-11e9-4bcd-8a27-adbf3b82a4b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bacb75-3922-46c4-8572-1e2ca06b33ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aad35b8-819c-48cd-af4a-d40cbfa8a60e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72827327-ffba-4b02-bfd3-929da15b1ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e9e3cfd-0ce7-4f36-93e4-3f4c66042312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8059475e-5025-47cc-b603-4b00392e0966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f9c422-399d-44e4-ade3-4b3ddd45a2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06eaff42-8b3c-4377-b39a-d86b81be1ec4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d571b0c4-e185-41a7-8ecb-eb2f536b3956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cd6117-3529-4ece-a231-09ce9a444669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749a323d-3bef-4aad-84a9-95897c8fe983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d31ecb-1674-4d4b-b8e3-6c6915395873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a3dde2-e4d8-4947-a069-e1da1e601a61",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4cfd84-478a-4146-b769-50568ed1b45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68918f7f-c249-4c60-b07d-466da1008cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89faac06-06ab-4592-b8f5-8748d1b354f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7de59cf-1151-4a39-946a-dc0aea6f3aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16076acd-551e-4074-aab4-9081fe4b6761",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc529d20-3307-4132-bc70-d61a6f5d8f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a32436ef-31e2-4a61-ad8b-0dd45e581e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814f9ee7-2d77-4324-9a8e-4ad630e8f5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa524d79-d476-438a-9e7c-1f8eed95e672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f58c38e-133a-4b92-acf4-c58c18dac443",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e63279b-ea07-41b9-983c-626e995af69e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85653c7d-3105-4326-bff4-a4b904f1fdb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b214ade3-f42f-442f-97dc-6357daba31f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790f584f-ccd9-4529-aa05-9e3679dccab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690fb6e6-dd6b-409e-bf06-03a45bf3e1a6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105ca430-6ac9-48fe-bf17-2987fb24c2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe0e0238-6e6b-43fd-93a4-41855dce3024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5490f9f-8328-40ee-81ac-b6c27fed0d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c4ee24-c57d-485b-8674-a55335620648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530dd69f-e560-4353-b731-f78dac7863d6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ae8e4e-d4e4-464a-a5a8-8aa20dbad155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de748292-49b5-40b2-9a16-0794cdb627a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9851e134-b291-45ec-b27a-35b833b7956b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60b84de-d6f1-46c3-b68b-8be8ac1dde2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5941af-816b-4b6d-9c03-ecf6af5d3030",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240931a6-b704-46df-9c59-7357210b0139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4dd596c-4371-40cd-946b-8081a12e1d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8675a1-671e-432e-ac74-7329c3d4508c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6bf4e6-ed74-4333-bcbc-35135df4d2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494187a0-15f1-43e7-834f-8696dea1a086",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60595c56-adcb-4e77-bce6-a9a2b241ee69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fd2f51-f122-4f38-a5aa-eb1b253781c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77b42ab-c97d-46b2-93dc-cc30a6fb987f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c7ae7f-ce58-418a-b1f9-13bb9e73fe06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6504c9b-93b7-4c42-86ba-0f398cef1365",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9ae2bc-e390-4197-8536-cff847ed0d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11704528-fff9-4d72-83cd-20f95c848da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcc0300-244c-44eb-8699-ed3bb27cca06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a37583a-90cb-4c40-813c-da18e87fe571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d354d24d-fb18-478a-9907-425ac7e8623a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1d50ba-3184-479d-b3ab-f39a31c0ea1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b441a4-ef4c-4cee-98fb-f96225b5a878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8f8e3e-c91c-4361-abbe-cbccdcd5eddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae892e6-cec0-4306-bb5a-fd20dfb223b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb95964-178b-41f2-9d30-a2010bb43fab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39db1852-dc1e-4bc7-8380-8b5a3f1bd2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535681c3-20d4-42da-b3ca-c16807a12b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac66a65-3564-414d-b777-15610d91cd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d7f744-69b0-43bc-b9b7-30da91cf0a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dce90d7-3bfe-443d-82a2-b44d7c335227",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b9845a-500e-43de-aaaa-1db7ebe36756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fbcb8c1-2def-451a-86da-4e5711180b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ff61a2-dbfe-4381-b3c8-c610a6328c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1615ca2-44d7-4345-a840-75da8666fe58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4b4a38-d5d6-4f43-b42b-3965f6bc38ca",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901b1f71-0d94-435a-85fe-14213076be9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bae515-ea9c-44c4-b0cf-5a868b54432c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5649f45e-93df-4c73-a3ee-0fd5131b2e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4df5854-ff9f-4e0f-a828-dfc9d41ec7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f7bd6e-029f-40c3-b1df-3250358bbdb0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049d3faf-faa6-4ec2-9a1c-7e026e9c2876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c5e69b-f1b4-498c-80e3-f8530352dbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a6808c-dea4-43ac-a0fc-b903747701d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ba00c2-6289-4388-92af-6d6a9a74c506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb943c8-c51c-4048-b274-9c354f39a809",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2826ffde-1ba2-4804-94a0-7ec412f63a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8cd7be-94b0-4e88-8e8b-b58c37c64b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e68f869-4168-4b54-abab-f00e374ad9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328eefe8-4592-4d70-9f7f-6f4cee7d2134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0915cd-880b-4662-8860-fe8648799d54",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06727080-69bf-459f-aed0-27351ff4078f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e0ed07-f4b2-441c-ab49-44039186418c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61abc6ce-e712-46fd-ba49-40ad61c8db1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e35b4d1-2e85-4551-8cf5-e02f4555b91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a10d1f0-3ea1-4d5e-9f2f-5afd035730b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f56f93-e8b1-45b8-b459-37e90a1c4599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51057d06-e911-4ae5-923c-aeef947a0924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e41dc0d-b2bc-481e-bc15-b6c6c3a16852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a8e769-9ff8-4410-98bf-2d5ecdd9760d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def9d3c7-49d0-4683-a24b-c5ac2003fbb3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbc902d-730c-41e2-9c37-638fc9d5955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd418524-620e-41c3-9cc0-2bd61b7ac17a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700e4b17-b0f2-4eb0-baea-6926c100b8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aac0684-accc-41f1-a74f-c1f509cb1a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d6c411-d71f-4d50-b8df-0074a3bfc92a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dee8197-c4fa-4498-9b41-63211ae86254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d1c5ab-7687-41d2-a5ad-c7c114d99928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "754b9503-0289-4965-8c94-bcc785633b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb67b927-ee54-4bfe-b4ae-d103bd4917a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f39c44-2960-415f-8852-344701aebdcc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfe83c7-60bf-4c9e-8a31-abb87019ee65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c61f201-8bc1-4a16-8222-eace70840a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cf5461-cd40-4dcf-a588-21a6608a1a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4f6b88-ed69-4833-be4e-35b04e57659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa34346-fe74-464d-b6ad-6a55f50a71b0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b71535-9b50-4855-984e-c34eada92c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa028fd-104e-4c89-8bd8-25b3cf3482ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d0cf1d-12a9-43b8-b471-f5cf7948fcfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a647ce0-a2bc-426e-9547-0a5045b1b5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2115df56-a12d-4501-9137-c4ac4ed1208c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d85dff1-7bea-4454-877c-61db7c9b3841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c76143-f334-4e94-87bd-4f74c4b31de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdea53e-6cc6-416a-9746-6a7fe99f2005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e014e8-c12e-41f4-ab6c-4c431ba809d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b37f0c-4576-4a8e-9b89-35734f2a982c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee5776d-12e5-4da1-9926-1962a684c816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da07ee23-25d8-4cc7-bf56-9c2d7fc2d3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb22f609-f9d9-4b5d-8c0e-e75806e2f0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12ff782-a000-4011-b9d3-c8291eca254e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8e1a6e-2581-4212-917f-407fa0c23102",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fec3422-3373-409a-86fc-07ed978bbf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd0c449-8b22-486b-b9e0-66d17933570e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fba6d0-ab6e-4016-9d4f-a7bd9e66559b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4201d70a-814b-4056-b006-230ecdbbf97e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1cb358-c53f-4c5c-a1f3-9e0a053ee2aa",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9fb9f1-cd87-4206-8107-690f8d814aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d51145-a492-4db4-9322-2611c7e85487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8086bf55-ccf5-47dc-b3d9-95eb79e3fd0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afe70e5-50b9-4795-9bef-a77a66ce6259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b22ff52-9345-4826-85c1-dddf13df08ee",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c16c04-96b2-4063-bfdf-0e7eedbda659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a8f71c-d7cc-4e0e-b115-bff7a6bacf5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20522c5-61ca-45d8-abc5-29e04e39bc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e731671-7b99-48f3-8d61-0281e4f22ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3420265-9048-4708-ba22-7ba6cec29874",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2ddb33-2261-4f7c-9a2a-9fbced6f926b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc04630b-27a3-4148-8c9b-ef19041dd830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae63055-1ad9-4dda-8f49-ceb31b6fcad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ebeadb-877f-4898-821c-cbb414dc9fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7419ff-f10c-47bf-a9c3-eb9f99ffbf01",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2115a35a-c485-49b9-903d-3bc32dce4dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d42ac4-c008-4280-a104-7395101c36c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75d235b-1d04-4a36-abe6-235055e5b4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e3ae047-ec57-4b15-9514-0bb03f1ed7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420536d5-9347-4baf-9287-58595b56d70c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c69009-34be-42cd-9378-3d4fee03ecd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f6ca8a-3692-4b55-a953-f973c3f22611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6445916-2b91-4353-aada-2dd406163554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6145a02e-6790-4af3-a5be-0ae9d8aa0dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58900192-5ff0-4e59-b22e-08c3656219a7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a08dd-27f4-47b6-b4a1-1f187bac4bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1026bb5-0774-4c94-a948-2cbbf07f619c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90b9d8f-4ee9-418a-b648-482abe5bfd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea48385a-8053-4d29-9fa7-cdc5905069f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7bee24-0a67-41a1-8088-e5c5ee045ec9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507ffdc7-5131-4b1a-8d45-fb600a5f5979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0417193-8b11-46f9-a6b7-03161027ff09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd715dac-6b6c-458a-ab66-6dc987d4be28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d5395f-7564-433b-959d-6cce02cf2249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f8b985-4f2b-443b-a894-22516df10c51",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38328462-445c-42e9-b19c-09f9ecd9cde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a859da-e927-4a1c-b882-6a2980fc65bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c5c493-4614-46a4-bb9e-840a3fbc22c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5ba55a-92e8-45cb-8caf-26e5353b5130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2af23f-1735-4d84-bb4e-8f46a54d2712",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39e947d-094d-458f-bfa5-c1f779f1b109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce3a039-1100-4e29-b4aa-43a2d708f358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "620229c8-c637-43b9-9fce-55b79261a565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ed9b653-f144-401b-921c-d17388f6d5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d2b9d5-e66f-40ad-978e-37f7f39eaca5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10b3edd-5e9b-4d12-90ed-f62ce29de772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045edac5-b8d6-4364-b634-e2337a83ee7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed7b4dc-cf40-4157-8a6d-a8b6e297514f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302c22ac-eb0d-4629-ab31-ecf72947bb90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027ebc68-c517-4a8b-b8db-1ac14d171428",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56dab03-851f-419e-9407-bd6f3735fea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d45918-3743-4db8-9844-a73666af7b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f88aadd-38ca-460a-b7ca-f5d1ba2c73c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208e9b8e-7afd-41fc-932c-20d915baf683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5a82a8-1bb2-4cc9-975f-b839198ebb2f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80844ff2-a1f5-4b3f-8904-c813d7527e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b566da8-a4b9-47a6-9dbe-910af328e7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52984950-e8de-4c00-bbc9-ff5cf432a4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfc69b6-abf5-4273-a4f8-298b0902fbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec75a93-945c-4455-8297-55d2aa92febc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dadb534-d120-472d-94f9-55e405c1a8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b498488c-c9fb-45d3-90d8-05cfb1847bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37969acb-5400-4611-b59d-8099ac33cf86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b004699-8c58-4c7c-b4d9-b0be26e8ee3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd2f184-530f-4d5e-bfe8-3aaf5e17dd34",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2566ca6c-4d45-409d-a17e-9c5f7fb8b85d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae4f5e37-4cea-4557-b303-d6615ccc9717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c6cb1a-7226-43d3-8681-d91f37a32433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c7b49d-62f2-424c-bee2-dc420dda08cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439a9c49-fc0c-4bf8-92f0-0587318b41a0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59641e5-95e1-4cb0-adc0-6c20891f5311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8c4941-df15-40de-918b-3629023c36fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3a908d-c5aa-40d6-ac0b-1a7f8cf4f4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325f4bae-8d48-4985-8026-04040684bb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e34373-439f-4848-8c6e-b69817224520",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792e38d0-1670-4efa-922c-41c5bc044db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d64746cc-c6d4-42a3-b6b5-c96f27defdfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e65ad8-8250-4cc6-a2c4-ab479d746f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c570ad-446d-4144-9a3b-f42a985a9991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94ddd21-7a67-442a-8f84-f522649466e4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b6c131-468b-495c-b96a-d5ed9b2ea073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d88694f-775d-447f-be13-ddb651fa395f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b622c34-16dd-46de-91bd-18fa6f25e35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8298438c-1be7-4fe6-b928-c715993ed47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb5071d-5548-4088-8118-a7e87139e379",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808515b9-1f64-4f85-baaa-47b21ff6aa83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99a0e118-dc14-43c4-a2b5-612410972353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1741aace-ff4a-41f4-94c1-f2a99ee22d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4feeb48d-2adb-467c-8d24-29c4c65691a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd864f2-3017-4f43-80c7-f4c741c71c4a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb9891f-53e8-4090-9cdd-96e2f083cb70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f77ddf69-4379-4aaf-8405-cbfd55ba7ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e2b9a-2183-4685-bb40-be11c4ad07b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9523c2b-9646-40cf-a91f-6f5d80dc3570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a3614c-01a1-42c2-a070-e938a5fd9b81",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec92f53-d41e-45d6-937e-d79ff59ede7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4ea6c9c-d6f4-43e2-85ba-c7c291c2be1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cf4cef-f41d-4f1c-8560-3b6f925e3f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e4111a-1518-4499-8018-1aaddf6c5e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e893897-7b39-4241-be39-ffd6c96fb627",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6de11-2088-4a05-9e47-32aeea8e789a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52617a46-1933-4406-8cd5-2ad65b530bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95b8046-111d-4a2a-b3c4-b9c615d109c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7011cf05-65b4-44d6-81c5-4bd103c3149b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fea18a-61da-4daf-8a3d-c3246c2b5a18",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55e7c3b-616f-409d-b878-3e0d03122407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e6f6e1-3d85-4c7e-915b-58001c03e30f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a99d94-dbb0-4167-a6be-fe0a97fd35fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b47897-59eb-40c1-83e8-5bd37081e609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e8fbda-08f9-467e-8919-af3ad5741052",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f503d6-bd41-4244-b06c-829f1092f83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571cbddd-c43e-4f55-958c-12c9464c1f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53db56bb-5c74-438c-bcf6-e8e640295b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b253a7-de2a-41b7-83cf-34c3782883e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a04a8fb-ec6e-4ae7-8aa2-5f8de0f1ddc7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a620e80f-873c-4bf2-9dd6-5a381cedfffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f9b4379-61d2-4ce4-a254-74267c025a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cf8a61-d9a5-4561-96d1-e824fbe35721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3a3fd2-28af-4963-92cf-0cd455bb6483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf242cbf-e915-4571-9edc-77d09f3e6134",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bff47df-d321-455e-9c18-022c8c1bf7a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83adca74-86af-4faf-8c74-f1b06aa872ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "289d20b1-5d15-4d96-920a-d0510704e8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86ea5bd-9254-4a25-a886-d416c3a1392d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bc968e-1326-42c5-9e90-c9afc7f66acb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b604b2-5c0a-42c8-910f-6c8bb70a60a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc01b94-4319-4d90-a8ea-8232cb83f5fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5fdc6f-6f08-4643-81d3-a1c7c59b3136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c60fb4-19e2-4d3a-b688-3372a5e71c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebbf73c-f52b-4ebe-97e1-1e8893681787",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fd24f7-5b3f-4840-a7f7-546ff79bdb5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9784cb1-7627-4d43-8ce8-f9c2f62958be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7dcb0f-4a90-4e22-86c5-c76ac51595ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bbf5d2-97d6-416a-9e2d-e849bbcfdd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91809b21-5ada-452d-a0e4-d5291e23afa9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54601d2f-4db5-4189-9fb3-b9f896607899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a5eb6a5-2eb6-4204-b945-e0edf74857b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ba0798-7233-43f5-b1f5-00f1bc375f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4445a6b-7585-43f6-aaea-e7003f0b4438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c78f640-cea0-4b14-964b-fc40ee084229",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151c6d59-1255-4d17-b35d-e2c287f4f555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa9b9348-0949-43b2-aa5c-9d2a23ea8e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c70681-3644-48c1-8090-d25c6babbcb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902730e8-69df-4d0b-a235-ba014a17f39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcb14ca-910d-4986-8d25-9386897cca06",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab67e7e-8411-4d3e-bd80-5c9b4e9685e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e132252c-a9cc-4551-8399-fdf517d53505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e211ef2-4d27-4cfd-86f7-dc4784f898ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5ecfa0-b1f2-4d45-b959-3511e7644c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d81eef5-803b-495a-b5de-bd887e9d5d66",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f784f1c3-2f25-4e22-83b3-df6e3fe10d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc773e9b-5200-44f1-ade0-f5fa3debd7cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b752ea7-cbe7-4e87-9176-5e0070b0fed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88bc430-3698-4ca1-a944-6b941fb14954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c3ce8a-912c-44ca-afd9-698dd28fbb6f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb77981-e501-43cd-8f02-e3ba61a33b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b148682f-3452-4ae7-9fd3-fb9ef2339172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0bd48d-d14a-4006-837c-41107a4ea146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0151b68f-01f7-4000-b4a5-3b042ad6887d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34221460-2b80-4d62-8894-96fcbebd8511",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64dc795d-07a4-4644-a1c4-c0517f731f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5d57135-4423-450e-9a7c-01bc67383bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666f04aa-fb0c-4308-8f1a-b06514ba37b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a543e16d-fca4-4df8-a522-7e8590e88afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33653225-997a-4963-bf9f-160d5a91ea23",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a8efd6-095c-4b90-a8eb-807b7effa969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5a3996-9c2e-44c1-bac9-1bb339367889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b54053f-36f2-4aab-827f-06a701b418e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1764f4-fa73-4b67-b0ad-abad85ea3d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580e5de9-bbeb-4882-8805-510b4052897b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59513c35-a0bc-458d-b7b3-47b643a066d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42d0b7e3-c1b0-4487-8e41-bc54d88efaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72875ede-1281-4f02-8028-07cd4a28ed7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d80ead-5876-44ac-aef6-8c675c93b55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d89f729-5dfb-495a-9bc5-e93189d6ccf4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ed6fc6-f9c5-436f-a682-8ceb923d3053",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a674c350-bb79-4fae-897d-1d7319dacdb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc03ade1-87c1-4436-a0d7-ff55496aa47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3b2fef-5714-4781-a853-99881cd070b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb88b4b-fd23-46e9-b1f8-a6233aa83603",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fd1526-ed4f-4c8b-a946-c67660b19554",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d2d440c-46ee-4e5a-96f5-ba382d864de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0220001a-e1cf-46f5-b8f9-12c2cfd8d6d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c51d7873-59ef-40d0-83c4-9dddd389ced3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af514c7-ec16-43fa-aa7c-a0d142385672",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e29aa6c-103b-4dba-98bb-58d0fc5a32e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1daa0056-4a80-46ec-9e66-3dabd0b1580d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fdc8f8-ef06-480c-a55a-4f1214f8b3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f5ea62-629d-48fb-8c8b-cb6552cdd00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d8d439-5b44-434f-962b-17fd44b38c17",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffe0d84-e4ab-4087-a89d-c0ea12f33d35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83749d62-5001-4dc2-b6ee-641524dfa8a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08352ffc-e418-4538-ae97-b5aa5035d5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e81e144-8ada-4eff-a3b5-ee2c400a3322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3acf0f-96d5-40f8-9e84-5ae872cb3ea9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaae3d4c-0616-46f2-8322-5f1bea961fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5a36ce-68e4-46fb-a4f1-1178ff10020d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3788c0-28f2-4eb2-a8f1-edb0b38f0e8e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aba52d1-a021-4957-b05b-11bda29a1004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31ef83f-35f0-4dd9-a094-d4babeb312b2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4880d9e2-ee0b-4beb-be86-d076ffcd2a53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0014590-cbe7-4946-9f36-428a4a7657c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8f4416-8c99-459e-81cc-f2db5c7be746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dad5048-1ad4-472e-8279-d58b085450d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bbc66a-76b4-42e1-a603-d31e8b96a6de",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87658203-68c8-4928-ad08-f9b6ba1d0b21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba1991df-6dac-4494-8004-d186bb98aa5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c518669-1ac1-4042-a054-40421b46f8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3cfc9b-2123-4cd4-8152-98c796dbd0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548b9298-cf50-4b30-abcd-00b796c982e3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ac634f-e2b3-4c67-a393-32645a69f362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7e297e-3fb9-459a-b4b0-5a8379b5c17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cf9445-9532-4069-bbd0-ba846319ad29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15eb38f-3573-47c4-bd13-34d934502b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebd0fab-a578-456c-b7ec-8738bd31a3bb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3f238a-fe7d-4ca7-a15d-05a86637e038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "302be82c-3410-4596-920f-2f9172c35573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac2451e-b69c-4c11-b040-7c33ae8118d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77b1a75-943b-4c6d-8037-46d2c40039ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5645e0e2-86bb-4e00-9db9-3776f3019dd0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fc42ba-a173-468e-a637-1e9965af11bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "febb09e1-efe5-48db-978e-7dbd54ec24d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2005964c-335f-4e8b-a920-d2ce733428e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72d2e76-f013-47ba-b3df-fabc266c9ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87635f6-d3f3-46d6-8ae7-a82e421c0efb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eeccfc-4f18-436d-9785-81db7ea5ab56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24f05ac6-e70e-43f0-a176-654d61ce28ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a418a2f0-7741-4bb0-b23c-ae0151385b42",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5230b46-cb82-4ee8-8edc-b05e6a1a89b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201d161b-4293-4b28-8df6-c0b0efddb15c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f69f5a-a3a2-4d30-b9a2-44c17e30deff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe4a7e43-46f0-4833-a35d-dc7e4ee125d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1726fde-9892-49f3-a2e0-ca6bd376819a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776f9968-e988-4b8e-8613-26d3bd561756"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a7ee267-6047-40de-8cd7-c6105a043538",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "920d3439-980c-4759-8c1c-c41264ef7aba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d77f03f6-0a7c-47aa-8e4c-d24603199fe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5734cad-d7f4-46d9-9efa-d190783a752f"
                    }
                  }
                ]
              },
              {
                "id": "41e25aa1-d177-4d7f-8197-008851fb44c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db4dc43c-2004-4f8c-b73d-859c8c5fc38e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e6a288-5f2b-430b-a110-00bec86d4237",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "45a6ca9f-b14a-4994-ab2e-1543f1876898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087aa310-06b3-4e85-b787-08aad75d9805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcf9e8d7-78c1-439a-962c-38d207dc1f40"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b382144-d5f1-47c5-a5d7-a77678308ea7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83714a23-4d76-4779-a6d4-314f41642e58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cff42e0-672d-4f7c-a93c-b118e5479857",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cdef3b0-5644-40e4-9daf-b15d332d67be"
                    }
                  }
                ]
              },
              {
                "id": "4aaea407-59eb-4252-828e-75dd0e46843d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e483b66f-72b4-439d-a452-831dbdb30b4b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b14e5b3-b6e7-47ee-b7fe-6ff13a109f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a62dd246-742a-4f9b-a300-d63ab5bbcefe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad933b3f-6efc-485d-9de1-d6fbae6398cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5098956-16cd-45e7-bc29-cf2fb28bf09f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "adc10316-d953-497e-aa8c-84947a11683d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "047c0e50-768a-492d-a57c-698a0eeafbd7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f9b0ef1-f073-417d-9f6e-cc51ce9600bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "22e9e083-007f-4c2d-a594-186dfa475ddc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5974253f-5a45-4f63-a262-a3f255e3f1e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8baef6b4-920d-48c5-8e3b-498a605acb94"
                    }
                  }
                ]
              },
              {
                "id": "fdcfd8b4-3619-4981-86e6-5a880b9c16bb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82dff3d5-a539-4a8d-9207-be846809b59e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5acc92a3-178f-4feb-8f56-971659e31b75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1645bcf8-7019-49cf-b1fb-6099ab6fe900",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef6491d9-0b93-4d7c-8065-bdafdc1cf127"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6debb7c-fdc6-4732-add4-ff7c4db57f28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "eafb764d-22c9-4584-b298-41ab67e4ab6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b135fba-0e20-4267-bbc9-43440269949f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5764774a-0df8-4037-9ed3-0fc0643267a4"
            }
          }
        ]
      },
      {
        "id": "7cdcb890-68b1-43a5-842b-613017a4da20",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ee68e3cc-95f2-450c-8792-ca3ace3c4301",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bd7fc9a-ad56-457a-a5c9-1c8393d91d30",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e798ce3-f972-4531-bd68-beb6edc7611d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fe3aa9-0db5-4c85-8ec4-0053b5d32312",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "318d1c96-eaff-4eb9-847f-a131e7f4120e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cfbc4e-682d-400e-8a6d-7a07bf14b63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a5b8610-9dc7-4eda-b1b2-dca2bd61f069"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5483867c-572b-44a6-b82d-3dfd9e8c7d02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc9be807-d201-4b1a-ae9f-03cfde21a1ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff73eb5c-0ab3-46f6-a90c-6c9f04ec8835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e81b0660-1856-45af-8481-567aed4bcd52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dad0ec1c-3a31-4480-aeca-04e91647d533",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8cdde878-12b6-4f6b-bc13-00dcddfbcf60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "231b996d-1f8e-4faf-8bf1-c535395be22f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab4bdfd4-abc6-4437-8f99-3bc1c673b819"
            }
          }
        ]
      },
      {
        "id": "45090197-b969-4cef-91fb-b18a94529d21",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "acf86504-ae6f-4711-a01a-01178013a107",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06fc54e0-9c3e-4a85-8f40-056d967f31c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a4073ac-1287-4452-99d4-eecf85630377",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851c38bf-bd41-4544-940e-7d59e3370f03",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aedc63a4-1488-42cc-85a2-984fbf750648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4c1f2a-9f52-4df6-b380-834c81323828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f74e7cb-b653-4b08-9d64-0e18de24b004"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4346dfe5-0b9c-4836-9869-ec405e7c8495",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a39dbb2e-4706-4188-bd03-6361818fd5f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ffb8bc9-70c9-4c47-9798-1deb5c0a9d1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dafa306-9dad-4bbf-b5f0-e662d45f6ad1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1a44f28-1e19-4c76-a7a1-c13b4228afbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6fb326fe-c9ff-437a-86c5-bd17200b8b46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cd825fb-e9c5-4185-ba22-eabe089da9b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dff588f5-0d52-4a42-93f7-aa5cccfc493f"
            }
          }
        ]
      },
      {
        "id": "e538ef31-bc83-4c1e-8630-1e4325268b97",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8bbd5ebc-0e40-4f68-8e15-763c40b144b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b3b759a-c031-4b15-b05f-391b944f55a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc8ffbb2-5a86-4b5c-a5c1-b6321c4019eb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3ea6c4-b510-4ca5-b483-e01b13e7c6b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "290d1225-819f-467d-895c-77f5e5e2086f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d992f80-b920-4517-80b7-7077a07359b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "047a30ed-53c1-4e0f-abd5-b05cc4059aaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9181887a-02ce-45f8-ad60-5fc5a6542a09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "685ab9d8-3779-416d-b254-25ea3b6c3713"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0afe6b36-2a7c-4690-bb32-6656bf1d8aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb9cb071-ad92-495a-a8cd-3c486a7d344c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf88b1ff-158f-4837-ad2b-a3dc479af248",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "089f6380-3f6e-48f7-9af0-baa922e8081f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47bee091-eda1-4b2f-ad59-496638340ac8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4299a40d-9a34-48bc-a751-0e6b3e79b523"
            }
          }
        ]
      },
      {
        "id": "6be4aa43-bb45-4080-b449-3c10971c2453",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61f26087-4467-4f85-b49b-513408483a66",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f355a78-65f1-4a7b-b203-7078ae1243f1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9d179eca-19e9-489e-a223-521f0a6eebbb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4904bb48-17fc-415d-8a1e-640d2f4c7a4e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bddbd181-89bf-4f58-a482-b76762ce80e5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.607017543859676,
      "responseMin": 9,
      "responseMax": 553,
      "responseSd": 62.95138714704011,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705192781319,
      "completed": 1705192806675
    },
    "executions": [
      {
        "id": "13836a2e-c44f-4be5-97c0-64a67d08ebc1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dc8e1ca1-74da-49a0-a6e8-5614bba64329",
          "httpRequestId": "d19a0337-7896-409c-a1e8-64039b9bc513"
        },
        "item": {
          "id": "13836a2e-c44f-4be5-97c0-64a67d08ebc1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "74206e46-9948-4406-b968-19e0cb488a5c",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "7447cbe8-673a-48da-aea7-e3e457068d0f",
        "cursor": {
          "ref": "bba3dfe0-1258-4dce-ac40-047e4508ef55",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "caa0c44b-78eb-4354-a7d5-df62ec00d066"
        },
        "item": {
          "id": "7447cbe8-673a-48da-aea7-e3e457068d0f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "721685f3-b6f0-478f-9fee-dee50623af4e",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "a6c2048c-0c45-4889-98eb-827e2120e651",
        "cursor": {
          "ref": "a1dac7a8-8eb5-43ad-b07c-dacadc277384",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4cab624f-8fef-4f2a-8061-32762d930eff"
        },
        "item": {
          "id": "a6c2048c-0c45-4889-98eb-827e2120e651",
          "name": "did_json"
        },
        "response": {
          "id": "46b4254e-8220-40c7-a4c0-e692f81d7857",
          "status": "OK",
          "code": 200,
          "responseTime": 276,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acb89db-a1c7-4cc9-82e3-3b378d185358",
        "cursor": {
          "ref": "39772d3e-4fa4-49d2-bbdf-8a427f203004",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43d2f394-b4df-4ea5-b753-dd6a60815daa"
        },
        "item": {
          "id": "3acb89db-a1c7-4cc9-82e3-3b378d185358",
          "name": "did:invalid"
        },
        "response": {
          "id": "72e0a270-54e6-4b12-8006-27557c768952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acb89db-a1c7-4cc9-82e3-3b378d185358",
        "cursor": {
          "ref": "39772d3e-4fa4-49d2-bbdf-8a427f203004",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43d2f394-b4df-4ea5-b753-dd6a60815daa"
        },
        "item": {
          "id": "3acb89db-a1c7-4cc9-82e3-3b378d185358",
          "name": "did:invalid"
        },
        "response": {
          "id": "72e0a270-54e6-4b12-8006-27557c768952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab2b036-ef5b-46e7-8f92-6845fe4f9785",
        "cursor": {
          "ref": "e406e6b1-c084-49ab-9aeb-8b93ee73a1c3",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5402b2e9-7089-41fc-9ddc-ccac82f129de"
        },
        "item": {
          "id": "3ab2b036-ef5b-46e7-8f92-6845fe4f9785",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7bb18096-608b-48ac-bffa-d39ae1a09f6d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabb9efc-0ac8-469c-bac9-bbd5770e73b8",
        "cursor": {
          "ref": "39b692b8-57f8-4477-a369-71b075bfa481",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "760be341-980a-4eb3-ad99-1c926e0adcdd"
        },
        "item": {
          "id": "fabb9efc-0ac8-469c-bac9-bbd5770e73b8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a1a94446-8dcb-4312-bea3-a0d925c4190f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44178ff-8b93-4f9d-bc73-353f06109342",
        "cursor": {
          "ref": "8559eab8-d4c4-4d77-aea2-8e52bd787550",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d333303f-3c24-4d80-9f17-c77a23471370"
        },
        "item": {
          "id": "a44178ff-8b93-4f9d-bc73-353f06109342",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "83841b5f-2784-4e42-806b-6025a3bcbb26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07eca91f-1cac-48e1-8433-6e367489171f",
        "cursor": {
          "ref": "8d1cacc4-ab43-42c8-ad0c-fc0ae43f7c15",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d77b97fe-9f50-41e8-a213-36500a8c39b6"
        },
        "item": {
          "id": "07eca91f-1cac-48e1-8433-6e367489171f",
          "name": "identifiers"
        },
        "response": {
          "id": "9df3e6a0-e8e5-4eb0-8a41-6c32c116363d",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb599539-e5cc-4775-b0b1-f63148e72468",
        "cursor": {
          "ref": "536d94f8-79da-4f22-ad70-650c898d5124",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a37e4d41-0f95-48b8-bd46-48be886e252d"
        },
        "item": {
          "id": "fb599539-e5cc-4775-b0b1-f63148e72468",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3e957aeb-dbb1-4491-b22e-75f671566f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b73d91-8e32-44c8-97f8-f6a841b39aa3",
        "cursor": {
          "ref": "76bbedc6-8c6b-4731-aec4-ef9ea3ce09ea",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e80374a1-a144-4506-997d-6471a5d3ba61"
        },
        "item": {
          "id": "31b73d91-8e32-44c8-97f8-f6a841b39aa3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aaf2813d-e72d-435f-9f79-d410693c4977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e863e34-6b7a-4ef9-95b2-6437ce30b03f",
        "cursor": {
          "ref": "eb039e9c-cc01-459d-ab39-5da5fc8d625b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "903f3adf-d230-4a79-bdd3-4a927ad21ba1"
        },
        "item": {
          "id": "1e863e34-6b7a-4ef9-95b2-6437ce30b03f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bdfb3e16-83be-4caf-a6c8-25704d22dcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac5884b-a598-4b62-9b23-09d4906ed362",
        "cursor": {
          "ref": "bebffad6-3440-449f-a321-110353601b33",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "23e7ccd9-556f-4c89-a287-339e59baf8f2"
        },
        "item": {
          "id": "9ac5884b-a598-4b62-9b23-09d4906ed362",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "89f1db8f-94ff-4627-985e-3b42f53b72a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d164d052-ba34-48ff-bf8e-9a2e761196af",
        "cursor": {
          "ref": "55aa1afc-8dd7-4f0e-bc49-bf2ccf2e1695",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "39638e12-1613-4f50-8c09-6af21adf65e1"
        },
        "item": {
          "id": "d164d052-ba34-48ff-bf8e-9a2e761196af",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "61941e02-9f71-45ac-a7b8-c3ffe971df13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cdeac7e-e1d7-493a-bff7-6042d4b16901",
        "cursor": {
          "ref": "eee60741-a2ed-4a9b-bb50-2cc5e4cbe0d2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e6612722-4fd5-4f04-9168-79d2f308fcb3"
        },
        "item": {
          "id": "7cdeac7e-e1d7-493a-bff7-6042d4b16901",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cc8f2235-5ab3-4cc5-916b-e66fcf90c71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ef5258-36b3-421f-b4f6-d737a6967f4b",
        "cursor": {
          "ref": "698a971a-67a8-42ff-b01a-e45a315d11c1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7b1d3232-4405-4a34-adb2-2e2c1de4d2bf"
        },
        "item": {
          "id": "31ef5258-36b3-421f-b4f6-d737a6967f4b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "68c1410f-11ca-4305-b651-5296b6dd104a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593100d4-ae0b-4c35-9b9f-a064d3c675e6",
        "cursor": {
          "ref": "63644b52-e48e-4047-b3a1-d7838a42467c",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9fccacf9-c5cb-4a1a-a955-6aab57ebedca"
        },
        "item": {
          "id": "593100d4-ae0b-4c35-9b9f-a064d3c675e6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "750f9860-9b91-4c15-ac4c-72060071e8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be71f91-a075-4a2c-9708-f756f0dfe0b2",
        "cursor": {
          "ref": "ac176ca7-e13b-42d9-bf1e-686c405996bd",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ccfe47cc-d91f-4927-9663-0bfeccd9c7d8"
        },
        "item": {
          "id": "6be71f91-a075-4a2c-9708-f756f0dfe0b2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e5ecd5e6-2cf5-4d7f-9ea5-56d34a786b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a678d4-1606-4173-8ee0-582c4358f402",
        "cursor": {
          "ref": "b2437659-3943-4897-a4df-15696605feb8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fd289764-fc29-418f-9f73-b39258366057"
        },
        "item": {
          "id": "d5a678d4-1606-4173-8ee0-582c4358f402",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a2b666fe-a453-43f2-8e21-bfef411a4db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556c040a-47f5-4d11-bda9-bd96bc997828",
        "cursor": {
          "ref": "fc76ff2d-4443-4989-812d-69e88aca3dbe",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "15559200-7d2e-4461-8e10-cc2ffd1592eb"
        },
        "item": {
          "id": "556c040a-47f5-4d11-bda9-bd96bc997828",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6c0f7841-e4eb-4b45-ab9c-9644a413914b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866f2250-1d9a-43c1-8c0e-d42fda211ed3",
        "cursor": {
          "ref": "38ea04e6-4c28-4cd6-bc24-8a64e078534f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c017a327-87db-4952-b027-1e78954cad97"
        },
        "item": {
          "id": "866f2250-1d9a-43c1-8c0e-d42fda211ed3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "49f6c1b1-aa6b-4498-9bb2-b9824352c5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ebe335-f942-4ed1-8d86-2712a4238976",
        "cursor": {
          "ref": "0861cb6e-8d39-4ae4-9908-59ec9485876f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2632bccf-f7dd-4789-90ac-35fb6496c69b"
        },
        "item": {
          "id": "23ebe335-f942-4ed1-8d86-2712a4238976",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8b67a7cc-e19e-47b7-ad6b-161865d385b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4166f674-8a56-45f1-ac7f-664458253009",
        "cursor": {
          "ref": "588becca-ddff-4023-8b53-02310d1b59b0",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "59e53940-7fe0-4a00-bc80-2c8ddc37c8f2"
        },
        "item": {
          "id": "4166f674-8a56-45f1-ac7f-664458253009",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "341bf3a5-ab4d-4689-8984-9ce9c733005a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914ce877-c894-4879-937f-decda2dfa965",
        "cursor": {
          "ref": "787ebd59-eae7-45ed-b08f-e1e49028e06e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "785e3f14-440e-4f04-9715-f3e01543c5a3"
        },
        "item": {
          "id": "914ce877-c894-4879-937f-decda2dfa965",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3568a5e7-f97b-4c25-92e8-d780ee62ce8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ed388e-54e8-41be-834c-7393fb226414",
        "cursor": {
          "ref": "8d9a7430-a384-459a-8b26-e6ae06130914",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "873d334a-bea7-4ce2-8a52-cc70827721f0"
        },
        "item": {
          "id": "c1ed388e-54e8-41be-834c-7393fb226414",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "87131548-82e3-4a84-a455-eb17ab9c4ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761f60a6-ba83-4bca-ac83-9f043f6787f8",
        "cursor": {
          "ref": "e645cc01-3e37-44d8-8214-ff76b2143bdf",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cc98f853-026a-403b-b2b8-c15459aadb9a"
        },
        "item": {
          "id": "761f60a6-ba83-4bca-ac83-9f043f6787f8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ab4c347f-8d3f-404c-91e1-295a3eaa29fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac67d5f-34a6-4e1a-b541-8c53c7a6a5f7",
        "cursor": {
          "ref": "cc2b8ef4-f199-48c4-91ee-0b2128377fea",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9784aa84-d8e1-4e18-95fe-58dfaeb6e36f"
        },
        "item": {
          "id": "0ac67d5f-34a6-4e1a-b541-8c53c7a6a5f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "90e222db-6c62-41ca-b735-d7f29ebb31ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76305f40-4e49-4ca8-b805-6a832e6703a2",
        "cursor": {
          "ref": "de980a76-b180-4f3c-acba-d5a87cca67aa",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "49d2aacf-896d-419d-9d39-100df95e63be"
        },
        "item": {
          "id": "76305f40-4e49-4ca8-b805-6a832e6703a2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "24fea23e-50ee-408f-8fc7-ee648be15f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b5bce1-2b0f-42e2-9213-0fbd1ba5ef66",
        "cursor": {
          "ref": "ac9d26f1-453a-414d-968e-dd56e804e181",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eac51f59-9755-4c17-bf1d-9cfdfa8ab0b4"
        },
        "item": {
          "id": "13b5bce1-2b0f-42e2-9213-0fbd1ba5ef66",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "335b1129-0c8c-4e28-8ab1-3cc47d651545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189512e0-5a3f-4cc1-814f-d7b054165eee",
        "cursor": {
          "ref": "d138dac3-ac7a-4814-82bb-df6c54aeb596",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a13bf70-896e-4cd5-846b-62324b4808c1"
        },
        "item": {
          "id": "189512e0-5a3f-4cc1-814f-d7b054165eee",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f6c9d753-fb31-481c-890d-83b1969d300f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a56e1b-a08a-47af-9952-4832d6ec043a",
        "cursor": {
          "ref": "7673c09f-560a-4486-b3de-1fa29927798d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f0a2801a-e944-44cc-aec9-a1ac49149e33"
        },
        "item": {
          "id": "79a56e1b-a08a-47af-9952-4832d6ec043a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cba3b2df-b9ed-47b2-824b-d35d49f0236e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b6f8b3-c3d1-47c2-b46d-d131eeb0b7ee",
        "cursor": {
          "ref": "cd8d70f7-f849-4e3c-8fe5-ec636fbb234b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9000d586-a5d2-45b2-baf6-554dbae599d5"
        },
        "item": {
          "id": "b2b6f8b3-c3d1-47c2-b46d-d131eeb0b7ee",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "db1b3df3-b8a3-45f0-8a9f-46e32c3b3f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c4c3715-b652-40de-8286-ee38536548b4",
        "cursor": {
          "ref": "20215b68-edbe-40c0-8046-1b5c7c126b31",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "25a4a7ac-323b-4d0d-8c3a-22edd9a3e772"
        },
        "item": {
          "id": "7c4c3715-b652-40de-8286-ee38536548b4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2fac7f89-03a4-480e-a645-194cd19ea748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00131017-2cfb-4920-8b27-24bf4eaa6402",
        "cursor": {
          "ref": "cde315ab-2327-4a69-bb63-a5342f4f80f1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0c3af804-8988-4eac-9cd3-5e4b87132e52"
        },
        "item": {
          "id": "00131017-2cfb-4920-8b27-24bf4eaa6402",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6555c4f9-5281-4d11-9efa-9970f5935de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bea496-3959-4859-b80b-463175cb369c",
        "cursor": {
          "ref": "392c8ee6-ec7e-488c-bcee-442712e0935d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9eb112b9-d487-4a17-a4b6-0145ed2c58c4"
        },
        "item": {
          "id": "f3bea496-3959-4859-b80b-463175cb369c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9c07eddd-e021-4c5b-b4d2-3470ffda7c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4b78fe-47e8-4e86-89e8-8a2ca6dfe9e4",
        "cursor": {
          "ref": "3685b38a-c5f4-4bfd-83ff-bb546845a02d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1b41b1e7-51ee-4e2e-b15e-49da70e3f07a"
        },
        "item": {
          "id": "4b4b78fe-47e8-4e86-89e8-8a2ca6dfe9e4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e797d60e-b16e-45e2-ade7-15ecf9fea47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7afc123-995b-4fd1-836d-9fa8717fd0df",
        "cursor": {
          "ref": "23017945-4007-4762-ba01-392e02e25bab",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "458ed3dd-4900-4bba-92ca-af6a118c1cd5"
        },
        "item": {
          "id": "d7afc123-995b-4fd1-836d-9fa8717fd0df",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fd93a718-9b25-415a-aca2-d25b89c0a24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f07e212-2cd6-4960-88ae-c54223ed3634",
        "cursor": {
          "ref": "0a70f408-389e-49bc-90f9-902e848b5dc4",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "490fd705-0335-41c3-9259-ebb87ac3a5e7"
        },
        "item": {
          "id": "6f07e212-2cd6-4960-88ae-c54223ed3634",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "af6e22e4-f5e9-4222-927a-a05489792564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff7aa38-7cb5-49f8-ad25-84d61b1f1055",
        "cursor": {
          "ref": "ca2ac7fa-600f-43d1-b322-1535f9f66202",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b803cef0-f14d-4bad-898e-10c2090dea66"
        },
        "item": {
          "id": "7ff7aa38-7cb5-49f8-ad25-84d61b1f1055",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c32d6768-a6db-45e6-b823-584a8c751ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75932128-9dfb-49d7-b520-99eaaa82422b",
        "cursor": {
          "ref": "97c20a0e-80f4-4156-8a58-92dc369071e1",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "55af053b-e2c3-43ac-ae58-d0a47118e559"
        },
        "item": {
          "id": "75932128-9dfb-49d7-b520-99eaaa82422b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fb5636c2-2e1b-42d5-bd80-1e00b2573a18",
          "status": "Created",
          "code": 201,
          "responseTime": 553,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ff46a9e9-3698-424a-aaab-bc4bdd0dc0e5",
        "cursor": {
          "ref": "6a96dcb3-5d84-4d15-a098-4ba7b796f63f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f4483624-360a-4365-bf99-18d954d3d2bf"
        },
        "item": {
          "id": "ff46a9e9-3698-424a-aaab-bc4bdd0dc0e5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "07e31655-56f6-4b0e-8c85-5b6c1ea5dc2d",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2a69d499-5d39-4955-b099-a5f30257f5cd",
        "cursor": {
          "ref": "10f1e88b-faa8-45f7-a525-3d4f26f0cbf0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "443e1098-cfea-4cc5-b960-71ff0ad1754e"
        },
        "item": {
          "id": "2a69d499-5d39-4955-b099-a5f30257f5cd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b8b48e03-f78f-4fd2-9d46-8794f355d44a",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c526086a-c803-445a-8d54-cbd600ca99c2",
        "cursor": {
          "ref": "10a130d3-b27d-43ad-a2b8-41af26766133",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "86ef23bb-e1ec-419b-92a6-47b038edb67a"
        },
        "item": {
          "id": "c526086a-c803-445a-8d54-cbd600ca99c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0eb5d27c-efcb-4cc3-8e5f-8854567fc285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66848a0a-9b0a-4e20-ab3d-b825a59eeadc",
        "cursor": {
          "ref": "18daafb1-d3c6-4939-9473-9942aaa8c8fa",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "22bacebd-88a7-4026-8f08-ca03b02e710a"
        },
        "item": {
          "id": "66848a0a-9b0a-4e20-ab3d-b825a59eeadc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "aef49a96-c31c-4c03-8a9b-2b0a46d42bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "632af7c1-69ba-4b96-9f5f-5fec006abda7",
        "cursor": {
          "ref": "13765a92-d258-4253-8da8-6539dbebb4b5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9d51ee57-3705-4bcd-8080-a708bda4d2d2"
        },
        "item": {
          "id": "632af7c1-69ba-4b96-9f5f-5fec006abda7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1e75c416-3c37-4759-8517-ded492589be7",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "91969faf-a030-4b45-aa9e-6adbe523a1b8",
        "cursor": {
          "ref": "25ff77ad-a671-40df-8b73-f7efaeceefd6",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0e862e60-f9bb-4a14-b3a3-bc545c97a2b3"
        },
        "item": {
          "id": "91969faf-a030-4b45-aa9e-6adbe523a1b8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "153157f9-caf3-4a8a-b2c3-0bfd5a877894",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4225bfec-c4ab-4c1c-a1ed-f8f7d4b2ab5e",
        "cursor": {
          "ref": "4501f6fe-8d14-418d-bed6-8f7ee2b0025d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2396aee5-8dc8-4a5d-946c-2ff0399e0161"
        },
        "item": {
          "id": "4225bfec-c4ab-4c1c-a1ed-f8f7d4b2ab5e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "292f360d-63fd-4e22-8d18-729bfca472ee",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1173316f-b785-4b25-b07c-9a62e513a066",
        "cursor": {
          "ref": "f275cd2f-b629-4d1f-8396-c4536804fb4c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c885a50e-44ca-4396-a437-a04b2946c94e"
        },
        "item": {
          "id": "1173316f-b785-4b25-b07c-9a62e513a066",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "84fbc3ed-8ad9-438e-b450-c8cced66ad13",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "70ac22d7-df6e-44c8-86ea-3578b7fd6630",
        "cursor": {
          "ref": "6ac8ef31-957d-4c0b-9fc6-3f59fb56891a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6ba6dbb5-ea9c-439d-a504-1f0dc1078d1c"
        },
        "item": {
          "id": "70ac22d7-df6e-44c8-86ea-3578b7fd6630",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "267db6d3-56f1-4774-bb6f-a3da22e9b3e2",
          "status": "Created",
          "code": 201,
          "responseTime": 195,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f92ca153-d3c7-4f58-8bca-8cf79693d2db",
        "cursor": {
          "ref": "5b1f159c-671e-4e46-a312-4d986fb5a873",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "46aa83b2-9afd-4ebe-b531-6daa0fc1e4a3"
        },
        "item": {
          "id": "f92ca153-d3c7-4f58-8bca-8cf79693d2db",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7cdedb0b-007c-4728-b409-e41ce8203c10",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "490b088c-db96-45eb-a2d7-85860df065a7",
        "cursor": {
          "ref": "9be6e4fb-12c8-4411-b89e-76f6e4f8373d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0190b570-9226-4a40-b21d-3299ac33ecd6"
        },
        "item": {
          "id": "490b088c-db96-45eb-a2d7-85860df065a7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c43e9e87-2f49-4b81-a019-9359aee3aa56",
          "status": "Created",
          "code": 201,
          "responseTime": 193,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "03425202-744b-4efb-8b71-4b96c8663c26",
        "cursor": {
          "ref": "24cdf044-5929-46f1-9159-b10d25d6a9ff",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e449e978-5acf-4502-b13e-97f4698a5186"
        },
        "item": {
          "id": "03425202-744b-4efb-8b71-4b96c8663c26",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f804857c-6077-437d-8531-e2338ca9f0e7",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c897176c-f740-441b-9a25-98eb52f460f8",
        "cursor": {
          "ref": "b55364ef-e252-4a78-9ccb-4a2d83070f8b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0dc6cb16-f06f-424e-be71-e1f7ffad5f79"
        },
        "item": {
          "id": "c897176c-f740-441b-9a25-98eb52f460f8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5f47a0f1-e9da-46fd-a5bc-a911f6d59b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8d9fe0-8761-48b6-99be-d8a274deafb8",
        "cursor": {
          "ref": "3bfd8580-9b84-4d97-8b7e-765e88b5d797",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "67cd1e1f-d019-4c22-9e1f-a489362949a3"
        },
        "item": {
          "id": "cb8d9fe0-8761-48b6-99be-d8a274deafb8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "54ae1af9-6835-4ec1-8666-16fc9a72cea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be93023a-530d-49fc-9c6b-70489494ba55",
        "cursor": {
          "ref": "dc93bcbc-3256-48aa-9f54-6224949ccfef",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f2c9ad19-148a-48bf-897c-a7318e43ed06"
        },
        "item": {
          "id": "be93023a-530d-49fc-9c6b-70489494ba55",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6cf2748e-c8da-474c-a03b-403f5f513266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ac7338-997c-43ec-998f-0bb092df8f96",
        "cursor": {
          "ref": "e3598fb5-1b25-48eb-bdfa-de386fa03350",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8ef228c3-551e-419d-8c43-5536f7a512a8"
        },
        "item": {
          "id": "a4ac7338-997c-43ec-998f-0bb092df8f96",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "31607083-74e8-43bd-9140-15007ae4ae43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e4e4d7-212e-4a99-9095-52fd7a4719ae",
        "cursor": {
          "ref": "9eda22f6-79c9-4955-8a2a-bcb6cda1c394",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6aa27f10-6c86-4c5a-a95f-9fd2b785eaa1"
        },
        "item": {
          "id": "89e4e4d7-212e-4a99-9095-52fd7a4719ae",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3bc331a2-72a0-4255-922e-6742029f51d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d3cb98-0137-427f-b4b9-33c2632608d7",
        "cursor": {
          "ref": "3cce6a03-26c1-4074-b1a9-d1e0fd0a1316",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f9641d7f-c8aa-4b03-8e8f-3132e85e3471"
        },
        "item": {
          "id": "d1d3cb98-0137-427f-b4b9-33c2632608d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4633b858-d2ef-4607-b7a8-12d0d345d6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb14aad-cca1-4144-be99-3b42488ada5c",
        "cursor": {
          "ref": "bb0932e1-8168-45f7-8165-7f4929650ec2",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b17a92bf-4a6f-4168-9a0c-581bd2586bed"
        },
        "item": {
          "id": "0cb14aad-cca1-4144-be99-3b42488ada5c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "72e5bd73-24d3-4d93-aff1-85ce70b76fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070f2c4a-d607-4b9b-87fb-714a8f2d3563",
        "cursor": {
          "ref": "d0922220-a36f-4f9d-bd48-6fd18adb3b04",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e51d4c78-46dd-4b33-b6d4-1c2d090ecf95"
        },
        "item": {
          "id": "070f2c4a-d607-4b9b-87fb-714a8f2d3563",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c92e71ba-6f60-47b2-8ee6-e1fbaf92bc55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb730915-1266-446c-b5f2-ad997c85c3dc",
        "cursor": {
          "ref": "f85cc194-a517-4a81-9976-e84146171edf",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d3afa2e4-36f1-4057-b64c-aaf8d02008bd"
        },
        "item": {
          "id": "bb730915-1266-446c-b5f2-ad997c85c3dc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7d681121-82c9-4504-881d-fe0e9fdb17e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d693246c-14d0-4d4f-a245-fcc79dabc781",
        "cursor": {
          "ref": "b48f4976-0cba-4a84-b8d6-b98269e20b33",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2fdb255d-d4f6-43fe-83ec-20fd89d44a8b"
        },
        "item": {
          "id": "d693246c-14d0-4d4f-a245-fcc79dabc781",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dbf1b360-6bee-4a35-b109-9b6db12e65e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bd05fb-7d5b-498a-be5d-ce194ca04c16",
        "cursor": {
          "ref": "f74ffb06-ac3d-4d1f-ac53-9a30d3ac5bb1",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ea8f70d7-374f-449d-a88c-6d6a30398f2f"
        },
        "item": {
          "id": "03bd05fb-7d5b-498a-be5d-ce194ca04c16",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cbb0ad2a-2fc6-4d22-a9c6-22a486772c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c5e5ad-7502-4a92-8747-6711e2b86ff0",
        "cursor": {
          "ref": "fa9131c4-fd43-4a5c-a68d-1beb9b057fa3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "99f4be22-57f2-4d09-97d8-e0bdde12109c"
        },
        "item": {
          "id": "16c5e5ad-7502-4a92-8747-6711e2b86ff0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "448960a7-4197-406c-97bc-5727a3e19bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf7a972-b755-4758-ae50-21717b2e7e54",
        "cursor": {
          "ref": "5e928ba3-e585-4873-8af5-f1742b954a59",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "43796802-08ed-43ad-ad68-0d3f7e068dbe"
        },
        "item": {
          "id": "2cf7a972-b755-4758-ae50-21717b2e7e54",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3d8721a3-a356-4037-a90e-247fb820cdee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae97bfe7-e4f9-479f-b21b-67f00961c0d8",
        "cursor": {
          "ref": "1058084d-2de4-4c0f-9601-e4f9454adfb1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7ac06720-51ca-4b4b-b28e-4151f52bec99"
        },
        "item": {
          "id": "ae97bfe7-e4f9-479f-b21b-67f00961c0d8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "156816b4-9724-4caa-a3a0-a2a8c0e95bc8",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5bc6c5fc-8d04-4f53-aba9-6786e04b94ba",
        "cursor": {
          "ref": "f4a675d6-e0c4-4375-8768-c1ffeb858d6d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "dcdb4087-658a-457f-aff6-822724b3e210"
        },
        "item": {
          "id": "5bc6c5fc-8d04-4f53-aba9-6786e04b94ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5fa210da-5cbe-40d0-b78c-d24d895c1560",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8e7543e6-5c8e-448a-a398-b2b18b8b342f",
        "cursor": {
          "ref": "2f1a52fd-f30b-48ea-a0ba-6a77f97813f9",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4f0543d-5174-48d5-b05e-71dec1d3def4"
        },
        "item": {
          "id": "8e7543e6-5c8e-448a-a398-b2b18b8b342f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "528d440d-e238-4e79-b36a-38086b7dacda",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7a0bb5d0-e42a-470b-80f9-3d3b8b7725c0",
        "cursor": {
          "ref": "9da068cd-d195-4997-bcf6-ce9782f635ba",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "306141df-5ad4-45a3-82e8-75e7a50d8b7e"
        },
        "item": {
          "id": "7a0bb5d0-e42a-470b-80f9-3d3b8b7725c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fe705f9a-fd61-46da-b6b0-ef767df477c6",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0d6b70c3-1e8c-449d-a88b-1a309ec43056",
        "cursor": {
          "ref": "18790370-58ee-44d5-ae08-26e98a2895dd",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "daf40c2e-5f1b-4b60-9c23-53cc4e3fd894"
        },
        "item": {
          "id": "0d6b70c3-1e8c-449d-a88b-1a309ec43056",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fe9829e2-130c-4e5b-961a-1e50d12432db",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "103e1882-5a69-496d-bdfe-32961c10cfd6",
        "cursor": {
          "ref": "3f9ce7f7-bdb1-4305-848b-47719444909f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cec54380-68ba-47c4-8840-9c25779ef31a"
        },
        "item": {
          "id": "103e1882-5a69-496d-bdfe-32961c10cfd6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "961a5f1e-8c3d-4f64-a973-f11a5abec29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b898da0e-9d45-4cfb-846e-3923d0cf688c",
        "cursor": {
          "ref": "96b09d9c-a90e-4fc2-9d9a-f0c6341e9f2f",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c7cd1f38-76a4-42c5-9468-57acf47bfeeb"
        },
        "item": {
          "id": "b898da0e-9d45-4cfb-846e-3923d0cf688c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "561e24fc-d117-48af-9ef0-9b841dc55342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60566d12-d48b-4151-8675-a640d47ef01e",
        "cursor": {
          "ref": "30c4a827-2526-4762-b0c8-7982c71b2a88",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e44e7780-e684-4b9c-81ca-f29a4636a00f"
        },
        "item": {
          "id": "60566d12-d48b-4151-8675-a640d47ef01e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "808889e9-429c-4569-afcc-3e06e17139c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc62594-d35d-416d-a4c6-e603f41f0da8",
        "cursor": {
          "ref": "3924550d-a2c7-431f-9e08-49b589b06519",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "182b3b23-80e9-4433-b5f2-f441967b1b28"
        },
        "item": {
          "id": "ccc62594-d35d-416d-a4c6-e603f41f0da8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "12621228-507b-4f28-a884-84c28579b9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce155286-02f5-46dd-ac72-c148e1c93ecb",
        "cursor": {
          "ref": "fec536db-1202-4140-a458-9dddf5e3015a",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9ed443b4-7fe7-424d-8485-6cf882ac0fde"
        },
        "item": {
          "id": "ce155286-02f5-46dd-ac72-c148e1c93ecb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7c5f94ea-003e-416b-a628-a5d043151bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2213c2-8b67-4a87-bf70-0b757266a5d8",
        "cursor": {
          "ref": "ba9c9429-aed7-4968-8144-661a77cc6e39",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2b6fd732-bdd8-41a9-9e5a-0a963adefc79"
        },
        "item": {
          "id": "4a2213c2-8b67-4a87-bf70-0b757266a5d8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "aaa641d0-4ea3-49d8-be0e-1bc4d82795f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e891ee-2ade-4716-8e67-8fa210c702c4",
        "cursor": {
          "ref": "d0c521fa-eacf-4025-a7a5-81767edd6114",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a6a66295-00cb-49a7-a9ae-5999837faba7"
        },
        "item": {
          "id": "83e891ee-2ade-4716-8e67-8fa210c702c4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "86959f88-a11b-470f-bce0-1ee68c3d24b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63af443c-5d8c-417b-9dba-cfdf028aefb2",
        "cursor": {
          "ref": "d1c67877-645d-4f5d-a3ab-6b09d0a2369d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ddcf7e9d-b20d-4ef1-891c-a1fc0c8addc0"
        },
        "item": {
          "id": "63af443c-5d8c-417b-9dba-cfdf028aefb2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "abeb0852-c4ec-4406-889d-be4749881b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6428c0f-c24c-47f0-ba08-a493b69ed174",
        "cursor": {
          "ref": "fccf069f-8f43-4a59-b785-4696744abb38",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "229f0032-83e4-40e4-92ab-cad048844916"
        },
        "item": {
          "id": "a6428c0f-c24c-47f0-ba08-a493b69ed174",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c493207e-df6c-40be-ae98-7a8026ab9540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5f173c-beda-4506-a4d3-53b54a790c19",
        "cursor": {
          "ref": "4bc895c4-655f-45e1-95a6-7779ab2b1874",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1e85ea48-a58f-479b-9c35-eb880959240c"
        },
        "item": {
          "id": "ff5f173c-beda-4506-a4d3-53b54a790c19",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ecd705cf-64d1-441d-b216-a97ac3ac5c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0033536f-2274-4916-a32a-b65d818b9237",
        "cursor": {
          "ref": "0475619f-b67b-4b70-9b29-4612e8e0900f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "181e757a-fc4d-4237-bacb-5c1a07435efd"
        },
        "item": {
          "id": "0033536f-2274-4916-a32a-b65d818b9237",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "549d10ea-7dfe-4192-8f40-9e3e669b2908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39548054-40f7-4c53-8a95-33f17fb7d267",
        "cursor": {
          "ref": "eb8b7b89-d90d-406e-8e56-b494c268c421",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3773c7e3-2c26-4b08-8572-f530e012a016"
        },
        "item": {
          "id": "39548054-40f7-4c53-8a95-33f17fb7d267",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "05091edf-98ec-481e-a53d-bb547142f79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f24658-bb23-4e95-a781-007101352c66",
        "cursor": {
          "ref": "da7a106e-7ea9-4ebd-821e-b7d37abb755d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5fdd7660-ad4e-4597-bbeb-f50beab6da06"
        },
        "item": {
          "id": "e7f24658-bb23-4e95-a781-007101352c66",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "64a8d10a-53cb-4f5a-999d-8cfab66741f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65038c69-9933-481c-81b0-b37ddda7ef06",
        "cursor": {
          "ref": "a234de0c-04f1-4c30-b290-cc31960dda78",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "84af1c91-cd83-4b26-9d9c-ff2c0526600b"
        },
        "item": {
          "id": "65038c69-9933-481c-81b0-b37ddda7ef06",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ea126daa-6600-4878-84e4-e1d20ebbd1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f074c558-003e-4bbd-b034-ad9df5829bc3",
        "cursor": {
          "ref": "bc510481-dd2a-4391-af61-1cd1458422a0",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "324d512e-9fa9-4caa-9004-6ac168d1907a"
        },
        "item": {
          "id": "f074c558-003e-4bbd-b034-ad9df5829bc3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "07382f20-3557-41dc-8675-d727e4730634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15acbdf1-1f26-4f84-8599-e13b175a63c0",
        "cursor": {
          "ref": "9a5cf4be-10b7-41e3-a7ce-9cb719e5f224",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "63c313dc-8862-4a38-9b45-76f030bc34ea"
        },
        "item": {
          "id": "15acbdf1-1f26-4f84-8599-e13b175a63c0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ecb93ddd-fa3c-45aa-a52f-fba36866849c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158a9915-defd-4337-956a-83208fa5bbc2",
        "cursor": {
          "ref": "34ea767b-c8f1-444b-8d13-fa1bc4000e90",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5233c729-470f-4930-b8c1-3bd4a715119d"
        },
        "item": {
          "id": "158a9915-defd-4337-956a-83208fa5bbc2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "11fc215c-527f-405a-b2c6-e18e99c8263c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e491eb6e-b6ec-41b3-a9d6-a8b02e8c4b34",
        "cursor": {
          "ref": "7f578131-5e42-4de0-9538-81243711c7da",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e4e359cf-f16a-4381-a48f-631e4f1f76d6"
        },
        "item": {
          "id": "e491eb6e-b6ec-41b3-a9d6-a8b02e8c4b34",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7e3eafa5-73dd-4424-b2c8-10fb16f9ef7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dd03ff-47ed-480e-939e-8e24e8f39339",
        "cursor": {
          "ref": "bc27d9a1-dc49-4431-9f37-b1b0be789691",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b1f4dc55-75df-49d8-bf3c-70df23ef1e10"
        },
        "item": {
          "id": "b0dd03ff-47ed-480e-939e-8e24e8f39339",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9ab9070c-7989-4b76-a4f5-05c2d8d145f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5d3857-cebe-4aa6-959d-53dbb7bd6717",
        "cursor": {
          "ref": "e4633755-ceaf-4248-8b56-282969b3beea",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e47a047f-6089-42cd-a278-7c863438b04e"
        },
        "item": {
          "id": "8a5d3857-cebe-4aa6-959d-53dbb7bd6717",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c3d42fd-66be-430c-b0f9-b8a5baadadc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ce4b4a-35a0-4785-834a-8760ea42cec4",
        "cursor": {
          "ref": "4e506d73-fac8-4031-b6cd-4557aa67ed0d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "64d36cc7-e841-4b3b-a25f-5d75c7ffa550"
        },
        "item": {
          "id": "b5ce4b4a-35a0-4785-834a-8760ea42cec4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e4cafa14-4fc3-4b9c-8a91-67be41d91139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9d8443-7190-4edb-9d16-9fe60478fcbf",
        "cursor": {
          "ref": "fc3379aa-2b66-4a2c-8b0f-e2ed4714df50",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9560a053-a75d-4533-90b3-e952212bb644"
        },
        "item": {
          "id": "fa9d8443-7190-4edb-9d16-9fe60478fcbf",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "134d5cc4-dd2f-49fc-9fe0-bf0a202c70ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c41371-4b4c-4462-acf6-bc3dee5e76d6",
        "cursor": {
          "ref": "304dee97-b0fd-434a-9aac-a56f1cabb233",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9efc00f4-ecf7-478e-8dcd-8991cb63540b"
        },
        "item": {
          "id": "a9c41371-4b4c-4462-acf6-bc3dee5e76d6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2284fd91-4861-4baa-85f5-842d1fb3cb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c47551-20ff-4daa-a5c6-8f0bfafbdcf7",
        "cursor": {
          "ref": "742acd8d-5a36-457f-a13d-8d1a75255217",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "efcf249f-352f-4e5e-b60f-6516548fc3f8"
        },
        "item": {
          "id": "b2c47551-20ff-4daa-a5c6-8f0bfafbdcf7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cf61888a-9b6d-43d0-8226-8c666486321e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e79eaa-8b5f-4a9d-8186-4dde261b54ba",
        "cursor": {
          "ref": "24bd2933-7c45-4a0b-ac16-a3a1de2e1530",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4955101f-3ba2-42e4-9217-ff695cf9c0e1"
        },
        "item": {
          "id": "b3e79eaa-8b5f-4a9d-8186-4dde261b54ba",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4be10111-9304-416f-a460-8818443497a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613efb49-a270-4339-a377-b0fcf9d6fa8f",
        "cursor": {
          "ref": "1aa84f48-2d5b-4bbc-a50a-73f811a07c45",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8f57421e-b96e-4e1d-b7f9-c30f03cf465f"
        },
        "item": {
          "id": "613efb49-a270-4339-a377-b0fcf9d6fa8f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "06a5c202-95c3-4632-ada4-c65ed20a6a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eff77fb-b07f-4756-81b9-c270c63bb397",
        "cursor": {
          "ref": "dc799ac3-11b3-41a1-939c-b3f4211dda71",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c1958c9a-2f08-4c0b-9097-411d8b15d12a"
        },
        "item": {
          "id": "4eff77fb-b07f-4756-81b9-c270c63bb397",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "64b4197a-1c40-49a9-911f-f1c3f31ad0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b3f63f-0c24-4093-a8ed-93bda9d11624",
        "cursor": {
          "ref": "26e23d99-d9bc-4050-954f-14637faefe3c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "20723108-5d15-4349-ba2e-856c4cc5796b"
        },
        "item": {
          "id": "a5b3f63f-0c24-4093-a8ed-93bda9d11624",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6aa4bdd5-faf7-45bc-adf1-aee6ecb63c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0cd953-d063-491a-811f-ef4372f9d2d4",
        "cursor": {
          "ref": "685c2524-0205-45a2-84ce-7b8859f81583",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d56a5179-ab5e-4114-ae73-20f0af0f9df4"
        },
        "item": {
          "id": "8d0cd953-d063-491a-811f-ef4372f9d2d4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e988bccd-9ccf-46d7-b88a-552e9f67b538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9267bb15-2036-484a-a6ed-48e25b11c3b2",
        "cursor": {
          "ref": "0e77b48f-c962-4907-91e2-7340885a0620",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0d5c8ab0-b8d9-4783-ba06-efec385f6600"
        },
        "item": {
          "id": "9267bb15-2036-484a-a6ed-48e25b11c3b2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1397c850-3efd-4dc9-b497-ddfca07d876c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e85981-d1af-40b1-ac53-ed7d2bac75f9",
        "cursor": {
          "ref": "3d791b5b-23ff-477d-a400-7a5f867c7b10",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "311ff96b-0a74-4e12-babb-a7b2867c2a24"
        },
        "item": {
          "id": "e0e85981-d1af-40b1-ac53-ed7d2bac75f9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ec647445-1cab-4991-a32a-ec4fffd190aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9c7ada-ea3c-470c-af9b-55a5dc7beb70",
        "cursor": {
          "ref": "48dcc6ee-2c35-4ee5-a18c-322a076d6afc",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9801e855-3b95-47ba-a35f-38ba80b7f54b"
        },
        "item": {
          "id": "8e9c7ada-ea3c-470c-af9b-55a5dc7beb70",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e071e654-7a19-4eba-8549-965ea64b8edb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b900e660-2290-4a8e-bfea-024d7a49218a",
        "cursor": {
          "ref": "4e7653e9-0dc5-400a-b566-5e9efbeb1557",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e90a5e2f-e32f-4671-b4e2-fc0de64c219c"
        },
        "item": {
          "id": "b900e660-2290-4a8e-bfea-024d7a49218a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "69608617-5877-49d2-b08d-939e0153a875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "0ab6125b-6082-4ad4-b13d-718b95d38071",
        "cursor": {
          "ref": "3203af49-ac30-4b06-9b92-be7f656edc2c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7b02ea1f-a295-46e2-bc57-5a9b62e527c5"
        },
        "item": {
          "id": "0ab6125b-6082-4ad4-b13d-718b95d38071",
          "name": "credentials_issue"
        },
        "response": {
          "id": "abcf789b-3844-4a69-9110-bcaad039989e",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "30651f75-06f5-4020-938b-e03fdeff6fa1",
        "cursor": {
          "ref": "6a43b3ee-fb9e-4025-b565-84fb389f02e8",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f2a498a2-37fb-499e-b0c5-e746d5f720ee"
        },
        "item": {
          "id": "30651f75-06f5-4020-938b-e03fdeff6fa1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5c896578-db40-44fd-9f6a-d824eb8fe3db",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "118925da-db73-45c7-8872-880fe37276d4",
        "cursor": {
          "ref": "6a793a29-5327-4990-90d1-d51a4f08e3a3",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d0868d8b-f35f-4326-a521-ec149983ec06"
        },
        "item": {
          "id": "118925da-db73-45c7-8872-880fe37276d4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8203db2e-d86f-4c07-a0c1-d991d8ab2ebe",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "10be4c18-dc64-41c7-82bf-1a36e961816d",
        "cursor": {
          "ref": "30efbcd4-3368-47d9-a522-215a80eecb67",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "95ddf692-dcf3-4e25-a570-db8553864ae6"
        },
        "item": {
          "id": "10be4c18-dc64-41c7-82bf-1a36e961816d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "295a48c9-6390-427a-a4bd-b036c3e8af49",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e7257e-d0b6-480a-ae63-149d1b927d65",
        "cursor": {
          "ref": "2e0c3ba0-d794-43a4-abf4-55a2f17e4f23",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b75208cb-dddb-413f-b5fa-124b0fd3b1dc"
        },
        "item": {
          "id": "55e7257e-d0b6-480a-ae63-149d1b927d65",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a747a0c2-d847-4872-b6c1-0543bd44df37",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-14T00:39:53.660Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-14T00:39:53.660Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f3f348e5-9bbf-4c31-9e40-9b15d58b4af3",
        "cursor": {
          "ref": "809b5289-ffee-495e-bdb2-47d53ed47186",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bc2a5e4f-a8b3-4126-938b-43a4b2ed66bd"
        },
        "item": {
          "id": "f3f348e5-9bbf-4c31-9e40-9b15d58b4af3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a7c4db44-e0da-437b-9e25-f29984170df1",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15ec2b5-825e-4ee6-b1d7-19ffe208d058",
        "cursor": {
          "ref": "f42d6feb-4456-4f10-b175-1512ae8d3267",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9d8be912-2307-4579-a145-59817e679f41"
        },
        "item": {
          "id": "b15ec2b5-825e-4ee6-b1d7-19ffe208d058",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "afd51ec3-3ce1-495f-9ed7-e7fbefd61e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cccb6d-32a4-4321-8b34-007657a8f59b",
        "cursor": {
          "ref": "d7a41c18-78bb-4bce-a813-ec68913e1434",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9d057671-620b-46f9-9b30-af4f7c0ca652"
        },
        "item": {
          "id": "f3cccb6d-32a4-4321-8b34-007657a8f59b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fa1f7eb0-dac2-4f1d-a3ab-20e53cbe64bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06263a2-9633-43a8-bce1-545ec25f9cd2",
        "cursor": {
          "ref": "6ee1308c-eef1-4c21-a64d-650279313239",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cb84529a-1018-42fb-89f9-ed96e13096b9"
        },
        "item": {
          "id": "b06263a2-9633-43a8-bce1-545ec25f9cd2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "99c0a0e8-73fe-4c81-9bb3-6a1b9cb575c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a40f277-3368-4248-a904-6ae6c78de18d",
        "cursor": {
          "ref": "84ecf007-695b-4910-9b0b-784d37ed3ec3",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "20932b2e-1e96-450d-b384-afb31abd3672"
        },
        "item": {
          "id": "3a40f277-3368-4248-a904-6ae6c78de18d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b975d8e4-b515-4d8f-8eac-55cd51aa9f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23462ce-887f-4270-9f18-0b2b1213e54d",
        "cursor": {
          "ref": "62b5dc18-dca2-456b-9ee2-f65783a62404",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6a90440c-6e55-4eb7-bba4-46a96d6a8684"
        },
        "item": {
          "id": "e23462ce-887f-4270-9f18-0b2b1213e54d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bf0af463-c043-4c53-8e34-8e1dbb45002e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602bdb20-f275-45f4-bdcd-4965877059a1",
        "cursor": {
          "ref": "3839b1a9-cfd6-47b8-9aa0-1bf2372923a5",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3ea368ab-cf51-4527-8930-b2972bcc5ccb"
        },
        "item": {
          "id": "602bdb20-f275-45f4-bdcd-4965877059a1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bf4cba85-87bd-4576-b616-4aeed471f7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05de8a97-08d4-4d08-b085-043562fd16bc",
        "cursor": {
          "ref": "71399c58-7943-4398-bf6f-f2c7251542e9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2286e60a-9b40-49b5-a80e-614be199b3af"
        },
        "item": {
          "id": "05de8a97-08d4-4d08-b085-043562fd16bc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7494a1e0-f777-4d58-88ae-09dccb229db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3557b137-de5e-4d48-b381-f78d37733053",
        "cursor": {
          "ref": "1cbacbd3-df4a-423a-a075-69d83f92fabf",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "01705747-6ebd-4a41-b71b-dd554d88257a"
        },
        "item": {
          "id": "3557b137-de5e-4d48-b381-f78d37733053",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f38e1a53-0f93-4651-84ee-d82c0ceb3523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf10cef7-aa72-442c-8ce3-5a10f873530a",
        "cursor": {
          "ref": "2d37d102-29be-4d37-9e43-ca95e9530b27",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7b180030-eb3d-411d-a587-8e7ccd2683d9"
        },
        "item": {
          "id": "cf10cef7-aa72-442c-8ce3-5a10f873530a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "96373cc4-a81d-4ce6-8864-3d881b60ec32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d51039-66c5-4bce-8461-65f91dcef1db",
        "cursor": {
          "ref": "56c63fb4-ca9c-4047-8feb-9b068f684084",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6084d7ea-88af-4a40-abfc-ae3fd3bbefc9"
        },
        "item": {
          "id": "55d51039-66c5-4bce-8461-65f91dcef1db",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b9bb0a25-ed03-4fb3-8585-564aa7f85e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef5e0a-70ca-4f09-89e7-9c00dd22c1c7",
        "cursor": {
          "ref": "44b35a54-12d3-4a64-beb0-b6d58e625752",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ccac4e86-3a9a-4a82-9ae9-1e76cbdd7e3f"
        },
        "item": {
          "id": "73ef5e0a-70ca-4f09-89e7-9c00dd22c1c7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ed1be327-4965-419a-8a51-ed83b1193836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f20f092-cec8-4aef-8ac4-1f5b22f18d39",
        "cursor": {
          "ref": "d53beadb-488d-4c17-9774-be925983facf",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e808b5da-2be3-4d32-81e7-defbb963752b"
        },
        "item": {
          "id": "8f20f092-cec8-4aef-8ac4-1f5b22f18d39",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9cad2ad5-3073-4097-b632-21c611c3ec71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02db12cf-9749-4fbe-abd4-e2c0eee8c34e",
        "cursor": {
          "ref": "e7b553e9-f233-4cf9-81ff-f96c4ae43023",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f0e3c239-e4ef-4685-aa11-72f340472608"
        },
        "item": {
          "id": "02db12cf-9749-4fbe-abd4-e2c0eee8c34e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b90416e-dc9c-47a8-8f66-8b96caa84518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1725928-0ded-4bcb-93a8-2648987bcd36",
        "cursor": {
          "ref": "e973873b-7db2-468a-9e1c-3084ba936139",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9e877c13-517a-4745-8dee-67c2a3b6f254"
        },
        "item": {
          "id": "d1725928-0ded-4bcb-93a8-2648987bcd36",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "87523975-c284-4989-b35a-1ca7bec42f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fd1981-9ded-449e-b069-115395c34dae",
        "cursor": {
          "ref": "a56accb5-5287-444d-b82c-46f211213577",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cff01ce0-4bea-4a64-8700-13d10792dcd4"
        },
        "item": {
          "id": "34fd1981-9ded-449e-b069-115395c34dae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3b5cb4f9-5ed7-40e4-8d4e-30856bcc02c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8d90d0-8223-41d4-ac55-41a2a812e1ef",
        "cursor": {
          "ref": "81730a4c-821d-46aa-a49f-84c89ea3ee73",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1f58c425-9034-4eee-80a8-c9bbf5a3d6a9"
        },
        "item": {
          "id": "6f8d90d0-8223-41d4-ac55-41a2a812e1ef",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9e4d5cc9-a975-48a6-a0b8-9909985b7401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c08799-a807-407a-b344-6545b2de521d",
        "cursor": {
          "ref": "7a490968-57c9-4f53-9a4e-aadd9b929090",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "54d38e44-92ff-483a-8f94-1e8df77b858f"
        },
        "item": {
          "id": "65c08799-a807-407a-b344-6545b2de521d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3c5d69e7-c1e1-4901-8797-aece0f100c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ca5ade-01d6-4d6d-bee0-0ee8d506b660",
        "cursor": {
          "ref": "757f35f0-d21f-4f8c-ab54-f7a1eca3d563",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a451b680-71ea-46fc-b85e-a0c437263c52"
        },
        "item": {
          "id": "11ca5ade-01d6-4d6d-bee0-0ee8d506b660",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "951bdd70-c6c7-4cd8-9a30-5ba521e43778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d8f88e-c82e-4768-ad16-d93d116fe539",
        "cursor": {
          "ref": "8edf089d-3c33-46fb-9ff0-d8a11f949718",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a3d3f445-f837-40f9-a0a3-c2ee5c0449f3"
        },
        "item": {
          "id": "97d8f88e-c82e-4768-ad16-d93d116fe539",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b150dd0e-d1ad-444f-b83e-81344d90c4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a8c21d-7c29-458e-9fba-ca858277862c",
        "cursor": {
          "ref": "1eb8d007-9f1b-4885-8c86-1f070d5a3e81",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bb46bbd4-584b-4a4c-8a60-5b95b63b9860"
        },
        "item": {
          "id": "f1a8c21d-7c29-458e-9fba-ca858277862c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6e4f159c-b402-4874-8152-bddb6234445c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e26c00-92a2-462a-9eb4-c36b32a46e52",
        "cursor": {
          "ref": "e9048848-0bd7-4473-bbc5-4ce7957ffc53",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "01ee732a-5402-4f04-970f-af75599957f5"
        },
        "item": {
          "id": "a2e26c00-92a2-462a-9eb4-c36b32a46e52",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4aa9828-ca33-49c3-a23e-a880afd66d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d0ee3e-2ea2-4420-a95a-0d511acde2b8",
        "cursor": {
          "ref": "9f6caaf0-8734-47cd-bb94-3d55298241f4",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "059dda64-6c49-4fac-9392-bebd94d2c1b7"
        },
        "item": {
          "id": "a6d0ee3e-2ea2-4420-a95a-0d511acde2b8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bcf6b5e4-b224-4132-a987-8755b372a723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49ac0c-5474-4924-97fc-24e3991c0a8e",
        "cursor": {
          "ref": "0b833270-300c-4418-9fe4-a56d1566f848",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "dba511c8-8ada-4fb5-99b0-2762bbc63421"
        },
        "item": {
          "id": "3b49ac0c-5474-4924-97fc-24e3991c0a8e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4975fc69-b74f-4f02-8a56-495db8dd5ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201b2490-a8df-4671-b7d8-e6d0d10628c6",
        "cursor": {
          "ref": "9f218ace-cc35-4149-a242-a99af8774afa",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "63fb7532-07ce-4ff4-a3fa-cd974e6520e0"
        },
        "item": {
          "id": "201b2490-a8df-4671-b7d8-e6d0d10628c6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b9164ac6-3e0a-45f6-bc19-f9e70061b6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f832151-b4ec-4eac-91f9-1581596ee2b2",
        "cursor": {
          "ref": "e31d142e-c210-4257-847c-421f1592f91d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fd87be84-fa05-4f1a-b3f0-349a02d60030"
        },
        "item": {
          "id": "0f832151-b4ec-4eac-91f9-1581596ee2b2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f5f9df8c-6216-4984-9e98-8152549d5b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc57f028-b5c8-453a-b19c-a90d360bcfe4",
        "cursor": {
          "ref": "52ff2c28-2463-434e-bf73-91e4d48defa7",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "87aac8e1-6861-492b-b31c-a2b308993809"
        },
        "item": {
          "id": "fc57f028-b5c8-453a-b19c-a90d360bcfe4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "65bcdf15-820e-453e-8f3f-e3c6bb3aaa4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b590e750-e098-4a2e-927e-3b75f74c22b2",
        "cursor": {
          "ref": "7a9240ae-8cde-4143-a00d-58c01c7c878c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1dd22ff1-164e-4903-b1d4-e2497cde506e"
        },
        "item": {
          "id": "b590e750-e098-4a2e-927e-3b75f74c22b2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1695d3c5-3200-46e9-be61-d2bfd61bb3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd8e9e9-38c7-4107-9240-2e078d20d02c",
        "cursor": {
          "ref": "ac232003-adfb-470d-9413-9a661e86195c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a03bb494-6ded-4e89-a473-439e23281786"
        },
        "item": {
          "id": "fbd8e9e9-38c7-4107-9240-2e078d20d02c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b3c265c-d0e5-465c-a2a0-8e8e90b8699c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5af1dc0-4bd6-4139-bae6-12561bc75e41",
        "cursor": {
          "ref": "fe8a44c4-e92e-4cf1-9aab-9adc3fd37f6e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "80503f0d-2d9e-43bc-b447-4fec8da2d01f"
        },
        "item": {
          "id": "a5af1dc0-4bd6-4139-bae6-12561bc75e41",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "35eac654-ecd6-4d8e-a7b4-332a5eeee59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6862a63-010a-40b1-b2a9-466ea52407fa",
        "cursor": {
          "ref": "829d198d-7ca1-49e6-b775-c5575f8123a8",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e03e2017-e280-4c5e-83c9-651e50d3afca"
        },
        "item": {
          "id": "d6862a63-010a-40b1-b2a9-466ea52407fa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c086f4c1-91a7-46d6-85ed-2741715067c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194ac767-0d03-42dc-88b9-19204f7c295c",
        "cursor": {
          "ref": "9430d51c-b14c-442b-b83e-9f2610a5af9d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0c1aacf7-19e7-4fc6-812f-647a781046f4"
        },
        "item": {
          "id": "194ac767-0d03-42dc-88b9-19204f7c295c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2e015ae0-051d-433b-bb67-d2ca67ad83a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da54cd8-b09a-41c2-8db8-daacf06bcb58",
        "cursor": {
          "ref": "d0edff1e-41bc-475a-b463-abc2ecabe585",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1a77f18f-f88b-4135-9a14-7ecb267e9643"
        },
        "item": {
          "id": "8da54cd8-b09a-41c2-8db8-daacf06bcb58",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a0da7f04-3ac0-4cf9-88c7-c946edab7075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdd5cf8-acd0-484e-b329-41b04d057f62",
        "cursor": {
          "ref": "e7539ad7-2ba4-4411-a82e-f523088c8a61",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c66da8cb-55fb-4d96-a071-3f6048a9d970"
        },
        "item": {
          "id": "4bdd5cf8-acd0-484e-b329-41b04d057f62",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b776fa79-b6f6-4b6a-b4fa-3c48d4a9720b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3a4270-bc73-4d1a-83fb-e4dc439f0498",
        "cursor": {
          "ref": "61672de2-2def-4ea1-9eb8-acefc24c919c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "03f0cc58-986f-4160-9c70-7e9dc29d6e77"
        },
        "item": {
          "id": "eb3a4270-bc73-4d1a-83fb-e4dc439f0498",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9b211ed7-e7f4-4d01-a485-c5a3b7ecb24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9784ed-86d1-4b37-a490-bbffb97fdfa5",
        "cursor": {
          "ref": "2ecb9ee3-b668-4ccd-b16b-a9f29e9a91fb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "05b0ac2f-2a77-4833-a912-3db62486a632"
        },
        "item": {
          "id": "df9784ed-86d1-4b37-a490-bbffb97fdfa5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "196e4ba5-1099-4914-a600-078dd12626b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6583d73c-312f-4c19-b8e0-91b89077536f",
        "cursor": {
          "ref": "1435161b-e0a1-44af-9aef-3eccd098079f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c39a3592-a649-456d-80b3-3943a17f2af2"
        },
        "item": {
          "id": "6583d73c-312f-4c19-b8e0-91b89077536f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c15dcb03-cae5-4e49-bed5-f3c67a46490f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6d587d-b24f-4604-964c-8a77a7877683",
        "cursor": {
          "ref": "47570af4-cec9-4477-8c09-0fe3c69c1b47",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1a850dfc-ca7b-4b71-b6e4-9754a5932c55"
        },
        "item": {
          "id": "9a6d587d-b24f-4604-964c-8a77a7877683",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "360ae6ea-f3e1-499a-883b-cc98b96faa68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08651b4b-7d49-4df5-a207-1b988f77e93f",
        "cursor": {
          "ref": "b1cf8251-bbc4-4f79-9b70-f7aee22fd0b3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "28a65667-b745-4a53-94f0-8f7ec9ff2547"
        },
        "item": {
          "id": "08651b4b-7d49-4df5-a207-1b988f77e93f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "24998057-f52f-40a5-9ff4-28b7accebc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee4023a-b0d4-4ee3-84cb-7b042340ea16",
        "cursor": {
          "ref": "372878fa-00da-4bca-b6af-eac79dca5532",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d4ef00dd-71d2-4b7c-ad67-a0211e7e838f"
        },
        "item": {
          "id": "7ee4023a-b0d4-4ee3-84cb-7b042340ea16",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d5c78216-246b-459c-9537-d5e584b569d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a991f67-bf69-4575-a16d-3f303773c5b3",
        "cursor": {
          "ref": "074ce9c4-0579-40b1-856a-31c244eec2c5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d44e68f7-a887-48dd-a28d-0e26f78e06cf"
        },
        "item": {
          "id": "2a991f67-bf69-4575-a16d-3f303773c5b3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "40215759-6b17-4352-a53f-0451f855497f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c6e103-2153-43b7-a439-2bedaf94ff69",
        "cursor": {
          "ref": "3f1aa219-72d6-4e7a-94ea-06578e8327df",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b48b6b4-a5eb-4bf4-8484-a626aaecf406"
        },
        "item": {
          "id": "c1c6e103-2153-43b7-a439-2bedaf94ff69",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f195c04a-db24-40f9-85c5-929fba580108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd3c013-9d7b-4e4f-b24b-47319233feb1",
        "cursor": {
          "ref": "ea436549-cbcf-4289-8037-87cd046400c4",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fa714be9-81da-414e-b82a-ae4e7b7f80cf"
        },
        "item": {
          "id": "5bd3c013-9d7b-4e4f-b24b-47319233feb1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "38fc779d-c1d9-4525-8ccd-1961e46777c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3e8ebe-83ac-4554-ab79-4596bd5ff8c8",
        "cursor": {
          "ref": "d38b9d96-5090-4510-aa9f-fd04f2a33cda",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b9e8bed9-f7e1-412c-8f6d-867dac8eade1"
        },
        "item": {
          "id": "ce3e8ebe-83ac-4554-ab79-4596bd5ff8c8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "26722223-8182-4881-b684-6e86a75cb42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683e8884-aa5c-4bfa-8e74-bf23a991df41",
        "cursor": {
          "ref": "0ccfeb41-4cea-49c1-8f48-a9c5adf748cd",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d9e0ece-e5ef-4fcb-b4c9-d6fddefcbca8"
        },
        "item": {
          "id": "683e8884-aa5c-4bfa-8e74-bf23a991df41",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e213d151-7dca-4475-b97e-7210a45090be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a4a75f-b7ae-4929-8d47-0588988ca61f",
        "cursor": {
          "ref": "ecd03de3-3d13-4ecf-823d-f8aaeb9c2678",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "317da5d7-685d-4886-a202-74a4c473055b"
        },
        "item": {
          "id": "e0a4a75f-b7ae-4929-8d47-0588988ca61f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1222d134-a941-4464-be7f-0f6ca935fee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f7de7c-42f5-4335-8961-55ce77ecd7ca",
        "cursor": {
          "ref": "c936fd47-0b8d-4f8b-8162-e0957a3a170d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "70ecdc5b-aa83-4ecb-9749-71e047120e5e"
        },
        "item": {
          "id": "28f7de7c-42f5-4335-8961-55ce77ecd7ca",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cfc6f4d4-6f22-43f2-ab4c-32817bfda0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86539a5-2cdc-46c4-9ff1-6ef75158ea32",
        "cursor": {
          "ref": "22b179f0-2e22-465f-b6d5-b6cf89879122",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ee99d3b5-34d1-4651-ba3c-8919c72c5ecc"
        },
        "item": {
          "id": "a86539a5-2cdc-46c4-9ff1-6ef75158ea32",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7bab05e0-1261-45a0-aa67-453d3024d2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 88
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6559193b-7322-45f4-b3ff-0628e1b5cc06",
        "cursor": {
          "ref": "d3465916-258d-46f7-911f-aee28413d36c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5feb81dc-310c-4ffa-99ef-4fd63df81897"
        },
        "item": {
          "id": "6559193b-7322-45f4-b3ff-0628e1b5cc06",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a2116f5-8123-4b3b-a607-2d4ea60ae484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6661df82-2b60-44cf-98aa-847f31425c8f",
        "cursor": {
          "ref": "5df6b648-53b1-414e-9405-fc4e7a755213",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "558a1ac3-fd21-4d40-954d-0906a708b011"
        },
        "item": {
          "id": "6661df82-2b60-44cf-98aa-847f31425c8f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4d93eabf-227d-4482-8480-a868a4d0a69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89494b8b-6023-4450-8654-0974ddc64c05",
        "cursor": {
          "ref": "88af820b-5474-41bd-8f8b-c39a5355de1d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8d76a51c-ed1b-4b64-884b-e9870b212137"
        },
        "item": {
          "id": "89494b8b-6023-4450-8654-0974ddc64c05",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a6105ad1-38b4-4e28-aa23-ba6666225003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836d2ad9-ecaf-4482-9f73-fac5fdd9438c",
        "cursor": {
          "ref": "8247bfc8-cd40-4aa1-9409-56b7deb0d115",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d14cfb28-10f4-4dda-93ac-daf3061abca6"
        },
        "item": {
          "id": "836d2ad9-ecaf-4482-9f73-fac5fdd9438c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1858909c-810b-4af9-b1c5-b3b9fdcb7909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef6cf6-2a6a-4a5d-9463-ece4902a5755",
        "cursor": {
          "ref": "bd214705-dfda-4d68-8715-3eb61e0c3ad9",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a6de7972-c8c5-415a-ae61-c01188693a96"
        },
        "item": {
          "id": "0cef6cf6-2a6a-4a5d-9463-ece4902a5755",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "68a2fed5-35d6-4606-b129-786a4f60c5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6c5dad-f962-4646-a74f-57857fea4a73",
        "cursor": {
          "ref": "818dfaa6-6013-4462-bbde-b37b2695fe35",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c9ffe3c5-e6bf-4089-856d-49a30d07687b"
        },
        "item": {
          "id": "8b6c5dad-f962-4646-a74f-57857fea4a73",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "59cd56a6-29fd-4d9c-958a-258b963ae00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5956d43e-836d-441a-bf28-602d64aaf10d",
        "cursor": {
          "ref": "8f35f198-d112-4744-b399-f4b9b2d11a84",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6a7250ea-d34f-4427-bb3d-d5d452a81b91"
        },
        "item": {
          "id": "5956d43e-836d-441a-bf28-602d64aaf10d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f2887662-c6ca-45f1-815b-b84c7ad00854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c834494f-5201-48a7-a56c-1dedb39af0cb",
        "cursor": {
          "ref": "651d9587-2359-4895-a3d7-615fec43de11",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d4f227a7-e404-4868-ac34-5ea15ab2718f"
        },
        "item": {
          "id": "c834494f-5201-48a7-a56c-1dedb39af0cb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dfe3a4dc-95b1-4fbe-8672-ec0e94a3a221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b30ff4a-d92e-4702-8163-5c6d11abd4d8",
        "cursor": {
          "ref": "6328cc16-be26-41ba-855a-0f6fd3b9d2d6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "eddc8540-5410-4584-9d37-998547f28b56"
        },
        "item": {
          "id": "2b30ff4a-d92e-4702-8163-5c6d11abd4d8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "60a48e43-0b3c-4c80-8406-fc894a596831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2af202-06be-49ac-8167-5a2bf16dab34",
        "cursor": {
          "ref": "29aa160a-a908-4255-8f07-d6ba27e25e4d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9fd1ecc6-16a3-4d42-9395-a9016119c20e"
        },
        "item": {
          "id": "bf2af202-06be-49ac-8167-5a2bf16dab34",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c2bf1479-6e72-405b-8c5e-a5093a80bbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac2cc6c-0f99-40f9-8e16-90f39b2b64f3",
        "cursor": {
          "ref": "d56cf004-4e12-42b7-b9f9-e0e488c015ac",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "852477f2-ec99-4c0b-8433-494f9f291b58"
        },
        "item": {
          "id": "1ac2cc6c-0f99-40f9-8e16-90f39b2b64f3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "004aea87-c461-473c-afcc-58b162529f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6aef64c-c7b5-48a4-a3a4-08ec9d505924",
        "cursor": {
          "ref": "ee8f095f-c1d4-4bb0-a824-b92a38d6b626",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3127dc9a-675f-43ea-a486-079dc14aa3f0"
        },
        "item": {
          "id": "b6aef64c-c7b5-48a4-a3a4-08ec9d505924",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5599fab5-1f29-4b38-a4e3-dc6e2d9b5086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c62841-28cd-4c46-9cf0-4c8f41aea945",
        "cursor": {
          "ref": "79217d7c-4972-4350-99fc-cacd646dac82",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d193acc6-b95a-4d09-997c-76ff8f1723c0"
        },
        "item": {
          "id": "95c62841-28cd-4c46-9cf0-4c8f41aea945",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ac49e189-2e5a-4911-8b2b-90b657c03e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d1d3ec-3fa7-49ec-8b78-5672e38fc452",
        "cursor": {
          "ref": "9096a6ce-c866-4e83-98ac-61f5b24a5298",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a9bdece-5f20-425f-89b3-9043826af398"
        },
        "item": {
          "id": "50d1d3ec-3fa7-49ec-8b78-5672e38fc452",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6ee061ed-1bae-4cc6-a4f2-202977371308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fb041c-60b6-4a51-9485-4f80351614c6",
        "cursor": {
          "ref": "0de5dc14-3661-47a1-95de-6135be1e761e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2b7d369d-a9ac-446a-97e0-cfc8457925c5"
        },
        "item": {
          "id": "68fb041c-60b6-4a51-9485-4f80351614c6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dcc6b4ce-0f5c-46f7-a1e3-2a7f0f8aee2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d22d49-a69a-41a1-8fd8-0c7f53adce9c",
        "cursor": {
          "ref": "0c0350c1-9dec-4cc4-8481-1c0b74feeb82",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a08b913d-7491-4252-9c29-5284540408d5"
        },
        "item": {
          "id": "56d22d49-a69a-41a1-8fd8-0c7f53adce9c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7b7c8296-781e-46b1-9ed6-c00539dd3cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16678d8f-a519-4543-97c5-da45a63e9039",
        "cursor": {
          "ref": "cb5eeab0-81d4-4515-baf5-f381b593775d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "50717f51-51fc-4c25-a563-e1c179c62761"
        },
        "item": {
          "id": "16678d8f-a519-4543-97c5-da45a63e9039",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6bd66987-24b2-463a-b414-b1c3f2c61e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49a6055-3469-44fc-beb6-1b3f0fadf13b",
        "cursor": {
          "ref": "8c872081-2978-4003-81e6-354ef87fe33d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b2249c3f-0fbe-4083-8d28-5085e9cbd2f8"
        },
        "item": {
          "id": "c49a6055-3469-44fc-beb6-1b3f0fadf13b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6a5bfa4f-c75b-4793-91a5-c35e99f04a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2b7a44-1f53-4272-83d6-ea01ace52113",
        "cursor": {
          "ref": "d3a3cf99-0992-4451-b87a-9c166845a8e6",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4bc3f086-3cab-4d83-b12f-4fa938067a5c"
        },
        "item": {
          "id": "2d2b7a44-1f53-4272-83d6-ea01ace52113",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "de432e32-40ee-4f57-ad05-89b2a21cdb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3061e6-433a-4389-8771-6003df0f6e55",
        "cursor": {
          "ref": "06558d63-ce0d-49ea-a6cc-bd47e1a63015",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ad9ceb4e-6f7d-4148-acdf-ac450a471286"
        },
        "item": {
          "id": "9c3061e6-433a-4389-8771-6003df0f6e55",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a844e7a7-f2ae-49f3-91a5-6a64d89a427b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f1f35e-fbce-406c-8eb7-39587b6dd24f",
        "cursor": {
          "ref": "3794f317-e3e4-4c1e-8621-11e7edc80b98",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "09cdde42-da59-4be2-b48c-f250322cc9e5"
        },
        "item": {
          "id": "73f1f35e-fbce-406c-8eb7-39587b6dd24f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6803b53f-f9e9-462a-a20c-38cdc23b2622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f227c400-2b11-4f84-8c8f-f843743b70f5",
        "cursor": {
          "ref": "3369fbc6-f5ee-46f5-b0c0-d6036d8deacb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a501bfc5-c629-4e48-9a79-b78c45d93a61"
        },
        "item": {
          "id": "f227c400-2b11-4f84-8c8f-f843743b70f5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fd8de8fc-0081-498c-bbe0-7d5a89be28f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe20fe5-8391-4231-93bf-b135b3bc6123",
        "cursor": {
          "ref": "027b2600-6093-4cdc-a739-88a9130d1d38",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aeedc42e-e426-4b4f-811a-139f68cab52f"
        },
        "item": {
          "id": "1fe20fe5-8391-4231-93bf-b135b3bc6123",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f81c9004-6ba6-4289-8011-ed858450bfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c9a4d9-5597-42b6-a016-33d4aa96f460",
        "cursor": {
          "ref": "0166c36c-d9a8-4fbf-ab99-2695db35f2cd",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "068b4945-85b0-4612-9c20-61c0b0dfa377"
        },
        "item": {
          "id": "c8c9a4d9-5597-42b6-a016-33d4aa96f460",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1cf50f41-7b93-4aa2-86c0-c4e4167e11a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56ffa88-fb54-4840-ab22-582d874f12a3",
        "cursor": {
          "ref": "62c00cc3-e68b-4b97-96e9-abd3289ee5c9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "714e4840-045d-4913-86ad-ed9353e2f015"
        },
        "item": {
          "id": "d56ffa88-fb54-4840-ab22-582d874f12a3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bf5932d5-c0d9-42bf-9ac7-26bd30be89e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886a5322-ff11-4c8f-8823-1c28d50b661b",
        "cursor": {
          "ref": "f27352aa-de94-40a1-9027-e45f9a6631c8",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c0168dd0-c527-4900-8e4f-a7361ce28a3f"
        },
        "item": {
          "id": "886a5322-ff11-4c8f-8823-1c28d50b661b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "09f7f5f7-24d1-476f-accb-1896be4e9737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be77c8cf-3869-4736-8057-c07ba2ed295a",
        "cursor": {
          "ref": "e41222b5-b334-4878-ae6b-240727dadbf0",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c0db69d6-925a-4434-9889-3b01ceb53d66"
        },
        "item": {
          "id": "be77c8cf-3869-4736-8057-c07ba2ed295a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3596a39d-bb3d-4540-b974-6800f8439da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5f9bf6-068b-418b-9642-20a58752de8c",
        "cursor": {
          "ref": "666cccce-e90d-4422-a143-1a17a7823591",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "11818fd0-4c11-4539-9edb-a9eda507e850"
        },
        "item": {
          "id": "bc5f9bf6-068b-418b-9642-20a58752de8c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fc06a04f-7021-460d-abc1-3b70c3ad02a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96211b2-520a-44b6-a51c-c42a6a21bc54",
        "cursor": {
          "ref": "a88ddc74-1e0c-4082-8ddc-0379120c4ed2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "014115a4-5e48-4caa-8b93-5dc77db1fc33"
        },
        "item": {
          "id": "a96211b2-520a-44b6-a51c-c42a6a21bc54",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6dd18bba-6bcf-44e6-a4c4-05351edbc76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5835907-9872-4814-a771-bd8f19fdfe81",
        "cursor": {
          "ref": "be123fb4-bb45-477d-ade5-baa82d78def5",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c9fd2551-89d5-4506-9233-a4e555912a66"
        },
        "item": {
          "id": "a5835907-9872-4814-a771-bd8f19fdfe81",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cc520dbc-248a-4a76-894b-82affa2a82ce",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "80a80fd5-86e4-416a-aa17-a351533b1265",
        "cursor": {
          "ref": "55b29235-aadc-4fa9-be37-55129c13c0e6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "00e4fee1-a416-41af-a1a5-3bad9cc742e3"
        },
        "item": {
          "id": "80a80fd5-86e4-416a-aa17-a351533b1265",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "faa909fc-7afe-46de-9829-c2b106f828d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b5304e-36fa-4ce2-8cd8-4eb844772ab7",
        "cursor": {
          "ref": "52030db1-c430-40b3-a879-15fae065ef19",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ce64ad0f-d7b3-4178-97a2-f1b7c1a8413c"
        },
        "item": {
          "id": "b8b5304e-36fa-4ce2-8cd8-4eb844772ab7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f9010436-20f1-4112-9369-df69062fed51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2128eee-daf3-4d38-88ee-a5cd421c62a7",
        "cursor": {
          "ref": "2baa5f3f-339a-46b1-868f-ffa70a0c6a0a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ec177f46-7b9c-4c92-a99e-33a163f91ee9"
        },
        "item": {
          "id": "b2128eee-daf3-4d38-88ee-a5cd421c62a7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cc37aab6-cb0a-4e37-807c-e0371e1394bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143d270f-3bd0-4eb7-9b7d-1364811d79a6",
        "cursor": {
          "ref": "a43cddff-a832-443e-8438-03d465359267",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f93f392f-d093-4a14-bd9f-8ed7d5690d88"
        },
        "item": {
          "id": "143d270f-3bd0-4eb7-9b7d-1364811d79a6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c30c0d56-cfdb-4f4f-a90e-e3a3cb084e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1689353-8b37-4c53-9dc6-6b34387658c6",
        "cursor": {
          "ref": "2fb1e83e-533c-4930-8103-6002c0c5313a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8d83c30b-90b8-4e68-aa3c-252739ed03cb"
        },
        "item": {
          "id": "b1689353-8b37-4c53-9dc6-6b34387658c6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e1963658-dadd-4d7e-af99-45c24c3e8639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809d7e83-0090-46f0-92a8-a0a2d7ad883b",
        "cursor": {
          "ref": "7968f21a-299b-4094-9fe9-62e230e36e5f",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "081d03e7-da13-43ba-bbc4-70571ab2ae0b"
        },
        "item": {
          "id": "809d7e83-0090-46f0-92a8-a0a2d7ad883b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "556a40c8-5f84-4251-aae0-d8b472dd2c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5ca742-5775-4dbe-84bf-32d0aa154e00",
        "cursor": {
          "ref": "db9f7ba8-4c11-4074-a95a-fb34e38bf03c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7f0f884e-af45-4fbf-bb3e-856653e14a9c"
        },
        "item": {
          "id": "9f5ca742-5775-4dbe-84bf-32d0aa154e00",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5f2952ef-359a-4abf-9000-37c0c65de881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3c1b4b-e0c7-4527-9d33-44fc9b620311",
        "cursor": {
          "ref": "e3d53f60-29d5-4718-a936-bbac91013075",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "65b9164a-71ef-4e55-a19a-0530dfe22909"
        },
        "item": {
          "id": "2d3c1b4b-e0c7-4527-9d33-44fc9b620311",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3194cb59-6ff3-4d06-a416-9589d6789347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee9f85e-1a40-4c78-92ff-4b3d3094591a",
        "cursor": {
          "ref": "daf7a5e2-05ec-45bf-ae24-18a96fbaf840",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bb3a4e0a-4b83-4c42-b712-d709c684e83f"
        },
        "item": {
          "id": "6ee9f85e-1a40-4c78-92ff-4b3d3094591a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "878d74f3-ed9f-4c14-9aaa-4af7baa7ca8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbecbef-c6f0-474f-996b-152439e3b957",
        "cursor": {
          "ref": "34e050e2-5b7a-4714-993a-4013fa0c2403",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6628bf50-48b2-4608-9cbe-2013d738f936"
        },
        "item": {
          "id": "7dbecbef-c6f0-474f-996b-152439e3b957",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3c0fa2d2-5af1-466c-a7d0-6ec5259bf854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991a64e7-ea32-4c64-ac09-b0cb9c56d1a0",
        "cursor": {
          "ref": "742e0aca-9fcc-4e65-90a0-669667552a0a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2e6f5052-c8ed-46ba-93a5-f6edcca7f7b4"
        },
        "item": {
          "id": "991a64e7-ea32-4c64-ac09-b0cb9c56d1a0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "46373f56-1d95-4606-8005-fdaec0a4a7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44388977-b462-4c10-b904-6c784b7cadbb",
        "cursor": {
          "ref": "11863c70-4aec-440b-8b52-117319f69a06",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a9469199-5b6b-4b9a-bbcf-9667fa3bedeb"
        },
        "item": {
          "id": "44388977-b462-4c10-b904-6c784b7cadbb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a2e40812-5974-428e-9a1e-249c9c6e1412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0b2d85-4185-4b18-9916-2e6c45145f1b",
        "cursor": {
          "ref": "13999dc4-db33-4f1f-87b4-ecf1f9ca6343",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ff03b2e3-0c86-4cb3-a100-5994fda32a15"
        },
        "item": {
          "id": "8c0b2d85-4185-4b18-9916-2e6c45145f1b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "175233ff-9a61-4e97-8df1-0d7ba93b1b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d57a3f7-9f5c-4805-8dc0-e5bc0d902abd",
        "cursor": {
          "ref": "329d5606-24f8-417d-a320-aba9da5f0612",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e5c57b10-c294-42b9-aaad-eaf3ad5ce2d4"
        },
        "item": {
          "id": "9d57a3f7-9f5c-4805-8dc0-e5bc0d902abd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f69c9899-6998-468d-8dd9-62e80318bd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead3ed9b-41d2-4036-8917-c1db57d86f1b",
        "cursor": {
          "ref": "17f1a5bc-2a2a-4532-9a2c-92a11da02995",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "97cba180-f2a6-4f87-9d7f-11fd6ae83c48"
        },
        "item": {
          "id": "ead3ed9b-41d2-4036-8917-c1db57d86f1b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4c72e136-c014-4c31-a65f-3b7ed9e3ffd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71758424-1dcf-44dc-a2ac-3f3b1a962f99",
        "cursor": {
          "ref": "9aa33363-feba-44a0-898c-44006ef9eabe",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3c2acde8-68fe-4f94-9bf4-76a2c464017e"
        },
        "item": {
          "id": "71758424-1dcf-44dc-a2ac-3f3b1a962f99",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b774aa52-faae-485d-848f-91cb22b51da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9b1b2d-d7e8-4484-84c5-e17633ddf26d",
        "cursor": {
          "ref": "6c4d682f-2004-4a99-9b6d-615be6967a25",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2ad2eb02-f913-422b-aba3-508f373f6fae"
        },
        "item": {
          "id": "4b9b1b2d-d7e8-4484-84c5-e17633ddf26d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "df6c0d97-f358-4ff3-9ccd-5fa349345064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ba683b-1fd4-4944-a2ee-812ae9e7b0a2",
        "cursor": {
          "ref": "2dfc2744-086d-4d3d-bbbd-21f5d80da566",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c8c01fb5-5475-4941-a74e-396e62ecda7d"
        },
        "item": {
          "id": "b4ba683b-1fd4-4944-a2ee-812ae9e7b0a2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "83083ddb-b1de-4918-9dc2-22447e931e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9b54c3-e4ed-41c1-bbe7-f552c6425f22",
        "cursor": {
          "ref": "996b9b89-80d6-4f77-bdf6-1eae30f2031e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "999b3e30-98ff-4336-b0b9-7348cba92eb6"
        },
        "item": {
          "id": "fd9b54c3-e4ed-41c1-bbe7-f552c6425f22",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f4600f35-408f-4008-8d16-c377c9d35691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aad35b8-819c-48cd-af4a-d40cbfa8a60e",
        "cursor": {
          "ref": "e9b03e74-f7be-43ad-9730-0ba23c34a83a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3f466a9a-fb16-4da9-b34c-0a17f5322d98"
        },
        "item": {
          "id": "8aad35b8-819c-48cd-af4a-d40cbfa8a60e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "83702058-34b7-4c07-ad0a-cd2c2a937d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06eaff42-8b3c-4377-b39a-d86b81be1ec4",
        "cursor": {
          "ref": "285d6b7e-8b2c-4e02-8cad-300855d0ec29",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1b11bba8-5dac-4047-9ee7-d23b5fb08152"
        },
        "item": {
          "id": "06eaff42-8b3c-4377-b39a-d86b81be1ec4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a6495daf-c525-46dc-a382-6833bd55ed85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a3dde2-e4d8-4947-a069-e1da1e601a61",
        "cursor": {
          "ref": "e53ff8e2-3db4-4057-ad41-e16ee70d08da",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "571fca2a-37bf-4762-901f-1c6c54c6ddf6"
        },
        "item": {
          "id": "77a3dde2-e4d8-4947-a069-e1da1e601a61",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ba91d6ba-6ccc-4afe-ae0f-ccb1c543a629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16076acd-551e-4074-aab4-9081fe4b6761",
        "cursor": {
          "ref": "12d133a5-b367-46ef-acbb-43b76ab95140",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "487209be-fed1-4777-90fc-3f64990f1644"
        },
        "item": {
          "id": "16076acd-551e-4074-aab4-9081fe4b6761",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4fdcb96e-91af-4aca-8a78-fa1fcb249908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f58c38e-133a-4b92-acf4-c58c18dac443",
        "cursor": {
          "ref": "1e9912f2-0b00-4508-8547-e1dc33cc83a1",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cb89e039-1675-4eac-b311-05adb2d7f778"
        },
        "item": {
          "id": "6f58c38e-133a-4b92-acf4-c58c18dac443",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6792fdc7-09a9-426c-a9d0-026c8976cfe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690fb6e6-dd6b-409e-bf06-03a45bf3e1a6",
        "cursor": {
          "ref": "ca0cb774-2a4c-4e9f-b4c9-c3dfd5dbd92e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "65c5fc41-965f-4931-a889-fa65ae541519"
        },
        "item": {
          "id": "690fb6e6-dd6b-409e-bf06-03a45bf3e1a6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "741d9acb-e363-4d69-9234-4713b970d982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530dd69f-e560-4353-b731-f78dac7863d6",
        "cursor": {
          "ref": "03b0fe89-f8e1-4dfa-b3dc-736b1d33d2e6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e97ad7a1-0bfd-4e8b-9846-c1119aae60f0"
        },
        "item": {
          "id": "530dd69f-e560-4353-b731-f78dac7863d6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a3709ae2-3156-4dec-a795-1b5a4dc22756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5941af-816b-4b6d-9c03-ecf6af5d3030",
        "cursor": {
          "ref": "ffdd74fe-2698-4a6e-af1a-91fd1960a17a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ff59f071-ee4c-4b67-abd3-a2bfe9191a85"
        },
        "item": {
          "id": "4e5941af-816b-4b6d-9c03-ecf6af5d3030",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a41f2a4a-dbf9-4781-8050-5638742f9665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494187a0-15f1-43e7-834f-8696dea1a086",
        "cursor": {
          "ref": "054fb278-da18-480d-8305-08b4c7e15998",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1e242bca-742e-4e73-9aa6-b8a421581d2f"
        },
        "item": {
          "id": "494187a0-15f1-43e7-834f-8696dea1a086",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "77eb0130-2c08-44f0-bef2-18badb440a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6504c9b-93b7-4c42-86ba-0f398cef1365",
        "cursor": {
          "ref": "f408724a-59c7-4aaf-a4b8-0014fe1110e3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a40f859a-4bed-4ee1-8ed9-fa230d44f940"
        },
        "item": {
          "id": "d6504c9b-93b7-4c42-86ba-0f398cef1365",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1eff7c98-fb0a-4434-a0d2-6f60a4bca2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d354d24d-fb18-478a-9907-425ac7e8623a",
        "cursor": {
          "ref": "9635dc15-046d-42ab-a9a6-23fcac057119",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bf8b9059-0a35-4964-96d9-4dac9ffb3f33"
        },
        "item": {
          "id": "d354d24d-fb18-478a-9907-425ac7e8623a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ef1d6288-b05e-4c0f-b1b9-df81d9815c19",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "bdb95964-178b-41f2-9d30-a2010bb43fab",
        "cursor": {
          "ref": "3f988a39-75ee-4ba0-bba0-c7014337e07f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "450dcb9d-9c89-4ee6-acbf-4bc38289b429"
        },
        "item": {
          "id": "bdb95964-178b-41f2-9d30-a2010bb43fab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "656b2870-cf82-4101-8341-961fe949ac4a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6dce90d7-3bfe-443d-82a2-b44d7c335227",
        "cursor": {
          "ref": "f5adb467-0f67-4c7d-bad3-14261b74e61f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9f08ba36-dd57-4938-8ef7-edfee8fc23f7"
        },
        "item": {
          "id": "6dce90d7-3bfe-443d-82a2-b44d7c335227",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "db50a2ba-6903-45e8-9b6e-0e7ba3add704",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6f4b4a38-d5d6-4f43-b42b-3965f6bc38ca",
        "cursor": {
          "ref": "df24a8cf-4f26-41a4-aa56-e230233622b0",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e50e35c5-91c2-4215-b8d6-b361f64bf360"
        },
        "item": {
          "id": "6f4b4a38-d5d6-4f43-b42b-3965f6bc38ca",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c2ef0a89-df78-446c-be7d-34a15d8d44ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f7bd6e-029f-40c3-b1df-3250358bbdb0",
        "cursor": {
          "ref": "59868b82-6c8e-42a8-9be4-e7fa625675c8",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "74eed7c2-4167-493e-a885-b7f808de547d"
        },
        "item": {
          "id": "22f7bd6e-029f-40c3-b1df-3250358bbdb0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7d671729-e924-4f03-b444-0c4670241136",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8eb943c8-c51c-4048-b274-9c354f39a809",
        "cursor": {
          "ref": "887a9185-032e-4bfa-b4c6-daf5053cd644",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92719000-dc6a-451a-b7a7-836ab5c005f6"
        },
        "item": {
          "id": "8eb943c8-c51c-4048-b274-9c354f39a809",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "22180820-b2f8-4938-9485-1f3d739f50f1",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "da0915cd-880b-4662-8860-fe8648799d54",
        "cursor": {
          "ref": "a0b475c6-155b-4218-8804-02a80caa98a5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5d8a6818-09d6-4b22-bbc0-8c95a301a513"
        },
        "item": {
          "id": "da0915cd-880b-4662-8860-fe8648799d54",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "51ef0f5a-f7fd-4f69-a3d9-507cb1522c09",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4a10d1f0-3ea1-4d5e-9f2f-5afd035730b0",
        "cursor": {
          "ref": "7e851a7f-3846-4349-88fa-c2969ab7957f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1fc0b2b7-f38d-4914-a4f5-b5067d6ffa4e"
        },
        "item": {
          "id": "4a10d1f0-3ea1-4d5e-9f2f-5afd035730b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "60809bac-7aa8-4462-a8a2-6e50a1d521b4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "def9d3c7-49d0-4683-a24b-c5ac2003fbb3",
        "cursor": {
          "ref": "0da94c2a-9d17-423c-ad2e-72ada36e06be",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ab3a6dcd-e932-467d-a595-48607808b678"
        },
        "item": {
          "id": "def9d3c7-49d0-4683-a24b-c5ac2003fbb3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "032ae75d-c6c7-47d7-bddb-d97550f5d0b9",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "03d6c411-d71f-4d50-b8df-0074a3bfc92a",
        "cursor": {
          "ref": "bacd8fde-4a38-4a4b-85c1-75884e18256e",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e3e39fa6-4c57-413c-b0ae-7ded9014f8ac"
        },
        "item": {
          "id": "03d6c411-d71f-4d50-b8df-0074a3bfc92a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0cbe0f18-d5c8-4d04-99db-6e37558690f9",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "47f39c44-2960-415f-8852-344701aebdcc",
        "cursor": {
          "ref": "d462d89a-565d-4c01-b8f1-5b88302513f5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2d8cbe10-d412-46bb-94c8-7acfae2a1406"
        },
        "item": {
          "id": "47f39c44-2960-415f-8852-344701aebdcc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e06e6ad7-1d09-4c41-ba41-bf3e65a3eaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa34346-fe74-464d-b6ad-6a55f50a71b0",
        "cursor": {
          "ref": "7c93322f-39d7-4ad5-97a7-6d974fb07486",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0e3f3891-d72d-41f9-b21b-fe8cec381d97"
        },
        "item": {
          "id": "5fa34346-fe74-464d-b6ad-6a55f50a71b0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8791e60b-dec9-4c5d-adef-903e60b3d51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2115df56-a12d-4501-9137-c4ac4ed1208c",
        "cursor": {
          "ref": "b37df2b9-fa83-4d54-a38a-61139c325415",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "220c53ad-0571-4b5a-9de6-53dc4c442102"
        },
        "item": {
          "id": "2115df56-a12d-4501-9137-c4ac4ed1208c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f5daae11-dbde-43e5-8f5c-6126beb34aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b37f0c-4576-4a8e-9b89-35734f2a982c",
        "cursor": {
          "ref": "d8a22b76-0f2f-4666-8873-91d5af892d32",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fdb82106-b496-485a-b45d-8a37468153bf"
        },
        "item": {
          "id": "c0b37f0c-4576-4a8e-9b89-35734f2a982c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e596d5e1-ec0f-4462-a70a-559afdadb3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8e1a6e-2581-4212-917f-407fa0c23102",
        "cursor": {
          "ref": "3bbaf7e3-7698-491b-bb87-50398c6047f4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7abb8f34-dc20-4e4c-a806-a4a60da7130b"
        },
        "item": {
          "id": "4f8e1a6e-2581-4212-917f-407fa0c23102",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ef6c125a-9170-478a-b10b-53fd594eec02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1cb358-c53f-4c5c-a1f3-9e0a053ee2aa",
        "cursor": {
          "ref": "5ec44244-a231-4297-8d06-158f655165a5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "18b763a5-c39e-484b-a6bb-2031eb47495a"
        },
        "item": {
          "id": "ab1cb358-c53f-4c5c-a1f3-9e0a053ee2aa",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "aed70c47-4a55-46e3-ae44-ec90cb4d4e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b22ff52-9345-4826-85c1-dddf13df08ee",
        "cursor": {
          "ref": "212f6eac-3c67-4025-b9f5-073ef6426726",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "09fd4530-c828-4cf6-b090-85b431a4b34a"
        },
        "item": {
          "id": "5b22ff52-9345-4826-85c1-dddf13df08ee",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1fd5cd3b-bbc1-42bb-9145-3daa88549fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3420265-9048-4708-ba22-7ba6cec29874",
        "cursor": {
          "ref": "5f93d039-9584-42d6-8e57-da3311f60408",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "051dc9fe-9aeb-4cd2-b2c5-9be385244bfb"
        },
        "item": {
          "id": "a3420265-9048-4708-ba22-7ba6cec29874",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "dd5e3129-35c9-46a9-9899-72282fa262c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7419ff-f10c-47bf-a9c3-eb9f99ffbf01",
        "cursor": {
          "ref": "c7a6e139-d0c3-4bcc-9c97-383fa2dacd0d",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d604d136-ad1a-4f32-bc16-d0dbcf974b4f"
        },
        "item": {
          "id": "cf7419ff-f10c-47bf-a9c3-eb9f99ffbf01",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0cf1dbef-8be8-4d70-bae9-22e8602d8bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420536d5-9347-4baf-9287-58595b56d70c",
        "cursor": {
          "ref": "8daf58e5-12ca-4b98-91cb-95447df2c6ce",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2ac07b79-7de9-44e5-8b79-687798795d01"
        },
        "item": {
          "id": "420536d5-9347-4baf-9287-58595b56d70c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "240b9afb-e883-4521-8add-0c304196db95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58900192-5ff0-4e59-b22e-08c3656219a7",
        "cursor": {
          "ref": "d744b51d-a348-48a5-a3a9-32a2368efc0a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3de37c8c-ac34-41f2-8224-31b0c0d048a4"
        },
        "item": {
          "id": "58900192-5ff0-4e59-b22e-08c3656219a7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3fe77b9d-29e7-4884-bc66-a87a5f625104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7bee24-0a67-41a1-8088-e5c5ee045ec9",
        "cursor": {
          "ref": "11341f85-e843-4e58-b41f-f381a3a39c46",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c1cb4551-3c61-4f92-8bab-deb3057b5bd8"
        },
        "item": {
          "id": "0b7bee24-0a67-41a1-8088-e5c5ee045ec9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "628c2999-58b9-473d-af60-57251629929b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f8b985-4f2b-443b-a894-22516df10c51",
        "cursor": {
          "ref": "2c4832ce-aa51-4b3e-b8ca-10d4dd86e644",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d2847073-ffdd-4514-8fe0-cc49d7cad85e"
        },
        "item": {
          "id": "38f8b985-4f2b-443b-a894-22516df10c51",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fb5951b8-cb6b-465b-97c1-fbef830d393b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2af23f-1735-4d84-bb4e-8f46a54d2712",
        "cursor": {
          "ref": "ba157fc7-7f39-4294-834f-cbbd84aaff33",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0dcbb8ba-a8d9-4828-bb70-6090749b3ec0"
        },
        "item": {
          "id": "5d2af23f-1735-4d84-bb4e-8f46a54d2712",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0fe14faa-04c2-4ad0-981b-83603d31feec",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a1d2b9d5-e66f-40ad-978e-37f7f39eaca5",
        "cursor": {
          "ref": "74029e26-a378-4b48-8162-c5314794325f",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "22f7c87f-3007-4866-b013-030741008eb0"
        },
        "item": {
          "id": "a1d2b9d5-e66f-40ad-978e-37f7f39eaca5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "18c91c79-ef62-4a53-8368-7cf043b2b029",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "027ebc68-c517-4a8b-b8db-1ac14d171428",
        "cursor": {
          "ref": "7d68c086-3709-46f1-9c26-f61d869abe81",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ec420d07-e9b0-40fc-8d43-f053582b6c7d"
        },
        "item": {
          "id": "027ebc68-c517-4a8b-b8db-1ac14d171428",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "13aeebb6-4015-40ba-b828-da091e30b8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bc5a82a8-1bb2-4cc9-975f-b839198ebb2f",
        "cursor": {
          "ref": "541303f5-3943-4269-ac19-17ef14ae8be7",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "90d5502a-b54c-4db5-bdcc-1164d9e9e78f"
        },
        "item": {
          "id": "bc5a82a8-1bb2-4cc9-975f-b839198ebb2f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "40a43fd6-b98b-46ca-9109-be22e10b6aea",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6ec75a93-945c-4455-8297-55d2aa92febc",
        "cursor": {
          "ref": "6476f3a7-edfa-4fcb-8ca2-e008fc3cea5d",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "888051cd-ae79-4416-ac9c-541752f88811"
        },
        "item": {
          "id": "6ec75a93-945c-4455-8297-55d2aa92febc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "50eaaf96-b9c9-40d1-8a83-403dda6125ca",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "5cd2f184-530f-4d5e-bfe8-3aaf5e17dd34",
        "cursor": {
          "ref": "792d9da2-9990-44c2-be0e-3314820aca80",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "034a1591-3885-4195-a64c-30f39ab7c952"
        },
        "item": {
          "id": "5cd2f184-530f-4d5e-bfe8-3aaf5e17dd34",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "93b75e04-6091-427a-82ad-bef4d55133f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439a9c49-fc0c-4bf8-92f0-0587318b41a0",
        "cursor": {
          "ref": "4c1ec8a1-2fd3-4d9a-b5f7-cedb42de36ad",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "926e91a5-9c1e-404b-9a50-dc81d3ac8e7d"
        },
        "item": {
          "id": "439a9c49-fc0c-4bf8-92f0-0587318b41a0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d2fe6a6c-4272-41b5-b31d-9b521c799597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e34373-439f-4848-8c6e-b69817224520",
        "cursor": {
          "ref": "e612e02c-5000-43af-8118-5f9f6201d6d4",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a66f6bb1-6b3b-4599-8d2e-da592020c65c"
        },
        "item": {
          "id": "c2e34373-439f-4848-8c6e-b69817224520",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e3da2068-b56e-4273-819f-982a0eadfafa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94ddd21-7a67-442a-8f84-f522649466e4",
        "cursor": {
          "ref": "44735035-75c5-4dd7-8e31-ea51b0a72444",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3ab101e9-8a0a-43ce-b315-154bf31c0996"
        },
        "item": {
          "id": "e94ddd21-7a67-442a-8f84-f522649466e4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "389c9fa7-4c7c-44b7-95d0-1b6ff90bbc3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb5071d-5548-4088-8118-a7e87139e379",
        "cursor": {
          "ref": "39fb6bf2-ffe9-4b52-b608-e772258c103b",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f150f207-f3dc-4239-b3f6-72629d9d3ef3"
        },
        "item": {
          "id": "ccb5071d-5548-4088-8118-a7e87139e379",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "91a40f3c-4c84-48b0-9f66-b6584e7bf6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd864f2-3017-4f43-80c7-f4c741c71c4a",
        "cursor": {
          "ref": "d4aae346-29cc-4271-b577-22d3f06f6e0e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc79fd09-b99e-446f-af0b-3d947d33e43e"
        },
        "item": {
          "id": "bdd864f2-3017-4f43-80c7-f4c741c71c4a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0aa1f188-8f07-4280-a152-630a159ae5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a3614c-01a1-42c2-a070-e938a5fd9b81",
        "cursor": {
          "ref": "b6691b4c-843a-49fb-95ea-0a489eeea68a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "85e10758-c3d9-4022-9167-b7e9803bf525"
        },
        "item": {
          "id": "d4a3614c-01a1-42c2-a070-e938a5fd9b81",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "52dbbc5a-7f7c-48ab-8fc3-720f7c4076c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e893897-7b39-4241-be39-ffd6c96fb627",
        "cursor": {
          "ref": "548ae9a9-6b08-490c-8a01-1edf9febf13c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5d95038a-ca08-4da7-86d7-34e543db5677"
        },
        "item": {
          "id": "4e893897-7b39-4241-be39-ffd6c96fb627",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0cb7353d-cac6-468a-af58-1d7c3f64f366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33fea18a-61da-4daf-8a3d-c3246c2b5a18",
        "cursor": {
          "ref": "878414ff-e13a-4494-a774-83833dff18f0",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "80eefa57-24fb-470d-974d-fac450b63beb"
        },
        "item": {
          "id": "33fea18a-61da-4daf-8a3d-c3246c2b5a18",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "76eb5ec9-4ff6-4d9a-9faf-a20791db597f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e8fbda-08f9-467e-8919-af3ad5741052",
        "cursor": {
          "ref": "b3eb973f-5b3b-4ba2-9b3b-5f57792c45dd",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "91357c43-d530-432f-806a-21f91ea630f7"
        },
        "item": {
          "id": "55e8fbda-08f9-467e-8919-af3ad5741052",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cf25bc4f-98fb-496a-b505-cf0f4ba2292c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a04a8fb-ec6e-4ae7-8aa2-5f8de0f1ddc7",
        "cursor": {
          "ref": "386b61e6-413d-46db-9a8a-934e018a9778",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6869db69-1868-427b-b2c1-e49250126d77"
        },
        "item": {
          "id": "2a04a8fb-ec6e-4ae7-8aa2-5f8de0f1ddc7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c16fe273-3972-4a07-aa04-b711af44857b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf242cbf-e915-4571-9edc-77d09f3e6134",
        "cursor": {
          "ref": "d7e3976f-4f41-4782-89ce-9a6186bb4464",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ef0cf5f6-026e-42c9-bf11-939f22b768a0"
        },
        "item": {
          "id": "bf242cbf-e915-4571-9edc-77d09f3e6134",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a03490c0-9bda-447c-8338-c7a7c1c26c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bc968e-1326-42c5-9e90-c9afc7f66acb",
        "cursor": {
          "ref": "74b82d00-84b7-46ff-8298-074dd158de31",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3eddcf30-824c-4531-9d81-1fa7a60648b2"
        },
        "item": {
          "id": "a0bc968e-1326-42c5-9e90-c9afc7f66acb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a129e0ee-e0c3-4325-81c9-e1efe5d4f9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebbf73c-f52b-4ebe-97e1-1e8893681787",
        "cursor": {
          "ref": "59cc3037-fedb-4c47-8440-51c9fc1ad785",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a4d39486-88f3-4b1c-b3a3-ca4e2b7dfd83"
        },
        "item": {
          "id": "4ebbf73c-f52b-4ebe-97e1-1e8893681787",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f72ac822-5c3c-44d6-aa41-1a23a6362043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91809b21-5ada-452d-a0e4-d5291e23afa9",
        "cursor": {
          "ref": "18858ba5-5db5-4ce2-a38c-0c912e90aae2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a56be8a9-2a02-48ce-8908-44da0e95a4da"
        },
        "item": {
          "id": "91809b21-5ada-452d-a0e4-d5291e23afa9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bacb7d12-cbea-40b1-af4e-ecc326eab15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c78f640-cea0-4b14-964b-fc40ee084229",
        "cursor": {
          "ref": "b1793a09-1e1c-4d6e-a0cf-b6a50a9aa3f4",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "97295ae2-765f-4c9f-a4f6-bcb20c8de142"
        },
        "item": {
          "id": "0c78f640-cea0-4b14-964b-fc40ee084229",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4989b309-3a95-476a-af9a-37a9e8afb03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcb14ca-910d-4986-8d25-9386897cca06",
        "cursor": {
          "ref": "4050b333-fe62-4cd5-a601-6da80ce73715",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "161c0549-2bc3-476e-827c-7f2a0f95b4b4"
        },
        "item": {
          "id": "8dcb14ca-910d-4986-8d25-9386897cca06",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0dacfa5e-1261-4fa8-b520-b6c63ab6b8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d81eef5-803b-495a-b5de-bd887e9d5d66",
        "cursor": {
          "ref": "8ce18728-92af-4dfc-99c1-93e2ad01087d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e5ff4ed9-1c65-4e5e-a12a-119ab80899fe"
        },
        "item": {
          "id": "3d81eef5-803b-495a-b5de-bd887e9d5d66",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "33e4d6c9-df2c-44c7-85b0-2c90252e8ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c3ce8a-912c-44ca-afd9-698dd28fbb6f",
        "cursor": {
          "ref": "a5ccfc90-fcd7-4eb0-8e07-25477f8e5af8",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "565d0d7f-e6f6-47d1-8051-dfce259aed99"
        },
        "item": {
          "id": "17c3ce8a-912c-44ca-afd9-698dd28fbb6f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f32c0fb3-7d55-4fb9-b277-706311af6493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34221460-2b80-4d62-8894-96fcbebd8511",
        "cursor": {
          "ref": "67bbfe38-3a44-4a0e-8a79-0bb91bfc631a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ffe51656-76b9-404e-9403-45703a5d8680"
        },
        "item": {
          "id": "34221460-2b80-4d62-8894-96fcbebd8511",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4216f9bd-72d7-4e68-bb2f-a9b6a99ada2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33653225-997a-4963-bf9f-160d5a91ea23",
        "cursor": {
          "ref": "d856ca18-2670-4993-a42c-0203f1af1895",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2744fee1-19c3-4b6a-a46f-6c913e097d89"
        },
        "item": {
          "id": "33653225-997a-4963-bf9f-160d5a91ea23",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "76ccba3f-4c7c-436f-8964-6ebba7ef14cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580e5de9-bbeb-4882-8805-510b4052897b",
        "cursor": {
          "ref": "32c498de-8132-40e9-b39c-8b352f0d84d8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "550005e4-26b6-4745-b80b-45c5f01e06d2"
        },
        "item": {
          "id": "580e5de9-bbeb-4882-8805-510b4052897b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c7239c85-1743-4ebe-8b52-6c16fe771f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d89f729-5dfb-495a-9bc5-e93189d6ccf4",
        "cursor": {
          "ref": "9f802103-f7fd-48c6-8cec-d098aceac380",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "58853c41-8497-48f6-b1a9-0a5615b6eff3"
        },
        "item": {
          "id": "0d89f729-5dfb-495a-9bc5-e93189d6ccf4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4cda0afd-bfa6-4aad-a8eb-6c49daa49f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb88b4b-fd23-46e9-b1f8-a6233aa83603",
        "cursor": {
          "ref": "5b6c3369-86c7-46e7-847b-667d814caa47",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d239cb7d-9488-4853-86d3-6a3869907ef3"
        },
        "item": {
          "id": "9bb88b4b-fd23-46e9-b1f8-a6233aa83603",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0ad93ffc-40ff-4b56-afd3-fdcf3a6cc668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af514c7-ec16-43fa-aa7c-a0d142385672",
        "cursor": {
          "ref": "eb6ad10f-ebee-4307-8a7c-9dc638bfeafd",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "9a5e053d-57ab-4f41-9f5b-df4c74944b8d"
        },
        "item": {
          "id": "7af514c7-ec16-43fa-aa7c-a0d142385672",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c5360f3b-7107-47b3-a884-b0b35adde97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d8d439-5b44-434f-962b-17fd44b38c17",
        "cursor": {
          "ref": "a919f7c7-a776-43a0-b2b4-b6ac835e5f82",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7d091a8d-8521-49fe-8d03-d839ad28bd6c"
        },
        "item": {
          "id": "38d8d439-5b44-434f-962b-17fd44b38c17",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fb96ca0e-1661-4375-8698-984c151c0aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3acf0f-96d5-40f8-9e84-5ae872cb3ea9",
        "cursor": {
          "ref": "83c57d42-5785-4f05-ad42-ea7588ce0f96",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ac019592-d00d-48ef-be27-445ca3fe51e7"
        },
        "item": {
          "id": "fc3acf0f-96d5-40f8-9e84-5ae872cb3ea9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cace502a-8d95-4461-bdc6-92695f96e5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31ef83f-35f0-4dd9-a094-d4babeb312b2",
        "cursor": {
          "ref": "601f85cb-c99a-4886-874b-646a0bd47f71",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "0b61bdc4-e281-43ee-8ee3-4a85e42cb5d2"
        },
        "item": {
          "id": "a31ef83f-35f0-4dd9-a094-d4babeb312b2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "604121c3-1b00-481b-a7f5-1ee405c86c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bbc66a-76b4-42e1-a603-d31e8b96a6de",
        "cursor": {
          "ref": "8b32bbd7-8693-4329-bca7-a612f2eaec34",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "dbd0d1f8-9332-4012-bff9-94ae3d2b3fc3"
        },
        "item": {
          "id": "d7bbc66a-76b4-42e1-a603-d31e8b96a6de",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "df44c357-32c1-4cd8-891c-b1984dd4e412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "548b9298-cf50-4b30-abcd-00b796c982e3",
        "cursor": {
          "ref": "df5b6742-891b-4702-9296-26adaf9f6b50",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1be5ff9b-e3e5-42d5-b675-6c2829ce33a6"
        },
        "item": {
          "id": "548b9298-cf50-4b30-abcd-00b796c982e3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4a2a6313-8035-454e-85b2-5e43607bbb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebd0fab-a578-456c-b7ec-8738bd31a3bb",
        "cursor": {
          "ref": "1aa7d961-dd21-4780-ad97-1cf946bbb162",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ac2586e1-bf80-4310-9ac9-4511f1de42a2"
        },
        "item": {
          "id": "2ebd0fab-a578-456c-b7ec-8738bd31a3bb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e5c313f2-a9ba-4bbf-b1b6-3b9a589c47b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5645e0e2-86bb-4e00-9db9-3776f3019dd0",
        "cursor": {
          "ref": "7687d64d-47ad-4139-9841-362c1a2dbc1b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e6051a74-211c-4345-bda4-403a865c82a8"
        },
        "item": {
          "id": "5645e0e2-86bb-4e00-9db9-3776f3019dd0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5ec56161-955c-49a0-a764-8bc91c59cded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87635f6-d3f3-46d6-8ae7-a82e421c0efb",
        "cursor": {
          "ref": "5a37f0d5-e5ca-440a-97ff-8bb6065c0e92",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f954ea5c-3b1e-4e9b-b87a-58a5486ea5b3"
        },
        "item": {
          "id": "b87635f6-d3f3-46d6-8ae7-a82e421c0efb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "92b34ad6-2073-41b3-9de4-90b954ab6e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201d161b-4293-4b28-8df6-c0b0efddb15c",
        "cursor": {
          "ref": "5383e205-921e-481b-ad09-4c6869fc44a7",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "7c650c64-a3df-431d-aeee-c8d80335e2a0"
        },
        "item": {
          "id": "201d161b-4293-4b28-8df6-c0b0efddb15c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a15e60c-8332-435b-bc0e-275e21952898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4dc43c-2004-4f8c-b73d-859c8c5fc38e",
        "cursor": {
          "ref": "dd0e6663-5d70-4cd6-9f77-c104d83040cb",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b7c93a84-09b2-4373-b2e1-fc4291dcf478"
        },
        "item": {
          "id": "db4dc43c-2004-4f8c-b73d-859c8c5fc38e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "70ea5a31-0bd5-4a5e-9ac8-8cb534b83265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e483b66f-72b4-439d-a452-831dbdb30b4b",
        "cursor": {
          "ref": "bff5a3cc-abec-4bd6-aede-4a6ee635e47b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "515caba2-cb19-4f37-b635-1b87750923e6"
        },
        "item": {
          "id": "e483b66f-72b4-439d-a452-831dbdb30b4b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5a4d304e-6ce3-4c65-bfc0-c53d863c0f50",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "047c0e50-768a-492d-a57c-698a0eeafbd7",
        "cursor": {
          "ref": "e8d94c7c-e883-484d-926f-5549e2a4c0a4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6a1624d4-5d96-4ed5-adf7-936f7e0d8c48"
        },
        "item": {
          "id": "047c0e50-768a-492d-a57c-698a0eeafbd7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "32c9be3c-9659-4a0e-9fea-f0a23bf12e69",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcfd8b4-3619-4981-86e6-5a880b9c16bb",
        "cursor": {
          "ref": "957346d3-59b1-4579-84e0-e33b8d4d2d0d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e8924658-5c28-4d82-9cb8-b0891a5e28d2"
        },
        "item": {
          "id": "fdcfd8b4-3619-4981-86e6-5a880b9c16bb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7831a798-13f1-4f5e-9ea8-083f2f6374a6",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e798ce3-f972-4531-bd68-beb6edc7611d",
        "cursor": {
          "ref": "faafd56d-7a5b-4aed-afc8-b64103a83eef",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0f61171d-edbf-4a58-8987-4927afb5930b"
        },
        "item": {
          "id": "4e798ce3-f972-4531-bd68-beb6edc7611d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "77e64187-67cc-4b4f-bda0-1931ec1e3ee6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e798ce3-f972-4531-bd68-beb6edc7611d",
        "cursor": {
          "ref": "faafd56d-7a5b-4aed-afc8-b64103a83eef",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0f61171d-edbf-4a58-8987-4927afb5930b"
        },
        "item": {
          "id": "4e798ce3-f972-4531-bd68-beb6edc7611d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "77e64187-67cc-4b4f-bda0-1931ec1e3ee6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4073ac-1287-4452-99d4-eecf85630377",
        "cursor": {
          "ref": "6acc31f7-f6a9-47af-9182-03bc2f086cbc",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7a0f10ef-5f4e-46cb-bb7b-e5f344a310d9"
        },
        "item": {
          "id": "0a4073ac-1287-4452-99d4-eecf85630377",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "06493087-944d-43c5-be5e-c0dab2c031d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8ffbb2-5a86-4b5c-a5c1-b6321c4019eb",
        "cursor": {
          "ref": "7ce75ee0-b088-4f64-886e-993532fb8d29",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "94358a75-2f12-4489-9c32-e179c011a10b"
        },
        "item": {
          "id": "cc8ffbb2-5a86-4b5c-a5c1-b6321c4019eb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b6648f3a-d84a-4a7a-bb8f-1524b2996a26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}