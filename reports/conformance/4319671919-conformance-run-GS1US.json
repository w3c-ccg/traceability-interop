{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb8f0775-9925-4bbd-b337-dacd8931c856",
        "name": "Clear Cache",
        "item": [
          {
            "id": "53fea8d1-3e6f-4e24-b86b-1727b8d89013",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36ef1b36-fe55-45fc-bd4c-c962e8bbfa2a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "48552af9-5d6d-4583-8661-9a5869acc512"
                }
              }
            ]
          },
          {
            "id": "01ca3e24-fae8-47ca-beba-05d41c6662a2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "45e44248-52b3-4ffc-a093-ca61d3bdcf80",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8df060bd-de06-4855-9630-b55c52fbee81"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "359273cf-f545-409e-a472-0ac6c5f83352",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "270cbf8c-bbb8-4cba-9cb7-61d263fcf54f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bc7354b6-c594-4bb1-a58c-b4e2d9513323",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba6162d9-58d7-430c-8d08-854e60363229",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "935f39bc-38b6-4797-9ad4-8bed09b876e7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7d4197d9-a066-4697-94b5-011568637961",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7cdce1c-059f-49d3-ad70-092040ab94ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65dd61bd-36f1-4f7b-9283-a20ac205b86c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a445da1-8b36-4f3c-94d2-d766b359b345"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14c6999a-0672-4a38-98b9-c5e5741be181",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6f664312-5713-4947-8be0-73560e48a35f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc16c351-b7bb-411a-ac95-a3f23ae51691",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "acb92816-fe1d-4f1b-9a73-450228da8a4e"
            }
          }
        ]
      },
      {
        "id": "2b586bbf-e303-4195-8bbe-0dcb42f45669",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aafed3b0-5809-4d67-81aa-cbc62ce22a39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47ebfb40-5b5f-494e-9040-24f0f9437648",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9358075-08e9-4f4b-94b0-5affdda2e4e3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42d3ea9-a71a-42f0-8d3b-c53259c8e145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5f41fd1-1cd4-423e-b338-23520c24ec63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6817c99-b73e-4431-a40f-5d962245eb65",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7113a467-ab4b-402b-865e-2321f6df299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ae8d561-6051-4816-ad39-73029c796501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c7d085-5137-46de-87b4-741f59b7079e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa50b19c-8482-43e0-9927-c7489a6fe15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5b8ca06-34cf-470e-b4ea-eb9918c5e4f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71c9ed31-cad4-4116-bbfe-984a184fad29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fadcfb2-17e8-4e2c-b99f-7a20e62a71ed",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379060a8-a500-4140-ac10-5f8109345d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30d707c6-a373-4fcd-bf51-e79341f952c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025e772f-da71-4ec9-ba30-16ce9fed34ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65544475-7d53-4b74-adcb-58e0810cb814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06795bc-9fc6-4988-b07a-021317a63ad5",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8499c2-8b94-425c-ae38-d40d7be74e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c47ffaa0-ecde-4a74-81e8-a80e554687f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d0f9b0-2060-4392-8b7e-3fdc1120267e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9bb37a61-a694-4579-b014-440a94812706"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61bf4b42-ccf4-4922-b729-b4a98ef6de9b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1b3f142-9b0a-4117-944a-0d770528853f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ce9574b-b726-480b-a3a2-33264ffa7f2f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "685d47d4-058c-4b5e-91f7-c4c7d5fe3522"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1fb5461-2e0d-46ba-ae94-c49c86c9dbb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e22828ac-ef43-404a-9e86-abaa3982665f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9a1f5dd-13ac-4d4b-ba55-1e91543050a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ae29772-0395-4f2e-a020-c3e23d63bc71"
            }
          }
        ]
      },
      {
        "id": "f643cf23-b725-45bb-94e1-ee0f08f18533",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "93669fbb-032d-4995-8f8d-9e177202f4f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab2c9b0c-d1c9-4faa-92a3-0fbff32f6aff",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bab6529e-3a07-4035-abf6-1e801732f056",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d72281-b03c-4471-982c-8dc98a2bf2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d0bbf0-332d-4ab6-93c8-69e764d539a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e6408e-f5f8-4306-8ec0-0a3b7794e716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edae4fe7-04a1-44bd-978a-78ff52ee8d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2673b3fa-a4b8-460d-acc4-633fa9fec258",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af8659d-6fb7-4c68-b290-0cd81d8d80dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536c3751-6e2e-45e9-8574-bb640bb8b70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab5847d-ccf8-4b5c-8b55-003232e00c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac909eb0-272b-4c6e-bcfd-035c4f974fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81cd84e7-26ab-47e9-8377-e58e621ba6ae",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298659df-08b8-40d8-adb6-c13f69f4d56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8d6d71-7aed-4a4c-8616-10057c3a1a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d3d52c-e978-4a4f-834d-8bc53018b6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a337f6b2-72d0-4bd1-856a-125ee05efcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42f5c9b-da15-4f03-8152-411e05003f43",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe62350b-0de3-4a49-80c3-297a2a87d12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "120afd79-8106-45e6-ac65-b06d57fda961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b410c634-7e02-423c-af03-3b54baacb6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eb088f4-83c0-4338-a1d9-ae73c63243d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44362ae4-0b0a-495a-b381-3fc79838d033",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d076d9-e70f-492f-94ef-01cd75fcff12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1d78bf-1a3a-47b5-a42e-0a41bc5e54a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a624740-645c-4208-bdb9-2e81624402ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c3a76f5-8a43-4846-9a15-c1bfb8a7cf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09261c63-5313-4b94-8a7a-b2eb2f734019",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3a8efe-b71a-4dcf-9087-0824d55dfe60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be77313-d634-4e33-9cf2-2ac3d57fc0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114b23b9-9766-41d0-9712-fb1667b46d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d538b9cb-4fdb-4cec-893d-02f41ddee0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16f3356-3e9e-4ea5-bbdc-023e104c3c62",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4596c29-9b7f-4b79-a772-79a186a2be0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f607e8c2-efa3-4bb1-bcac-820a97138e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13f664b-3070-4301-9004-8307764b3642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ee235d8-9408-4c18-a58a-ccdba3b4b7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a203dcb-d9b0-4d4f-b639-569e12360759",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f2a0bd-5e47-44b7-bb3f-c349de9137c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4d92bb-7a64-439e-87d8-51fedadca9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d80613-c539-4034-8c8f-2983993bfb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e749440-0539-4577-a331-3c0b5d328063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b85fc12-a39e-49dc-825d-b3f6f44ae50c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e703f18a-a36e-4407-8d24-00f227f92d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b992217-a5bb-419e-b2aa-c624578d6d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ecd522-90fe-4bf8-9e49-c8d41a62e7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6ba9204-d1d8-4885-b2e7-df7db2db00b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82451fbc-0bcd-4415-9173-3255b9d4ff23",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9aa2d14-7742-4e9d-bfc8-32e38d582709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb905f97-7298-42aa-ac9a-07e6fb65528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ca50ca-105b-468f-b4e4-c6de7e8ee143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83746ebd-8eda-4341-9a2a-a00196de2945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c73322d-54f1-49e1-b21e-57e60e0c1d16",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f15051-8421-4a24-afff-7edf97a0eadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d712c5-f87c-419e-808e-5cc563f5a206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81f61e2-baf4-45ba-b071-188f4c1e14a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e660a286-6df7-4ab0-a0ce-cda2b035ea5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254e3e73-78c7-4a9f-9143-b144d956baa1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea98cfb-3e66-4397-8a5f-774c243c7ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8efc98-3935-4756-9142-0e5819c8ffe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919eb55b-c582-4ed3-b50e-1a7192bd7965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5400d20-25f4-467c-8014-937507c7a198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d0eac2-d48c-4c6d-9329-66c19d8d6e93",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b614c7ed-38a1-4725-bd2a-6f50bc487eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2661dc-4b10-4a00-a535-aa84253cfe23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e3c2a9-9699-4122-9643-3f3048c8581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72a9881b-b66c-4781-ab92-fa50804ae5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f50125-5701-47b4-8c1b-f1eb164a4b7c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57f138b-b1a5-4e50-ac3d-372c0c17a505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a9a193-a66a-40ca-b460-c11c015f7ab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06613833-7f48-4908-966a-624213734fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a814a3d6-9516-4235-8c1b-eefcdf421ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a41161-ceb7-4cf0-a3b3-d094b782dc03",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b89064-fc0b-4624-baaa-9e32e58a2cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e29c81-3020-45f6-bbe5-f88544e275b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba21aabd-4dba-45ef-a5d6-6f99adfad35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20b6350e-a5f0-4d00-ad59-be664ee4e94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc2abfd-3cfc-4152-b186-d145e2c2ea5d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fdf72e-e171-4af1-933b-d597c560d613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fc04fb-1024-4250-a015-067b95c6e624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd434d4b-6e03-43a0-a2e5-9df2528ad236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2062a8f-ae26-49aa-941f-20139023e40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa35df23-0a55-4121-8c15-ee799f029e94",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04e367d-9d3d-47bb-a368-60a144386e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0acd50-d4ef-4c9e-aa67-bb4a872510ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798ecbc6-5f49-41c0-bbf4-0e69c26f5f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b073a79c-fda8-421f-9dfe-0e314b32f9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a355c7b8-919a-4465-bc5f-261148314f68",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677af1f-bb80-433b-8e86-269f04649a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafbe3fe-64d9-49b8-bdd6-7ce7fd4fc1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a122de05-e5bb-4a28-8991-cc518952923a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a59eaf22-67b1-4b23-bd24-04b872ddcadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66002c6-c88a-4c78-974f-0032bc4e562b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f050f32-ad03-4f3c-ad23-7884a799b923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a13310-a673-46a2-937c-dba511283904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb023b56-bd30-412c-a2ce-dc3eec3143d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3c240f-1861-4a83-ab06-04d797766a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068a89d8-f839-4f83-9526-824cf183537b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c835718e-017d-4741-852b-f2baad627f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c09513f-aa0e-4831-af1f-82ec23a0727a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccb68e7-d5fd-4457-8cc1-f6d7f20ac534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13e32da4-2a55-4af9-a83d-464f89fb67f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5978b1da-9eea-4e23-ac2d-80dd9fa02f22",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a42f2b3-d64a-4a61-96da-610d1fb002f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c4e922-2143-4da6-825c-0ebac9b3ca5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d391d7f-230d-4c09-99a1-1b950cdbf01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea783a4-2662-411b-ad19-9b1fb55790f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf5d684-a56f-4650-ad92-07caea18a2e7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d6b25f-9c4e-4ec1-8f37-855c11c88eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a06f13-d404-4526-a41e-42d16cbb047e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7935dc-39ea-4af4-b3ff-6cefe649893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d97c400c-03ed-44b3-882b-7fe2c26b0226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49ea1a0-a00f-4f73-8627-e55ca1112657",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc08f6d-ce43-40df-b945-15b58fceae47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3495a6c9-3b4e-45e0-8f70-b7faea30c3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261e0faa-ffaf-489b-bfd0-460c333d7fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb6faf1-722f-4774-a816-a30005790fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc60f7d-fc61-4196-8d5b-092ffcbeb192",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffe27bf-68f7-411c-9a34-933db6f6ec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee98beb-2106-4aa2-886a-03b35c45bc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c162795a-a239-44ee-9304-41d93bff6e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d66e0f8f-4863-4d5e-805e-14d36e536892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b93b37-c776-481b-ab00-08ce391ae04a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4608d08a-7e4c-412d-9e8b-adafdd37843c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b6bd05c-7fd2-4878-8d43-1c7066a8f1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98a29e2-2d1c-4d99-a4f3-c29564f0950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd42dfc5-245c-41aa-a031-2fb667536ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a934e81-32ff-421a-9343-ba41fea9ad12",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8859156-491e-4f20-bff8-9466c5671d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de3bf0c-51d4-48b0-a6d6-624b1e024bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d49f8b-da97-42ac-beb0-7eb932062a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f70aef7d-04b5-4794-a240-f811b8240f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab054a4-fe2d-4106-be3d-17a2f7dab797",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dd6eaf-10e7-416e-aab7-ed0ed40f9cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906a9c10-0e51-4c4a-8f51-be3f6bfcb919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c809b0c-debc-4067-b1bc-3aee9abcf475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c816014-5e56-4419-9873-6384cacb3b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f40c92-83d1-4767-82ec-cd6d91c80476",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a775d00c-6ae9-4280-afa1-d16cf2aa98b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300afa3-f774-4f84-99c5-88bc36de1185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87537c99-044d-41e8-a923-2b286449fc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "37eb1b31-b0bb-4e08-8b86-cde75276ee32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714da05a-ceea-4573-a707-78c49d34e67b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35814ee-c389-4466-8c95-e8598b6ff1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d612b88-a188-4d1d-8e47-8781474ff85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf12b28-1ddb-4feb-84ca-8bdb5a9fe2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f933881-6573-41cb-af92-d8787875e02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1634c5-e3dd-46be-97db-10c67e74ae54",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9280aa81-a767-42c3-899c-48ad69562811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592f4481-4a56-45ac-b409-ea2abfb9d748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4940d133-474e-44db-addf-ca6fa6e256b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "46528cf9-f4ea-4c32-84d1-f69f2b98f5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352e844f-464b-4bf6-b0e6-8ab746662ba3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644a80a0-383f-4971-9918-e1a3bf9bf3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a94cde4-9878-417c-ad42-0f3706e5eac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0df5d3f-764f-4870-8f22-dd40381bcfd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18f34a68-0c7c-4d71-8033-bf449b939d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b28c30-c701-4c18-8b0f-fc65ff0ae276",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9b6c70-87de-444e-950d-39d021db39e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d903597-68ec-4e90-b0a8-17f8981ef389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14fd58e3-97f3-453d-8c7c-5975b29a9702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f4ac9f-9b8b-41a1-8ea6-e897c0022057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b205c759-678b-4a6e-b538-1054f96b6a18",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8be91ec-42d7-43b0-a14e-0bafa107db86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41be2743-7e34-42ff-ae93-61cb1dd7e98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826e0034-49b5-4dc3-a802-d8e2ab45fb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2789d83-12f0-4c27-84bc-5e920d154379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490f188c-631c-404c-8194-53bb700cb975",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527cdcbc-db66-44c3-b5d3-93b787d499de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16b16ac-8111-42fc-83fa-afd453971f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c474cbe4-4bc5-426f-a6ff-4150e40da9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a744d5-9037-4bb5-86d0-63af808c4514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a633a77-adf0-428c-9460-1041937c39b1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9610481e-116d-42dc-bd60-cc23e30a7303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dc95f9-a25e-4996-8486-53ab21ede111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233f91e1-d40d-419d-805d-01083ee1a686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a74503bb-1909-444f-9cc2-e53eab220173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24210c33-4657-4655-98bb-c4ab4fb85d9a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bfde90-01c8-401f-aadc-d410b98ef6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4da154a-6a87-4bbd-8107-6851abb6d759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0c8e94-2373-4e7f-97db-33a237f15f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7be22b04-21f1-4cdd-9e7e-a5e1a392db0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b8838e-c24b-4c89-8b59-8ea07284694b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8d8519-b958-4c4a-9b19-3ceaaac4266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7703fa7-69d6-4de4-8fed-ad6de9e1637d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1805df2a-f401-401c-acf4-618dc3708d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3f91bb-98c1-49ac-ba54-37095d057868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f48d5b5-45ae-4666-b9c4-d651deb4d918",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b74f85d-19a1-4489-a440-233d5d7e4e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9d5b08-1b24-4be1-8ad9-18598683fd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f49730f-ef95-40c0-bcdf-fae4c0dc9091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a13f32b8-f86a-4b37-8c42-d3b8f4f7026f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b41a1d1-e6de-4bc2-8407-19d448335851",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ca2a38-6c68-47a0-bb5d-c4b377311fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681a8649-ac21-4bbf-a151-aa44cc5e8f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a5cc6b-a33a-4b93-9562-f0f747202baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5890e2a8-b3c5-4721-a9f4-a5740e87ee44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3ada46-4a08-4775-8f04-a16f7552cede",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bae8b8c-12fd-460b-a088-8a9bce8a0b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7487bf74-4305-4e09-aef9-ee755f79ccb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6212433-487a-4ee0-ad62-8257c976bd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b4b9282-22d0-44d3-ac0a-797ef0c85e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662e7003-c2d8-4182-af1c-042b4c341797",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5be2d4b-ff6a-4d2f-ad10-ad4be8dc236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b16057-0300-4868-acc5-d51909d8f3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932e96e6-6369-480a-918a-e0ae120fcd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf44ab0-c73a-400a-bc3c-aca86a255b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd53cef-0456-4943-96d2-a1998a5e7f17",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12f5447-1d81-406f-a7f2-25aefe59c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecce90ca-0a28-4d26-aaac-e09a94649cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f1a9d8-ae3c-4cc6-8108-abf0a5a6e3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "422f3134-b490-4923-ab11-abe3cfa4a220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e46f5-3fc9-40c2-bed9-a6122ea1a885",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578df7e1-8c8c-47a9-94e7-4c9e4d45b17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364d7d82-e4f3-4579-b6cf-de84d03f813f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b192fe0b-9b09-44d5-a997-1da90bee8ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fef189c7-d2ce-417d-a8df-a4f1bd0e338b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936316ea-9c19-432d-9f20-26071f6059af",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e76a606-14bf-46ec-a7b6-47813a848701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08bbf54a-bbe1-4f24-bc4a-3dded564d2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73c4d83-a05b-4c37-b1a4-8c8bda7339ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eee91f8-7a36-4a62-9720-d716953967cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50658a33-f6e3-417a-9bf0-958b3e785424",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518a1154-7ae0-4746-b917-74ab98f438b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9372f93a-f649-4ef3-8323-b271880bc3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4fc19e-afe0-4870-9763-197688a89be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99912c3c-09f6-4286-a160-e5b075ae53fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e3a8b1-fad2-4a2d-9b94-66e7b2936970",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a587e788-9142-4840-95b5-bb906ce639a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afc7f7f-8ef1-4620-b3c4-947c3c8dcb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570e52da-3dc7-430f-be25-c444a51f7f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "039d6700-f8b2-4406-9f83-ad117f3e8c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4baf93-b415-464a-80eb-280a8b992d76",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173ee38a-f642-4050-b378-735cae309770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b6bfacf-1a99-41b6-bf1f-020f98596a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0ff351-1859-4271-9e4a-485fbdf46645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "054acdb8-e707-4e2b-bf7c-d8e3f450be1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6310f4ec-b07d-4638-a6b0-30216b669b9f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3739dc-a4e0-4f2b-b2e9-5e03bfc946bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c31d69d-d9c8-4600-860c-ad6a7c7cb4a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62751a2d-5f01-4634-8a99-34f1fb31ab0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d70f08-ebbd-4163-a2a2-0a4863aa6094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e440204-9c75-4eec-81ad-bdfe4c843ed3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9c4cfd-a481-4792-8e75-9e0cef5689cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d2fa7a-bc27-4fbc-ae97-30133929024c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29faba3-c1d5-43da-8726-ad87adcee1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "863e246c-d6cf-4a0b-a834-27dd7902cf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac01865-43d7-4fcb-9bcf-162961bdb084",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6cf2a6-c70d-4e02-8c17-5d3d386a8df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9531f9-4e2f-43ed-89a4-70416e9f3765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc54ffd-1968-4967-8b64-015239b26bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "347da3e6-2d52-4330-a735-ce7245ebb927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfb1a5b-04b7-4dad-a7fb-6313d415be81",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86acd5ab-5ac1-4c13-b7e8-71856f971e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6297808-0e3c-4a85-985c-5893beb05ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c1100-8194-43c6-b384-d9f5f16119aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "83fe4f30-f60f-4b00-8f9f-c1536fec4abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9575821-258f-42ba-b01b-db197587f808",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3c8e14-ee02-42de-ace1-15b775668b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073b3684-45ec-4c3a-9826-e8803648faf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3df1d5-76f9-49dd-a5dc-c55b8d28d62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de0ca76a-b148-4349-bcef-752d85461278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a80be-4082-4f14-9a1e-08f4e749e681",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e8813d-29b1-44cb-b765-005ac7cbe371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a955fb-c5fd-4e70-ae7c-610b0dbb9e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a120a3f1-f7c3-46fc-aaf8-159cfdb3ce57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40c85f9b-0ed8-40bb-b45b-7f7ac8caadc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcda6550-56cf-464a-a0af-602f6362d22d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7a5126-ed3b-4ea3-82bc-d16c5ba11c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be72412a-f12a-4e71-926f-d880718e9775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a2abaa-4088-40d9-8336-da45d7d9785f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37614024-2dd0-4c03-a78a-7c259a3680dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1b86a7-c8d2-436e-ba71-8b13ecac5fd9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9664b472-b8a5-492b-8d0e-35378fdd69aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba9af8d-f8db-4c28-ba19-9a39b8ce2e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6405edd-5775-4779-8873-399e6d4d693b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e123d73-cfd8-48d2-a551-da7ee15ca417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57310a07-a493-47ad-a597-c774f2861c49",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131b7c26-a426-4fc4-8a6e-06de4e203e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b39b3a-ca82-4879-bcdf-e659363bdd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f971de8-1b4c-458a-aa68-feb9c7133f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bf682c2a-8caf-4818-8266-e24957bd63c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e479d148-424b-4516-9c26-36601c7f9dee",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fe28bc-5a67-45f6-a451-53404168229a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d8b3d0-641b-46be-946f-42912e6317ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f299ab-033f-4b83-9bee-f221ee1749a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0931de-8615-4417-bce5-1a5e3c35f990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba98b2d-9f28-4bf8-97fe-4fecaee71235",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cd2009-48d9-4e9d-8ff0-2c41b41b0a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cb1c436-d147-4d83-84e0-4cc8c25ae168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9a42b4-3a66-454b-a37b-9eb816aeb560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "26ebfeb8-b9cf-4e8f-9383-69b8fdb6c865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9b36ce-090d-488b-adb1-1021a62f0bce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f62b1df-3698-449a-abeb-37f2f021fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1079767a-560b-46c5-808c-e73ecd4d3b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383464b8-638c-4886-b4f9-1266c5d4477d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "557fb399-21d8-4b1d-8cef-e449e85b3f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c25b6e-5116-4793-83ec-94710170976c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab04e22-eaa4-4407-a1ea-ccb903fc1572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c8d819-ea9c-4a11-a9d3-3ab888b81bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80240176-d80b-4727-8454-fd62c2a1090d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "03b2de2a-72e0-43cb-b159-d41d69e28c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a829b55d-845b-47c4-9d00-019027e8f8bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e768b088-25ce-4e4e-a30f-06c49f4cfbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b208ac1a-6c96-403d-8f36-5e168cd8753f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8c6c27-9cea-4522-b5a0-ef71b995d580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "760287b3-3711-47ea-8753-5857897c9ae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ce8c3-fbf9-4f08-8fc5-eaf3bb78851d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa5494-0129-43d6-ad8a-413ef1c06e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1378823f-c8f1-4939-a49f-95a246c70e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3c7829-1e30-4067-a52c-66c3ef6cc9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3c6f29-f94e-4bfe-9c3a-167d7d04edd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33c8069-c0a7-497c-919c-0c50a216c172",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59588bef-6b85-4ef2-85d8-2f17014605e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65b20c7-8444-4367-baf2-c47c8c142a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637a517f-adca-4ff4-8aca-19de9b1bde37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "891a6421-8734-46a9-a44d-b95b22da8a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83428a48-ac8c-40c0-addb-44254c343b13",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9386a300-0932-4fd4-b508-acae3227c2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66137fc-3822-4959-ab94-70411f37dae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df7a0a4-0054-406f-b5de-8d71671095f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5276076-c684-47f4-bd2f-c4a644afcceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1816757c-a100-41fa-9c88-f0f5e3b9e5ac",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b39c9-35d4-486c-b00d-526cb3ba3f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453112a0-f92a-43ef-8d31-d994fd95ea80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a29f997-f26f-4072-8e18-c30ab9371347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d07a8ab8-0711-48a0-80eb-6c29415a5e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6652f769-ef6a-4c64-8fd4-709ee1452d4b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a0a894-5632-4b7a-8b97-928bc30379fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb30c84-c0db-488c-bc1b-e0f415b59db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04341c12-0f40-4df6-9185-8c90d394cf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d96d5b98-d2d3-45aa-aba8-4601c6986512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23f72c2-0a57-4b45-b522-e2fc2c7341cc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903d570a-35c5-4513-bd4e-ea5f88ac5fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fdf855-3391-428c-bf26-c9ea5ee2ef81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e6ad63-e899-4aab-8e2f-82af865d439b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba091c1-91a1-4f51-a91a-d96b08750f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6ae41b-7cf3-4c82-883c-201fcbe3a1db",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ec9c02-954b-4cd8-a4fb-4fb837ef1eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e0938a-37a1-423b-9c66-53f1ca8368a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7284047-392d-4464-a8f9-b9615c916527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f50b82b-8761-4acb-a3f3-92edeb5ee78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b3fc49-615e-47a1-9fc0-4c29cc79fe35",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaebc68-a393-4d82-b62d-4458d2297f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe20e12-0db3-4623-8d04-5c56ddb3d6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b768b6-105e-4840-8867-e621f5f9301e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5607c8ba-f20a-4228-8dec-67de330bae83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd8eb86-27fa-42bc-944a-88479f0ba802",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5b82c7-eaf3-4419-88f5-52b3c46db5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd577309-f41d-417b-832d-dab392a7b8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a1493b-1446-4d44-919e-dc0dc602a47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9095698b-a6ea-4dee-9491-08aed1c07317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b75b2c-dfbc-4732-af46-05648b16d3a7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82822bf-9cc0-4ee8-8f38-9dc3079702af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f968586d-8003-4509-ba69-4b011b73a991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f618ea57-ed65-4f15-9b79-8618118adc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f038892e-996b-4919-8993-e014254e26fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398c36ac-2a4f-4e49-9cc1-cba2b65252de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4bea78-1913-42e5-9dd9-440e72c06942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645bedd3-5dc4-4a05-8004-66baa5d47cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17d1964-7458-4d1a-8621-99717d1a243d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d49d518f-8a63-4a90-b446-51c0260bf3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d1d864-70bf-4963-a7c2-31416b462131",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986dafbd-c25d-4a8f-9e4a-27fb55483dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a1798a-861b-4c9c-878b-46d6adb29d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f56e20a-3963-4555-b650-067cfa1c55dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "793462bd-889a-4c34-855c-6271977803e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54770dd2-fa29-42dd-891c-c1167fd5f20f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37cbef6-adbf-4982-9c22-b521dd4e8c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6cd438-c2f8-4dab-a37f-02f7223e81c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405d3e0f-1ab1-4f5c-b9ce-7574f613280e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55693cdc-2407-431b-9536-0b4b7fd80535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e09f90-75ea-45c2-9a77-87e7bf929f7a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bddae2-6e61-4e8b-b3c0-78979d225ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c80a79-657b-4b6d-8846-d569a6c72d8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d32edb-8acc-411a-ad97-dbbd7ab4773e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3630a08c-0376-430e-8547-dbedcc92a465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c8bf2b-f970-4133-b699-77d7977ad726",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60db3e3-1469-4d3c-bda9-b71127fe45ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1c08ae-c399-42a1-a4cd-491eab81aa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee95fc8-20cd-4a26-9a92-facc7e48bf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b014ee66-2731-4c06-8330-183a0870193d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792b455d-fa1e-4ab0-9726-13f8e55ac5ed",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b01534f-0c3d-4e2d-b4d4-caf134f143eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb7a1d2-c453-41c2-b387-d3676390d940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a56c30-8afe-48f5-8935-a82516e9c7c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce9a4af-3f9a-4844-b576-af0437f780e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47acc1ef-9c5c-4aa9-a6ac-a7319c4562d8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e42c16b-72c3-4c1a-8328-0fddc1baed0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0ca8fc-41b9-42a9-b6ff-5594e6afbff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d6f1c1-acf5-4f4a-8529-ad867305174f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38658e73-68b4-478c-8189-7c0052733fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3911d107-0046-4824-9487-56e0b956ddfe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709add4c-12db-49bf-b550-3e939d34ff47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81674451-e340-4145-bb32-2d4505d54ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f5cd2e-9427-4f72-bbb7-07e5018636d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecaffef4-51e6-4485-9656-22ad291fbdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab660cc-9024-4429-b1c6-62bc30a2d43b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356298e1-f0d9-4311-adee-ef422ee19a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdeac83d-e01c-45cc-b09b-a8bc277ed623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc4144d-ae2c-41ee-8667-979c6945dad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a17a475f-1015-4340-a82f-52b77202d0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20832370-f12c-4e91-99cd-bf925cca7794",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665480b0-9d65-4f72-9079-0a7d9fcd70e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b3968e-489f-42f0-be7b-21e100cfed2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f449d4a-4314-4c40-8b40-7d36e9a20104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ce909b-2d1e-4fa4-85a4-9fe156816bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341ae736-1517-4c0c-8eed-0f1337d668ad",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41491185-13b5-4bbd-89d5-06f6f8d7376e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c40a47-9c82-426b-802a-99ead7b148a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07011fcc-b56e-40b5-8918-43fac0c22fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd9b497-d7ec-41c9-a1af-705ee020f425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b152a1bf-66cf-458f-8fad-8a30028d5527",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64babb1-7a81-4af8-9847-fc8e2021bcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3689b6d-d6de-486f-9879-563e099eccd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7614650f-4676-4c12-bc82-deaed8b6251e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "360d402c-e045-4b89-b567-2eb4066a616a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ce44c8-6b59-4180-9d2f-ce8df3650caf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4449ce83-cf0d-4813-b234-7b405702dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c9a642-0573-48f7-b932-65ce88d670f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c476e8c-d872-434d-a3cb-3422e7edad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "914edb5c-d180-44a2-98e9-72be4c949bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6c4f91-128e-4dd6-a302-ae8bf2409353",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0f8138-ce85-4a65-9273-343fc2ae9a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0a72be-4b92-404f-9315-5429d617e498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11290dac-7226-4722-be59-9913af6557b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2772a5-5d9b-4c38-99b5-22e32441f9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe60cce4-2638-4fa0-aabc-5202b4d46b9c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753eb2cf-9f4b-41d1-b4f1-cf5826b34237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf3de5e-a09d-4288-a34f-240664ce6438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c0aa33-8b9f-4a04-8e33-2727aa1dd555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b422894d-685c-4cc8-be4d-12315070d83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c31db2-5e83-465b-8d1e-f84a3b489930",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fe6cf4-1c13-4e67-bea3-99c174774132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb39611-a951-4e47-ad44-189c85c192ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98d479d-14f3-4a9e-9765-abadea814498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e86e044-83dd-4fd2-bb3e-a59ef4c50f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899076c6-34a4-4a75-b631-7b213f83bb18",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36195ab5-d415-434e-bd66-d459f04fe29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45590f4e-cdd8-4a07-b8c0-99b6e1371baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f365d1-8199-47df-b2b5-1fca832ac9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cafe8bc5-8b24-4f27-8a29-6fe5762816e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab365de-84e2-4e8f-b215-9267b53ff2dd",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b645161-f8df-4639-baef-d4e77ebbd08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24619feb-d8c2-4721-bbd1-46f15ea27865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef1e2a4-ca84-4abb-a8f4-46ee7ab7b33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e20e89-8ad8-4637-b9e5-b21b39f9c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa8b309-2878-4e09-8385-cf792d3440c4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545d2468-bb08-4631-89ca-789099fef110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ab7653-87de-426b-a52e-66f3b79dd464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c738fbd2-14bb-46e1-be9d-21f641754ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "18df06bd-3f64-478f-bed3-cd078232975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1e78c3-bd2a-4d8c-b78a-a12b7eff12f4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc55127-7e38-4be9-bdb8-5ebd1f05a306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8599c6b4-4f81-43ed-bf5f-48868bb7f774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28250ab0-eafb-42ba-9578-84d10adf5471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8749371-6ca8-40be-a999-cb2ea823c1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ab4756-a380-42ef-a858-51175f9dea70",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a96508e-dc3a-4870-924d-43ee556c7590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28b3a66d-c948-4841-b881-8895554e05a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff92e03-8991-4b41-98f2-e9810bdf2aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ff56ab-d5d1-4990-92db-d69149acaa21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "09a34116-bdd0-4b6d-9d87-759c4c2330c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d828fe9e-e979-40d3-89cf-da765e6650da",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef315f3-d254-40cb-8443-7d007192eda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e101303-72c8-46ef-9d58-63f629242118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199b8170-dd53-4fbb-8a03-ea366e7015cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aec7bf84-9545-49be-b0f6-96d3b6af3f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc23276-fad9-4165-bd98-4774a592016f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ab96c0-3831-44a0-88b0-a98d52509676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fc877f5-085d-4f20-8c83-c491e69e5044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14794d1d-f23e-48c2-8e7b-d92e1b6729fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be7c67cb-af85-4460-8b7a-cb1b02151bdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50e2c404-0ebd-4686-aee8-a05022b05000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b74ec1e2-7914-4d66-b5fe-834c0fdda999"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b21337c0-38b1-4e7e-ae5a-12a6cc14c695",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a596c1b-5282-4e74-b9cb-08a558881406"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3914ecc2-6df9-478c-a01f-b3aebee0d53b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72d6ba94-5908-4f55-9a3f-9ddb504f4b47"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64f3fd66-dc32-40a1-b928-3e9558fad466",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d99f437-e0f1-4703-a50f-26682fecd513"
                }
              }
            ]
          },
          {
            "id": "47ce9137-f25c-4ef0-bc58-6e0c3a0aed8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "94a206a5-ecf3-43e3-9e8a-d88e6020e1de",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89fb73f9-8f72-49ab-ba26-912fef564d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24bcfcbe-63fc-4dde-a2ee-4b71ec6e735f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed0d1d65-5f81-4ef4-bf7f-04ac5d2563e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ef3574d-2e68-4fd0-9072-4cfa288ff168"
                    }
                  }
                ]
              },
              {
                "id": "bf19fe91-fca8-4428-9364-1bb0ceb90f4c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3f5aa7d-dd52-44ec-bba3-35601ca44702",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a74faec6-0d2c-4308-a451-aa0d8179d211"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc6a5f0-d2d3-4c14-8c5d-313b8464560e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc38ff2f-03b1-4feb-bb1a-89f590914c56"
                    }
                  }
                ]
              },
              {
                "id": "9c6f9abe-a7cc-4c4b-a300-88bf6fc8666d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a3b8a23-8a9e-4aa1-a471-ebb80c3f69ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d0cdbda-f28b-4469-a8e5-cce78a78a3a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33929c8f-22d5-4981-a1eb-136f449777ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7cc93531-274f-452b-b721-a7fc981a6265"
                    }
                  }
                ]
              },
              {
                "id": "243a551f-e0d7-46ca-a2ec-9dd5d321d841",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d01c62a-2d1c-4766-8a7b-2a257e6a7ad2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5d61d5f-b58b-498c-a058-944496a389e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ea2a61a-196d-434c-ad7d-fbad4917b482",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a481a9ec-ff63-47af-80d9-b4dceddf805a"
                    }
                  }
                ]
              },
              {
                "id": "780d6056-609f-4794-a8e0-57e6c7071f14",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dce9d146-6f5f-4f11-afd7-5d02d6d8df07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "847f2456-84ee-4336-abd7-f9c215370138"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3078be6-8814-41f0-ab3b-e067881838c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0dc38403-fc36-4129-886e-67b53a590b26"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "416d9584-0b84-447d-a1c7-5333a44c149d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7937836b-f639-4c91-9cf6-f5816887e3e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83c2fd53-fe83-4beb-baf7-2e712c542d9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ca70578-a5cb-4717-ace9-acf70e0663d0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d21290a8-a45d-4f4e-8152-01859834fe67",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8d3dee4c-545e-4b92-8151-900c42b03004"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2fde697-06bb-499c-ad2b-88ab8eec7178",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d5f6981-a0a7-4ea5-8249-00b417b75fe4"
            }
          }
        ]
      },
      {
        "id": "1f5e1945-89d4-4cb2-b5af-69a1377a3e89",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4d63db15-2998-41ea-9ac1-66dc2c223cc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1325929e-17db-4896-8539-1691db16befe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "693ce5c2-a6cb-40b3-b147-d7cc3ef6d0e6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f24fcb3-63a7-4996-9abf-3a501c54b1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9afe70f-284b-4fb7-9a57-963a1a791804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a6eb20-03e8-4927-8daf-9c2f257bde57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "60af17e9-291a-4cf3-b393-66ce0136a642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a057bd-5322-429c-8b71-e0232e7c0cac",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3872729-706f-4d51-8cf1-6f9e92ad74c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966281ef-0f16-4153-84df-332fd697af50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f564c5e2-bb83-4f33-8af1-2b2999f70539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "defc977d-05ce-450a-9ad4-f13a2490ae40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b989aa-3f9c-4b38-a41b-d95b11b198df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebddf1b0-7479-4cf6-889e-4e30309f1642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa4eced-f053-4a60-8bcb-4f067d8fe1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1ddf6-a19c-4785-b811-586e1dc7f52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6ceadd-83f2-4d8b-94be-70e7f42c177d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6f3435-835c-425c-9cc4-02ae58b4b96c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea9c0f8-cfc0-4f93-a672-5517270f5795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74162176-2098-49f4-bb63-2e26cd2ee47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36813d3d-66ad-47ac-a22e-99a3dc7aa5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b04caa68-e582-40bc-889a-09be5abba07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f75fcf-0ac9-4092-94e5-46c6cc449bfe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef67b1-88b0-4abd-938e-06e485847d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8517051-779a-423b-93c2-f67da0bd8467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012831e2-750b-4eab-a469-c9107172d917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c71b6d-5900-44e0-abdd-32e44ea2d2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53ebbcf-4ffa-4b7c-8ce4-b69d08721bde",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092e7b82-cff6-43a7-b471-d9218d87b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ff362b-ee6a-43ff-b852-65bd9d5eb4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc091aa2-e912-4eb2-a30c-c5ec55e1e13f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73b118e4-c24b-4b41-b976-b5337f9ae5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3053d1-a7bc-466e-ac61-9e67d8ef5c85",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be01e3d3-7c8e-4466-88b5-7dadfe656e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f5e60d-e743-4877-a650-fb83f5431ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647bea73-cc12-4296-b3cf-5ee18273885b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "03cc70bb-1685-41a9-8eef-cd443ca97727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edabc709-4114-44a0-8fed-8681eef75ecf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9184e3b7-57d4-4239-85bd-cdf12f0e1465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a189eb-ae12-4cc2-819c-c6daeb6cdc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8530e151-ec42-41b3-a3cb-cb252339e198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cec828f-9778-42b2-8555-227e0df804a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f13e45-bd11-4a12-adca-df81aca44553",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dea107-72c6-4c36-8928-34dcb947f7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4491b79-7e6d-4ad6-874d-bbd9fb574a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d43157-eb26-4b33-a304-3d43196f26db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f5a46c-b804-4fce-af0a-aa1b726bb021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82297e63-9e1d-4feb-8fa0-6d956007f2d5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dae3be-c12c-412e-95a2-7108e9b707a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d4e36a-6bdd-4d47-8799-672dbc84ec6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595d8895-f2cf-450a-a857-20e6f6751c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "439f79b8-36c5-44a7-84cc-304c1cd167c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f9ed97-e062-4286-a670-5ebb3655c2b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4fcf7c-1b7c-4390-826a-22976ab1f2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06aa6e3f-105e-4580-901a-90693cb494d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda1ac3c-bae2-4708-8d5b-f80836de2bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f6279ec0-38c8-4ac0-93c4-26da5814b4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa0fe0b-d6bf-4c84-bef3-e0276c49fd94",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13b801c-4a91-437d-b263-d412a5a0fa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33472616-5696-4833-baa1-2a9b693d27c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa89c95-d1e8-4d53-b551-527afedadc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1567b3-eb54-487a-a72d-a5ec7e4cac5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810ca672-37f9-4ef5-995e-075d3443aa87",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bdaf94-8c8b-4c0c-b2f0-e68b4b31ddb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5835d2-f653-4687-a8d8-c424bc3db1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151b56a3-c92d-48e3-bd53-cbd5e2b58d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ca7b76-63e5-4fe4-9d8d-99808c6b88ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d7e528-7ff6-4ac0-a30e-bbeaba4bc19c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c8cbb5-8b6b-4ad1-9e2b-bce2fe1db7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73293bb3-42e0-4dfd-83f9-d7af8340d419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce34729-5704-46e5-898b-191616037efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f12443b7-7516-44fe-8e7c-7caff623e106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e0ee7a-b32a-4f6b-94c9-8d4aa1e7765a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb23178c-a268-48f7-abdb-86fe8521b63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bacb25fd-4758-4397-a0f5-e2155a2b5bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d51832-5732-4984-8cd6-fa5a0d3b8ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c64169-d7e4-49b2-a06e-cbb44118c409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af5c478-d477-4ea3-8c3e-7b7abd5f7428",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a581c8e-c025-426c-8b40-cb145c197cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4e7a55-f4bb-4a62-970d-fc1037f96ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f088d6d-bcfb-4be3-ac3e-e817b7a4f185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2683f603-d043-43c1-af70-dcd54fadaf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b651834-a526-4a1b-91cd-5a496562bda3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d5e00-1768-4bdd-97e9-00e8f7a14b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe27d99-a9c6-4b76-a555-45e3d4a941eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e707f9-a5f7-4509-90d4-1c729664add4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e73009e3-8a11-452f-ac1e-5a7ff7016dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211d8865-f18f-4a90-8b25-8e628e79455b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca153da1-ef59-4810-8e8f-e4a67a642020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e372da-eab4-4a2b-be2f-a423bebd328a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab07f27d-473d-424d-a9b4-3e0da2cf5286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5f3e5a-da23-4789-8a69-23f93ad667a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1554a71-bb7c-40b0-a654-38e3b42f193b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703e3dca-325a-4ea3-88ea-0f78587ef3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e359b6-c06f-419f-a835-f7692040d686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b93336b-410b-436c-8f58-22221da25a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbfca19-8dd2-4264-895a-0ea49d4d5100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bf2ea8-16a3-4bd3-ad1e-1b04f0e352c6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98ea53b-977b-4f49-a9e4-a38b6fa52483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b47a672-cbe7-437f-82e1-796c4796d0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b62380-cae3-4dbb-b5f3-34c00d5820cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51fa34bb-a4ae-44d6-9d1f-1f675abee8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52102a01-c357-464b-85ac-8fded9e46e2a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa2b8de-7cea-4829-a435-574b7abd54d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a31f5c-dac0-4938-a875-6fb6e2dc6c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfa842d-aa82-4dea-91ac-0f431cca84c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2db8e9-31a6-4380-9ef8-36cd226fe6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86eaee5d-c16c-456e-9f71-4893ffc51f3a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a2b12b-93bc-4748-959b-e0aa50225db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da661ed-788b-457e-8d41-1b379ced6252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c0cf69-acdd-49b0-9282-a3181560028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05860269-cbee-4096-a430-911d52baca92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dc76d5-13ca-41d3-9ce4-e38431da798c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94827872-fb7b-40b1-91c4-abbbc817df30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189c54a9-8686-4a67-afa2-a4f447460853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4161b35b-b55c-471d-aae8-c9a5dd13011d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "492d0024-400d-4879-8563-56329dd3834d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d633d16-20a5-4b9a-8c8b-cb123d88a642",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81ca028-2e9c-46ca-8ba1-1adf7337797e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e260f7-22ce-407f-abc6-f968b33c22b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a71edc-1691-4f2c-8507-f9209ff4a73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37317988-ae96-4f2e-843b-3c0415919965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d400a0-1c77-4923-915f-609968a0fff6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7e5c57-21ef-4111-8cb0-4c161ac4c6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8540cbd1-f55a-43a5-869b-1063fae53d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a2ce41-f333-448f-bb62-0ed10ffd4d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "121a11c6-1479-4e0f-91b2-776703b5e0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a49df93-122c-4761-b52f-d66f7b48251a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf332db-4d38-4f68-a801-c5a392e0bfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a55e38-b5ee-4e68-9479-e3dc311c4b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6889615-6443-4978-9914-d79c3e0f0606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb1cf67-d8ce-4d04-b076-6cfc24b34d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe57f36b-5add-4b1b-86a4-7a350eddb2eb",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd4ddb0-348b-4714-b361-b61e4b11a280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47088b20-f88b-42af-a8ef-2c341745925d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de71f9e9-a9f1-4433-b03a-11881b2d0a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe33f6e-ad71-44f4-a234-ae8064c14d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2a38ae-a93d-4dbf-abff-147750ef01b5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8223904-4a1c-4768-9ede-32514392ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b068f4-9e61-45b7-b50f-22735c74c287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006bede2-3168-475f-a36a-e81c8ebe6cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fa26d8-1976-4f5c-af2e-9b737a96981b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a3c5df-0712-440a-89e1-79e3a12538a8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d19b87-3c48-4f6e-a933-9df914cd3336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583322cb-3381-42bc-b5c9-6ceea2bc6dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844e1e31-e4c4-4d39-bfdd-7f568eaffdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d294ba-ef3c-43dd-b4f3-788c3914312c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763fa1ce-afe7-4a6e-afab-f29a7368544b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47db9245-b665-425a-a410-c1c5713e6afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b9274a-eb55-48e0-afcc-136facce28f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bba974-bee0-4601-a3c9-02609716cdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c2ba0d-d1bf-4025-a71a-b233af784654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4fd9af-0460-4722-9d38-818908581203",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837531f1-1695-4edf-be8f-f51070227e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6354f37-758c-43a1-839c-c1a3e513f11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3033e139-9284-4a76-8da6-3476db006914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3933c75e-094a-4005-a3cc-e4700c8dea30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c298420d-db9b-4f8a-9f02-ae20a257e9d1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19fe7f7-7aaf-4cc6-a108-56a772304564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1f156f-72cb-49fe-9ae1-c2bc0bc0ba65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ec08e6-ba0e-44f7-86d9-389a7f8dce8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cae1379-c45d-4d30-9edb-897d7bf83d48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbf8a5e0-d87b-4d98-9e1b-3c2d478a86cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c55ff591-7ba3-4a04-9c1c-7890236e83a6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3889e548-38fa-4119-9126-27f65c06c855",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "869972c1-85a4-4186-987c-3543a14e5223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04b7116-c67c-456b-a471-b5ac0abde2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b717323-1df4-4dcf-ad0c-710bb0487ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521e0a62-4516-4258-a034-6b4d14252167",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f66aac-4735-43f2-a171-d9c6cd4b19cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "23da74a4-21dd-4c19-a80c-916b2e91c866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4017320-14ed-4df5-8a99-39fd545b195c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a92e2c44-8dfa-46d4-ad1e-0f5e841cffdf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce7574bb-d5f1-4485-ae3e-9c148733a1d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f10fc945-a594-4bfa-aa67-f75568055a6d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6b3e9bd-44e2-4c11-b9d7-7ccff291f6d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34b5294b-5e2b-4d30-898a-1dd6eb6b8e65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f4734ed-ace4-4a1a-ac8e-02bfa202a354",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "594dcc87-f05a-4a79-823a-dfda84780f72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e51b3d82-2e87-4782-9a68-a74ebbd9e15c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0460278-cfb4-48c3-a4e7-35df028de010"
            }
          }
        ]
      },
      {
        "id": "06dcb557-a2f5-48ec-9b2a-d88df11d36a6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6e9c4a2c-4c46-4baf-84e4-9dee311dc963",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b587bb65-d0dc-42f7-8eea-7b596f8ec81b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "04c8f095-23ac-4482-9f86-750cf2d2f94e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b503544-99c1-4dd5-a32c-b7870e9f7803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e511c693-4a86-47ba-852e-6b01e499096c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3813e2d-7bc6-4b96-b866-5d353eff6386",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd1b7c4-f128-402b-887d-0750e59ba981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc353bf9-0c44-470d-9ccf-eccd93baccb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3925b66a-1285-48be-a78a-c0ec2a627c86",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18334328-61ea-41ca-8f11-cb7a66ae2c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f412e42-9a59-4797-83e7-f52c8e7bb64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164e8d1b-f75e-466a-b535-56544c91a98d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6033ba97-91db-4664-846c-74ea4fe040b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a10f638-c7b5-44df-a246-ac49185b6483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2bf041-cdb1-4216-8a22-48f210d89c11",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66c4f79-3514-4b47-bcea-15de399c66b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ca7617-66cf-4f68-b955-6010a8254ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5250a17b-2269-4f1c-9c0e-e8593a5d0cdf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18967f37-d7fa-4142-855e-5a06e7b61eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5f8924-61cd-43d6-8acc-5e48dd732107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c63d1a-513e-4a2c-9dc7-76e9e151093d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90d19d5-e666-49dd-82e3-ac7da0f44bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c436753-bb40-483b-9b83-a4fa1170c351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97318b2-4c6e-4b41-a8d7-d835468d0523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de272272-6993-4994-939d-2caee2c80472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c29f912-9762-41dc-a24a-fc7a9cf73d12",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b091998-366c-4871-a32c-4db16757b962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c803a4-60df-4d7e-8369-ed74ea70c4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164fb687-25d9-4f15-8c64-2330848aa974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abac9bac-0bec-4bb0-8d9d-a3fcc652cba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c9f326-7b95-495c-9c9a-c620150a0c05",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f553c2-2a99-4231-adee-e95f77bc0455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3de1a8-cc2d-4601-9a67-4e5c9e89e519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34d6203-8420-4db0-baf0-b55b714ad874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e585f2ef-73b3-49eb-9281-03f756eb37c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d44016-9849-412e-983f-1447c762d4c8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fece288-58fc-4a20-b25a-ee4fabd901a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f0f2e3-6bf9-49fd-812f-626214e35d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64285dcc-7fa9-4570-9943-ccd89c97eb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c4cf7f-a510-457b-83ea-73c8b1e535ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a84a31-6802-44b0-9bca-22583731b31f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1d4df4-7cee-4a2d-b7d3-262c1a8feb4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f5d82a-dc4c-4b2d-9b57-c555bd3425c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d673044-fb48-41af-bd96-8fffb2419c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422da434-f2c7-48c1-b523-677bb8727f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037c00f1-dfcb-455f-840c-912a18da1faa",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dee4bd5-c006-4ecb-86e7-d5d581ecf5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88feb584-4135-461f-a7ee-448eee271243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c133716-820b-414f-b9b6-5500552acf68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cced5c3-4b86-4f3b-8190-61f8c356b10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16a5c1b-7c72-43fd-83df-5576047b42b6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63f73dc-2ce8-4431-9d13-c28c79ff6d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4edba2ac-c5b0-4378-9630-be463378c5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4735fef4-4442-4831-91f7-29ec2f8e6355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1de6ae-7222-44c6-b260-a76d2c7c4603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19b90cf-f0b1-461e-b0d4-dc410f5c4a8f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c65064-28cf-4003-8d91-e222dc936ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f929c4c-9b98-4900-bd1a-eb86bba5c2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9274e8d3-fabe-4669-b0c1-c45df108d161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dcbc954-1acf-4bd0-a8fb-d620058d91c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1bb701-ef96-4607-b990-5689c42ec038",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5087e448-f74f-4ae0-babb-747814f75813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd14451c-f1c1-4023-bf7d-f64571158b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ef2591-54ee-4d07-ada3-149b4ef809ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e618132-51da-4cde-9efa-2854e6dd9642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24271b74-ad47-441e-8b26-4731bfb83fde",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be008f0-4354-49ed-997a-49cf9d5cc765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1461fbb-d4ed-4757-aeb5-6384010092c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5a9d55-b77a-408e-af46-2739dc84d20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950dd96a-365f-40bb-a8d6-15b6191731fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf5e8cf-b31c-4fff-ae70-15ba94d18751",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc10751-54c0-411d-b6e1-f1315cb1570e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63efd93-5db4-41b4-bc1a-a6ef6d79d42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f197f5f8-1746-4c1b-b038-27dfc2110812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a9cdda-c241-4c44-9dba-636b8caf6cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1542ea12-4c0c-43dd-80ac-6bf4a691cf76",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613ec680-be7c-4de6-a840-38732fbef96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2795759e-12ab-4b5f-b24e-2a588bac3bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b621a7c-2170-49c1-ba3f-7b33a471e9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9d352a-6ad7-4305-8f01-aa30ea00c66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d97f054-3058-4cf6-946e-a588713c0606",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2e4ca7-71a8-4d4d-b454-91e5f73083fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19340ca-6089-4322-9de9-a0d56839e485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e828e89d-6ac9-458f-8dcf-a34abe52a4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63079c84-eabb-4745-8698-d9e385cd8e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dab9e37-adac-4ff1-bcf1-d51350f3eb6d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff0f0dc-c648-4c51-a225-6c35c111c865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f473679-fb73-4112-960a-5aa0e89560be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a21e612-c276-446b-ade0-cb634ac88ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0dffd4-fa5a-4594-a8af-21b8cb9d1b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147339f4-4d03-4297-b0ac-f284b8cae552",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e7cf3b-9a0a-4334-8758-15b4edbb610a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad60d2a5-d7db-4d2f-b573-0cd5fe4bb447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de6b0c2-615b-4105-b91e-a6cd09927f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883c68a3-6571-44a0-b1cb-e61a6e6ad001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f897d2f-80f4-49b4-9c78-73733377f8cb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b5c346-ba70-4b1d-833a-9c46e6169edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb122c2-315c-4aaf-ac94-53b792df7648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bacb160-c204-462a-9504-6a21f93423c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccaa341-2cb7-4ebf-acbf-3dca57cf9a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c220511-914e-4119-ac33-9a9fe1e0f984",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcc1271-12d5-4f3a-9727-1983cd572c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcb92ad-0497-41f8-92e6-6fb7f631a1aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6acd9db-640c-432f-9a64-15459c6cf8d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8208e626-11d2-42b4-acf1-3fa1a5235f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec78137c-db37-43ed-b8e9-4617f801011e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39aa5b6d-5ad3-4e87-ab6f-04f603137857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "402cd84d-275c-4cab-a7c0-c8b7166cae9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fa152e-8d3f-48f3-880e-5f585ac5b12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afdacb8-5a36-4ef1-973d-e4ad6a84cb96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3979de9-79e0-4ddc-babe-dc1a1045a688",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1073bfd9-fc1f-4b1a-b8e8-50c0f9930993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d1892de-94b7-4227-8556-888362c10ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbaedb0-9989-4dfa-9147-fca339809e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffc82e0-45a3-45d0-b5e7-7a4d980fcc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c781227-852f-468a-b657-f1b05212b48a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ba2dc2-8c6c-47dd-8378-2148ba4d5833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5241a9-f7e2-46e3-a9e7-0bdfd0a8a535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fc5a73-3732-46db-81ec-bb34295b1f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4824225f-b3d4-44a1-b82f-6c8cd3e62f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589541a3-a23d-4007-821e-da610a8ea049",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4da970-08dc-46e6-8c65-24d54bad7e4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01cddd59-452e-4f4a-8db2-ecc373163d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88341ddc-1fa7-4c3c-901e-832ba2999f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccaa3d6b-e7fc-4664-b73a-054552b420d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5291a81-4fbc-4ba5-8201-4d9227147e80",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52362b73-902c-4907-b479-2404ec20214b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2194e6c9-7af4-436a-8965-51236d6cc639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa582576-c090-4837-88be-c775b6d2b660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f2db00-0e2d-4970-8f89-a3f713b31462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb34e691-24db-4d1d-a1ea-6d51f731a927",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd95b0bb-eec1-4a50-ab6b-58d57a36a565",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256c7809-ef17-4dc9-849f-063b14cccd90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38412a98-06e0-40a1-a341-6c8580f8f87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35a4cad-d09b-4923-832d-3531460a8faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df985bbf-3f17-4f61-b697-e64a972f2ebc",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20dc6cc-7947-462f-9178-367122572a74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c94e1aa-6e59-40f0-a3a0-d11c8717aa06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "178d2088-4ba6-4452-9e20-779a7becc2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0bf9de-2d94-408c-a6c1-afe1a46c270d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce8d7c6-a5d4-4a99-8e6c-5d6f1d0ecad4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a1c3cc-a998-4e38-99d3-d35104d3c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66eac89b-f0a9-449d-9a27-5105b48ccbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504668c5-21e9-49ae-a07d-28e6839a6229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "767c6159-bef8-405b-b010-f74195c35103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d945e117-afd6-4828-abdf-880d443c954d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e726921d-2387-472a-be3f-f13ebf98ac60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8720a1e5-b6cd-4650-a5bd-69060ebccd01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75103e2e-1491-438a-a35c-8e9066c7264a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7eb90ab-03a9-4fad-8a4c-32f0483e15b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8aa426c-30b5-4ace-82ed-d4c8dea5f2a0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44bbe2e-864f-4851-989c-b03f425b3710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98ed4b3-87b2-497a-a189-9dcf08209a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ab929b-8d6e-43c8-9965-bc5e06208291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60a3014-bc24-4f45-a17a-ce000a6858b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d946b-138f-4570-9f63-23df1c24879f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19806743-51bb-4dce-a497-83a8ca6d4740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d154c285-35e8-4f01-be3b-99c6ffe6b630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a633ac-0366-4c86-81cf-55452a30a4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99857d67-04f2-41b3-bb7a-e673a04038c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b4be92-48ef-4b07-bb99-d9687a7a28a8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc1e61e-a422-413f-961f-14746d258051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86c72cb-4784-40d7-8a9d-a525b29da8e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74152e7c-8b5f-4876-b382-ab57b0ed19d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfaa9d5-fa66-4395-8267-2374180d0e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9da335-bafc-4bd6-9457-bbe027d87389",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef62f2c0-2f94-41f7-a7e6-da67cda5690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc439455-f442-43c8-b281-dbaad417f3e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a157f-8fdc-4497-956e-4ee966b90e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae72a9bb-329b-4cd8-a9da-91b28707a64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd5bdb5-5bb0-423b-baa7-1fef365de427",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6cee9b-dec3-409d-beab-126971b3b123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dade06e2-1277-4524-943a-336bd522b58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d80e48-b148-47bb-8726-e4a18c9433c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bff235-88a9-45ac-b72a-7646419f2d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8652eb4b-6eaf-4274-a874-66de1e2e26bb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a43e1c-477a-464e-9dc9-fdffb3bb690e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f859232-2c98-4b0b-ad92-83d4a85020e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0d436e-ff92-4e39-968a-c927492d4b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bef3b86-4424-4a20-862c-38718dfe2d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee225208-5840-43dc-bcb0-2be2c344e1eb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd349054-eb97-4dc9-9e31-aa32137e8fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b423d98-999d-40fe-ab37-3dd11ce21c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebf45f1-e964-46ee-8bd6-16518226b66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17002afd-8b02-4cb7-b908-03b344eb40d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa52a12-c724-4182-94b8-cb13967cda09",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70464ce5-f092-498f-b47a-63e6890e6334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f16086-f6fe-4777-a26a-a1c2a6a2ec1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96356c5f-dedb-48d7-9817-7e8e7723dc31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6f98a9-a6fd-4ae2-9d54-f35cda0e7cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a053d353-8a97-43c3-9832-1ccb83c5d675",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f1187-e42c-4fa3-ac69-efa8402c9f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd90b63-3823-4504-b15f-4c43368d655d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a920a50-ee5c-4d2e-8b0f-f95658f6f18a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b454dcb-90f8-4bc3-b110-47dbdd5db9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27acfea-6f66-476a-a1b0-546f0e693904",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527bb4cb-3f09-4503-8271-4a432dd10d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf1dc7d-7f86-46d9-ac24-dca12a1118cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b376b39-0c4e-4247-ae9a-29e480856a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf3a791-8f9e-44b8-89d3-bfadf42e001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef4682a-60ba-4f89-af7c-67a778d09405",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0727fcdb-00e3-47a1-bc15-95d0c7c4ac8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7e2586-8a36-4fb1-93f4-d155d75ae9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a40d89-b976-4946-9cb8-de6bdd081ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61183105-7343-47d2-8fb3-8f8f10bd2bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4179567b-28f5-42a8-a550-715b2bcb1f08",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad41590c-30b6-405a-bef2-a9e8f528044e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d21232-7f3e-4b0e-9914-b6ddb5c23b31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8c2545-bcf8-437e-94a4-c3b1438e18c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece289d3-b01b-4589-8abe-f56aa9ccd69f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99357b4-ff8b-47c7-8e3c-fe20c15f92be",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ea005f-9062-4e37-bdf3-494bbf35e84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1228b7-7a8d-4784-9e3f-0e6693931ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd06590-d008-4336-a473-3ce0e9c7738d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b6e0dc-b463-4c90-b73f-bf27e483d1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155a8490-de49-4a44-a1b2-21efad23fd9b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c68be8-a9ce-46a8-83ba-5a4e0c927d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392b18a8-45b8-4f3b-a259-dc8711838ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50705203-1184-4910-b3e6-b919942247e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ea9bb9-4b68-4c02-a44b-ecc5048d5f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c0316d-140d-41e2-bda0-7989e6e665d0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7726729c-6cff-4228-9acf-8a43f89fbac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ed422d-e67d-4241-93d4-9fa5791bdfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b16308-eac9-4803-b13e-f4c8515b6b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881999f8-0387-4705-a51d-9314fe46bb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad33d09-361b-4000-80a6-65289bdf8cf6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51deaef-c734-4adb-bdf1-b28b9a2b38a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb553114-36ce-48e2-bf3d-cef15f6e2d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44428d44-5592-4d4e-8e53-b0238ae77326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40eddebe-b645-47fc-923c-d8865fb01bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1b7d09-fc06-45a4-a0d4-d8b5003cd9ec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e79862-2390-4235-a7ec-60464a9240ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8ba4f1-f610-434d-bc28-da7247946c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e7def0-20e0-4594-9939-73cb1feef7c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0e8e1b-1d7c-4910-9b9e-da338dbeec14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160afd6b-bfba-4acf-8d05-afc796a8f07d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfb4824-6867-4e38-a5fc-2e3f522885d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8073c17-b3a4-43f7-ad41-32e1415435e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b5ea81-666a-4f47-bb3b-8cd8f29776e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b484d5d-1d6a-465d-85b4-02822dd82d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720a488f-01d7-4e4f-ac01-e20e4490cc53",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a33887-cc1e-450a-8000-e4a1f4c400f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175cf577-5a86-4ada-b838-c163ea7d10dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2294b599-0baa-4232-8f16-2581c6206568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede14731-6d7d-49b6-bcea-aee374df64a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554cd8dd-48f3-4a46-b067-6883157835c7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3166fb-2300-494e-85b3-750bc52bf8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19fe58d-ef86-44a5-8e0b-5a7eca008a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d07a89c-55a0-44ab-8851-d58d28336bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef22e59b-62e7-411c-9778-7d48c7203419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422b8174-f00d-40ab-b8f1-13b9f18b25d5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d67f0f0-8ac1-4ee4-805a-ec9187eacaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78ba516-0d9d-4050-93f5-4c35a984bcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1913e7-5700-475a-b0dc-20e07688ae7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c6130d-07a0-493b-b7b6-6c8caa649dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1877f3e9-1e1b-408b-8eff-264abd5173a0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4412c50f-b890-47e9-95a9-6c34bfa612aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b83f21-4df8-47b6-89d0-2e7fc732b0af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab639c2c-14d1-4858-a984-d30ee252b8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbcd031-f926-4dfb-b0b0-184c1777520d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1472f07a-0a19-4b8e-b1f1-97eb9ca6ff77",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef7e95c-750c-4eda-8041-46a19fbe8322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259aae7e-723b-4dd3-a471-dd5a6b19edc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94dd94f-40ef-4dba-9e72-48dcb4c38cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b0eccf-8e16-4976-8898-1a9d122cd89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29990ff6-18c5-4639-9bee-d6fdf3514d93",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55a1096-09df-417f-a1f4-3ca446f3f53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13487da-ea28-4df1-ba7a-c6f02a3a9b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bb4010-ce6d-4619-93dd-84f67ae5bf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd25c9b2-a493-4046-8d27-4a16ed1c718e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f759593c-f700-41f0-962e-9700fbedd5f2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07ced35-6a98-4de6-97cf-ca708051f456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbe860c-6451-4eac-91d0-79fd2a75bbb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d66697-b319-4c7b-9f47-008f3736fda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7dfa132-ba7e-4770-a3a4-2a859f3a127f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fefeaac-4ad0-4946-85b1-a0d244bf4797",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a793ab0e-fd1a-4815-a7a2-8be5f86c4920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95cf79a-08b8-405a-82a2-2d2ad109a35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c0b953-f876-4631-822b-4d382767e26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93aa7ba7-d007-4826-8e08-30ee2be41654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6886d0-e7d0-4c74-bc96-4116d4a14d11",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8a7ef6-668e-455c-b966-592578d9f779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc5d062-ea78-41dd-8010-9030ad7614dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74da1166-28e4-4ce3-a445-b36d5baad9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3967eb7b-6678-457e-a56d-9a7bbcfd6644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af859b4b-8326-41c3-ad62-9c9239d4b54d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733a2c3a-0432-491d-9f41-c7c9b313a9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70114007-c672-4f69-b693-f7eb63b81f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbf1b60-60a4-4e59-b8d3-3f644ee1440e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394ddf25-f585-48e1-bf9f-fe8f6eda2b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0223f91-e1dc-400f-a642-4c04d3aed3e2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51285b4a-7254-4984-af10-0358aebf9336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6dc244-0422-4458-a4ee-c1b4fe384bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e954081-4628-4d5c-83d4-d477ef2bfae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f157f3ba-0b13-47ca-a97e-9ad907a42803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63386c1-cce2-4508-9d1b-5f66dfb2ed19",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e2df43-5ba4-4775-ac3a-b5710e07e6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c31f2a-3688-4065-8f77-356a5b658551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dde4c75-0c69-4bd8-8647-0d751dfa3d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d0b220-2d23-45bf-a9cc-2ef78f8d3c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008b9792-9a17-4e13-aecb-2779318f9904",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad68212-a4fd-4850-b383-741f207de7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855ada05-65d6-4783-bd44-a5b2cc6402be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ac495f-a47c-4e45-95e2-aeae894248aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456ecf73-6cfb-4e31-892d-dc65bc9d43fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4047f34-4cc8-4a2f-b03d-27a130b79b0c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a8f4f2-be60-47af-ac81-acf0aae8a2a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19fc3d41-a7db-4b55-9c6e-d55a2ae0a2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fc6036-270a-48e9-9411-956f60855bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1b93aa-d6c9-421a-9cd4-edf198030b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d57d94-bf3f-4378-a20e-5ed411385dea",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d75cd5-9c74-4f54-85f7-0d03cdf3d118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53255fe-0580-44c0-ae54-3c2f0160e5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11133e45-bb03-4172-9adc-7da957357ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26410bf2-0a37-40a4-8064-d3b097f09483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1151a322-582e-486e-b765-a0d554573953",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f86722-ecf7-423e-8fcb-a75ea155ee2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ddfa8fe-765a-4892-be27-1637e82f7ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64692fd-3e76-44f7-8bf5-2c6e0417bc1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf0f068-6046-47e0-bb6b-9fc4b2e4fad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5a96e2-c386-40c9-beb6-f85b60923fa1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7795420f-6aa3-4d7e-95dc-d2b075372e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf24e8e-c8e2-473d-a125-aaedc944f717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b0a890-7341-4b9a-a385-0fdd6f4734ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c800dcd-9d49-43a7-9f78-55e7e9af340b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c38b5a-3e75-446c-b988-24c06b2a38da",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc903be3-73c2-4cc8-8ac4-47b7eaaf0f43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e90db07-0104-4fca-9a49-7aff30de5834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cae280d-78ab-4449-afc4-405c95f76a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c871ff0-afa2-44c5-a776-1f6756de2647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95d2cb7-7949-4bf7-895e-19831108fbff",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f45eef-a4c9-440e-a92e-9c45f7c3e70b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1229d9-18bb-4cda-84ba-6c4e37bcb721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772e8a35-d1fe-4a4f-a4ef-3ce155655729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808928bc-c6e2-4512-947c-cf8844daf9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85364da8-32c8-40da-8401-e680db725496",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83e444c-1596-45ff-819c-bd110e616b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd861098-631f-4592-9656-6b31dcc80ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d12d6e-307e-4657-8c47-e15e19c0e3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937e59b8-2972-4953-a59c-5f7d56ed498d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901cff5d-105e-4aaa-808d-eb67175cfbd5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740d35e2-7247-440d-bed8-14033ed358dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251bfaef-9392-417e-b4e2-3d155f93a3ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c76bb26-b90b-410f-a743-72eb075e6059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf7c837-a6ab-4ed4-b096-d9c0e043bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb13f6f-78c5-4f37-9035-f19e375141bd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81d88a0-b03d-48b5-bc45-2f9b3f764e47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5656acea-6af3-420c-af0d-90c00b42ab36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b017e3ea-a81e-4a45-8372-cd1a842cb0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c084f1c-9d15-408d-b578-63783b3576b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a757216-fddb-4807-9bc7-31147717075d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5a880c-1ce2-4dad-8edb-c1290d94eea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7bcde5b-2070-4073-a6a3-533e562d70ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629b3584-7119-451b-a4db-6c3f4558e7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d1df19-58a6-40c4-8325-3fe4caecc19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85830fbd-40cd-440e-b6ad-6d26a0add1c2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cb6a5c-8eda-48c8-a068-229ece96e237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71db315a-55f1-44f3-8c8e-3ed68d813b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cfc994-bf93-4f6d-88af-c46241f0fa3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ee5326-0bef-4e62-b9bb-3acd5aafccf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dca5d0-ff74-4334-b339-3da1b08ecd04",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3596995-54ed-4ad8-b307-be7603794c28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a862928-fe0d-463a-b894-d21f54703fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169866a2-d3c3-49df-9c31-820f6b4ea68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513af87d-ec4c-4ec0-aa14-18fc12d97726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43601588-8a74-4587-ab63-ab279605c23b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92344de3-6f4b-4b42-b00b-cc226f71ebb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded94ae4-4a4b-46d8-8ef1-8e2e19db3990"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1092d374-4898-40f7-ba72-253a09515c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1016717f-2882-4282-a487-045949516697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dce497-3297-45d6-a74d-04ae8bdd458f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6023647c-6964-48ae-84d1-9d11ce4fdb4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63983850-6ea0-4d21-947e-9318b6bd76a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b9cb95-8028-4f27-a750-afec86349e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b644b8-da52-422e-ac08-d6175140225c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227759da-a760-441d-ae7a-155b82c31b6d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd3bd9c-7c63-41b1-b192-bbd4ee981b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c920e455-9c92-4ae2-b667-9e1d4d0f294c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ec38b9-9d28-4f65-b22d-71f218440ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5f15b6-1bf1-459f-89ab-3f81668b83dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9472741-83c1-4429-84ab-25e583eb6a73",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a68b399-5f62-43bc-9004-b784f145fbb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f13f71d-c521-4b74-a008-969c5d0c79d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64139470-7c13-4088-b175-1262f26949f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae90321-755d-4ed5-9eb4-99a168d2df10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15a84d3-5c9f-4f6f-91f1-90d16dd9f8b6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2997ae-27a4-4752-a99a-dd0c77f9342d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "089b1855-7191-40e2-bfc9-8906df9c4c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5279fb4-98d4-4794-8b74-7b4b31fe3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aa08f5-c255-4b14-9f6f-0c14a3038401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71247384-30c8-40d2-957f-01371b94b27f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f5c8628-d3a9-4527-ac9c-c1d2220ea3e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff914a8-f895-4754-845e-f93783166206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "618a334d-c699-48bc-bf6d-85589472d812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471a3f6f-01ef-4cbd-a76e-d0083c998ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba246f2-492d-452e-8691-513afc216af1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7604c8c3-b46d-4d26-bda5-4332283105b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7488860e-1302-4300-8781-fcb7dd388e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515e2647-8322-4706-8d74-998d09c5f9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae7eec6-7610-4678-b2ca-edf32829d2a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c073c6d2-4303-4f1a-9bf7-26347b129d43",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e23fc0-4cd0-4ce0-9805-2548fd855b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35dfa480-2051-4274-9ae6-2a0341e8ae31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d76e5d-c86a-484c-a374-def96df1f47d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8dbe0b-55a1-4c1e-855b-87537297d3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f303b13-3ae1-4470-8fc6-6df3f9cdc9a5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ef98d6-08b1-4add-8f5f-5a70906f0ccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1230c9-66b4-4201-99ec-efc740550db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c3bcc8-8b93-4a1b-9650-699e2d40129f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dae40d-df65-4aa7-b4e9-f37be68702ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d69315-eb87-4282-bd6b-9eadd46b192a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321a3476-b207-49e3-91ee-4b7e22452416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "469648c0-73c1-4634-9298-7d2b3ba83451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4dc2f1-1385-4d54-a3f5-a1991270ff30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2063dcb8-cea8-4a40-b45a-395371d1a4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aea14b4-b249-47ea-8a79-4194262c5539",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ae45a6-a5fc-4b8b-9b43-1fac49b60423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d7a11d-ffa7-469b-969e-651a959506cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec24f55-4745-48c6-bc7b-82f27ed277e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f78d4a-caef-486e-a11c-ec764c71f109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f96778-b0ee-4bd4-b835-1c529be3fe33",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6095fd9-ccf9-4fda-8c6f-5d0d4f7804f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00957a53-ca9b-4e4f-9a61-3cdacfc39e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664f277a-5d2f-4221-ab22-3d269a93cc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55983cdd-60bc-4d88-974c-3bd6b2b6157c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f203508-e48c-462f-9976-674a8bbe55ed",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41746774-70d7-4fd5-bb77-1624d3d746d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcbc94a6-6ae0-4550-8da0-a3b83928c139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f876da4f-4b13-44c2-a5a6-009c1c9a33b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01dc3dd4-24d3-41c1-84df-e7af3af4a5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a0163a-e582-4307-af1a-f9c495f97449",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0825273-bdb7-457c-96fc-b2d70d2f7b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab102127-9041-48a4-ac57-cba02bf82e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7494e9b2-8f71-4b8a-a38b-26de17fed0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c65bbc-e647-462b-a47a-62393a0ee71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d927dcd-422a-451c-90d8-0c893462c049",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cf776f-f3af-464f-a04f-5d3efef2619c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "062cd18e-65ad-436d-a50c-9125652c8cd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a43320-d417-4964-9583-28b6e242e509",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03151951-6c66-4dcd-9233-5cfc370617f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a419a66-e8da-4518-b2d1-7a984445d488",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1434c9f7-c722-4563-b261-39a9adf29815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0227c116-e2bf-4168-a796-3b4bbabf81fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e1564f-ab60-4052-970c-7fe44bdef419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb398d8-bedd-425d-a088-c4534ce64d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6361e92e-b78e-4ea0-be1e-0e530f244d11",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cac9daf-a3f2-48e2-b049-b85ea890fc48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "107ece04-de95-4d02-a504-ac9b07e6ac2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e07e2ff-865e-424a-88b9-bab71d4e6e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45486884-a1b6-45ca-aab4-2fc61e27fdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4a7a82-ca6b-44d0-ae45-2ef8acdc555f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cfa37dd-60b1-4360-b750-f2df7c23a94b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed8f5e9f-1c08-412d-9fe3-d92728e7b86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0322b71-211f-4afa-b328-da21f5104948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f237c7cf-9754-49df-aa9b-19682b4e609e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68ccd41-1719-4ee7-a1c5-0443837d6dcc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fa3f91-44f8-451e-80d0-1a5648b9eea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e170389-0f21-4cf1-afc6-a0ad73798544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "188e8425-8b31-45db-bd5e-5a35adb70c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d7023c-d945-4082-8273-ec04f02755d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f8d1a6-6b24-4768-997c-c991b5535c57",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f70e6cc-5cf2-4a78-98d7-617bb7cc4f94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aee13b8a-45d3-417b-bdc5-49a6704b20f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d41e80-4dd2-4453-87e9-2cff9debe9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e882967e-d853-4a0a-86d9-b7661b58a03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507ae55e-2f59-4fd4-9994-f89df7039688",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb5ddc6-2d1c-41b5-a437-c7541fbb9728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3891d61-7bef-4c9c-bafb-debf304a323b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f66ad5-0f1e-44cf-9566-3ebfdfb7738d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8dc673-a8fd-4e8e-9179-3c9791a181ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5752950-5e52-46fa-809f-af36eb90d514",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f319af7-0fc9-44fb-946b-755cfce96a37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6559ad47-213e-4564-b497-0b9ec1239cd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e719ea8-a8df-499f-889b-73b48340e5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b36dfe-bc51-4aba-9aa5-5da56af10e95"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26cd48ee-e5be-4b82-b286-b55e8b58c05e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08ab4a6e-637f-4f00-a81e-71802c6f5efd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4fbe251-48c3-424f-b051-c477a8670ded",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18fd2ec5-958f-44fa-92a1-8b913d7f584e"
                    }
                  }
                ]
              },
              {
                "id": "a43fe24f-388e-42ff-825c-656f0e0dd507",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1001405-f81d-42d8-8ebe-0658162f602f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c0cf03-390b-4029-8e09-697f1ce748f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c192de6f-ba75-4645-b00c-0314839177a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24bc6de-f6fa-4dcb-9b82-90ec828b7a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "352c70f3-77d7-4628-abda-939e7263e6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a26243-e3ef-4ad6-8b7b-37fc76d4b29f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce38d68-2c01-4d57-96c9-ef289f4cfc2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3a879f4e-5386-43e7-b09d-cbbd7b8f95b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5a2313-714f-460b-a91b-25080ef928ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbb6223a-39a1-4eab-a107-0cb844cde4f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19e7d98d-7942-418c-932a-ee564e43fe12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a94cd879-5701-4a35-8c71-1cae9af306a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f17cff5a-e5c5-4d5f-9dcf-75456a1078e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e55c2a87-056f-4f88-b022-55e5e6527564"
                    }
                  }
                ]
              },
              {
                "id": "d3dc1c65-1825-4fa1-b9ff-b1015e5214bf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0bcf16f6-af9a-4fa7-a075-3629b607d87c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b01842-7810-4e9c-8634-719cd874a2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3c992ba5-1852-4b54-9d35-16772b716a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1230957d-6fdc-447b-8652-208fa86ea882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0184379d-40ce-46c0-993a-0cf1e5cf2d7b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc5d986d-3cff-41b8-aad1-0c8fcdc48a73",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cf62f8a-97b5-4da8-afc6-47181ce427cf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bd5af15-0b3a-444a-ba0b-a107a72502a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a529477-6536-414a-acef-043b8e86dcea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1976476b-7f9a-4371-bc0a-ff5a22ebb035",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90b24d73-9bd1-4fa3-836a-029e8e9f65d9"
                    }
                  }
                ]
              },
              {
                "id": "fd38056d-1b94-44cb-b886-2dbb21225f3f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccab011a-8f80-495c-ab5c-d18ff44f61cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d7987be-73d5-433d-91b0-b737a95962a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4a85276-ebe9-4c6f-894a-448da1988c65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "364d4e73-7434-4808-bc70-c3c488cbf061"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "935fad2f-1d1e-490b-84a5-2239ffe78d22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e487e0db-6340-413a-a81c-427eb50c3ac7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8341842a-e2ef-4005-9b59-bdd34c3ce878",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "064d875e-4b5a-4ca0-9201-aab6e7805037"
            }
          }
        ]
      },
      {
        "id": "8ddedb4a-694e-4c2c-988a-5fc300e22cb4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cbcd70cc-7dcf-4933-adcf-ed7cdddc8ae8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "587ffb4d-ed94-4fc6-99ad-1f018f41c04f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1df2db-7682-4c20-aab3-f92e6b2a4ad4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b64129ba-fd13-4a85-bc2e-0a0035d443a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d04b69-6b58-43ef-a86f-13c9258fe050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46edac73-6c51-44db-a9eb-1d293231ea65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b827901-9ba5-4074-bcbc-43d9f541f57b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab5e93b-9982-40ad-8b11-d8840d33c223",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ab3c1d6a-fbca-4e45-b520-83aa51896af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87fde51-f213-4e23-b460-9cc9425c82d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4dd0cfc-ff24-4878-88ce-4b1cbec03188"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dde5604e-6cd8-4a9a-82d6-362dea591899",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f99a729f-3111-40f2-be6d-bd355eb2831b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e68e994d-3495-45f5-b37d-e46e1fafeed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7d5cad4-1b60-4c21-b53d-6c87b2ccadf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da72816b-ccd0-4a52-879d-e7e7c08b79b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5ad933a8-53e1-45e9-b36a-1b0696e0d1f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60060544-738a-48fc-a4a2-07641eef459d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "46f9cf66-984f-45fa-bb33-37d5a0e4194f"
            }
          }
        ]
      },
      {
        "id": "6f3b905d-cd26-44b1-abb0-f8a5508462cc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "42791842-8aaf-40fb-a35e-bc534c26b3c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92bd77a3-6ad0-4e85-8e58-1170c4179e38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fafd2f8-7d0a-4e5e-95bb-fea96865ea29",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43cde51-a408-41fc-909d-0ec9f36b12fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a2613bd-cf58-4b23-b45d-f208d93f7b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363f0470-4291-41cc-a639-a1a14421ed4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5f463ef-e1b9-4b2c-8919-f2ca6fae787a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b33f21-b2a3-4472-8a94-f07af1488308",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ea6265-0d1c-48aa-b074-f5d36f5c6d7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "24255526-b7a3-4305-b1f3-ad509d65260d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605a9422-0809-4295-a547-d1ad0503aef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45f74334-a2ab-4f08-b2d9-21b85d7df500"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c852dffd-ec5b-401b-b982-881e1cd7c0a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7926ffec-103d-4724-b658-881a61ced2a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "109eaf5f-cff3-4f19-873b-7d71874c0047",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cac58501-0560-4963-9a64-76e13cd0fc09"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55b39800-2141-4f69-82bb-7eb2d8434db2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "19a6495e-8883-483c-9a35-806230de9947"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ff25a93-009a-4c45-8066-8b914937b81e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6951ec00-27e9-4c57-b66f-32612d78c2f0"
            }
          }
        ]
      },
      {
        "id": "bbe50fa1-12f0-43aa-93a6-e690badc8420",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b1b568d0-058b-4278-b118-f0a35223068a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22c1fd2c-edc9-4f74-8324-9d474aaf286e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f894b381-ede0-44b3-ab40-2aa10ad6cb61",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1eb015e-4ba1-42e2-8b90-62713b09bec3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83906fbe-e808-407f-8aa6-63e1b4a493f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c321863-2c9d-4f92-9c09-402311337329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c631e89b-1e6e-4dd1-aefc-6f10c5f6a106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f666d82-52aa-426d-8f90-d5397d4bcc88",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c8d59b-e4e6-4b3c-b533-aba2c7e1482c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "367e497f-890e-4d26-9a33-bae20116f106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddef767c-d3e8-42d2-8818-aa53faa34d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70b0a1aa-bbd2-4b25-96ed-bdfc104ce09f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "268c1d3c-2d98-435e-8598-aa2bab9e831e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5f0381e-64ff-4651-b91c-9be1c6a5c732"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32d8a0c1-0275-48ab-8b5e-c6216b9d34e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44bd6c1a-fc10-46f1-863e-95e411db0269"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84d93d99-8799-47b8-be74-9c6692ae599f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eede3b6c-7250-4eed-a489-cab4b11e359a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e248e0d2-155a-47c3-9d5a-13438ce52a03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8e04e1f-6161-40c7-ac29-35a43d3f898e"
            }
          }
        ]
      },
      {
        "id": "ba406d2d-101d-4a4f-bb8b-e530a653a74e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6877a45-e8cf-4e42-b624-37f4b9f67b9c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eacda494-ca20-48ef-ac5a-82bcb67075b9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "aea35735-c53e-4bc6-bd40-475b8584a713",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "141752a0-a133-44d4-b777-cf08d94a3bc7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0b8efb0-37d9-4f94-be86-65421b5da4a0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 268.6718146718149,
      "responseMin": 7,
      "responseMax": 7210,
      "responseSd": 874.9255304311217,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677810850713,
      "completed": 1677810931042
    },
    "executions": [
      {
        "id": "53fea8d1-3e6f-4e24-b86b-1727b8d89013",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c28029f-d1b8-4420-bc1b-bf7858a5e461",
          "httpRequestId": "e736098f-d9db-446b-a985-7035f567e907"
        },
        "item": {
          "id": "53fea8d1-3e6f-4e24-b86b-1727b8d89013",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "92aabde2-bb96-4951-ae20-90e7ffa96d89",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "01ca3e24-fae8-47ca-beba-05d41c6662a2",
        "cursor": {
          "ref": "eaf479a7-14ed-495b-a839-c1aca40c4e25",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f9c95a9b-c5bd-49c6-90bc-fd35b8b99f84"
        },
        "item": {
          "id": "01ca3e24-fae8-47ca-beba-05d41c6662a2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "33bb6159-4424-481f-95a6-dd0ee5906d52",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "bc7354b6-c594-4bb1-a58c-b4e2d9513323",
        "cursor": {
          "ref": "78e963a5-0c92-47a9-ab37-51b4bdb78ac0",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b47c5692-b6e7-4a10-a4bf-078b693cee72"
        },
        "item": {
          "id": "bc7354b6-c594-4bb1-a58c-b4e2d9513323",
          "name": "did_json"
        },
        "response": {
          "id": "3eaea478-00c8-48d2-a246-de6c8966b04f",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9358075-08e9-4f4b-94b0-5affdda2e4e3",
        "cursor": {
          "ref": "d150d572-cc0d-4e1d-b83d-5a2885332489",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61674ee6-e8e3-487e-84a4-da02d071c59e"
        },
        "item": {
          "id": "e9358075-08e9-4f4b-94b0-5affdda2e4e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "f9d4a5ac-e9bf-43d8-afde-a8edcd949e3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1603,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e9358075-08e9-4f4b-94b0-5affdda2e4e3",
        "cursor": {
          "ref": "d150d572-cc0d-4e1d-b83d-5a2885332489",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "61674ee6-e8e3-487e-84a4-da02d071c59e"
        },
        "item": {
          "id": "e9358075-08e9-4f4b-94b0-5affdda2e4e3",
          "name": "did:invalid"
        },
        "response": {
          "id": "f9d4a5ac-e9bf-43d8-afde-a8edcd949e3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1603,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f6817c99-b73e-4431-a40f-5d962245eb65",
        "cursor": {
          "ref": "c78377f9-674c-4cbf-863a-08310eec4960",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "65d1e64b-dc0e-4e84-82a4-fff1ba12474e"
        },
        "item": {
          "id": "f6817c99-b73e-4431-a40f-5d962245eb65",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b6fe68e2-6bb3-46ca-9282-80d59afedf83",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c7d085-5137-46de-87b4-741f59b7079e",
        "cursor": {
          "ref": "97e1adb8-59a9-4638-90cc-fb213cab3e8a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d0d95882-fd5b-4df3-aed0-3ed6801885b1"
        },
        "item": {
          "id": "93c7d085-5137-46de-87b4-741f59b7079e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ae4b5f17-2b4d-4cfc-addd-e67c162d3dfe",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fadcfb2-17e8-4e2c-b99f-7a20e62a71ed",
        "cursor": {
          "ref": "f5de6271-9b4e-47b6-92f6-b7479840e369",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b2cc88bc-1cbb-49a2-acc5-02337e46f152"
        },
        "item": {
          "id": "6fadcfb2-17e8-4e2c-b99f-7a20e62a71ed",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "081e616d-757f-42e5-8a5e-a37053e6b1ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d06795bc-9fc6-4988-b07a-021317a63ad5",
        "cursor": {
          "ref": "c69fc110-31e1-4034-af88-40a9a8c45759",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1d8d70d-9574-431c-aa2d-9fa53e2fd844"
        },
        "item": {
          "id": "d06795bc-9fc6-4988-b07a-021317a63ad5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "110fb5fd-8515-40d4-85d1-a2c62ead84f1",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d06795bc-9fc6-4988-b07a-021317a63ad5",
        "cursor": {
          "ref": "c69fc110-31e1-4034-af88-40a9a8c45759",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1d8d70d-9574-431c-aa2d-9fa53e2fd844"
        },
        "item": {
          "id": "d06795bc-9fc6-4988-b07a-021317a63ad5",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "110fb5fd-8515-40d4-85d1-a2c62ead84f1",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1b3f142-9b0a-4117-944a-0d770528853f",
        "cursor": {
          "ref": "47e16eba-b304-48c6-b162-3c9692e0b7ed",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "03b8b8a1-7c97-4f37-b7cf-3cd7b733cb94"
        },
        "item": {
          "id": "a1b3f142-9b0a-4117-944a-0d770528853f",
          "name": "identifiers"
        },
        "response": {
          "id": "355d218c-25dd-476a-b500-02585e561845",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab6529e-3a07-4035-abf6-1e801732f056",
        "cursor": {
          "ref": "6de1b185-1b7f-4a09-bd1c-756fa1bc4970",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "724836b4-a74c-4fb4-8555-396753551602"
        },
        "item": {
          "id": "bab6529e-3a07-4035-abf6-1e801732f056",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7ea0e537-fee0-43e0-bb24-ebaaa76edcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab6529e-3a07-4035-abf6-1e801732f056",
        "cursor": {
          "ref": "6de1b185-1b7f-4a09-bd1c-756fa1bc4970",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "724836b4-a74c-4fb4-8555-396753551602"
        },
        "item": {
          "id": "bab6529e-3a07-4035-abf6-1e801732f056",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7ea0e537-fee0-43e0-bb24-ebaaa76edcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2673b3fa-a4b8-460d-acc4-633fa9fec258",
        "cursor": {
          "ref": "cd0ba1fd-7e2b-48bc-9156-c908f7df80c7",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b29a2ce5-7e97-44bf-9218-b8ddd58040c2"
        },
        "item": {
          "id": "2673b3fa-a4b8-460d-acc4-633fa9fec258",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f76eec41-c51e-4c8f-b478-38e649f27b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81cd84e7-26ab-47e9-8377-e58e621ba6ae",
        "cursor": {
          "ref": "7ff8cddd-711b-481f-8222-09a2494970ff",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2c15df62-4539-4de2-83ba-4fb032b8db71"
        },
        "item": {
          "id": "81cd84e7-26ab-47e9-8377-e58e621ba6ae",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bdd2dc9b-5cad-472a-b489-cca6f2e3860c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42f5c9b-da15-4f03-8152-411e05003f43",
        "cursor": {
          "ref": "da8d54b2-7226-4e40-aab2-ecec02b77da7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "79154bb6-c14e-4926-8c2c-640171d3c522"
        },
        "item": {
          "id": "b42f5c9b-da15-4f03-8152-411e05003f43",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "51f2f0e9-640a-49e8-9b13-40bcffef242a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44362ae4-0b0a-495a-b381-3fc79838d033",
        "cursor": {
          "ref": "8c33f55f-1197-4a0c-8b03-36aa3c1b76da",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a2afef21-ddd7-4b35-8965-4e0bd46833ca"
        },
        "item": {
          "id": "44362ae4-0b0a-495a-b381-3fc79838d033",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2731acba-4763-49db-a33c-d97124245699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09261c63-5313-4b94-8a7a-b2eb2f734019",
        "cursor": {
          "ref": "1ea6c60e-324b-4673-bfdd-7eb1a6d2a76e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "14b0d10d-8b63-4bc2-8173-da040f93e0dc"
        },
        "item": {
          "id": "09261c63-5313-4b94-8a7a-b2eb2f734019",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "34792a74-5c81-41e4-9d52-a6b2686258c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16f3356-3e9e-4ea5-bbdc-023e104c3c62",
        "cursor": {
          "ref": "a65f6240-25c9-4b2a-957d-ea868fe96ea3",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7a74ca62-94ac-46fe-be1f-8c6b8fdabe5f"
        },
        "item": {
          "id": "c16f3356-3e9e-4ea5-bbdc-023e104c3c62",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "80b0ebe9-fcf9-43ee-a358-69b513cb378d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a203dcb-d9b0-4d4f-b639-569e12360759",
        "cursor": {
          "ref": "661e6234-3ddf-4ce0-af3d-033103837985",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6d4f1487-66f3-4238-8e84-304508a3e471"
        },
        "item": {
          "id": "0a203dcb-d9b0-4d4f-b639-569e12360759",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d47054dd-1401-4aef-8609-bf60e62dab18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b85fc12-a39e-49dc-825d-b3f6f44ae50c",
        "cursor": {
          "ref": "6ef01c2e-ee80-456e-b0c6-7d039f44e812",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3a7b925-5bd6-447c-90bf-22737e67b39d"
        },
        "item": {
          "id": "2b85fc12-a39e-49dc-825d-b3f6f44ae50c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4138034b-327a-4507-8167-27375eb2d412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82451fbc-0bcd-4415-9173-3255b9d4ff23",
        "cursor": {
          "ref": "205693d8-f774-4277-93bb-ab85ddeb2cdb",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b5db50a1-4c4a-4bbf-b8ad-f59bbf240ee9"
        },
        "item": {
          "id": "82451fbc-0bcd-4415-9173-3255b9d4ff23",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "03bf56a1-472c-4ba1-9d7f-e33162c02c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c73322d-54f1-49e1-b21e-57e60e0c1d16",
        "cursor": {
          "ref": "d5c9b234-0c11-4839-8909-d67ee7041e8e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f905576-c816-48b6-8edf-22da51447386"
        },
        "item": {
          "id": "5c73322d-54f1-49e1-b21e-57e60e0c1d16",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "fecb03a6-f1aa-48d5-a50c-d9673c2847d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254e3e73-78c7-4a9f-9143-b144d956baa1",
        "cursor": {
          "ref": "e51971e6-bcf7-4c5e-ba3b-7209215651f3",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "307c97da-293c-4982-afdb-a78f17661264"
        },
        "item": {
          "id": "254e3e73-78c7-4a9f-9143-b144d956baa1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "19e7da4c-8470-4148-b5e1-9467db8e35ee",
          "status": "Created",
          "code": 201,
          "responseTime": 782,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "58d0eac2-d48c-4c6d-9329-66c19d8d6e93",
        "cursor": {
          "ref": "1ff7b717-2432-48ae-b6c7-609398698bba",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cceb71ac-b20b-4fba-bcdc-0d73fe58d601"
        },
        "item": {
          "id": "58d0eac2-d48c-4c6d-9329-66c19d8d6e93",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4891c10a-46b6-429c-9139-46ee0194b031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f50125-5701-47b4-8c1b-f1eb164a4b7c",
        "cursor": {
          "ref": "8a3cb8ce-c47d-4652-b79a-5cb52f0e7a89",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "adfef31e-ddec-419a-8352-8b437dd8df5b"
        },
        "item": {
          "id": "b9f50125-5701-47b4-8c1b-f1eb164a4b7c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d58e8fc1-f70c-4a5e-adf8-feef6d365082",
          "status": "Created",
          "code": 201,
          "responseTime": 7210,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a0a41161-ceb7-4cf0-a3b3-d094b782dc03",
        "cursor": {
          "ref": "ec2576cf-33d0-4743-94d0-9661bc717542",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4e7578af-6e8b-46d9-84c7-de9b28510d0f"
        },
        "item": {
          "id": "a0a41161-ceb7-4cf0-a3b3-d094b782dc03",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b56e2cab-c1e0-4cd8-b256-658445c84665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc2abfd-3cfc-4152-b186-d145e2c2ea5d",
        "cursor": {
          "ref": "f87b20cc-2e9d-4e1f-b833-774a508704f8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ddcaf95-477d-4047-9c74-7f82afe5f144"
        },
        "item": {
          "id": "7cc2abfd-3cfc-4152-b186-d145e2c2ea5d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "984023ce-5b06-49fb-8d88-c4994ad5b83a",
          "status": "Created",
          "code": 201,
          "responseTime": 3371,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "fa35df23-0a55-4121-8c15-ee799f029e94",
        "cursor": {
          "ref": "8bae5ab0-5c14-4105-b891-d2d5e20ce75a",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1c4c41d7-8685-4e1d-a697-689b76751b39"
        },
        "item": {
          "id": "fa35df23-0a55-4121-8c15-ee799f029e94",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "82486b38-4f33-49af-b52c-9f35c79ad09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a355c7b8-919a-4465-bc5f-261148314f68",
        "cursor": {
          "ref": "214ba406-4d2d-4788-b7a9-f66b7511c930",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b5612abe-e2f8-4026-8f5f-dc3d0e7537db"
        },
        "item": {
          "id": "a355c7b8-919a-4465-bc5f-261148314f68",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5aecbd8f-b155-48d7-9beb-052dfdfc1519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66002c6-c88a-4c78-974f-0032bc4e562b",
        "cursor": {
          "ref": "b4390109-4867-4c2e-b8a2-a6a73527fa66",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "411da1eb-402f-4a8c-9db9-42108ac11855"
        },
        "item": {
          "id": "c66002c6-c88a-4c78-974f-0032bc4e562b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e3a472ad-5f02-469d-a979-bc4e42cfc096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068a89d8-f839-4f83-9526-824cf183537b",
        "cursor": {
          "ref": "715f9763-c409-47d9-8d60-b3cb07fe23ec",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "36a4788a-9bf0-4e7e-8186-09210ec35ab3"
        },
        "item": {
          "id": "068a89d8-f839-4f83-9526-824cf183537b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cb7e3942-a3bf-45d6-ba60-1baabbcf2c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5978b1da-9eea-4e23-ac2d-80dd9fa02f22",
        "cursor": {
          "ref": "42fa0d43-32bd-405b-9cb4-ccc63e903184",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a6a359e7-3ffd-4a69-9910-e5bc753f1220"
        },
        "item": {
          "id": "5978b1da-9eea-4e23-ac2d-80dd9fa02f22",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bdb80b88-4251-407f-9e25-6013fa4ef65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf5d684-a56f-4650-ad92-07caea18a2e7",
        "cursor": {
          "ref": "6ccb8458-f6d7-4b9c-a8b9-5b8944f6dd80",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e87940cc-4bb2-4e6b-849e-570b0cdd4d6d"
        },
        "item": {
          "id": "2cf5d684-a56f-4650-ad92-07caea18a2e7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "94e5d081-1c25-423c-ad9d-e80d34dc1a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49ea1a0-a00f-4f73-8627-e55ca1112657",
        "cursor": {
          "ref": "1c2cfd81-c918-479a-a40f-1b99ccab0df7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "31b3f423-2a8e-4c32-a71c-79972714175b"
        },
        "item": {
          "id": "c49ea1a0-a00f-4f73-8627-e55ca1112657",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c708036f-1a31-432a-9c04-2ef0fe76ebbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc60f7d-fc61-4196-8d5b-092ffcbeb192",
        "cursor": {
          "ref": "e10c763c-75f3-4b01-afe9-93785b8880f8",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0b0b7f35-cd64-43f1-9a89-7b56709db231"
        },
        "item": {
          "id": "1fc60f7d-fc61-4196-8d5b-092ffcbeb192",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "80a2e904-a552-4e60-88a6-09ea8cd3feb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b93b37-c776-481b-ab00-08ce391ae04a",
        "cursor": {
          "ref": "de31c3bc-89fc-40fb-9373-63fe5f3e254a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fd8eabf0-13a1-4cae-bf94-4b5332e87203"
        },
        "item": {
          "id": "22b93b37-c776-481b-ab00-08ce391ae04a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6a7434f4-bb21-4bc4-b5b1-3060315aca4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a934e81-32ff-421a-9343-ba41fea9ad12",
        "cursor": {
          "ref": "8d9f0424-f7d9-4fa9-9936-a966ab08d538",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fcd4760c-9e61-4890-b224-6688f9beae4c"
        },
        "item": {
          "id": "3a934e81-32ff-421a-9343-ba41fea9ad12",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b4ab1391-ae53-45a1-9d5a-381a7e347de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab054a4-fe2d-4106-be3d-17a2f7dab797",
        "cursor": {
          "ref": "0bb37b2c-c04f-466d-b273-3b9d004655b5",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "beacadf6-1e1e-4f6e-af1e-9b06d2c539a7"
        },
        "item": {
          "id": "5ab054a4-fe2d-4106-be3d-17a2f7dab797",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "909b6697-9fe9-4b1d-82da-a24d9fd668e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f40c92-83d1-4767-82ec-cd6d91c80476",
        "cursor": {
          "ref": "6b6d11ca-958e-4b55-a5d9-95b0e1602c6b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f45add7d-c701-49dd-870d-07bbfce1e7b2"
        },
        "item": {
          "id": "14f40c92-83d1-4767-82ec-cd6d91c80476",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "63c13be3-8c0c-4538-a0d1-33087c8ffdd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714da05a-ceea-4573-a707-78c49d34e67b",
        "cursor": {
          "ref": "b492da78-da90-4cdd-877c-b28f815c33f9",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "523aada8-59ca-4ab7-ac34-0982efae10e8"
        },
        "item": {
          "id": "714da05a-ceea-4573-a707-78c49d34e67b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c3f75b88-4bf7-46bb-b630-aa0695cf094f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1634c5-e3dd-46be-97db-10c67e74ae54",
        "cursor": {
          "ref": "d542e57a-b3cb-4fae-bd2f-4f3318416092",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "462f4d46-1abb-4539-9e30-cab7ecbd6b99"
        },
        "item": {
          "id": "dd1634c5-e3dd-46be-97db-10c67e74ae54",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b7231789-0404-465d-b37f-947c3a0327a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352e844f-464b-4bf6-b0e6-8ab746662ba3",
        "cursor": {
          "ref": "5ca8ecb9-ed74-451d-a1f1-6ea0839ea8ad",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1ad63b5b-7981-4aaa-915f-3e8af3a5f9b8"
        },
        "item": {
          "id": "352e844f-464b-4bf6-b0e6-8ab746662ba3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a0b3a058-684b-4288-94b1-6204cbb1c918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b28c30-c701-4c18-8b0f-fc65ff0ae276",
        "cursor": {
          "ref": "c7196b07-ecf8-42dd-ac33-e5fff3411afa",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "043b4631-1987-4935-a256-e8b4bbc80402"
        },
        "item": {
          "id": "91b28c30-c701-4c18-8b0f-fc65ff0ae276",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8b788842-a265-4d18-af9a-a4b0091bf8a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b205c759-678b-4a6e-b538-1054f96b6a18",
        "cursor": {
          "ref": "21185bcd-4571-48f3-b568-a9d3f14de970",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eb665924-b101-4bea-81f9-ba198ad21a8a"
        },
        "item": {
          "id": "b205c759-678b-4a6e-b538-1054f96b6a18",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b6dac25d-6e99-4ad2-9723-2362ae0ccc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490f188c-631c-404c-8194-53bb700cb975",
        "cursor": {
          "ref": "09ee15d1-3ea9-4d45-8aa7-af1cf161e9b4",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3ace533c-9226-4437-bff8-7a6b756f9304"
        },
        "item": {
          "id": "490f188c-631c-404c-8194-53bb700cb975",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "005ab454-94e8-4878-b325-73043644c270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a633a77-adf0-428c-9460-1041937c39b1",
        "cursor": {
          "ref": "25dc5672-f471-4244-9664-f04304ff32da",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d458063f-12a7-4fe7-9878-9749bfc9c03b"
        },
        "item": {
          "id": "1a633a77-adf0-428c-9460-1041937c39b1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ceba1218-643a-4044-b0c6-b0f97dc17bf7",
          "status": "Created",
          "code": 201,
          "responseTime": 1982,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "24210c33-4657-4655-98bb-c4ab4fb85d9a",
        "cursor": {
          "ref": "96611a23-31f0-4cf9-a9ca-46edb2ea6786",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c36eef11-568c-44ce-9dad-9d6daf34134f"
        },
        "item": {
          "id": "24210c33-4657-4655-98bb-c4ab4fb85d9a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "97bdd6a7-12b7-464f-a22f-3dd847106cd3",
          "status": "Created",
          "code": 201,
          "responseTime": 2528,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d6b8838e-c24b-4c89-8b59-8ea07284694b",
        "cursor": {
          "ref": "db2eae67-b82e-4658-8ff4-1be50e653599",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d36e8444-e02a-4aea-8b24-48284fa1c315"
        },
        "item": {
          "id": "d6b8838e-c24b-4c89-8b59-8ea07284694b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f88c9e74-e47b-48a2-a4a3-e85da90848a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f48d5b5-45ae-4666-b9c4-d651deb4d918",
        "cursor": {
          "ref": "65c7d3eb-d1b1-4dea-a47e-b9359fcda2bd",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0f2c70a9-7d49-4b9d-9304-708c9e67ddf4"
        },
        "item": {
          "id": "6f48d5b5-45ae-4666-b9c4-d651deb4d918",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cb43fb3d-ad42-4a87-9320-44766dcea2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b41a1d1-e6de-4bc2-8407-19d448335851",
        "cursor": {
          "ref": "b74894ca-dca8-4fac-b2a5-dc800b891da3",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bede8a49-f324-4a7f-8972-fcde65dcf1e4"
        },
        "item": {
          "id": "4b41a1d1-e6de-4bc2-8407-19d448335851",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "11d4cdd8-dac4-46c6-8bd4-451a40e588ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3ada46-4a08-4775-8f04-a16f7552cede",
        "cursor": {
          "ref": "2cbb7e74-01fe-4e6f-884f-57b5be4e2ac4",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d45789d-f021-4b48-af69-6e8a208c1b44"
        },
        "item": {
          "id": "ab3ada46-4a08-4775-8f04-a16f7552cede",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9b26546b-e411-4ea9-a921-17c9fd3f048b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662e7003-c2d8-4182-af1c-042b4c341797",
        "cursor": {
          "ref": "9ca25f19-d2b7-4d6d-bc6d-1928c53a3094",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f9b59e46-1e71-4b4c-ad97-6dbdcdd97fd7"
        },
        "item": {
          "id": "662e7003-c2d8-4182-af1c-042b4c341797",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a145c788-185c-4a01-b6b0-55125f725fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd53cef-0456-4943-96d2-a1998a5e7f17",
        "cursor": {
          "ref": "6fc9f706-4ee2-4165-a983-dd0443ffb1ad",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8c0df6fe-c4f6-4c57-bc1d-db7923bb0dac"
        },
        "item": {
          "id": "3fd53cef-0456-4943-96d2-a1998a5e7f17",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "edd567c7-4ffd-4f46-a98b-c70ff58aa562",
          "status": "Created",
          "code": 201,
          "responseTime": 2939,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cf5e46f5-3fc9-40c2-bed9-a6122ea1a885",
        "cursor": {
          "ref": "ec7b52af-fed9-41d6-9254-eb565299afb6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1ce7c5a6-2465-4346-931b-4933c35da140"
        },
        "item": {
          "id": "cf5e46f5-3fc9-40c2-bed9-a6122ea1a885",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "226d78b3-a63b-4d3d-86a8-f624079d08c1",
          "status": "Created",
          "code": 201,
          "responseTime": 3547,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "936316ea-9c19-432d-9f20-26071f6059af",
        "cursor": {
          "ref": "55dc33b9-a9a5-493e-aa37-c27658d66ec0",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ac88160a-d26b-4ee6-b1d9-71dceeb429d0"
        },
        "item": {
          "id": "936316ea-9c19-432d-9f20-26071f6059af",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f5ba3479-ee9d-40a7-820b-954a1d63710f",
          "status": "Created",
          "code": 201,
          "responseTime": 2335,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "50658a33-f6e3-417a-9bf0-958b3e785424",
        "cursor": {
          "ref": "0174a09f-1116-4ba0-819b-aafee978e5ca",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "050ed07d-dce3-43e3-afde-cc924031e2fc"
        },
        "item": {
          "id": "50658a33-f6e3-417a-9bf0-958b3e785424",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d5b7c3a8-e68d-49a5-a178-f2285a141df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e3a8b1-fad2-4a2d-9b94-66e7b2936970",
        "cursor": {
          "ref": "d14a8452-49d6-4068-85d1-e46f7105c13f",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "51a16c8e-74ed-4899-82ba-2445bcfaad0d"
        },
        "item": {
          "id": "e1e3a8b1-fad2-4a2d-9b94-66e7b2936970",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "14c35634-2dc8-4e18-bf73-33894065f5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4baf93-b415-464a-80eb-280a8b992d76",
        "cursor": {
          "ref": "f9d787e7-cb70-4488-a435-9bd2c437cad1",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5719c4ff-64af-4e89-807f-cd11eae50736"
        },
        "item": {
          "id": "5d4baf93-b415-464a-80eb-280a8b992d76",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "6b1c4e43-f374-4adb-bf6f-3d354504b7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6310f4ec-b07d-4638-a6b0-30216b669b9f",
        "cursor": {
          "ref": "65df95e6-26a2-45a3-b802-a9353195a44a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3b23f44c-ba0f-488e-ae02-dc5420711432"
        },
        "item": {
          "id": "6310f4ec-b07d-4638-a6b0-30216b669b9f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f525e4ee-605a-4302-a43b-a629189f9a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e440204-9c75-4eec-81ad-bdfe4c843ed3",
        "cursor": {
          "ref": "8a0e3d28-390e-440d-987d-85160b5b8ff2",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "89b5c728-3b24-4489-a848-f60a389e587c"
        },
        "item": {
          "id": "2e440204-9c75-4eec-81ad-bdfe4c843ed3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "00f554ca-face-4cac-b059-76ac111df109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac01865-43d7-4fcb-9bcf-162961bdb084",
        "cursor": {
          "ref": "bde85d9d-d9f3-42b1-b62d-e2d7407394ab",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "16f27c32-5446-4de7-9bb1-34ba8900c7d3"
        },
        "item": {
          "id": "6ac01865-43d7-4fcb-9bcf-162961bdb084",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb7a8aca-8866-4e6e-8aa5-28f9441f56a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfb1a5b-04b7-4dad-a7fb-6313d415be81",
        "cursor": {
          "ref": "17a3f115-3b58-421e-ae0d-2c107d81098d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fb2fdd86-a14a-45f3-9ff3-ccd12c7938a5"
        },
        "item": {
          "id": "edfb1a5b-04b7-4dad-a7fb-6313d415be81",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0b0714f7-e050-493c-893c-1b6d210c2c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9575821-258f-42ba-b01b-db197587f808",
        "cursor": {
          "ref": "9d625e76-d8ed-4a9e-9249-428b9a155cd3",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "845402ca-88f7-42d9-bd77-0eea7025fb80"
        },
        "item": {
          "id": "d9575821-258f-42ba-b01b-db197587f808",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f18ac73f-ce26-4b2d-b396-a1d26af331de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997a80be-4082-4f14-9a1e-08f4e749e681",
        "cursor": {
          "ref": "2b8b68c6-41d2-4ef3-b2bb-29955d251be2",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cf7df894-da1b-490a-bfa6-3430e991fc4d"
        },
        "item": {
          "id": "997a80be-4082-4f14-9a1e-08f4e749e681",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ec7a8837-a7ef-4103-95f9-d7a9832662dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcda6550-56cf-464a-a0af-602f6362d22d",
        "cursor": {
          "ref": "cab33294-37b0-4172-8a78-4be9a7778700",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a7c4591-b4e5-4de2-9772-f209beedce5f"
        },
        "item": {
          "id": "dcda6550-56cf-464a-a0af-602f6362d22d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a80942c5-f915-4a92-ae5a-70940ce0316a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1b86a7-c8d2-436e-ba71-8b13ecac5fd9",
        "cursor": {
          "ref": "6a876674-6da7-4556-afe3-e5adea9172f1",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "43522ed3-6d6e-4771-9f5e-456db96f7b6d"
        },
        "item": {
          "id": "ec1b86a7-c8d2-436e-ba71-8b13ecac5fd9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "444b9916-6a1d-4c81-8fd6-6d45d84c9479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57310a07-a493-47ad-a597-c774f2861c49",
        "cursor": {
          "ref": "278862a9-8341-4f00-b86d-baefb62ed646",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a2e42cc6-10ec-4b72-a93f-2a0d78c02596"
        },
        "item": {
          "id": "57310a07-a493-47ad-a597-c774f2861c49",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f6d49f6e-4234-44d5-adf3-5d848f2a0ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e479d148-424b-4516-9c26-36601c7f9dee",
        "cursor": {
          "ref": "fde96d44-638d-408a-9b67-7754ddcc926c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4b5e4bf7-a5e9-4ee9-90d6-26610703b9cc"
        },
        "item": {
          "id": "e479d148-424b-4516-9c26-36601c7f9dee",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "63a28cf5-2367-46fa-8f0a-a769f0ce2000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba98b2d-9f28-4bf8-97fe-4fecaee71235",
        "cursor": {
          "ref": "355cef3d-f6ba-49bd-bb01-9f6310740e4d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bef59d68-eb5c-4640-8079-20eb0d182850"
        },
        "item": {
          "id": "bba98b2d-9f28-4bf8-97fe-4fecaee71235",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "246b900e-e158-4e62-8759-526a2f74959f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9b36ce-090d-488b-adb1-1021a62f0bce",
        "cursor": {
          "ref": "adbd5ffe-e09a-444a-90fd-4d9386163bf4",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "212c54c5-813a-498f-b7af-9e086e77acdb"
        },
        "item": {
          "id": "ac9b36ce-090d-488b-adb1-1021a62f0bce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bfa6a4e8-84a8-4eb2-9780-b48aa9d507c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c25b6e-5116-4793-83ec-94710170976c",
        "cursor": {
          "ref": "542e12ca-a95c-4a09-a0f0-446a0ddcb7a2",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "acd46722-e655-4879-8eee-98dbbded5756"
        },
        "item": {
          "id": "85c25b6e-5116-4793-83ec-94710170976c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ab117f9a-ea16-498b-b309-dcef7449a5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a829b55d-845b-47c4-9d00-019027e8f8bb",
        "cursor": {
          "ref": "68a49572-c4fa-4911-aa97-9ff6e2857ddb",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5f2d9d22-c1cd-4101-af8a-937180a68ca6"
        },
        "item": {
          "id": "a829b55d-845b-47c4-9d00-019027e8f8bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "38442829-c162-444a-ae41-e1a81818312f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1ce8c3-fbf9-4f08-8fc5-eaf3bb78851d",
        "cursor": {
          "ref": "611347e6-ec47-459f-9865-3e2111161495",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8580e7ba-4114-49f6-bd80-feb646452ea0"
        },
        "item": {
          "id": "fa1ce8c3-fbf9-4f08-8fc5-eaf3bb78851d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "83012ebc-4989-4835-a445-47c3d738bfc9",
          "status": "Created",
          "code": 201,
          "responseTime": 1990,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c33c8069-c0a7-497c-919c-0c50a216c172",
        "cursor": {
          "ref": "79434b16-fdce-4048-a720-fa0937a28ac9",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "846c44d6-eba8-47bc-9fae-1e8fa06fbb3b"
        },
        "item": {
          "id": "c33c8069-c0a7-497c-919c-0c50a216c172",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "98ee24d9-dfd1-4fb4-880e-8abf23bfce3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83428a48-ac8c-40c0-addb-44254c343b13",
        "cursor": {
          "ref": "98fb094a-e5b9-4920-a01d-aaa63d1ed06a",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "05dbc676-2d3b-4c85-a6b3-627fe51a98e4"
        },
        "item": {
          "id": "83428a48-ac8c-40c0-addb-44254c343b13",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "517481e7-7d8d-406a-b09e-878ccad4d5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1816757c-a100-41fa-9c88-f0f5e3b9e5ac",
        "cursor": {
          "ref": "712825c4-2214-40c8-9598-abc1cb45ae62",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5ae77d14-8995-4c8e-90d0-e2caee14b9de"
        },
        "item": {
          "id": "1816757c-a100-41fa-9c88-f0f5e3b9e5ac",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cfc34926-c0ff-4396-82cb-56e9f6a23368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6652f769-ef6a-4c64-8fd4-709ee1452d4b",
        "cursor": {
          "ref": "10f04c2c-fe14-4a8a-9af4-74e0a6013f60",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "537626e0-d420-466e-a0dd-5210751f03da"
        },
        "item": {
          "id": "6652f769-ef6a-4c64-8fd4-709ee1452d4b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c60830f4-9343-4495-93ce-aa63b960b241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23f72c2-0a57-4b45-b522-e2fc2c7341cc",
        "cursor": {
          "ref": "713a34a6-23b3-44af-b09f-b251035c652e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7f35e7d0-022c-4c94-8952-32ad544844b9"
        },
        "item": {
          "id": "a23f72c2-0a57-4b45-b522-e2fc2c7341cc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4948f32d-37cd-4e81-99c1-cf307ba77508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6ae41b-7cf3-4c82-883c-201fcbe3a1db",
        "cursor": {
          "ref": "729cd7fa-e355-465e-9bd8-6a4205228862",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d3b7965d-ebe4-4a1f-806e-eeb203acd973"
        },
        "item": {
          "id": "2a6ae41b-7cf3-4c82-883c-201fcbe3a1db",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e5d2fd98-36ee-4c18-a9c8-3417cd9536c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b3fc49-615e-47a1-9fc0-4c29cc79fe35",
        "cursor": {
          "ref": "aea412cb-417e-4776-8920-855cf6c18e56",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "48955e3b-d145-44fc-8226-db133653a68d"
        },
        "item": {
          "id": "d0b3fc49-615e-47a1-9fc0-4c29cc79fe35",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7c896ad2-e8ae-461a-99f8-3a17513d3a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd8eb86-27fa-42bc-944a-88479f0ba802",
        "cursor": {
          "ref": "cc43b81c-7fac-465a-aba5-468502a32cf4",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b9f481d0-face-4c82-8c25-f888315b976d"
        },
        "item": {
          "id": "0fd8eb86-27fa-42bc-944a-88479f0ba802",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "e62328aa-6a20-4f8c-b1f0-1f5fb3ccbfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b75b2c-dfbc-4732-af46-05648b16d3a7",
        "cursor": {
          "ref": "86ad943a-44ae-439c-9344-1969b22dcab6",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "09cdbe4a-e74a-4eec-bcae-664e857387a6"
        },
        "item": {
          "id": "47b75b2c-dfbc-4732-af46-05648b16d3a7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "67828630-8ba2-4f25-a1a3-97087b960b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398c36ac-2a4f-4e49-9cc1-cba2b65252de",
        "cursor": {
          "ref": "1e2a35b8-df34-4ad1-98e6-97a9cd65fb16",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "88c203f9-8c74-406d-afef-e9d6657df39a"
        },
        "item": {
          "id": "398c36ac-2a4f-4e49-9cc1-cba2b65252de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9c7f9569-b458-4b9d-ba0d-94cc2cf20d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d1d864-70bf-4963-a7c2-31416b462131",
        "cursor": {
          "ref": "618e4c3a-22e4-42ea-acf1-010ed50f457f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2d1074ac-204f-4dc5-9a43-cfbb4348c26e"
        },
        "item": {
          "id": "78d1d864-70bf-4963-a7c2-31416b462131",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e09a02e9-41d4-474b-942f-fd7672053dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54770dd2-fa29-42dd-891c-c1167fd5f20f",
        "cursor": {
          "ref": "fdde15a1-0ced-49e5-a8e3-970dfbd6f9a9",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "df28abcc-0538-466d-bb6c-e5c397cb2547"
        },
        "item": {
          "id": "54770dd2-fa29-42dd-891c-c1167fd5f20f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a5255b24-53e3-4600-82ae-60b5533e7180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e09f90-75ea-45c2-9a77-87e7bf929f7a",
        "cursor": {
          "ref": "67be84b4-136a-4811-9f4f-c47e0bd0354b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0c315fa-44b8-4c7e-b817-5a3fdfd8f47b"
        },
        "item": {
          "id": "e5e09f90-75ea-45c2-9a77-87e7bf929f7a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "be6df845-34df-4612-b6f0-c7d6aefb6b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c8bf2b-f970-4133-b699-77d7977ad726",
        "cursor": {
          "ref": "578669b5-b6a1-485b-994e-7ee4a61efc3a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0d0212ab-e8ff-48db-8fbe-31f2d32fd830"
        },
        "item": {
          "id": "b4c8bf2b-f970-4133-b699-77d7977ad726",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4a453477-2718-4911-af60-0e70f5356cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792b455d-fa1e-4ab0-9726-13f8e55ac5ed",
        "cursor": {
          "ref": "0f3d30ee-41e2-4bb1-b9b8-77200c1281c1",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d1b688d3-8a3e-4aa1-9b47-cf33312e701a"
        },
        "item": {
          "id": "792b455d-fa1e-4ab0-9726-13f8e55ac5ed",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "966452a2-0462-4750-a316-0139272e9f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47acc1ef-9c5c-4aa9-a6ac-a7319c4562d8",
        "cursor": {
          "ref": "176ed460-47dc-4de5-93b7-0e6c3e146922",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4ea7e6e8-854a-4dd8-a73f-89d2da3400ed"
        },
        "item": {
          "id": "47acc1ef-9c5c-4aa9-a6ac-a7319c4562d8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a790eaad-9e39-4b14-9eec-80da31df61ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3911d107-0046-4824-9487-56e0b956ddfe",
        "cursor": {
          "ref": "241956dd-fcab-4b01-9d20-b4765ed707d6",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c7fca813-d5e6-459b-818d-e78fd32a44ca"
        },
        "item": {
          "id": "3911d107-0046-4824-9487-56e0b956ddfe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "24702810-8de1-4e3d-80e5-0dd8a5ab6e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab660cc-9024-4429-b1c6-62bc30a2d43b",
        "cursor": {
          "ref": "e961e197-0e4c-41be-afb3-0a750ed7f7d4",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b8d3452a-92da-423b-aa5d-ccff635c27d8"
        },
        "item": {
          "id": "7ab660cc-9024-4429-b1c6-62bc30a2d43b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8ad85c7c-faa0-4ca7-88a2-0cabbcbc95f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20832370-f12c-4e91-99cd-bf925cca7794",
        "cursor": {
          "ref": "c4828cb4-ee5b-4b73-8b66-d3031b08d30b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "44ef71cf-65cc-4bdf-bd3c-6774f9b883e4"
        },
        "item": {
          "id": "20832370-f12c-4e91-99cd-bf925cca7794",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bea17c1f-5f9a-4d66-9f89-475395cca840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341ae736-1517-4c0c-8eed-0f1337d668ad",
        "cursor": {
          "ref": "6b0bda98-abf1-4393-a50d-034b16642558",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ca0062e6-9358-45d4-b59d-3492b1cb84cb"
        },
        "item": {
          "id": "341ae736-1517-4c0c-8eed-0f1337d668ad",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fcd21b66-f46f-49cf-82e9-39c590b71d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b152a1bf-66cf-458f-8fad-8a30028d5527",
        "cursor": {
          "ref": "2d61e85a-4dcd-4a7e-b87d-5ac6ed954fbe",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5be4d777-3d82-46cf-91f9-c0e582dcd371"
        },
        "item": {
          "id": "b152a1bf-66cf-458f-8fad-8a30028d5527",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "38bc1169-f952-485e-980d-c05a7a24ce11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ce44c8-6b59-4180-9d2f-ce8df3650caf",
        "cursor": {
          "ref": "94d99a3e-5a9d-4653-9344-ea8e7eaef2c8",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bec5383e-aa80-45a4-9837-855d22a1a567"
        },
        "item": {
          "id": "56ce44c8-6b59-4180-9d2f-ce8df3650caf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "921c12db-ea6c-4a4b-8fde-3db9d63d34f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6c4f91-128e-4dd6-a302-ae8bf2409353",
        "cursor": {
          "ref": "faaf2791-ce30-49e1-96ba-c6f28ee2d5dc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fdcc27f1-807e-469c-a6b2-96d6184d87fd"
        },
        "item": {
          "id": "fb6c4f91-128e-4dd6-a302-ae8bf2409353",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e98b4b43-4802-407c-91fd-d57e44317791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe60cce4-2638-4fa0-aabc-5202b4d46b9c",
        "cursor": {
          "ref": "47e055e4-e207-49ff-abf1-1478c21f5a4e",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f9ad8d63-021b-4f55-a6f6-ec431696dc90"
        },
        "item": {
          "id": "fe60cce4-2638-4fa0-aabc-5202b4d46b9c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "57da2372-e1f4-476e-ad7d-2503835b9b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c31db2-5e83-465b-8d1e-f84a3b489930",
        "cursor": {
          "ref": "800340ad-a65d-4a6b-9099-589762b7daf8",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4f807782-bd65-4cc7-92cb-e2143b607a0d"
        },
        "item": {
          "id": "a7c31db2-5e83-465b-8d1e-f84a3b489930",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "df160f1a-64e3-42d8-b82c-81329d62e727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899076c6-34a4-4a75-b631-7b213f83bb18",
        "cursor": {
          "ref": "a165e400-4fcd-48fa-9048-771e59cca25c",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6c4f786b-1b10-47e7-95ab-da97f6da0838"
        },
        "item": {
          "id": "899076c6-34a4-4a75-b631-7b213f83bb18",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "20aa018b-447a-4dbc-9f49-4775c42b95a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab365de-84e2-4e8f-b215-9267b53ff2dd",
        "cursor": {
          "ref": "ff0c69c9-8d99-4412-ba84-32d6d35e0a2b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "591b424f-b996-4182-aaa1-013cbc678e9f"
        },
        "item": {
          "id": "4ab365de-84e2-4e8f-b215-9267b53ff2dd",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "20e18e92-bdde-4a86-a9e5-ea81772f2f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa8b309-2878-4e09-8385-cf792d3440c4",
        "cursor": {
          "ref": "93e54551-ee34-48de-b567-22d409a8bee0",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "84e6db3b-91a7-4470-b36f-91b794dcc0dc"
        },
        "item": {
          "id": "0fa8b309-2878-4e09-8385-cf792d3440c4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4df35ca2-9a3c-4a7c-b453-a5d957d9b74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1e78c3-bd2a-4d8c-b78a-a12b7eff12f4",
        "cursor": {
          "ref": "f84be349-aed1-488e-84d9-a7440e20a276",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4c75b4a0-e629-457f-af79-0f0ea7aad5d6"
        },
        "item": {
          "id": "3b1e78c3-bd2a-4d8c-b78a-a12b7eff12f4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f1751ed6-24ff-416b-ac72-537b2bd86f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ab4756-a380-42ef-a858-51175f9dea70",
        "cursor": {
          "ref": "8077676d-0c82-4c15-929c-1af54c424e6e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "41d134ed-fb81-4037-9916-70581e3bb0a5"
        },
        "item": {
          "id": "c9ab4756-a380-42ef-a858-51175f9dea70",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "93f2c85d-586c-4cf9-8594-6ed7bd798b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d828fe9e-e979-40d3-89cf-da765e6650da",
        "cursor": {
          "ref": "1bbec432-a381-454d-914d-3afe540879af",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ede399ec-bc69-44f5-96c8-3ab11793a6d0"
        },
        "item": {
          "id": "d828fe9e-e979-40d3-89cf-da765e6650da",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "604b99d1-371b-450b-a036-bceff5d91416",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "1dc23276-fad9-4165-bd98-4774a592016f",
        "cursor": {
          "ref": "45878f96-9f7f-493c-8ea9-ecb8d015b7a4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2f799771-e74e-444c-b024-0120f3f362ea"
        },
        "item": {
          "id": "1dc23276-fad9-4165-bd98-4774a592016f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a6cd26a1-9a9c-4f31-bbfa-8b1b411b34c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1924,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "94a206a5-ecf3-43e3-9e8a-d88e6020e1de",
        "cursor": {
          "ref": "e667dc48-a657-4d92-a8d7-ecd78956009e",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c72c426e-2a5d-468d-ab3e-40c5b3c439c4"
        },
        "item": {
          "id": "94a206a5-ecf3-43e3-9e8a-d88e6020e1de",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4a269778-d0a3-43c5-aeb5-b996a39b53af",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf19fe91-fca8-4428-9364-1bb0ceb90f4c",
        "cursor": {
          "ref": "656cc662-246e-4e50-8f0d-72ae976f1462",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "49814901-ecd2-4317-bccf-8bcb82dc8840"
        },
        "item": {
          "id": "bf19fe91-fca8-4428-9364-1bb0ceb90f4c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0d84af03-98f3-41f5-9e25-aa241e57e8f8",
          "status": "Created",
          "code": 201,
          "responseTime": 2343,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6f9abe-a7cc-4c4b-a300-88bf6fc8666d",
        "cursor": {
          "ref": "9b9d10ac-e62a-493d-8b3c-34dc35ba71a9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8b7146fe-5fc7-402f-9d13-9a7d55ceb04a"
        },
        "item": {
          "id": "9c6f9abe-a7cc-4c4b-a300-88bf6fc8666d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d96dd2da-dec9-4794-8502-cd6059445868",
          "status": "Created",
          "code": 201,
          "responseTime": 2229,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "243a551f-e0d7-46ca-a2ec-9dd5d321d841",
        "cursor": {
          "ref": "7ccf6aaf-73a4-43c7-8c78-90cf17dcd20a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "578cc304-a21d-44fa-baa4-d07697edc2f4"
        },
        "item": {
          "id": "243a551f-e0d7-46ca-a2ec-9dd5d321d841",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4169a28-ad95-40cc-82fb-6bd32b276163",
          "status": "Created",
          "code": 201,
          "responseTime": 6713,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-03T02:34:59Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-03T02:34:59Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "780d6056-609f-4794-a8e0-57e6c7071f14",
        "cursor": {
          "ref": "7d4e142a-f6ae-4b49-8904-9d01fcfa365d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "16275f68-5d42-44b6-b881-6e08e581fede"
        },
        "item": {
          "id": "780d6056-609f-4794-a8e0-57e6c7071f14",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "22f02af7-9c2a-4f73-bc63-a841e169e9bd",
          "status": "Created",
          "code": 201,
          "responseTime": 4258,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "693ce5c2-a6cb-40b3-b147-d7cc3ef6d0e6",
        "cursor": {
          "ref": "e31f7fad-5f0a-4972-86f1-4be549c97835",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7d15ff2e-974c-465f-88d9-4ee84d5e6049"
        },
        "item": {
          "id": "693ce5c2-a6cb-40b3-b147-d7cc3ef6d0e6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d75b6d5-eff6-4b20-90c2-478888060e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693ce5c2-a6cb-40b3-b147-d7cc3ef6d0e6",
        "cursor": {
          "ref": "e31f7fad-5f0a-4972-86f1-4be549c97835",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7d15ff2e-974c-465f-88d9-4ee84d5e6049"
        },
        "item": {
          "id": "693ce5c2-a6cb-40b3-b147-d7cc3ef6d0e6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7d75b6d5-eff6-4b20-90c2-478888060e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a057bd-5322-429c-8b71-e0232e7c0cac",
        "cursor": {
          "ref": "2a0adcf3-183c-43e8-b392-4422155fcbd9",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d3dc66cf-d312-4c5d-907d-a43ef5f58c90"
        },
        "item": {
          "id": "b9a057bd-5322-429c-8b71-e0232e7c0cac",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3a6c1a2c-66b5-4dfb-917a-514e166daee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b989aa-3f9c-4b38-a41b-d95b11b198df",
        "cursor": {
          "ref": "8cef7071-299b-4de4-9a3f-2d7b40f317ac",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3ee05263-b6fb-4f7a-84b6-cebd5f0d37d7"
        },
        "item": {
          "id": "55b989aa-3f9c-4b38-a41b-d95b11b198df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "69aa61e5-0173-42c8-927d-97717ea6fbbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 628,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6f3435-835c-425c-9cc4-02ae58b4b96c",
        "cursor": {
          "ref": "c0b96162-82aa-4ab3-9e09-8dec568312b3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ebd36cbf-1816-49d2-b04c-a115982ecb24"
        },
        "item": {
          "id": "2d6f3435-835c-425c-9cc4-02ae58b4b96c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4541285-cba1-47d7-9002-9bee7a7190c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f75fcf-0ac9-4092-94e5-46c6cc449bfe",
        "cursor": {
          "ref": "d547b3dd-036b-4b07-afc6-be515aac99b5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e796a447-79ec-40f7-864f-e59f93fa034e"
        },
        "item": {
          "id": "01f75fcf-0ac9-4092-94e5-46c6cc449bfe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "afe39c9d-600f-449e-8e1d-6f330b1107cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53ebbcf-4ffa-4b7c-8ce4-b69d08721bde",
        "cursor": {
          "ref": "36266d96-cc28-4c6f-a1c9-d64503696671",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a26e333-3a10-4c62-b52a-c1bc5afec2ba"
        },
        "item": {
          "id": "a53ebbcf-4ffa-4b7c-8ce4-b69d08721bde",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4ef4971b-d669-4c39-a148-f210e43121e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3053d1-a7bc-466e-ac61-9e67d8ef5c85",
        "cursor": {
          "ref": "6ad720b7-5dc6-45cb-956c-c3b1fba8847c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f4a44b21-584e-4743-aa77-6582fd138c9f"
        },
        "item": {
          "id": "8f3053d1-a7bc-466e-ac61-9e67d8ef5c85",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6fddb07a-0f2d-49f3-9327-7571de9981db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edabc709-4114-44a0-8fed-8681eef75ecf",
        "cursor": {
          "ref": "3f3dce01-0651-4b0a-82a4-44c2e7525497",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "76c2ad5b-eb88-4c8e-b0a2-85cad5a4c513"
        },
        "item": {
          "id": "edabc709-4114-44a0-8fed-8681eef75ecf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b477cfd0-4a34-4e31-a932-5f913ec37da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f13e45-bd11-4a12-adca-df81aca44553",
        "cursor": {
          "ref": "fe2e2d9e-a4e2-45e9-b882-4a5f8946399d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2cc7e624-5eaf-4f1b-b4ea-222662ec3e7b"
        },
        "item": {
          "id": "47f13e45-bd11-4a12-adca-df81aca44553",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4c4ac254-7451-4f36-9bc1-9d75125e55d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82297e63-9e1d-4feb-8fa0-6d956007f2d5",
        "cursor": {
          "ref": "7e40440c-6516-49aa-a11a-6f96e8822d71",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "344198af-52f8-4bce-bc06-442af74b2646"
        },
        "item": {
          "id": "82297e63-9e1d-4feb-8fa0-6d956007f2d5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "10b4f037-6bd4-457a-bd8d-db7d75f648fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f9ed97-e062-4286-a670-5ebb3655c2b6",
        "cursor": {
          "ref": "553b4594-c003-4bf6-8eec-46a741bf2508",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "461cfa37-19e4-42db-af8d-b7a5706e63de"
        },
        "item": {
          "id": "19f9ed97-e062-4286-a670-5ebb3655c2b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "68f09077-d0c4-4227-a1f7-3dc20918a8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa0fe0b-d6bf-4c84-bef3-e0276c49fd94",
        "cursor": {
          "ref": "0bd56f1b-9aeb-4dd5-81d2-71f159ca14ea",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "563ebf9b-d8fb-4de9-a955-b8fd3e902a01"
        },
        "item": {
          "id": "faa0fe0b-d6bf-4c84-bef3-e0276c49fd94",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "addf70c2-0a05-4b31-9c60-11f42f334e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810ca672-37f9-4ef5-995e-075d3443aa87",
        "cursor": {
          "ref": "fe30789b-226d-4634-83d1-0a13b4ba86b2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "361d6795-dc67-4271-a717-22342b194e35"
        },
        "item": {
          "id": "810ca672-37f9-4ef5-995e-075d3443aa87",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eddedf08-d814-4190-a874-a75f5a973654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d7e528-7ff6-4ac0-a30e-bbeaba4bc19c",
        "cursor": {
          "ref": "970eeecf-279a-4266-8423-a54166dcaedc",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0b4a9c82-92c3-444b-88cd-8dc6b3771fe2"
        },
        "item": {
          "id": "97d7e528-7ff6-4ac0-a30e-bbeaba4bc19c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fb6ab390-63a6-4683-b1da-10ffa71c1ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e0ee7a-b32a-4f6b-94c9-8d4aa1e7765a",
        "cursor": {
          "ref": "b4af93ce-c760-47da-baaa-8dcda04462e6",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5291c822-f99a-46ee-b5c2-4988cc63b0d3"
        },
        "item": {
          "id": "e4e0ee7a-b32a-4f6b-94c9-8d4aa1e7765a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9e09a3e9-6754-4152-8bac-ed2cdeb681c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af5c478-d477-4ea3-8c3e-7b7abd5f7428",
        "cursor": {
          "ref": "61d8d744-bfc1-4c11-bb63-10586b5dd636",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "59d52e7c-5a74-451d-99f5-a136f03556b1"
        },
        "item": {
          "id": "0af5c478-d477-4ea3-8c3e-7b7abd5f7428",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c25cd8fd-9c7f-49df-9707-9a3bdb85dfa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b651834-a526-4a1b-91cd-5a496562bda3",
        "cursor": {
          "ref": "88335fe1-689c-45f2-af1f-1fe00c16d445",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "269ec77a-2c5d-41c3-8e8c-0f4049690510"
        },
        "item": {
          "id": "3b651834-a526-4a1b-91cd-5a496562bda3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ebc8b6db-d680-4efa-ac41-86b51ff2eacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211d8865-f18f-4a90-8b25-8e628e79455b",
        "cursor": {
          "ref": "09f73f5c-94f3-4a96-959d-b68712c978e1",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c8fa88b7-09e1-4d64-8910-005ce15bea79"
        },
        "item": {
          "id": "211d8865-f18f-4a90-8b25-8e628e79455b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "406cfaf4-aedd-4e78-950d-eabf1226e0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1554a71-bb7c-40b0-a654-38e3b42f193b",
        "cursor": {
          "ref": "27ddf965-030a-493c-8b08-3a2cfbacfab8",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c1850535-78f4-4766-b86a-f6330ec96fd1"
        },
        "item": {
          "id": "c1554a71-bb7c-40b0-a654-38e3b42f193b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04225ac8-6302-4b56-8cd8-64c599788ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bf2ea8-16a3-4bd3-ad1e-1b04f0e352c6",
        "cursor": {
          "ref": "d6dcab4b-e261-4b3b-ba92-0f92c53e353e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e3959e8a-3b44-4acf-bdd9-35f3d8e53055"
        },
        "item": {
          "id": "30bf2ea8-16a3-4bd3-ad1e-1b04f0e352c6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f6d905d3-966b-4c92-9e24-9fdf7b627216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52102a01-c357-464b-85ac-8fded9e46e2a",
        "cursor": {
          "ref": "836127a1-0af7-48fe-ac7c-0fab1dd12593",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "05a95cbb-9894-4517-b3b0-bec44b79b738"
        },
        "item": {
          "id": "52102a01-c357-464b-85ac-8fded9e46e2a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2916c90f-de61-485a-a1cb-b2bf682fa99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86eaee5d-c16c-456e-9f71-4893ffc51f3a",
        "cursor": {
          "ref": "a71b728f-1658-4a2c-8f55-fb790095470c",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a43b251f-83ae-4bda-930a-5ad096754c4d"
        },
        "item": {
          "id": "86eaee5d-c16c-456e-9f71-4893ffc51f3a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "efdb8749-23a0-4ff9-b909-c26f411bca86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05dc76d5-13ca-41d3-9ce4-e38431da798c",
        "cursor": {
          "ref": "01c0f90a-b6f4-4904-88da-715c6976211d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "48e56f8a-0c53-4735-9a4f-e087c02f014c"
        },
        "item": {
          "id": "05dc76d5-13ca-41d3-9ce4-e38431da798c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "51887917-120a-4cd4-9403-79e045d9f55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d633d16-20a5-4b9a-8c8b-cb123d88a642",
        "cursor": {
          "ref": "e79203a7-417c-4c38-aa30-61e7e9fdc05d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ffd5d566-31ed-4b9a-86bd-acb25877903b"
        },
        "item": {
          "id": "1d633d16-20a5-4b9a-8c8b-cb123d88a642",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fb67a713-9e44-4342-8a68-9cbaddfd49c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d400a0-1c77-4923-915f-609968a0fff6",
        "cursor": {
          "ref": "2c152654-dc70-45f4-a0f2-6bd51ee0f834",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b1573434-14c4-4749-8777-3f0e7757421d"
        },
        "item": {
          "id": "d5d400a0-1c77-4923-915f-609968a0fff6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f7ba4b31-7a3a-4d36-afcf-21efbb114b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a49df93-122c-4761-b52f-d66f7b48251a",
        "cursor": {
          "ref": "886bb375-43d5-49bd-843e-f9c5b08c2862",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5a753a14-d2ad-40c6-a90a-466340361532"
        },
        "item": {
          "id": "0a49df93-122c-4761-b52f-d66f7b48251a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8a9d9bb6-75be-4141-8813-462980ab3904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe57f36b-5add-4b1b-86a4-7a350eddb2eb",
        "cursor": {
          "ref": "711279bc-b900-48db-9d65-fdaaf07117b7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7dab1ac5-75d6-4684-93bf-e385a3d82cc3"
        },
        "item": {
          "id": "fe57f36b-5add-4b1b-86a4-7a350eddb2eb",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a0c093c7-d544-42b0-a966-d44ccd1d3425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2a38ae-a93d-4dbf-abff-147750ef01b5",
        "cursor": {
          "ref": "609a801d-c818-416a-83ad-b8232b8d449d",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d676108b-e745-4d97-8fa2-aac883ceee00"
        },
        "item": {
          "id": "5b2a38ae-a93d-4dbf-abff-147750ef01b5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b32bb3ac-7779-4b64-b52d-dc831900f67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a3c5df-0712-440a-89e1-79e3a12538a8",
        "cursor": {
          "ref": "3b490445-77fc-4f79-a105-3c3a2aaf73ef",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d3aa85b6-bffd-4e21-adc6-c27c9f4292f4"
        },
        "item": {
          "id": "d4a3c5df-0712-440a-89e1-79e3a12538a8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "13dfbaf8-a029-496e-bf54-ac1b2eb9874f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763fa1ce-afe7-4a6e-afab-f29a7368544b",
        "cursor": {
          "ref": "c036243c-9cd7-4532-9d70-c075a1606046",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4d66e34c-734f-4c6f-9659-394883254ec7"
        },
        "item": {
          "id": "763fa1ce-afe7-4a6e-afab-f29a7368544b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8bb01fcb-976b-45bc-991f-fe5985f6252d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4fd9af-0460-4722-9d38-818908581203",
        "cursor": {
          "ref": "89a2b688-a948-4fb6-8b01-4278b2ab11b2",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b934d5d8-95b3-4bb9-b8b5-a1474e3f42b5"
        },
        "item": {
          "id": "ec4fd9af-0460-4722-9d38-818908581203",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "37f255d0-d363-4124-8759-2b96046c557f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c298420d-db9b-4f8a-9f02-ae20a257e9d1",
        "cursor": {
          "ref": "6ec834d5-ff43-42bf-a19e-d6eed14dd4e5",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "db90e08c-d818-4ff3-8132-e6e502da1a30"
        },
        "item": {
          "id": "c298420d-db9b-4f8a-9f02-ae20a257e9d1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7c4b23a0-ac87-445d-af74-a3ae012d1e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55ff591-7ba3-4a04-9c1c-7890236e83a6",
        "cursor": {
          "ref": "52085ce8-ff17-4b63-b641-1e65a7cb031f",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e6ac772e-59e8-469b-95ec-76faa45d7111"
        },
        "item": {
          "id": "c55ff591-7ba3-4a04-9c1c-7890236e83a6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "992ecc6d-d817-464e-8cf2-0b3e35da7f07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "521e0a62-4516-4258-a034-6b4d14252167",
        "cursor": {
          "ref": "e28c75b3-bc98-432e-89dc-eb78e9ca79ee",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f2277898-2fa7-4a9d-a847-621cb6785e88"
        },
        "item": {
          "id": "521e0a62-4516-4258-a034-6b4d14252167",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "571bac34-22f9-4cd1-bc63-a3e7f1b7c5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "04c8f095-23ac-4482-9f86-750cf2d2f94e",
        "cursor": {
          "ref": "97ea3f4d-68dc-42f0-bf12-176f863a0e75",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "86545e0f-478f-4727-b08d-ad1791ea276a"
        },
        "item": {
          "id": "04c8f095-23ac-4482-9f86-750cf2d2f94e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dc589f11-350d-49ce-a7e5-32265db1ffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c8f095-23ac-4482-9f86-750cf2d2f94e",
        "cursor": {
          "ref": "97ea3f4d-68dc-42f0-bf12-176f863a0e75",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "86545e0f-478f-4727-b08d-ad1791ea276a"
        },
        "item": {
          "id": "04c8f095-23ac-4482-9f86-750cf2d2f94e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "dc589f11-350d-49ce-a7e5-32265db1ffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3813e2d-7bc6-4b96-b866-5d353eff6386",
        "cursor": {
          "ref": "8987f0ec-66f9-494f-af20-44b007ac7e79",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebfd8c21-c56e-455f-9dd9-ce433e0673ed"
        },
        "item": {
          "id": "a3813e2d-7bc6-4b96-b866-5d353eff6386",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "13a5fd39-45c5-4413-aca2-73bec50676b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3925b66a-1285-48be-a78a-c0ec2a627c86",
        "cursor": {
          "ref": "4b5253ab-4c4c-4eba-8a1a-758a30411f57",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "07bb9edc-c942-4bf8-bdae-5e20429d5e88"
        },
        "item": {
          "id": "3925b66a-1285-48be-a78a-c0ec2a627c86",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0ce68bb8-cf52-4f25-bed2-ab4ab6d20452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164e8d1b-f75e-466a-b535-56544c91a98d",
        "cursor": {
          "ref": "d31a3876-12e2-4519-bc5c-c47f97014504",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9b031aea-dc65-4d79-83eb-67df630cc48b"
        },
        "item": {
          "id": "164e8d1b-f75e-466a-b535-56544c91a98d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "72cf2f65-5d7d-4cea-9773-0614e0b1c660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2bf041-cdb1-4216-8a22-48f210d89c11",
        "cursor": {
          "ref": "d00a1695-1685-4bfb-a678-a28c1dc605c0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "794b4cec-0106-4766-9df5-dd5795a480dc"
        },
        "item": {
          "id": "9b2bf041-cdb1-4216-8a22-48f210d89c11",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "09780a3e-2a2a-4642-8cbd-57a4757e84bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5250a17b-2269-4f1c-9c0e-e8593a5d0cdf",
        "cursor": {
          "ref": "aa458bb8-fb44-4aed-af2d-04e3eb39c29d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "096e6098-9388-48dd-8374-8b11a9e5f781"
        },
        "item": {
          "id": "5250a17b-2269-4f1c-9c0e-e8593a5d0cdf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "095cd68e-6b18-4e99-bac7-097f903f0039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c63d1a-513e-4a2c-9dc7-76e9e151093d",
        "cursor": {
          "ref": "20049fd2-d41a-43dd-91ab-9aa2cb53f681",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "30cd4c4d-937a-457e-b4b2-fa47b5580ff9"
        },
        "item": {
          "id": "35c63d1a-513e-4a2c-9dc7-76e9e151093d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "767127ac-0477-4f62-aa4c-acf3e5a3a156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c29f912-9762-41dc-a24a-fc7a9cf73d12",
        "cursor": {
          "ref": "fdb861b8-8ad9-405a-b2dc-ccf3718080df",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "65216e11-704c-4bee-893e-0921a5636188"
        },
        "item": {
          "id": "8c29f912-9762-41dc-a24a-fc7a9cf73d12",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f0a8c3ce-2799-443b-808d-f0b69c98412f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c9f326-7b95-495c-9c9a-c620150a0c05",
        "cursor": {
          "ref": "39967509-0caf-4208-b68c-541fa27579b8",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "79673e21-c7eb-45eb-b7d7-a55bc9454020"
        },
        "item": {
          "id": "79c9f326-7b95-495c-9c9a-c620150a0c05",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc36efd8-e754-491b-b2ea-f7619894fdf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d44016-9849-412e-983f-1447c762d4c8",
        "cursor": {
          "ref": "e0bc9288-c897-470f-82b3-6eaa7b7c876b",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "77fb9ff3-f028-47aa-821e-79be6bbece05"
        },
        "item": {
          "id": "a2d44016-9849-412e-983f-1447c762d4c8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "78d9009e-7207-4bbb-8bf2-cda7de0c96b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a84a31-6802-44b0-9bca-22583731b31f",
        "cursor": {
          "ref": "9bbf3b60-c59d-4e03-9945-cb879b995b56",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d3331843-9a98-4129-a0a1-8ccdc1c595ea"
        },
        "item": {
          "id": "d9a84a31-6802-44b0-9bca-22583731b31f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6582e783-7164-43fb-b37f-1bb91b678343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037c00f1-dfcb-455f-840c-912a18da1faa",
        "cursor": {
          "ref": "d8a87109-ad05-4152-bb03-c32c0fbd8457",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9a574f21-dbc1-45d8-9557-fe92e314bbb9"
        },
        "item": {
          "id": "037c00f1-dfcb-455f-840c-912a18da1faa",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8dfc116a-2fd7-445f-b66d-6c8450499eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16a5c1b-7c72-43fd-83df-5576047b42b6",
        "cursor": {
          "ref": "fa44b23e-bf33-4cfe-bf96-0b42f48fc3bb",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6313c9a8-68e9-4883-b99f-dd07b517ebb9"
        },
        "item": {
          "id": "b16a5c1b-7c72-43fd-83df-5576047b42b6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9d12b1d8-6933-4117-a494-daa3f2c34832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19b90cf-f0b1-461e-b0d4-dc410f5c4a8f",
        "cursor": {
          "ref": "ef493053-e635-44e7-b413-89d8e4ef1583",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c11fc215-117d-4211-ad18-4ccd570da7bc"
        },
        "item": {
          "id": "a19b90cf-f0b1-461e-b0d4-dc410f5c4a8f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "12c7d61f-0a30-4740-93b5-a083dd1da13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1bb701-ef96-4607-b990-5689c42ec038",
        "cursor": {
          "ref": "d69b2dcb-b9b9-4f47-8117-282d2269ee15",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "edb1cc58-7c42-4821-91fa-6e500c2a9df6"
        },
        "item": {
          "id": "5a1bb701-ef96-4607-b990-5689c42ec038",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2517b943-363d-4859-9573-86a1ce3e504f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24271b74-ad47-441e-8b26-4731bfb83fde",
        "cursor": {
          "ref": "f7ab84e7-a2ea-43f3-970c-b04a52b858ba",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d158397f-7cf0-437a-886d-ed6607e5eda8"
        },
        "item": {
          "id": "24271b74-ad47-441e-8b26-4731bfb83fde",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7ccc5e09-a428-48c2-a8d8-05181c9e7c46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf5e8cf-b31c-4fff-ae70-15ba94d18751",
        "cursor": {
          "ref": "237e499a-a43a-4e09-a5d4-71fe8ee0d679",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f2e74ecd-f3e8-47ef-955b-872e0df89df2"
        },
        "item": {
          "id": "cdf5e8cf-b31c-4fff-ae70-15ba94d18751",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dbe85747-f820-4521-b857-61c71b29916b",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "1542ea12-4c0c-43dd-80ac-6bf4a691cf76",
        "cursor": {
          "ref": "a5b951a1-32c3-4d0c-b670-4474a1c4c7de",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cf9ce6ac-d160-488c-b207-08ee063aeec1"
        },
        "item": {
          "id": "1542ea12-4c0c-43dd-80ac-6bf4a691cf76",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b594dcce-c10f-492a-bbbb-3187bbc707f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d97f054-3058-4cf6-946e-a588713c0606",
        "cursor": {
          "ref": "0f43bf12-4332-4750-9e24-24f0fcd116ee",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3c7e4606-63cf-42d6-a3d5-7bb07a8fa18c"
        },
        "item": {
          "id": "8d97f054-3058-4cf6-946e-a588713c0606",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5a555d2a-28c5-49a1-a594-9a39e9a96d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dab9e37-adac-4ff1-bcf1-d51350f3eb6d",
        "cursor": {
          "ref": "b997483e-47f2-43ea-8508-36040c57f0b5",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ef33bb76-c442-4304-bb5f-c04cde93f50f"
        },
        "item": {
          "id": "4dab9e37-adac-4ff1-bcf1-d51350f3eb6d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a9879d87-416e-4e06-bd4a-5033f33a0ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147339f4-4d03-4297-b0ac-f284b8cae552",
        "cursor": {
          "ref": "4f434ce1-0dd6-4b2e-9cf7-aa8b78556c3a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ca5dd104-2686-44e6-a4df-f5ac4b6df97c"
        },
        "item": {
          "id": "147339f4-4d03-4297-b0ac-f284b8cae552",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7532115e-7298-4553-b6a5-440ee2ad4997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f897d2f-80f4-49b4-9c78-73733377f8cb",
        "cursor": {
          "ref": "e9d15bc0-9ec5-4236-b3ae-69bdc896a34c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "aa4ce9d1-5c88-4559-97c2-a5d67d1150c3"
        },
        "item": {
          "id": "6f897d2f-80f4-49b4-9c78-73733377f8cb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67ba1040-c082-4a41-bcdf-c4fa20295f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c220511-914e-4119-ac33-9a9fe1e0f984",
        "cursor": {
          "ref": "4c52f7b6-f739-4e31-a4c7-fded11034bb9",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "81017a31-3218-4556-aacf-120cb21ff4ba"
        },
        "item": {
          "id": "3c220511-914e-4119-ac33-9a9fe1e0f984",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2c726329-2c83-4481-af92-81bc954a0243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec78137c-db37-43ed-b8e9-4617f801011e",
        "cursor": {
          "ref": "c1778f53-f32f-4dec-a69a-a0784eb11827",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2650a1c8-9e52-4609-a725-777e21002d52"
        },
        "item": {
          "id": "ec78137c-db37-43ed-b8e9-4617f801011e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "344bb97c-a279-4538-bb95-8963bbbf06f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3979de9-79e0-4ddc-babe-dc1a1045a688",
        "cursor": {
          "ref": "d64d0113-4df2-4395-9e05-aed097ca4298",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "da4b9ea4-bf2d-492e-bbca-5d4894a192f3"
        },
        "item": {
          "id": "d3979de9-79e0-4ddc-babe-dc1a1045a688",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "590c97ee-98c4-45fe-9dc9-cadc9cbf1d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c781227-852f-468a-b657-f1b05212b48a",
        "cursor": {
          "ref": "84a283a2-0694-4f38-92ca-e88b21a524dc",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a593e57c-9d40-4679-954b-aaf2cd5613e9"
        },
        "item": {
          "id": "2c781227-852f-468a-b657-f1b05212b48a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "166af65b-ae5f-4e81-b314-e45774206e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589541a3-a23d-4007-821e-da610a8ea049",
        "cursor": {
          "ref": "ac714e98-83fe-468e-8d93-c49486f343c0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c4005d74-1d9b-44ab-9a62-43ad71a3ea0c"
        },
        "item": {
          "id": "589541a3-a23d-4007-821e-da610a8ea049",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "29c67c64-b610-4cf1-86ee-5108e15985ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5291a81-4fbc-4ba5-8201-4d9227147e80",
        "cursor": {
          "ref": "b8d95424-2ef6-43be-b30c-1dc133365475",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f4e93947-eda9-42ac-a2f4-227e6a7d486e"
        },
        "item": {
          "id": "d5291a81-4fbc-4ba5-8201-4d9227147e80",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6f934129-1868-4791-b316-4b986064983d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb34e691-24db-4d1d-a1ea-6d51f731a927",
        "cursor": {
          "ref": "ce94290e-9396-463a-a15d-43090eab8918",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bd3ce466-c43a-4061-ae5d-7c54cc749a9a"
        },
        "item": {
          "id": "eb34e691-24db-4d1d-a1ea-6d51f731a927",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5d17ded7-ba21-48c2-9311-04211e8d0a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df985bbf-3f17-4f61-b697-e64a972f2ebc",
        "cursor": {
          "ref": "3ab57dd2-e1c4-489a-a206-bb4fe1585cf9",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7f56e4a-e077-4713-aac2-7aafd3ff8fc3"
        },
        "item": {
          "id": "df985bbf-3f17-4f61-b697-e64a972f2ebc",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c457778a-abe1-4c0b-83f2-dabe4e2a021b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce8d7c6-a5d4-4a99-8e6c-5d6f1d0ecad4",
        "cursor": {
          "ref": "f63fb125-6a63-427a-83aa-6aed21bca782",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3cbc9a9a-c2be-4663-96e4-acf61b065faf"
        },
        "item": {
          "id": "3ce8d7c6-a5d4-4a99-8e6c-5d6f1d0ecad4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fd7a3513-3180-47ac-8cba-4692dd237bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d945e117-afd6-4828-abdf-880d443c954d",
        "cursor": {
          "ref": "81e43d98-34e4-49de-8d13-71c476901f8c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4efa6aa8-4eef-48a9-bb07-c9711d4de3ba"
        },
        "item": {
          "id": "d945e117-afd6-4828-abdf-880d443c954d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f5ae78dc-051b-464d-9ed0-423df7de6eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8aa426c-30b5-4ace-82ed-d4c8dea5f2a0",
        "cursor": {
          "ref": "4ffa12b2-bead-4162-b3d0-4ba0f2d6bfd6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8cbdbec4-5db7-42db-b380-7b84e66cc479"
        },
        "item": {
          "id": "d8aa426c-30b5-4ace-82ed-d4c8dea5f2a0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "324a8653-a9bd-4ce2-9870-18753071c745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d946b-138f-4570-9f63-23df1c24879f",
        "cursor": {
          "ref": "fc4a351f-71a2-41c1-b46b-4fa3a5d491e3",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aa9cd201-adde-4520-b2ce-0d7dd1e79790"
        },
        "item": {
          "id": "cc0d946b-138f-4570-9f63-23df1c24879f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f3e690f5-5d73-4f32-833c-c25d3ed14ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b4be92-48ef-4b07-bb99-d9687a7a28a8",
        "cursor": {
          "ref": "5e3c3026-58e6-4aaf-8c48-b4d9acb37667",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8730225b-a18c-4297-8bb6-c44b9d5661af"
        },
        "item": {
          "id": "83b4be92-48ef-4b07-bb99-d9687a7a28a8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f6f789da-f50f-4748-b8e7-19e3c5071c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9da335-bafc-4bd6-9457-bbe027d87389",
        "cursor": {
          "ref": "c21f70a5-ec86-4cc9-ab1e-f39f028e1449",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "10b538bd-ab2b-4ce7-8cc0-c553d4749537"
        },
        "item": {
          "id": "3f9da335-bafc-4bd6-9457-bbe027d87389",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9f43dec6-c8bf-459d-87bc-0e0a2227a714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd5bdb5-5bb0-423b-baa7-1fef365de427",
        "cursor": {
          "ref": "b5bd1957-3aef-4f1e-9069-cd5d0c150c94",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3fa7343c-fd7f-4d80-be36-bdc2550d5b85"
        },
        "item": {
          "id": "fdd5bdb5-5bb0-423b-baa7-1fef365de427",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "469bbae4-44cc-45c7-8080-875cfcb4fed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8652eb4b-6eaf-4274-a874-66de1e2e26bb",
        "cursor": {
          "ref": "5904d017-205d-4c94-a4b8-b16a7990f67f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a40b9360-d100-47b6-a79f-8a56bdfe422f"
        },
        "item": {
          "id": "8652eb4b-6eaf-4274-a874-66de1e2e26bb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "38c10007-fd7f-4cf2-ab61-9ad836f7a684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee225208-5840-43dc-bcb0-2be2c344e1eb",
        "cursor": {
          "ref": "3af92f37-4cd6-43ae-a26f-f782971594fc",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "84ea991f-15a6-4efd-b052-88595b37ba7a"
        },
        "item": {
          "id": "ee225208-5840-43dc-bcb0-2be2c344e1eb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3c13f025-9bef-45c2-96ad-9eadadeb0ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa52a12-c724-4182-94b8-cb13967cda09",
        "cursor": {
          "ref": "62f190bc-5167-482f-ba9a-f9dc39e4338c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d77dcf70-4b80-4fd3-8d31-c545ada2922f"
        },
        "item": {
          "id": "2aa52a12-c724-4182-94b8-cb13967cda09",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d1779560-a095-40bd-b5f6-6b873c637c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a053d353-8a97-43c3-9832-1ccb83c5d675",
        "cursor": {
          "ref": "e81b55f9-5c10-4e5c-83ea-223c0a85a269",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5d339d53-ba9e-43f4-94fc-7661416c0cf3"
        },
        "item": {
          "id": "a053d353-8a97-43c3-9832-1ccb83c5d675",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "afc6fc1d-9013-455c-9bd4-65bedc24ecf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27acfea-6f66-476a-a1b0-546f0e693904",
        "cursor": {
          "ref": "eddeac68-c193-4d9f-9fbd-0838b3fc2e39",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "48b9c599-b95e-4009-a0b8-548e30a66ec6"
        },
        "item": {
          "id": "e27acfea-6f66-476a-a1b0-546f0e693904",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0983ae54-71cd-4c34-bbc4-a84cf041d883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef4682a-60ba-4f89-af7c-67a778d09405",
        "cursor": {
          "ref": "45872886-27f1-40d5-a156-df6e32311647",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7761e77d-7f99-42ec-b1cb-461e57389998"
        },
        "item": {
          "id": "7ef4682a-60ba-4f89-af7c-67a778d09405",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f5476276-6176-4f11-9a00-f44411872735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4179567b-28f5-42a8-a550-715b2bcb1f08",
        "cursor": {
          "ref": "faa0bba8-ad0b-40e0-a763-0d1c3ca21b70",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f270f5f6-aad1-4de1-bdad-5f562313205f"
        },
        "item": {
          "id": "4179567b-28f5-42a8-a550-715b2bcb1f08",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c628321a-c662-468c-99b1-bab53c0d712d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99357b4-ff8b-47c7-8e3c-fe20c15f92be",
        "cursor": {
          "ref": "ce150613-44b3-40cc-8190-40587c96fbb7",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2e1f0376-10b0-4ab4-93e0-290eec3b6315"
        },
        "item": {
          "id": "d99357b4-ff8b-47c7-8e3c-fe20c15f92be",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "82203fab-3290-439a-bc96-c6fee45a0bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155a8490-de49-4a44-a1b2-21efad23fd9b",
        "cursor": {
          "ref": "956f135b-9507-47d1-911c-1546fa916764",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ff795469-f69f-448c-bf3a-2c40f52263a8"
        },
        "item": {
          "id": "155a8490-de49-4a44-a1b2-21efad23fd9b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1cc71efc-7e6c-44d1-9f15-b6823974b3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c0316d-140d-41e2-bda0-7989e6e665d0",
        "cursor": {
          "ref": "09787ffc-e10a-4922-bf0b-3e7cd7833286",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7bf68f48-122a-421d-b502-6d9c526e0575"
        },
        "item": {
          "id": "54c0316d-140d-41e2-bda0-7989e6e665d0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c056089e-ea68-44e3-add4-5ff2c7227823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad33d09-361b-4000-80a6-65289bdf8cf6",
        "cursor": {
          "ref": "b1159c42-0e47-4247-9744-f998d1e4ff15",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8370c3ee-1fed-4156-9302-526aeffb93a5"
        },
        "item": {
          "id": "4ad33d09-361b-4000-80a6-65289bdf8cf6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "31dafd6d-2273-4e3f-a451-a9c6cbe015aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1b7d09-fc06-45a4-a0d4-d8b5003cd9ec",
        "cursor": {
          "ref": "5ae39642-8ec6-4dae-aaa3-ef4997ea9ed3",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "007e351a-1e0e-407b-bd93-bb23745af335"
        },
        "item": {
          "id": "fa1b7d09-fc06-45a4-a0d4-d8b5003cd9ec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0d99aeae-0f82-4e87-b8b4-09db922a97bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160afd6b-bfba-4acf-8d05-afc796a8f07d",
        "cursor": {
          "ref": "5490aa78-b195-403d-9886-cbdacc7cf6bf",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "765a92eb-37a4-4745-be62-8c955820c72f"
        },
        "item": {
          "id": "160afd6b-bfba-4acf-8d05-afc796a8f07d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fafb9d36-5885-4a3d-9d06-b27ea9beff09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720a488f-01d7-4e4f-ac01-e20e4490cc53",
        "cursor": {
          "ref": "01f5b64d-c451-4131-b37f-8f200861c6df",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7e9b3c6d-d4d6-4270-a10c-82f5f6951188"
        },
        "item": {
          "id": "720a488f-01d7-4e4f-ac01-e20e4490cc53",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "98c68d11-965f-4af9-a3b0-719f36246ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554cd8dd-48f3-4a46-b067-6883157835c7",
        "cursor": {
          "ref": "ed6c3636-b1ec-4ab9-86ae-477f4110b2aa",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b6e87dff-7731-43c7-aa7e-c2e44943a088"
        },
        "item": {
          "id": "554cd8dd-48f3-4a46-b067-6883157835c7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ecd812e4-0380-4870-92f1-2a439ca58a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422b8174-f00d-40ab-b8f1-13b9f18b25d5",
        "cursor": {
          "ref": "7a4c5bf1-6f0e-4276-84ee-8cfef40dbc08",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "782f8680-dcc8-41b8-b881-5770336f9949"
        },
        "item": {
          "id": "422b8174-f00d-40ab-b8f1-13b9f18b25d5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "af81528f-b3c4-4a47-ad25-3c418b2c601e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1877f3e9-1e1b-408b-8eff-264abd5173a0",
        "cursor": {
          "ref": "0045b7d1-b994-4982-9d63-543c865918d3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "70c37e60-1804-497c-8f4a-89026ce082b8"
        },
        "item": {
          "id": "1877f3e9-1e1b-408b-8eff-264abd5173a0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c237a1cb-b88a-4d56-819a-49c3d0884bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1472f07a-0a19-4b8e-b1f1-97eb9ca6ff77",
        "cursor": {
          "ref": "4d3811ae-546c-48fa-a98e-b3656d024f6e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ea6b7b8e-c428-45d6-83e8-2f5118847155"
        },
        "item": {
          "id": "1472f07a-0a19-4b8e-b1f1-97eb9ca6ff77",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0e1b3cdb-d383-4fb4-924b-5209b182b918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29990ff6-18c5-4639-9bee-d6fdf3514d93",
        "cursor": {
          "ref": "0925e7cc-ed00-45c4-bbfc-b6ef15c4c7a2",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d6542361-bb95-4911-96e2-3028feb5de71"
        },
        "item": {
          "id": "29990ff6-18c5-4639-9bee-d6fdf3514d93",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a250ec89-2614-4932-9f9a-3801f87da45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f759593c-f700-41f0-962e-9700fbedd5f2",
        "cursor": {
          "ref": "08d91c3a-1c6d-471c-91f5-d3e73c39fbd6",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "367ab89f-9ca8-4d4e-bfaf-87f71c76d306"
        },
        "item": {
          "id": "f759593c-f700-41f0-962e-9700fbedd5f2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "26d1dcaa-3e62-4ce7-886e-e5fbae63e241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fefeaac-4ad0-4946-85b1-a0d244bf4797",
        "cursor": {
          "ref": "c87c9255-4cab-43a7-af30-1f7c288545e1",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d62ce70f-f300-4e23-aa36-e6e17efc4b20"
        },
        "item": {
          "id": "3fefeaac-4ad0-4946-85b1-a0d244bf4797",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fd8789d5-3f2e-48a1-9ca5-0102730a7b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6886d0-e7d0-4c74-bc96-4116d4a14d11",
        "cursor": {
          "ref": "0b9b3788-9c22-4b5e-99e7-c668dc3c7787",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bc574e72-2e4f-41ac-979a-62144f093d6d"
        },
        "item": {
          "id": "8a6886d0-e7d0-4c74-bc96-4116d4a14d11",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d2b8aa27-ff3a-465b-87c7-65a2b8ebc7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af859b4b-8326-41c3-ad62-9c9239d4b54d",
        "cursor": {
          "ref": "e5e4caf1-41ff-4489-aea5-b2967d650008",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "77438dc9-954a-4ef1-b20a-004caf405983"
        },
        "item": {
          "id": "af859b4b-8326-41c3-ad62-9c9239d4b54d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9a9c5957-535a-41ac-a654-c2485e23363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0223f91-e1dc-400f-a642-4c04d3aed3e2",
        "cursor": {
          "ref": "9bb7f94b-6afd-4b4c-8d0a-ce6af6fdcb43",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "514388ec-5f23-4fca-828f-6885e47f45d5"
        },
        "item": {
          "id": "f0223f91-e1dc-400f-a642-4c04d3aed3e2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8026681e-b4f3-4b62-b61d-b87408f3f509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63386c1-cce2-4508-9d1b-5f66dfb2ed19",
        "cursor": {
          "ref": "a4193a9f-4d62-42a7-a9bd-0692211b7d36",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "09433e3c-560e-4795-b942-605b2db43dd9"
        },
        "item": {
          "id": "f63386c1-cce2-4508-9d1b-5f66dfb2ed19",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ca074188-6893-4237-86fc-c2fd5a49046a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008b9792-9a17-4e13-aecb-2779318f9904",
        "cursor": {
          "ref": "e7c1a83a-5b6b-4e59-b777-8da6c3c74f79",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d6385918-5318-4df7-ba49-c6f0e19fe830"
        },
        "item": {
          "id": "008b9792-9a17-4e13-aecb-2779318f9904",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "03a6a5d2-bc74-42de-965e-481548ce088e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4047f34-4cc8-4a2f-b03d-27a130b79b0c",
        "cursor": {
          "ref": "2e2f4f9a-0fca-4733-a085-2267855c7238",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a47a39bf-5078-43be-b3e0-b850acce465f"
        },
        "item": {
          "id": "e4047f34-4cc8-4a2f-b03d-27a130b79b0c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e54ae62d-476e-4bbf-8f53-20e7d8e2d22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d57d94-bf3f-4378-a20e-5ed411385dea",
        "cursor": {
          "ref": "61938f4d-0dcd-40c0-a1fd-028f8024c706",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "328efccb-b3bd-4be7-80aa-cf929dae4a09"
        },
        "item": {
          "id": "78d57d94-bf3f-4378-a20e-5ed411385dea",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1a9e89a2-681c-418d-8206-1cdddbb68165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1151a322-582e-486e-b765-a0d554573953",
        "cursor": {
          "ref": "6faa0594-92bd-4edf-9f4d-5f8e025eff14",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "00e7801a-9520-47e7-acc6-013ddacb76a4"
        },
        "item": {
          "id": "1151a322-582e-486e-b765-a0d554573953",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b2413480-9867-450f-8d06-0fcaf0edf728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5a96e2-c386-40c9-beb6-f85b60923fa1",
        "cursor": {
          "ref": "6c0cdd87-f4c1-43c4-a6b5-0501dc9f7762",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a80c247d-1807-4f7b-9c0f-f103f345c7dd"
        },
        "item": {
          "id": "8d5a96e2-c386-40c9-beb6-f85b60923fa1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c562fffb-5b85-4a1a-bb1a-b92eb0eff4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c38b5a-3e75-446c-b988-24c06b2a38da",
        "cursor": {
          "ref": "7d9442df-efbe-447f-be7b-70b1f1675d95",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cfb31eaf-fa4f-490b-96ac-6384b5d427ea"
        },
        "item": {
          "id": "b7c38b5a-3e75-446c-b988-24c06b2a38da",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d32cca62-bd93-4e62-996f-fad9d3553bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95d2cb7-7949-4bf7-895e-19831108fbff",
        "cursor": {
          "ref": "b3183449-40bb-45d8-8e62-5d09c21896ef",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "664573f9-af8e-4918-b42a-3053febe2a84"
        },
        "item": {
          "id": "a95d2cb7-7949-4bf7-895e-19831108fbff",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "871d9e5c-ed32-4320-96d2-b07a4dda31c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85364da8-32c8-40da-8401-e680db725496",
        "cursor": {
          "ref": "eef50184-c328-43e0-a3f7-3abd59ad3d83",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5f811875-1e14-4030-bea7-c8da02c46bff"
        },
        "item": {
          "id": "85364da8-32c8-40da-8401-e680db725496",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6eb3b1a-3d27-4078-a2cd-06c37f937a3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901cff5d-105e-4aaa-808d-eb67175cfbd5",
        "cursor": {
          "ref": "acabce1c-dde6-405d-ae5d-ac37ca38b792",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "585aca71-f149-4a40-bc1d-613c5fdda213"
        },
        "item": {
          "id": "901cff5d-105e-4aaa-808d-eb67175cfbd5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6644c00e-22d2-40f3-b439-af2ef6d531ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb13f6f-78c5-4f37-9035-f19e375141bd",
        "cursor": {
          "ref": "a283afee-7a7a-46fc-8f69-3d1198cf97b0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "06408b0a-cd26-4231-949f-fde35acd1f01"
        },
        "item": {
          "id": "0cb13f6f-78c5-4f37-9035-f19e375141bd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dbafa1fc-bbea-4905-9d48-7ab870a066de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a757216-fddb-4807-9bc7-31147717075d",
        "cursor": {
          "ref": "b0981455-9dfd-4680-9b17-78ace3098cd5",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "79930179-66d3-47cd-9069-d880455a7efa"
        },
        "item": {
          "id": "6a757216-fddb-4807-9bc7-31147717075d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5e82002a-29a2-4fd0-81ea-051493ad8281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85830fbd-40cd-440e-b6ad-6d26a0add1c2",
        "cursor": {
          "ref": "03f2fa3a-40f7-4db7-8a43-f5c3f5b2c398",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bb0585d0-da42-458f-845a-cf3d76f7b830"
        },
        "item": {
          "id": "85830fbd-40cd-440e-b6ad-6d26a0add1c2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "47b1be0a-9c8f-4c89-a191-71870bdd3803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dca5d0-ff74-4334-b339-3da1b08ecd04",
        "cursor": {
          "ref": "4ca91712-ef75-4e05-864b-90ab227cfcc7",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "292234c0-c094-49d7-b2bb-f923ce6fae3a"
        },
        "item": {
          "id": "c3dca5d0-ff74-4334-b339-3da1b08ecd04",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6906c9d1-b05c-4baf-a43b-4a42ccb2211d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43601588-8a74-4587-ab63-ab279605c23b",
        "cursor": {
          "ref": "cb468f02-e41f-459e-adfb-9ed7e294960a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6dbef841-01fb-427d-aa00-c134d338e8ad"
        },
        "item": {
          "id": "43601588-8a74-4587-ab63-ab279605c23b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "26a082e0-90be-430d-9a47-f462181e1146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dce497-3297-45d6-a74d-04ae8bdd458f",
        "cursor": {
          "ref": "ff8c2c5e-7f02-4855-8fbe-b35ded99c793",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bfa573e4-f1a2-4d1d-9d9e-123efc1998d2"
        },
        "item": {
          "id": "38dce497-3297-45d6-a74d-04ae8bdd458f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ea792203-024b-477b-b92c-af053b228f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227759da-a760-441d-ae7a-155b82c31b6d",
        "cursor": {
          "ref": "efdc9b93-21a8-4434-80b7-24329f68101b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1b7e42f0-4978-44cc-8a51-a7e8541fde94"
        },
        "item": {
          "id": "227759da-a760-441d-ae7a-155b82c31b6d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1ed2723c-4e15-496d-8b9a-334836f6f3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9472741-83c1-4429-84ab-25e583eb6a73",
        "cursor": {
          "ref": "34dd4b35-5d83-425b-918d-75752fa72d98",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6faec72e-8650-4b3c-a881-a52cd2afb4d6"
        },
        "item": {
          "id": "c9472741-83c1-4429-84ab-25e583eb6a73",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d43629e5-b2e5-493f-b216-7aa7369adc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15a84d3-5c9f-4f6f-91f1-90d16dd9f8b6",
        "cursor": {
          "ref": "1777bb3e-f870-4117-9ba0-e31170eb8d36",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f7a1e59e-4150-42e7-97e3-26a40f8db316"
        },
        "item": {
          "id": "a15a84d3-5c9f-4f6f-91f1-90d16dd9f8b6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "60528915-ed5e-4aa9-8cf9-4e4745dc2e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71247384-30c8-40d2-957f-01371b94b27f",
        "cursor": {
          "ref": "182395bc-de72-4f25-ac0a-f8117b4de202",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4006b1da-9cc4-4aad-b9af-0f89e0f675f8"
        },
        "item": {
          "id": "71247384-30c8-40d2-957f-01371b94b27f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "87c4755d-c3a2-4d9f-ace2-4bce70c40d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba246f2-492d-452e-8691-513afc216af1",
        "cursor": {
          "ref": "c594a0db-97e8-4195-a911-0cfe632843f3",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0a97b1ed-fdff-4674-ba32-bfdafc6912fd"
        },
        "item": {
          "id": "3ba246f2-492d-452e-8691-513afc216af1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f7218f31-2c45-42a9-b848-4bf605e07939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c073c6d2-4303-4f1a-9bf7-26347b129d43",
        "cursor": {
          "ref": "afea7452-06dd-48c4-b4bb-bbae76633637",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "20cc0428-2fa8-4bc3-a384-d3a412f4da16"
        },
        "item": {
          "id": "c073c6d2-4303-4f1a-9bf7-26347b129d43",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0f41759b-df04-4be5-a911-3ffb4182d411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f303b13-3ae1-4470-8fc6-6df3f9cdc9a5",
        "cursor": {
          "ref": "15e40818-e777-4863-81a9-cd8c03c4342c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "007cae3b-dfee-4375-a0fb-39b8d00bc48f"
        },
        "item": {
          "id": "0f303b13-3ae1-4470-8fc6-6df3f9cdc9a5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "91a293ac-4ea0-4b1b-9a8a-a723be878d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d69315-eb87-4282-bd6b-9eadd46b192a",
        "cursor": {
          "ref": "8a34ec49-b392-418e-afa6-faf9125ff5f3",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1710cbf0-2b2d-4a1c-b956-764d50c48e82"
        },
        "item": {
          "id": "d5d69315-eb87-4282-bd6b-9eadd46b192a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f21bffac-c560-45be-b69e-4e9f8c9c3dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aea14b4-b249-47ea-8a79-4194262c5539",
        "cursor": {
          "ref": "750d0acf-c099-417f-8fcf-117a4b35ce35",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "602e6560-ef7c-45da-862d-270422a15a40"
        },
        "item": {
          "id": "5aea14b4-b249-47ea-8a79-4194262c5539",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "13e6159b-d017-41f9-9c77-8322e299eba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f96778-b0ee-4bd4-b835-1c529be3fe33",
        "cursor": {
          "ref": "eef4af51-52a7-4d95-8189-38f1f3f20ed0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a5cd2923-a91c-4632-8013-ba46c543361c"
        },
        "item": {
          "id": "13f96778-b0ee-4bd4-b835-1c529be3fe33",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e835770f-582d-4b73-8346-a124b379fd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f203508-e48c-462f-9976-674a8bbe55ed",
        "cursor": {
          "ref": "a13dce38-c711-463a-b518-cc4a2bb5f79a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8c4cb26a-e8af-489a-bdab-b697a82e605a"
        },
        "item": {
          "id": "7f203508-e48c-462f-9976-674a8bbe55ed",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b0c5e41d-9b07-45f0-9eb3-ea350302bb79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a0163a-e582-4307-af1a-f9c495f97449",
        "cursor": {
          "ref": "699ade8f-355f-42a0-8e21-cca1930e5d03",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4ea6c374-b7ce-4e11-a79b-a02e0e6eb4a9"
        },
        "item": {
          "id": "c8a0163a-e582-4307-af1a-f9c495f97449",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a67c19c1-d0f0-4ce3-aa5f-b137dd21c2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 587,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d927dcd-422a-451c-90d8-0c893462c049",
        "cursor": {
          "ref": "241a84f9-b8dc-4644-b1c6-2f79d4f75998",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "38a333ab-5b99-4a1a-b3c6-a74ad0a06f1c"
        },
        "item": {
          "id": "2d927dcd-422a-451c-90d8-0c893462c049",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "09ab6d29-ecc2-4af5-afe8-5b43834d2d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a419a66-e8da-4518-b2d1-7a984445d488",
        "cursor": {
          "ref": "eaf39269-54e8-4f38-9153-b2dd85950019",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "98ec0bb4-59d7-4241-bf9f-7d238bfa616e"
        },
        "item": {
          "id": "1a419a66-e8da-4518-b2d1-7a984445d488",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ccfb6dda-fdf6-4668-8af8-4c98c13922bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6361e92e-b78e-4ea0-be1e-0e530f244d11",
        "cursor": {
          "ref": "234df4e5-25e8-4a96-87ee-11973ef9e4a2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9d478e2b-6ef7-4ed1-8dc8-c81ac607c787"
        },
        "item": {
          "id": "6361e92e-b78e-4ea0-be1e-0e530f244d11",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "42c97210-f46b-494d-aa31-1cdddcf87788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4a7a82-ca6b-44d0-ae45-2ef8acdc555f",
        "cursor": {
          "ref": "b69a4d40-59ac-461a-8bc0-59683058d0b2",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4ef0ac8a-6e9f-4536-91cf-b1a9bfd96b26"
        },
        "item": {
          "id": "cc4a7a82-ca6b-44d0-ae45-2ef8acdc555f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e50d543e-38fb-4c1b-8f1c-1f5508b529d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68ccd41-1719-4ee7-a1c5-0443837d6dcc",
        "cursor": {
          "ref": "6f5d129c-31da-483d-8943-cf021b78adc9",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e0a08ba8-23f7-439a-b310-39810f724218"
        },
        "item": {
          "id": "c68ccd41-1719-4ee7-a1c5-0443837d6dcc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "58cb8c26-09d0-4180-a7d5-4668dae000ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f8d1a6-6b24-4768-997c-c991b5535c57",
        "cursor": {
          "ref": "c807abc0-3f7e-4d4a-a3f3-2506c2fd578d",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "afee6f2e-d252-4b52-85ea-f25dd2f0aa15"
        },
        "item": {
          "id": "04f8d1a6-6b24-4768-997c-c991b5535c57",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8322ca04-378f-4953-83b9-bd1fa4790597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507ae55e-2f59-4fd4-9994-f89df7039688",
        "cursor": {
          "ref": "6ae06626-d8c1-4efe-80fd-18d11f125bf4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1b73357c-0486-4232-b14a-51da982bda84"
        },
        "item": {
          "id": "507ae55e-2f59-4fd4-9994-f89df7039688",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4d9516a1-bae6-4c41-924f-e39e2985a6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5752950-5e52-46fa-809f-af36eb90d514",
        "cursor": {
          "ref": "a425db34-77da-46a6-baab-7249a53b3cfe",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8a3e4dde-f930-488b-9472-204ce807ea3e"
        },
        "item": {
          "id": "a5752950-5e52-46fa-809f-af36eb90d514",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "25bb08cf-cd8a-476f-b983-e0a2f81cd959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1001405-f81d-42d8-8ebe-0658162f602f",
        "cursor": {
          "ref": "baa86474-a814-4054-9ba4-ec952f8fd084",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cda97399-82b8-423e-b7b9-2a9e2cdec0ab"
        },
        "item": {
          "id": "d1001405-f81d-42d8-8ebe-0658162f602f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "da09d00a-dca1-44e5-a88b-d126110ca205",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b3a26243-e3ef-4ad6-8b7b-37fc76d4b29f",
        "cursor": {
          "ref": "ab5a0c78-e430-4263-b6e7-28ed2bd2ddb0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "08e2d7fd-9d8b-4dd5-8e3f-8d3faf3ecbc7"
        },
        "item": {
          "id": "b3a26243-e3ef-4ad6-8b7b-37fc76d4b29f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3e82f95c-a46d-4ce5-a8f6-3e10c1986383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0bcf16f6-af9a-4fa7-a075-3629b607d87c",
        "cursor": {
          "ref": "c8b1962b-d687-4fcd-9f66-77d3f76de242",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "258faeac-1253-42e0-add8-c12dc4bbdb58"
        },
        "item": {
          "id": "0bcf16f6-af9a-4fa7-a075-3629b607d87c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8e8dfc64-66b2-4902-81d6-91958a9d3939",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf62f8a-97b5-4da8-afc6-47181ce427cf",
        "cursor": {
          "ref": "a2769fe9-f66b-444d-86f7-668868c77ca5",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "47b78e2f-1ce9-4bc1-bccd-b4f213d3d9ac"
        },
        "item": {
          "id": "6cf62f8a-97b5-4da8-afc6-47181ce427cf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f31c1232-7ab3-4152-9456-16eb99610aae",
          "status": "OK",
          "code": 200,
          "responseTime": 3843,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd38056d-1b94-44cb-b886-2dbb21225f3f",
        "cursor": {
          "ref": "33eb93c7-226d-465b-a6f0-b0e08a642e17",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "97d8d002-c817-441a-9cf1-2a0b3fc52b08"
        },
        "item": {
          "id": "fd38056d-1b94-44cb-b886-2dbb21225f3f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dc1e6e6e-d208-4f4a-bc3b-973c22942a05",
          "status": "OK",
          "code": 200,
          "responseTime": 2330,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
        "cursor": {
          "ref": "8c9d1f1a-caa6-4cd4-8bf3-60599e994189",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "019509c4-ea37-4899-ba97-22d8cc19a4d6"
        },
        "item": {
          "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cf8554a3-ad76-404b-a805-8e75e313edb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
        "cursor": {
          "ref": "8c9d1f1a-caa6-4cd4-8bf3-60599e994189",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "019509c4-ea37-4899-ba97-22d8cc19a4d6"
        },
        "item": {
          "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cf8554a3-ad76-404b-a805-8e75e313edb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
        "cursor": {
          "ref": "8c9d1f1a-caa6-4cd4-8bf3-60599e994189",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "019509c4-ea37-4899-ba97-22d8cc19a4d6"
        },
        "item": {
          "id": "3ca14043-0da0-4ef8-a7e2-e3db75b05a1d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cf8554a3-ad76-404b-a805-8e75e313edb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "5b827901-9ba5-4074-bcbc-43d9f541f57b",
        "cursor": {
          "ref": "d57870e6-8850-4ea9-a957-2f61af01f3b6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "219fac92-e49c-43b3-9fce-344f1bb01bf1"
        },
        "item": {
          "id": "5b827901-9ba5-4074-bcbc-43d9f541f57b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f32751c1-d550-464b-bbe9-37b6fe0055ed",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7fafd2f8-7d0a-4e5e-95bb-fea96865ea29",
        "cursor": {
          "ref": "f12a9449-7ff0-4633-bd0c-fa85153aa947",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "762dbdf9-4441-434b-944a-60d866e5208c"
        },
        "item": {
          "id": "7fafd2f8-7d0a-4e5e-95bb-fea96865ea29",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "89889d5a-fe5f-47d4-9106-a227a9fdc9d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7fafd2f8-7d0a-4e5e-95bb-fea96865ea29",
        "cursor": {
          "ref": "f12a9449-7ff0-4633-bd0c-fa85153aa947",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "762dbdf9-4441-434b-944a-60d866e5208c"
        },
        "item": {
          "id": "7fafd2f8-7d0a-4e5e-95bb-fea96865ea29",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "89889d5a-fe5f-47d4-9106-a227a9fdc9d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "56b33f21-b2a3-4472-8a94-f07af1488308",
        "cursor": {
          "ref": "4a9cc522-2baa-41b5-bbca-578f6a5c9c89",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3bc0afbc-8d99-4179-87cd-4474d8660d26"
        },
        "item": {
          "id": "56b33f21-b2a3-4472-8a94-f07af1488308",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "d80ae9bd-db54-4448-b046-ee4d571fd441",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f894b381-ede0-44b3-ab40-2aa10ad6cb61",
        "cursor": {
          "ref": "84bb5f51-7e32-4393-bf3f-1b76b9ab2a97",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "36a43309-a6a2-4b2f-a831-fa29f925fcfb"
        },
        "item": {
          "id": "f894b381-ede0-44b3-ab40-2aa10ad6cb61",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "21978893-710a-4558-9aa1-b8f3af6bedc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f894b381-ede0-44b3-ab40-2aa10ad6cb61",
        "cursor": {
          "ref": "84bb5f51-7e32-4393-bf3f-1b76b9ab2a97",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "36a43309-a6a2-4b2f-a831-fa29f925fcfb"
        },
        "item": {
          "id": "f894b381-ede0-44b3-ab40-2aa10ad6cb61",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "21978893-710a-4558-9aa1-b8f3af6bedc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5f666d82-52aa-426d-8f90-d5397d4bcc88",
        "cursor": {
          "ref": "10a11da5-b49c-4eda-9340-11f5b4b602d9",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "07024964-04e4-44d9-bfd4-942237b95a7c"
        },
        "item": {
          "id": "5f666d82-52aa-426d-8f90-d5397d4bcc88",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4890d607-d1a2-4fab-952a-eddd77e45ba6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}