{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c2912fb7-3925-401f-a93f-7146060eeab5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5ef46bb0-d91b-4825-bb11-26b4dbb5ba36",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9995a12-007e-4e35-8b52-651ba410fbda",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c6937c76-43a5-4bac-8deb-df0f07bc17e2"
                }
              }
            ]
          },
          {
            "id": "56c65b6e-d99e-44c5-8da3-12dc9fe14434",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9e1d8549-e94f-4cfa-87b2-06d20bda9a32",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aa964078-d127-4e30-ac1e-fd484e913654"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "306679fe-a499-4ff5-bed8-534a3930a2e2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "844a19aa-eb24-4105-9798-0efdc071d65f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e86ccef-dce2-4e95-869e-c9f5214ab82c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60cc4dfa-15fd-453e-b97c-703d8af13fb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f96828b6-0ce2-4d89-b51b-3c93bbdb8cfb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf5118c0-4747-40ab-8f71-6441c332b993",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "397d5b71-043f-4f8a-b286-767c8d407b2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "129b3210-5746-4dfa-9db8-e610a116281e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ad23171f-05f5-49f3-be80-7d2cfedbcc8c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "749d65b7-da41-48ee-a9bc-527bde77d32c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0bc97af9-019a-49b4-b091-6619e7e61bce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bc1e49e-0448-4de7-b054-49c5ed71fb11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b9bac28-c3d8-48a3-ab5e-f7ff0db05518"
            }
          }
        ]
      },
      {
        "id": "277ba765-93b9-4d5f-b414-076dbe5bc466",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "94a4d07e-d860-497b-b9ed-20ba63aa1df7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "443026f1-5f61-4655-9806-36178828602c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a66f86ed-5e19-4c86-b7be-9f6854b65ff5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38adeb56-2ff8-4da7-8b97-fca0edfc6576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f02bbce1-751c-4e53-9e41-469333f303a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c1e7e4-468d-404f-9780-5e6fba589a2f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0e6e73-7af3-4353-8516-e793b0c53c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b871eb80-a20a-423a-8710-bd182d3a72d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4cc4b2-151f-48c5-a49e-6f028a2bffc6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0cb56a8-a41a-4c6e-9999-815b0f6b46cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5f09a86-bcd8-43de-93b7-308fa072f561"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca871373-32aa-4fb6-ae05-e04f1bc153dd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d47eefb-487f-42cd-a972-5c7bce5ac0b4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9950d0b-03b8-4004-b960-7dc852d2011d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3773fa5-95e6-4e42-988b-e53e62aa19bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22128d0f-1ef0-493d-bab7-e5272330f104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3465859-2bb2-494f-882c-7e8c4d9bcf4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "046e9c22-0ca1-4d6e-ab4e-0a96f61cedd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "30b10649-1d96-464d-a3a3-bec52dc45ccc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad9af33a-8116-40d2-b512-306100fa6041",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cc88025b-bc4b-48a0-ae60-8065d3932726"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "070b5e7f-ea33-4e98-9512-bfa138343a7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4da30714-5b52-4d81-ada3-a23628336d52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e05b91a-4b80-41f2-a468-639daea2fd97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad6d4524-e11e-41df-afe9-135c92e1c96d"
            }
          }
        ]
      },
      {
        "id": "8b933818-dcbb-473f-b169-b87c62df30e3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a6fd6bea-7d26-4110-ad2e-d87d0dda6f96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7265d35f-c36a-4df0-bb85-e147b3739072",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2bc12b0b-defe-416d-adc1-e265078bc0da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6817ffbc-4aa9-4b24-8764-28d7317403f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4bfd41-2738-4098-b8cd-5398a361a585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4db6ec1-b153-40e7-a934-894d3c6d1e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a777b02-293a-4cf6-9169-7aa7644b8467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3434a5b1-f119-4909-99ce-a13a6399a36b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a911b5-cfa3-43ea-95eb-fc0e9801ae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1819ec5-318d-4fbf-99b5-eb3e2823d353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4c1d17-0e4e-4d6f-b7a5-bb871b657fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1c2a0c7-2559-4775-a95d-940230e0f7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0527966-5068-4450-9c53-9877c7dc5c22",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2a7584-8c45-4da5-8026-7568edc6630f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2678cc-6c91-4fd5-8971-c72bafa283de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53154ed1-38a3-45e4-a978-b2c3954813eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a04009e-83b9-4a34-8997-1aecdd18ca44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee898dfd-b266-4411-9bd1-2b0a7b3fb2fa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb6acf4-fff3-407c-91f3-a1d6dc8fe35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7971325-361e-41a8-9dc3-e55c71508dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcbee7d-f947-4b8b-82bb-a79edcbdaa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72b4d99c-1f98-40bc-9463-3e247484b193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60ae9bd-ad4a-482b-87b4-a07fb176205c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415d33b9-00b4-41f8-a32f-f0b0d13d0a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724a1f90-f615-4a49-ab5f-9c501ef7b734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93685526-b2a9-478a-bef7-3504b5b76553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf081718-04a0-4e48-bb93-ed2ff170048c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acf531d-1f32-4c0a-9102-f57fae4ec8fa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d799f0fb-1b49-4839-969a-58b4f4cd8aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f8540c-c311-46bb-b12d-820676d23e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9897e19-c9b1-4d0d-b1f1-226c35b7616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "578b187b-3f13-4a70-b6f3-79f4da87e8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a4f136-095a-4819-9e90-90ffad20a5b7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad083cdd-df29-4519-ae21-e0c81ffe3a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2239c6-2606-4752-9c2d-3522f5cbd441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b962e421-fac0-4fd7-9893-7c1778aefced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7061760f-18c1-49bc-8f66-ab6feb08546f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a368bda-45cd-4bc6-9e17-ac54cf20a4a1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84c3881-cfee-480d-9343-d4dd30407360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8059e56b-54c5-4431-ab1a-3863221f43a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6deef72-3f79-4253-a326-691fd4b6e03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "793af021-10d0-4cfa-8b36-26c4a62a70b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fcae3a-1574-4dc5-b3f0-8a74e506742f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddc4884-9434-4bb2-ba78-f071119bab8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a42e984-7d34-4cb6-b4fe-7ce292ff52fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58705c1b-f71a-4ec0-b9a8-a04ddb96ef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbc8b2b-a9d3-4c00-85a0-56ff3fe007c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18ad6d8-0247-420b-a355-2ee5a22d6973",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e08068c-2004-43f9-b37c-1503af30cec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f520e93-81e7-4621-9d15-5bde39ddb583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a0036b-f263-4dfb-800e-ff724cbf1bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b92f95fc-2db0-40d7-95a8-e522c9cad286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b440f9e2-5ada-403a-af85-b2048453cad0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea348cce-ab61-4373-9aca-83a329d51e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a648797a-34b4-454b-b44b-10f81e08754b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472aa8bb-b03c-499f-9811-a03abfe4df69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cac2ed73-2fc6-4c68-a7bd-3967ab5ef449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ac6b72-d6ff-4665-8fd6-b2895192836a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1442f67-eec7-4e8a-b44e-92678260671a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83561e4c-08eb-4436-84bc-cdae2eec2309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ed20db-af91-45ce-951f-19085c8a11ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f737d4ba-742f-4517-bd28-81913c0753ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f5e9b1-578d-442a-a6a6-8f72a36de396",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28e6a8d-2041-4dcb-9829-ad2ce9121a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75c02cf-7acf-41e3-8088-059f0cf3f89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c930e8e-baaa-4282-8402-2b44e954ecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4459f132-a037-4a75-9509-496e72fc50cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab6b164-808f-4b22-a268-30899571eba2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fe5035-8fc7-41b7-9b6b-7447a7a3f774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18038da3-0647-4d50-9402-14c2b2b868cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030d19e4-414e-41ca-a76f-64539005f1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8f750e4-6d47-4e6e-bea0-36fc4e9a61b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395c0c50-e371-4578-8336-70dc15aaec89",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c41a95f-3807-4645-bd18-4a05b0da2d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76c36640-670d-4aa4-a6f3-f6dfa24c20b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b465802b-948e-44c5-9b4c-160f2ab48cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6abe952d-63bb-49e6-9820-5c6a60f300b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3470ec63-3e91-4892-b868-505b055b63f5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607d05c1-a5a9-4945-8309-3d7d40e5ba5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc9e24f-0ec3-4e51-b25a-082a99cb7392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99a8ae4-f32a-409f-ae19-044fb7f86549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90633a9e-9950-47db-bff0-edeb721c6625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d052a1a8-6e3b-436f-839b-a0d60a4fd257",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337573c2-079e-4633-85dd-902397a4ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc64fb0-03bb-4aa3-ac7b-2476518e4467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae10146b-1757-4324-a4b3-457f3b4a7cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1408abc0-b02d-4a0e-9405-53a83c53f181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f717e6-8fb9-4ffe-aebd-04dcbcffcde9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f05340-2393-41a7-a9de-1ea6bbd0f6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f36de98-7f29-4477-9fd9-abb20cf4d451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af85a197-d91b-49e1-b652-da80f58b953f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8c7050-9159-45a3-87c7-a8f4d5ab54a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d497da-5895-4cd2-ab1b-8f9528bc7172",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4a4abd-c1c6-44dd-be5d-12f1e02c5ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f5102d-2726-485d-b113-b929a0207c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9668968-d1a4-415b-ba88-dbe252f37f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65f2c67c-4f07-4ed3-9ee5-08d06133a8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17dbae7-8abf-4b4e-a235-601e761c65f5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf52718-8e8d-46fe-82de-9ea5f15a9c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab35844-7bed-4431-931d-c3afda11bb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486dfaec-925b-4bbc-a122-b7dad3ca7dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2540827-dca2-49b5-a1b2-d666347a8b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df22a36d-9f7a-48f5-915a-c28bc274569a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69632ec7-74b5-4a08-9eb6-36d3a9618b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efe0d6d-646b-4e41-9b09-9faa6da3229c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f27914-adc4-4973-908a-f8366906ae70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b527730-2648-4a55-a40d-f21e42fd0365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d18d4-4e62-4947-9381-e8159746bab0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997ec1d1-859c-4eb7-b3e1-0239916be24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252598ee-502a-4016-b85c-b785bd72b896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57b410e-caac-47c5-8825-fddbf788507d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce37ce68-2d80-4791-a2b7-49b68321e0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d78d24-562a-4e9c-bf90-ae7409e10998",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a49db9a-5d89-4fb4-927c-9516a8a08559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475d697b-690a-4501-a2ee-b746f1b90c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edec5ba9-df14-41f8-93a9-52783dbe8fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6aa197e-c2f0-4a5c-b487-e235837aced1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db4f5a0-0e40-4dd6-ac85-88c969fa51ac",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243fff63-6d33-45e7-a211-b7f94bb2bce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c8844e-779b-4c9f-bc60-772dc1d4b422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc94afdb-af92-422d-b01f-2a9f19a72715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7858c6-7f5c-4d7b-8b6d-baa23da362f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada4226e-7a66-4d21-8f01-00b859762964",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22499c80-1680-46df-a59b-fcd426962510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4debee8-ae8c-42f7-ab6d-773697f92587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61f0970-176a-4ec6-a079-a336e5f264cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4999b20c-cb92-44c2-b9d0-4b78505385bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d3c3ae-9494-49b0-9f5e-35f21a4996ad",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734f08b2-ef8a-4851-9cde-d2e607d82c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1790d1d8-cfa1-4695-b037-4b05f9ed7662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ab1b65-38f9-41c4-8c50-f3776acae4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d790dc8-0a7f-4afb-99f5-eeb26a906225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd2733-19f9-4cb0-889c-fffc4dbb30ce",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d76c3a4-e74a-44bd-a16b-eebc463d3ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "876c770e-c0af-4e39-b405-ef4b4aa188ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13ab6f7-12e9-4fad-a869-a25e2a4ca018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4305a5b0-cfbf-4f92-b0c6-95728588972e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c799c595-6059-4ef3-94da-664f348af5ff",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4e881f-080d-4d8f-a2da-730fad716f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54290e4-995b-4f79-8eb5-19c0563ded65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10516c78-1885-49c0-a9ed-44994474abe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a01a84ad-626b-4897-a104-0bcc353ef617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f380d02-2009-4707-8f2a-520c7209ce40",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee31e3c-87be-4275-9dc0-fa30b7e9a07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6797d8fd-22d9-4c12-9561-be4ccbca21c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c4bb5f-ad75-4cdc-91ca-9179d4046299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aaedb21-a5bf-4b1f-9d85-6b3e159b01dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17808197-5fba-4033-94c3-962be686dd95",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45aa1d30-a579-41b3-a22c-3456ce84784c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450f3cd5-a4ed-4dc6-aa7b-8db8652d001c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0171bf1f-bba2-4f04-a86d-ada5bdebde88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c32b00f1-a1df-475c-a69d-599b388d7c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897d40ca-3b84-41da-8268-d89f2044fa0e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ed103f-50dd-4a07-b079-7b4d132acb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ccda03-d259-42fe-b8d2-ad04012ef2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8fa942-d72f-4277-a197-6c27867bbf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfdd8d1-285b-449f-a2d5-6a6256906ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2a4111-b7d8-4ecc-8549-61a36e9aef2e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da462778-d5a7-40df-8e5d-b1edcab8fef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd20c7b-0bff-49cd-8874-f6cdeb45e89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf457d0-1e28-4ccf-b3f0-006eb7ddad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b32c2f6-475e-430c-be6c-2b99a7d85a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459e31b4-dcf1-4646-845c-be9476889220",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3a936d-d732-4f0e-88fc-e527e1deda1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb7513a-2847-4e2c-b50f-0f3139151ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d3cef-ab5e-40fc-825f-fd4a2ecf32ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79aa5871-99c6-452d-90bd-1733d0cdc983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33e37c6-2273-4072-93f2-0fc7a1e5fcce",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec565d74-70b7-4e8b-b775-e5fa32e4f891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205c8993-82a9-4773-af61-9798d26aae3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaaf7c5-d7b0-4b9d-8031-20ac59a47bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c15ebe27-75b5-44c4-a983-81848abe48b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b914c365-097e-4604-93bf-199655a6223b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d34dca-5551-42e0-9cae-adfaee7f600f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497253c6-7443-4857-ab8c-1c7a17596fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98f036b-2888-4e33-9eeb-49a9b5677fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1a73f150-59a8-4241-b0fd-89fd19a4d7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5603fed3-8f0b-4cb7-a909-2978b01cb41c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1efbd41-ac61-4642-a0c3-dd95658c5462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbd48abe-b370-43e1-8d20-5d8495dba10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c907960-ca17-42a1-acf5-7c471cfc94a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e95b2f-21ee-4b55-8b4b-1dc822e58822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8395f8-5c23-443f-9131-71617e3863dc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4cf1cf-a975-4b43-969c-6da254bd3441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f41c3f5-b1e2-4069-8b4f-3ea51da1646d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d63b8d-8f01-4e20-9092-84686dd62a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee4b0e8-2db7-4549-8f2b-29d05030ae45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98351df2-84de-4617-b918-8ebb648ab46a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056ccc95-1485-4fe5-a5e1-da1c41224ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b50690-2df2-4101-9304-c657c844715e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d20ea62-b907-44f1-8a26-1347ea2852f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "75a8d43f-a7b3-44e5-8004-bf0f60ea30e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0e7b6f-44c3-45ac-86cf-624155f11bce",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb418c8b-ac87-44a4-bb82-0fb67143cd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79c427a-71c0-4a92-a92b-b76cc5ed19b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf205c0d-f2e0-444f-a8c6-0ae5647647b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb9e644-8e98-4e1e-af23-4f36626a830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce1db4e-06c8-4004-9351-9c590ad5f784",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71761d6d-ff7d-4ec0-aeb6-5190625901f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c999e3-4824-454e-9a10-ba2919f3ba54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a61ff4-c770-4953-8930-28a09f02fd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ca0e6e-0109-4730-8f6b-cb6c870d268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9c46c2-626c-4c57-b488-d6168f22ddf9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b972c3e6-5720-45de-9ff9-06e6719ac695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e276df-c9ee-4d2d-a6ee-224f5497c65d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15f16ad-2fe4-48ee-b6c4-41a7e78e4431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f014da0-accb-4e7e-a048-69b723d0c407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0133f95-d12b-4bdb-baf5-10de43535933",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080398d4-39ea-48ae-83c8-0a01ca7dd752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fe633f-0a97-4550-91db-a2b08b19e394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d94a2d4-a86e-4aa8-86ea-06b838a2e694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0b7fceff-e17f-4c53-9efd-78ff54d73b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5884962-93db-468f-9fb7-a58c9ac1e997",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bac31d-5e6a-4f93-a18c-1d72d3cd472c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d524cfb-f379-4128-9ba5-877cd17b7285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba82d1c-b1bf-4c30-af55-bdfc739dc9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a011c7-91f7-4a28-ac64-b0c9d6339d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d305b2-9b35-48a4-95f1-c2098f2bec35",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d702e4-ff78-415e-a396-116269fde096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50df69bb-ab94-46d3-9b3f-7391fcb1aae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a287a0-7965-477c-a973-d2248711a619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b74e762-2f5d-4b4d-bc3b-aa0e5287e380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc7b60e-fcbb-4b84-8b4b-4f6aba906445",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc7e6ac-a9ea-4c5b-8dcf-1d0fe371a8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf67914e-01af-4103-941c-4558d64b8c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d11a03-6780-4140-bd22-8496f7c7b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d1c947-6077-4157-8c7b-836463c837b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3d435f-6885-43d9-8992-089d84d122b1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0012e36c-b7c6-4a15-b0f9-6ef689be4144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970c26d8-3e75-4d8c-94e0-58801fba1c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6714ee6-7246-4735-a57f-35bd4c006ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a03207be-e0f8-4375-beef-61ad6495612f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823a7911-4a9c-4c9a-a780-084cb716b908",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b90104-73b0-4876-96e1-6bf237833b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b71f71e-73a8-4731-b83b-43ed090bf433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830df2d4-e601-4838-9812-104ba2252e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a8e317-5e2c-45d5-bb6f-6b40de1f98bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41de8b3b-3890-446a-84fc-1c70e4f1e5ba",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f84dae2-56cd-48dd-b770-8d69a66eed6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f0e75b-591d-43e8-965f-2c6fa6d029f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fb8b0f-e32d-477d-8c2b-172d48e7055e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b6593d-a93a-4884-9e91-aafb1fbcaf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b061055f-1ed3-4d20-9d0e-f2d51f70810b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae9ea45-e30e-43c2-9ea1-146b145a275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7869f86-4332-4562-bbe5-e9fd62ead571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c043e12f-0d73-4d9e-8e86-5ec7bc4d6213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36916155-2257-42f3-bd01-02ea3e9a3214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87275d3f-62f1-4e91-a41f-851b92953e30",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7582fcb6-2674-4eb3-9f21-9a565d10f5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282f7a3d-dabe-4943-8eab-8990906f9185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be8be25-1876-46b7-84d7-bdc691c61a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a945240c-09b4-4dd9-b4f1-58a8876b22dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae9c538-8ea7-4552-95dd-c020b058b59a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6fd089-4be6-40f6-b101-7df506e55351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f1896-1e60-4d72-a2cb-5fd9ec080383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24230791-6a89-4cbf-98b0-d708b502b6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd06d12-a698-4db8-96ad-500b584e4095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500c7913-40cb-4098-9e3d-9df5d7659141",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f58158-e3be-4b6d-8f2e-11b243c56f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de9c99d-a606-494e-960a-13eac671d1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e0e00d-8e4e-4cdc-9e15-b90ec54b0bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6062f078-0988-484f-a854-392d42dcf922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3b6087-fe47-4c41-afe7-2cf2dbee77e1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77080a9-e1ab-4643-856b-89aa7799d93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f81274-49f4-4652-9b3a-2c91546288c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9e246f-0b60-4024-b952-621d4613e154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c80183-b9a0-4c5e-8773-55c96a39819b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45a4c25-de78-4bc6-ad08-b97e5b624ea4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cf2ec5-5c2d-4255-a3f5-cde8befb28fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2aaf0c-5c77-4427-ae47-e0cfcc603f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597da371-ad25-471c-8dd7-956f0349b0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "509f978a-0974-4ab8-a854-3434e4e6d7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "830f8d85-077f-4cd8-b742-9d9d0c06aed6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc622d2b-fff0-423b-be2f-9587d8e695c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497d58fa-f056-4537-a11b-f34f806ee8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a8b290-f7fe-4ca0-974b-424f0522d566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6728833-3a5e-4bac-9dff-e92b21891694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aba3d0-ca54-44ab-8f50-0c27f15c6880",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2542f8-7680-4c70-99a9-faa2c90c7c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba07a10-1151-46fd-a304-e87c6e308147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbed97e-16fb-40dd-8290-fa179c7e6dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf1c5a5-0423-4b71-8fdb-6eabb58ae21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fa4dee-3edd-47a3-96f0-84815220bfc0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f381c4ce-b750-4eb7-91c6-1883eb75551c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8693477c-4a83-436a-bbe4-f3dca7f47406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6898c8d5-7c07-4ea3-be9d-f8d05dcef504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f11651f6-dce1-49f7-bc4b-bb2177ed65cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1b293b-7105-4455-9673-f768fbdb8002",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7e2ae8-e4ea-4297-9bc7-cc88daec2335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49045c03-0aea-4588-b3c4-30f707a1018b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ab38cf-15ac-47ca-b8a0-a2b23841deb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8d4f06-ee79-4ceb-9b06-bf79101ab31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961f34ee-fa61-43f8-b83a-000cf002548d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67df832a-e8e2-4052-8b15-7a862cda9d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2272d78-830e-4f6a-b518-2d7ab2b386bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0ef81e-b964-4ca5-a210-2ad55b842daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2542ae5a-761c-4b20-977b-2ce341c17c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cef09e8-a274-4c7a-bb76-37bbca5a759f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6462b58b-ec7b-4953-aeea-f0416296b478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d03899c-156a-436a-b4a1-556a25dd7656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba030dc-fc5c-47c8-b7bd-e90ee01d1d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bec258e-54a8-4596-bc42-bdee8f25e88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6914f41-09a9-4ca7-bf1c-7cc001aa0716",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63e11fd-cfcf-422c-b46e-8f6cd8cbece8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186f152d-4eac-4ca4-bbd8-35be365ac845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7cc0fe-9255-4762-8068-88c310582beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d93fb5-8c04-4338-88f6-bea992cf1281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25931dd-dc5c-4f24-8bf2-d7610d369592",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79004a9-130b-4b93-b3ef-e87798731f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386d8c8d-9f35-465c-bbc8-a5c31b7d73fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd7c9c7-6d81-47a5-a7ce-b00717ba666e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee4b752-9acd-45b5-b450-0fb64e0db356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5a580c-f58c-46b6-a8fb-c150bb054242",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d4720f-fc68-43b7-932c-6cbe413422dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281a4b78-50b2-44ee-81ea-7a8b8cd58d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b131a5-41b3-498d-84ec-948250ef6438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c023b799-51a9-47c6-b354-ffbca3b8d3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b62bef-17cc-4ebe-881f-4ab413027fc4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d133ef19-a113-40a7-97b8-df34c2e67c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab51a79-4e8b-43f8-a70e-1b3b87bf47c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838a8b4f-0366-48b1-9326-4281969e6303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a396fea-d633-4df4-ad4c-fa193e6ca5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413a645d-050b-4f94-8f4b-21c68cb5cf6a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705494c6-5c25-427f-9a22-4156d01d6a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a5c92d-0468-490c-9584-fe12a574ad3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f680bb1b-10ef-4ed2-90e1-cbab26e7e1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33850b17-ece6-466b-9cc2-517694f5f462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402664c8-98d9-4d23-8f8d-0887d764a85e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d920b770-b365-46b4-b9cd-5afc7799de2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07009b33-bdec-4a0f-affa-ebebf7c15808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3745b8-afac-4367-abc3-13e521ed2ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4faabff-ca0c-4294-8d8a-54eb0b75b979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc859a51-259f-4009-a415-6f1574ac00f2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b3cb19-df6a-46a6-862f-fd075576aad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7fae0f-9958-4495-8a46-d62d2f1b7e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313af983-8baf-4459-9e35-188fbade497e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "997bd691-6637-43ab-b463-5e406ff68667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab940865-7764-477f-9175-cae43e65be9e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c3d5b8-27cc-4a91-a3be-3c73a3c2429a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c3cf92-0170-4a91-9312-622b04f62b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0888ad22-e110-400f-a7b0-a8a86950c0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "950d62cf-57d6-4b35-8c4a-dc00b7568338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a0a18f-6f3b-4e6e-bc04-3f717e83faeb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63d27bf-b76c-4e3e-b252-35fbae83d78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474c145b-742b-455c-964c-7ce9d2222e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3d4715-aeec-4834-b2c7-94876fe36722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6d1e9f-1752-4774-9030-e79d33f3b745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e90d5b-6011-44d3-a452-9eeb6cf7cca9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7db00e-0dfa-45af-86ad-95c4e80bc3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b748d9-c3f3-488a-b91b-b386df592f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce53394d-b92c-4888-a97c-af2e91f0d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4ab384-42bd-4e8c-979a-fe93a48b9a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836f1f0e-30b6-4a09-9c67-9ec3f9a9271b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd95fb0-6849-4e26-972b-c6d07e6cec56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe593570-9141-48b8-b4de-8d7f575ebf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da9d4e7-e6ee-42b1-9936-7bdb951355ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3289d14-f143-4f58-a551-ef0a110674f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92322c01-bfed-4021-b5b1-224fd322285c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c4c937-c430-4894-987e-34d431bbc041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8524556f-67bf-4dd8-a9c8-9d9229943eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ab375-2b50-4279-bddc-e1d6c38e0f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d86cb5-370c-4ace-bfdb-1d0af6bf96e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cb7e83-1174-421e-a4b2-f41151c2d328",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879cfa3a-ab42-42a2-8d61-e337bf599c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae9458a-3c2e-402b-b3fb-ed4a9d2089a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc08616-5d88-4448-9bc9-bc68af2dca16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d330717-4cda-4a4d-b918-9da7814e9549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8953122f-1fe5-44d2-b16b-4c0d45181796",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf90732-36b9-49e3-a8fa-d6b60d519315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a395703-5884-4e01-9f13-40267bc9d802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0678332-e5ee-4687-93be-45b5bf223cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8fb67c-a19c-4cd4-a93b-636162955739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10603dc9-d62b-4c57-aacf-f8ea3862689d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2ca7c7-3c43-4bf7-9b80-9b8ea4e990f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0c453d-48f8-4f79-ab0e-3d46ac4c726f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2960e740-6451-4568-861c-9a461bca7a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ceff00e-a814-41b3-a547-ee500f24dd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21838ed0-bbdd-4a92-af66-a08bfe8f6ec7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc501ae-225c-4dee-a84c-ea5e2f47f147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021ed364-2e57-439c-90ec-218ed6853ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f71fd8-6cac-4630-b7ec-d034da3371a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed03f2a-2838-4231-bda4-bebb0bfb3e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c8e72-145d-4269-9765-1fa9af0473c7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ecd0bd-23f4-4400-8375-89ad5593f93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fd0a0b-eeca-4ba9-815f-868ac0586d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a80ffd5-b99b-49bd-b6a5-9188e127ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab1d88b-e898-4242-aca2-dae513e78fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da6084f-6d0d-47e4-8601-d56eab6d826a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1d9a24-9bc4-45d5-981b-761209fb2e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28da06d4-ac6e-4aa1-b667-edd38d35334b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e1ab6b-0dc2-479f-ac84-85403740a4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b319afc-6c64-4636-9dc9-b04b58f9db03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b55abe-0765-4f47-88ba-98a10451621f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fbe88f-e19f-42a9-8b0e-208d6be1a2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da5806a-d5e8-4dfe-9fea-f4422ec01829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f424dc-6f6e-4f04-ba9f-07bff3a07bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02547e7b-36f9-4e0d-87d3-b6d536b280ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0f554e-c5fa-41f8-b0f2-b14b88937ba0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cda663a-4269-4bf4-9394-1d1869cf8231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a710a52-7e02-4c02-b310-0ad4dbfeb303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5619686-4b78-4ab0-bb5e-e6036ee2cc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75951212-a2ee-4165-b2a0-7f25f70c6628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2766ec9a-d47f-400a-b5da-a1ab22ec8a86",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5792ff-1e92-4257-ae5f-b6f64677fba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798f7eba-620d-4f8d-a698-cf1f067fef6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7892cdf-b8ba-47b9-9d20-30089e99e4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ae4c94-1670-4f61-a0f5-e7c3bf202072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c5c26f-46a2-4996-ad5f-ddb3c3f95178",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695c8c31-bc8c-43a7-b88c-7746dcac36eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb4a13e-788a-4278-9848-ac880ba914a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940c4eab-3147-44b1-8c58-e1c2859f12ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdb9128-3164-4320-a9c4-56ea12cd2757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c448ba3b-2189-4b36-af59-46dabbc36b12",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59da5c25-435b-46e0-8ae0-2deb8b88a23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "830dc071-896b-4036-80e7-a2c7ba1c5f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52256757-5a12-453b-9f23-cdc715423cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84530d12-44f3-4bbf-8a71-392d9db53d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3795f685-5752-42b8-b499-03874e4ac756",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c5ceda-01c3-43e6-ae1d-4e672ba94843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446d51e2-01f4-4f6e-af65-698ee25683b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c321f87-9475-4cc8-90a8-76a190731c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "313686c1-c273-419d-a796-15966916da7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c382ad5c-82ac-4a37-8c7b-4546512bb9ab",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de24d64-b80f-4b1d-ab4e-26aa86fe7979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed92bbe-9a85-4f95-8c8f-af2f6d056fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04034cfa-af72-4b68-acce-51677b71f8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "443c0b6a-9c88-43a9-a347-b3ae795974f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772ed5d0-0f67-44a0-affd-d14aac9355f1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb53056-49e3-4b33-9a94-7d26ed0ff0ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c184a5db-7b1b-453a-92e7-af18a223170f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a463bde-95ab-4142-88c1-446560280689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea23b8a-1761-4c43-9453-d112ae9676f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89810ebd-114f-4734-b363-eddbe3764ef9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29f3da5-dd7c-4a57-b72d-8ec4dce32c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69077b8-7590-4566-9331-83da05b79376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216e0daf-9825-4d31-aca1-31ea94e1e1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f399929-d221-4c2c-a0ed-7052480e431a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8ba587-bcdc-4f03-a0c8-7eca1bd41d11",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa80d392-1dcf-434e-be71-090649ec744a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fb6026-4597-4adc-b9ec-8207368b5fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8c60c8-3aca-40de-ad82-fcc52cad4dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5038c6d9-b91b-425e-af9b-6862f2c60e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d7348e-72c4-4fad-bee8-e29f045c5a84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9b7a76-6681-4780-876b-97fcd815ba75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d408df-031d-4701-b597-c2623bccc1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e199ccea-e68d-4f55-a24e-26e8da3c4d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60b08eab-75e6-4893-a77c-2442ba2e13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e0ff08-2339-4e50-aa93-c3dfb4e8c433",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94a5dca-2168-49eb-a0f2-560ef242b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3416b80f-c7f8-4d84-a412-740c184638aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db122a3c-c7d4-4489-983b-e2fad3940364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24a792c2-6f8f-49e4-a97d-523e45a542e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dd6614-5772-41ba-be5c-8b3c908bfa0a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d47d6d-c67e-4971-82e8-ef6889f2113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89240b9f-1b85-49ef-805a-21645100858d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4f93a9-860a-466b-b2a0-58e829b2c7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3ee7f3-eeec-41eb-a7c4-2ca3b7d51a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1634537d-1463-4d47-acea-8f9652893cc3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5817a39-aff6-4d3b-afc3-364647b23c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6f65d6cd-cc37-4e6a-bda1-6096af57cd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bca98f-c05e-4148-b21e-8fbe0cbfe085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fc46e6-4846-4c31-a829-8ad029c7eb21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7add8707-52bd-4554-a448-481ed8192a40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe2b174-4768-4b40-8b3d-24b531bc5fdc",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f4b55c-5d25-44db-99ed-bc4e0ce30c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b268dfa0-1c87-4687-8a1e-361c4e17ca71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4013becd-03bd-47b0-9f62-910a3d84d018",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "703831d1-bc8c-4f06-9a2f-6dd985aa556d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a8972a4-88b9-442b-b827-ac7eaafb019a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc908977-f271-4ac9-9bc4-3ea98e2b2e17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "404da963-19b9-43bb-9788-ff484c6d6bba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8235c0cb-77a0-4be6-99ec-72a50401093e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5b82e9c-4a51-4761-a9ae-f554df0f0540",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14fa5ed7-f3ff-4d0b-b18f-ad7f97edd0f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d19d08a1-52c6-4981-aa87-31cfcc2875e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c4635b7-811b-4830-801a-8d31c9158ce6"
                }
              }
            ]
          },
          {
            "id": "34ae8749-70f3-47ae-93e4-e1d29338c839",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac811014-2168-43f6-9b3d-4b04879c65cc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2946e6af-c58d-43e7-9b5d-aab89b32b423",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992262d4-b486-4984-9c18-b73bc72ec9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fabf2680-afba-437c-8791-7b74ba537e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473a9dfc-d5d1-4c6d-bf5b-39f9104d277c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8837aa39-724d-4242-905a-203aa828ad39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76e67e7d-8113-4811-9675-ccf5fd0f32aa",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9be1fee-2877-439c-b6dd-ea0d89fb73bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "152d97dd-1cc0-4acd-8f9a-0fe06771ca0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "756cf589-c69d-48b5-8df6-f21641bd17c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9c149473-8780-4c19-9e72-2960479e31c2"
                    }
                  }
                ]
              },
              {
                "id": "c88b0b04-304e-416d-8637-0d02d9f0b468",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcbfbf3a-3df5-4511-9e55-556ac157e39d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f4e5945-3a60-4942-92bf-d24115692178"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d14b7b57-85c8-42e8-946f-d8e9dec100ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a02401ca-7fb1-4f2e-8c35-6af2f3a1578c"
                    }
                  }
                ]
              },
              {
                "id": "e1f6b101-76fa-4bfc-ac45-d34fe0205a60",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8458203-2519-4477-a3ad-2497c105f6ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3952fa4c-824d-41c0-908c-41ae3a122d3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6994971-c627-41cf-9dff-5c0ffe82c4ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01c3f77a-7d62-4c84-a41b-226da9e77f49"
                    }
                  }
                ]
              },
              {
                "id": "0abc80a9-24b2-431a-8351-e46004452784",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d62a32a9-3eba-4c58-b324-e62b4f85ae32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc309570-0049-4519-9abd-78438959148e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03cdb6c7-19b0-4439-9c0a-79c05e2aa676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d28b29cb-d415-4db2-b362-6e6613633e2b"
                    }
                  }
                ]
              },
              {
                "id": "bfa62102-30ae-466e-840c-e4f02080ba67",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "083bdec5-73df-4480-affd-0324602c5993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "507a1dbb-1b6e-4ae2-b664-9ddf39e256c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e9c1882-4598-46e0-a5d6-546c1e281bc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "177293db-efd1-4dac-9098-686d246b60c4"
                    }
                  }
                ]
              },
              {
                "id": "f1f9071b-e2bc-4b85-b0f3-dcc922f42407",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fd66b3f-af51-4f93-927b-b8f6220c84d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebdf2b09-475f-4d2e-86d1-f92ccf536133"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3b6c826-cc63-44f5-9330-71b0ae592c90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e1a70bd-2333-43d3-9998-15ce42be5d8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99d59b9b-f7ba-4813-a4b2-385b7b0e58bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2c3a06b-e2c6-4f7f-9945-817a94ddbe71"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2e24e97-156b-4b36-b31e-74ad988b9465",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71f6640c-1dba-48d0-8271-953caf6b3a56"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7d074ea-920e-462b-b854-e96f04bde4bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b7019dc3-3603-4835-859a-60eac018a22f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba1b23ea-1faa-46b0-b18a-ac99c8297204",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d3daa84-dc7b-4250-93dc-8cc3c4663f9a"
            }
          }
        ]
      },
      {
        "id": "b036b754-9252-4c7e-936e-bca30ef7340e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eb88d33d-0c29-4a73-80d5-a1fc5f0520c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd971658-31f1-4005-95fc-a15ad4314ac7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c180ea97-d51d-414e-b8e8-03c3d384606a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b50e0b-bc68-4bdf-8d86-e23effcf124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc0a277-b0b8-4107-ad98-48a145c2464c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dddd7c4-da8f-4597-8fed-87522028bf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2d718b-37fd-490d-8eaf-cfd0746215e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589e6d06-d675-4b50-a3bd-d128bc4b694b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7673e135-93a5-402a-ac96-33c70fa628ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac725f7e-0f29-4a33-9c30-f88b59a6e147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be2ef1c-a2c4-4c8b-a6c8-354c217882c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8f24c8-80de-4bb8-b4b1-fc49fcbeb9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4513c876-5935-43de-86a6-a7ff2afc69e0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c25d537-159e-4a2d-a828-d830a9050d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35963906-10cd-41d2-a2d7-76bb350a37dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ef416f-de8d-4d44-9a5f-eefccefab1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "227dcc11-fb0b-487d-bb93-5247a782e957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99926cdc-5ce7-4fe8-8ce6-9df766e877b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc053af-1d8d-4de0-9713-9b4830587f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edd461b-efd5-4c49-8b98-59836e09e9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ae2c10-87b6-4a14-9092-22db5c5d34c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "076d5df2-184e-46b1-9aab-f4dba5f64bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a201797a-810c-4fd7-b803-d4bf8d00562a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c54b649-8ada-4b72-9e31-98016f25e2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc7db6be-ce35-49c3-89db-193b7412903e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036718b0-c670-42f8-bbd2-389e875bb41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c977b581-a898-4f72-81fd-8e906fb3b6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca36b3b-d3e2-4311-8f14-1cb4ddcf6999",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489d072b-2324-481c-aaaa-935ff91cc0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a01c29-9b80-4f46-b31c-837a9c5ae1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f0786e-bb46-42f8-b77d-641e1da3a195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34b2246c-18fb-4596-aa5f-962ac18f3028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a09940-4405-4523-97e6-3e77fa0425d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514a5722-623d-4156-9956-2aa3e9f8d54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af10949c-545d-420d-a857-4522692874d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409637ef-8f78-4bc7-a8fa-8eda71d3b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a106ab5-8b3b-4b77-bdc0-7fc6d5965b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba2606-cf05-4b75-b4d7-b61d63345f66",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195bddad-405b-4b2d-b714-e318dbaaeca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95589763-369c-4ea2-8bb1-98fbbd682d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28b36aa-830f-433c-9af1-dc61984d2943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5fe752-66ae-4487-aa25-eb893885b168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936149f7-41d0-44cb-a9bd-ff1be96dbe68",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed10db7-82c9-40ea-9720-ee460f525cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0bd80e2-eb1c-4006-9676-bc3bb3b0ae0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfb02c8-9239-47f3-8c03-04cff6b5a23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfacee3a-da6f-4fdc-8ead-bb5fa40ed91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0711aae6-2be8-4db1-8fd9-62acb9922af6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92b530a-c073-4006-9925-68464c58461b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0d2bfc-f2ed-42ac-8f6d-64b3b948ab2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b198f1-ae3a-4191-a268-b4f98c8c88ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83c6b588-9ee0-4737-b251-9b48b50ed45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6d7d2b-7779-464c-b6c2-547a85d890b9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1e4c66-01e7-4422-8aa8-aa1238151093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba0edf62-e52b-4362-a537-b394578293fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686f6479-4ead-4418-a1a5-f080fa3dcee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a8728c24-0f7f-4be0-9ff1-d1a6d59df42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f901cfde-7c35-46c4-bc7c-514075958544",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c4083-8939-4fdf-b93b-42520ffc7486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3fd54e-12bd-4d5a-9a22-085703b3171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e766fd8-63d0-4d7b-9879-b6a80fe99fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "926c59fb-b2d2-4a05-8805-3ad1b3dd2ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4adfd4e-6414-4971-8cc7-d0c3c69c62de",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b115fc6-f911-4a3b-ac29-899e93a84423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72454922-b38b-4f62-937b-c830e863beda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ad5201-8fdc-462f-a088-5ebfda3c32a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b26439a-08b1-45b1-a810-5057779b22cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d493c9-a51d-4f92-8c0a-e20c72043cff",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d9d83a-8d50-4c76-8d1c-5796b86b27d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "578c9cbe-ca2c-47c8-9e36-0a8592ecab84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aff3e4a-7a86-4d99-8959-3f2450bf871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "62178756-26bb-44a5-a9e0-74a645a125c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d325bb9b-4cb0-4817-8fad-3d28d075fca8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3e7b43-6822-4fc2-9bde-521cd2875c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44eaa012-df38-4172-b427-52d8aa16719d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4d6a34-a34d-46ab-bc29-bdb37b719af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc5bbe0-604a-41df-aca3-10a70cc53c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12af58ea-dde6-4a5d-a4a6-75794273ed4d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d34c31-361f-4c95-89a9-7377342f2f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1481565-9b39-4025-a8f4-e08e3d8d28c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ce0f65-1913-4c76-9e93-6a6bafeb5721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a683b4-eb59-4266-8295-e910c8a497cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dc3637-86b0-4d57-935a-7fbc82b90beb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec8e098-7b2b-4f97-bd49-bad12288b13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4859792c-d09c-4390-889b-502d1aace281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25102ba-58cb-417a-87b9-f44551dd15be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9064aa02-9e53-453e-b99e-dc43bb94d88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04ef744-25e6-401e-b170-122286339f7f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9bbd32-14f3-4f6f-be6a-9cc66e859253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3505fa33-4b95-422e-b06c-05bf1e539a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e129a402-b46c-47db-8682-b8979e9dc114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3745235-968e-412a-8a26-a4d63e46284f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cb7afc-fc50-4e10-a4b0-30a066f84cab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d2f703-04fe-4c35-bf67-31ef6233958f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f15fd80-9543-4eb0-a0bb-1d54ee1a8f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dce9c39-2dda-4c89-a26d-3f428a43050d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e602fb3-f5f9-43f6-ba1d-5292498887a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e061472b-10d5-4fe1-9fc7-e8935f0298e3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c349bbdb-a61b-4e77-819f-1eaf696be53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c585cb-5072-46c1-ab61-daba109eced3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e04323-3cf8-4cc8-ae00-b0288399ffc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab74a310-4bc9-496e-8f16-3550481d9c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d4e663-bfe9-4c59-8389-9e4bd4eb7e45",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a124c1-e907-459e-a712-a944181e00f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df329e3-580f-4a7a-8e68-bb72e8aa5750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167ed6fb-9749-4b15-9e1d-74a548c7281b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c443bb8f-895c-4d70-9fc1-3d43abd67dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b1aeb2-5be9-4f58-aaec-373ce390d40e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d806c538-a274-44c7-9497-6561a5f48fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668496b9-ef80-42e0-8581-c4cacd103514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5cb5a9-5d98-43a3-ab7e-22c6b4f0425f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b35dc0-c16c-4db8-9645-969293c3a2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c123830d-d2c3-4bf3-b352-3a76b1e8ead7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febc7cff-15e4-4ca5-8c3d-46c6088722d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65853c5-75af-4fcc-8403-1fed26a53c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f479b88b-709d-4395-b7ef-3021b5adedec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f92c0770-e995-43d7-8670-4855986ca6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d48d3-2b36-42b8-b994-61f427999d68",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2288a3c-90d6-4a73-8fe4-3a31c5624f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8b71f6-da27-4e5b-982f-e15eabb8f97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363d184a-e205-4c40-aa3b-516f3597385a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "159c1416-4fc1-4ed4-89b1-85ae6b2ee042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a00b99-9b80-4da9-b284-6457da4a2c00",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a957336b-dfc8-4b42-a3b7-406f427bc074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ed813d-fc55-4380-a1de-69922521b409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99da9fe-58af-4c01-b015-901e03a0760b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4550ac2c-deef-4f27-8c0d-9336ada08e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca05702-c301-4ea7-9212-77e9b56aaf2d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76ae38f-3b39-4a5b-910a-8ee38743077c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96871b31-0d79-488d-a70a-0e12a0cbcfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1a194e-8a58-4e9a-96bd-fe525b6feedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf62afe5-510e-4b2f-8c61-e1bba6a91868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6aab5ff-0917-4152-b436-c2388ecacf06",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a264d6e-54c5-4a91-af44-2ca15b478041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb74b194-eb90-4397-aa29-758a2ea3a1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f2f9c0a-72a2-445b-802b-3c18c8a5d4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c174f1-277f-41d0-af1f-c5f3d1bf8622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa669db-1501-4d8e-b90e-35a7c142534b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2061239-8acb-4be9-a35e-de9571a7d754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb381ea3-4e36-4d5d-b431-2bb6cc0a9f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3795bf5c-e353-4172-9a82-c9335b1e0e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0620aa76-c1c4-4754-9c28-3d404cac2b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb3c598-27df-42ac-b226-5ad203a84d0e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f30d92-ae80-4031-8f64-f78a946b7a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4be22b3-edbe-478b-b763-73965d286498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4310eb-065d-4b87-829a-85d072f6c013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7b6cee-a561-4342-a733-a76fe29cd0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39214b1d-3c31-4ebb-a767-02e77de9053c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99b5da7-38ec-4757-9fef-e80e13f73ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58928089-11de-493e-9f70-51fd8e0148cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0eb430f-5819-40a4-9669-306b127e65ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "867d91db-5283-4de5-849c-e5e2a18d9655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a99acc8-0f1d-4316-afde-be144be4cd38",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff9d5bf-6304-425d-8bad-66df2da562b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5126899d-3397-4d0e-ad2a-1cbe0abb678b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61beac0d-3cb8-40e5-8772-6f742d6ce8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e154c38-d102-42e4-9a9c-2622ed5270f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fb9301-a025-4200-98ed-b6e3ed026e83",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ec4c21-62e3-4a8d-961f-708d1c2bba2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b3af5f0-19a0-46cb-acba-0e896bc2db58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99aab0a1-5a19-410d-9a2a-2dc1818e0d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba37b5f-72e6-4f27-9062-00a74de6ee1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c2ffd4-016f-4c6a-a893-a8b087cd017f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2854591-ba32-4681-86d1-964aee389d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e9fc17-a990-440e-b2b4-f87a7e152aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecd79af-85ce-437d-af69-bad37e2fecd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce3a59a0-9eae-4123-91dc-69df1342d771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec51da0-8271-49ff-9913-4e25e39a3219",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81dbea-54be-450c-9dd2-d3fbd73429db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d44bd4b-c28b-4f83-b636-e012712f3300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80052bd-df7b-4182-97c9-c2d46933ed69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0c223b-2ae9-4321-8e00-067ec05d6064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d54ff0-bf01-4d41-8c9a-7e8ad0912abd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377e1050-4107-4629-ac58-94c24ac72ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76d93ef-a7f4-4e77-b87b-cd39cf1bdf11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7c1034-d2e9-4e99-9c04-03bd1107f2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f68f72b-9c96-4e72-8779-9612974e9dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290e9cca-d8f2-4ad7-9860-8dad61035942",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0cdde4-5996-41c1-8b72-09d0434658f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3ca59a-e840-4d24-8412-e19257d9b817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2fd8a2-9ce9-4e11-b2ff-06e38675283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d2fc510-287c-4add-85dd-b6774965df03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ccff5b-a72a-4da0-bab4-6f4e10f194ab",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e6d962-c881-4581-9835-56d115ced443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f669e6-6b3b-42ec-9069-38cd7840c180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21986a7c-35c7-472b-aea4-c386c0b9e90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "548b041b-3e28-4320-8fc4-5f8b6dcdfccf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee0b7317-09e2-4389-8620-3217ef571d00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6cb4045-9a66-4e4b-a95f-22a6a25ea073",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac682f10-3c27-4cfb-b944-788289bd8e9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0cddacf4-8e81-434d-aace-3c0378a2a7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e589d0a-1c03-4eab-819d-39a8b74a2697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "101f400a-4126-478b-90bb-465741458607"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c793ccdb-8010-49a7-bd06-35b75fe1f35c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1666f9a0-74ea-481d-81f4-45428ed33e97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "784cd9fc-c2c5-4ed0-b07a-e461071babea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bcb6cc8-1a5c-46fe-b112-4314de92f2d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b655230e-71bd-414a-8ea6-a81df4d20578",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6e6bb3a4-e4fe-44fa-a580-962b17955965"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12f4700f-af2b-4daa-a1c2-4b82ceb7e088",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b315ab0-fb1c-468c-9e7f-fa54641cdb6d"
            }
          }
        ]
      },
      {
        "id": "34d8ad4d-c46c-4481-99b6-b666f344bc77",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "91f30cfd-a444-428b-904f-ff8f2dc9d018",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e824c9e8-3c46-4ce9-8762-88837f944fbf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b2817c2-a0cc-4e9a-b4fa-113e820cb5ce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ead8502-d70d-4dc2-84e2-8cfc8052e81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498ed291-7a50-4b62-a20f-feeb2d6d83b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e567de87-9e95-4d36-8fcc-6920188714a5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523f4b4b-4d02-45b2-826f-d02b2d376710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecaf1b26-e1c6-4f5b-a364-fd9ca414f950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af066bd-0b9a-4c90-a4bc-169d8db9d1e9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e327ede6-02a6-47e7-8ed0-a5c45893f61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c9bcca-ba28-43b3-a041-80b4eb01615c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abab3af6-6448-481a-890f-f29fb8337fac",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2718898a-73a6-4a1e-b0e9-4f48c88cfd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73f0148-7ac4-4a7e-8cd9-6fc67c5bc796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703fb4e5-dec9-46a2-b69f-7669a97b130b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a695dc5-e47e-444f-bf5f-e44b6e44f1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9627d47f-0341-40fd-a19b-49af2098f41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0e54d3-79ca-47c9-83fa-ee2548816120",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30f9dc6-5271-4f31-829e-ec43b3404ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83cf990-6f1d-4f7d-a04e-89f35d515c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0409224-1e2f-47de-8702-57bd983b0cde",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cca9c71-e5bb-4507-927d-88209ec769d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148c8628-0168-4071-869e-96551f3a0a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdf0e19-6ae7-4010-aae8-dc4ffcc5a1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de259f50-1403-4628-b7fd-8d93cc4dee7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afdd30c-f5c8-4a3e-ae59-367c07b535c0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6581dfe2-cce0-42e6-89c9-3aa3f27e1177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e6812a-bad0-41e7-8adf-553ea102d81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e939157-b34f-4cd5-956b-1df7997ebf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140440c9-6b1f-4834-b79e-fd38e4372467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ec7191-ee7c-439b-ab99-43fffba0858b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9628cc10-f907-46ed-90f3-2026d8cff4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45cf3bb3-155c-434e-a130-b879dc29b52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc19f9a8-f159-4c04-a469-c676f99f25cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e76ba0c-fd54-4cb1-9028-bceb52fe876e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1284345-3474-448c-8234-6851c898504a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f509ea8e-84d6-464a-8075-c1cdc7774413",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e768c4-a575-40fd-b0a4-f358c6295b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee5ff12-5bff-452f-a5aa-1b09913e8783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994668c0-d0f9-4216-bd2c-962e911d5ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120ed6ac-d787-45e9-b6e5-207c8d187d45",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d68c7d-fdaa-4fb1-bab5-c680e6b0a741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf5b8c7-8325-463e-a9d5-a32b03787ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2ec3eb-6d1a-43eb-b353-75dfbbc33e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6db5986-2a66-44c1-ab97-cecc290402cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3153007-10d7-4def-b486-9e8543214040",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2216a7-daaf-4e4e-a393-f7661a5cb35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3e48c4-a60f-49e5-9841-40b3962a93eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e647d4d5-ee5e-4f7b-ae80-abf615855589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab106b7-e8b2-4063-9c2a-673717cc2867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e6b377-29cb-4b83-8b38-9c215d821f48",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42140e79-b025-4882-b776-a0bfa5a62fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca2d163-5d46-4a27-b4c6-75bcc73ed100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02599829-81f6-45d7-a6c2-f587ca2685ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fe2ed6-0498-4c0a-98d3-5c0078696101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5545db5-c5ce-401b-ad70-034e3e2a66af",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2b8904-ee09-4844-961f-6e787082b590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "673def6b-6e71-410e-bd72-263df94cd674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70491bd-fc39-44f3-aa1e-39ccfc16668f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb7cbeb-7032-4b47-9fd7-88dad532f2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b710b9bb-ec23-441b-9365-9665f3690301",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009057a6-ef1a-4701-aa38-e8968773cfe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bd011c7-ba56-4064-9d72-0df7f352670f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd25c3ce-5d6e-434a-a2a3-b9a1f24092f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1065f8-b14b-4aec-b6b0-dd20207bea74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83481692-b3c5-4ddd-b8bb-3465b1dd0355",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8b9338-20a1-4536-bba1-6f33d3eb86fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffd0f1be-9245-4483-8ddd-70e315855575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584d2da0-5972-429a-8538-1d21be4e1251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad2da4e-fb87-48a4-847e-ab7f05770661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bf885c-8e48-4ce5-9f05-6770dad92be7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c127fe65-73f9-4b18-bffc-6f4b45a10afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02f4d14-e7f1-40db-98e2-4e0dbb39644f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addab828-8129-4bda-b23b-b0f4c678b82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75fa262-8bc8-4226-bb61-6208fc5ec36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc87174-6587-4f6d-b794-18102c9a3996",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf84868f-0fc8-4ac7-b79b-fb44c5574db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068b8074-7756-4961-94db-5936a6ccec18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84423339-228e-41f0-8d30-9b6d0b2cf988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd0db9e-cb1a-42ca-a487-3145c82e3a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8bf3e3-165f-40cc-b961-1082b7657949",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00a9270-027c-4061-a261-2229b07e3d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77866778-3e5a-4eef-91eb-0d57ef3f07d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94b6dd1-19db-4190-b139-a045b793ef28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a2106c-220b-42b9-b363-b560df8ebbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98bdcdd1-8487-4f69-a323-4fb60d394b94",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb15ec04-7d42-4337-8a95-ef3862a471ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2138d4a3-87c9-4c7e-a134-42143b21da7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8725378e-406f-4716-a230-d5b663ccde6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb2aa18-a8cf-4f9f-aa90-583ad80f0b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f679cd-a8aa-488c-8ac7-4c0b55a133d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ae3a56-b47a-47bd-8b3b-d12484936b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9df734b-5b81-4d31-9059-db595453508a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bd0397-ee84-4c0b-b47f-91f4955134f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b312ec20-118c-4a0d-b0d2-de96ce187f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26275a2c-13d9-4615-b48d-1e79a9245037",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2531112-fdf2-4334-afb2-e6a959b156a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f307295-5d94-4791-a8e8-ba5607da2e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce9826b-f1c9-427d-aa32-effff470b9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c0b558-aea2-4597-b85a-40557ff8c926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3fd057-f315-4bd8-9475-b67e526304a3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bf8653-2589-4f6f-9e28-d81b80eea3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477d408a-37d0-4fb4-aaa0-2d4ed11c6a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a964d-3e34-4664-8faf-2927857022c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b1e9f0-a59f-4d2d-897f-315200f3c0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b29568-9eab-400c-89cf-d4fd572cdab0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47c053d-1b9f-4ed2-a24b-d8fcd3931eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1cb6819-8158-4dc2-8685-2e8a900e212d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c7985e-8271-4d0c-87e9-de6bc7289666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4149cec1-3d6e-49e4-9db6-986e3adcfe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4445e2-3656-49ed-95c3-8b880660c0fb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa67cacc-446f-4d99-9d1f-fc5f0cd6a65a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b2d5f62-cfc8-4508-8819-1140364899ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f3745a-593b-40ae-af8e-a06e3b0eb7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462a1a79-45df-4aa4-bfbd-41a720321f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b4699c-9227-48bb-89f0-ba0e5a9f5b64",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da566e4-8f68-4c36-a54b-d7674ee42f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87aa9cb8-be49-4a82-bf0b-15a34b83f1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "923ce006-0d32-495a-b8e3-4b40aab38c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e486e866-b019-4b90-a8a3-efa06168ae1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487d5689-2ace-4b34-bc8d-d0a904a7c445",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97dafb94-1879-414d-bf5b-1941dd065d95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90ee67a0-00af-4a02-ab37-604f06a0dd39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed98d285-334b-4165-92f7-a60eff7ae009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b568c59-747f-4ea2-a51e-3e47de4e152a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e80034-a918-4e6e-8707-2da1216d1fc1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb01189f-4aac-40b3-80d0-ec1104ecfd2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82ec8af-dc46-4f5d-85d8-7ad2655f579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6f4b74-b85e-4177-be41-6385f74fd8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402e4a0f-3458-44b1-a47d-d945e4953fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0847e605-11d2-424a-8922-eec3a3cf648f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15a357a-4461-4ead-8b0d-c63d69d03b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e5dd138-fb3b-4bee-9fcb-f99a94aacb9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "398566bc-746b-49d7-840b-cf2432e232ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d63231d-fa73-4660-ad71-b8b00e67fa66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62038b05-56b9-46d4-9a68-76ba59d85b44",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f8f005-9735-46f4-ad86-d2102e5162d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b053d30f-a131-4d2f-bda6-7b90f65f3f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30c6649-1807-46f6-9f8e-014b42a34952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91898b81-8543-4191-b075-0ecf7273a44a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1682b38-b58b-429b-a4f9-83d37d12d8e4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7b72ae-4d88-4647-8454-adfba2b851e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "345c7b54-6b17-4d2c-9f29-1d2933fabed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecdeb21-21ec-4df7-9f32-e4e04a652358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451ad697-1c28-40e2-9ac1-5549988f8cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b59cac-0a22-47a7-a84a-d109d5d0fd42",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9d5cbe-03ca-403a-ad82-76172e0b16b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0907f0e-2a79-45e9-9a6c-6be14a290a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803c999b-42e4-4c71-80bd-b4b236e86190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db573f1f-e010-4462-9ef8-376df1a7e02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb0dccf-90ab-401c-8ddc-aebf690e12e0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50851752-0b27-42e1-9126-74b673178445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e9bb1d-2595-4449-a22d-0df8137a4519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841a57d8-6449-411d-b2ae-49b6d3eabedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1851deb-1c2d-4750-9945-537196090ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a39a343-14ae-4e7c-bc8a-09afdd075fad",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d96d2b-69fa-426c-b671-a62656de655c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ba2cc6-6685-4c71-96f0-f6ee2c2df326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5a9fde-58b2-41dd-add3-7adc9c8981c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662b06ca-7dd1-4e25-840e-c311db5051af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c9fda7-2762-49cf-86f6-63856d40ff7c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88206779-02ad-4e52-8f90-0e50a3b44009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85862e6c-0067-4332-9823-61e20333c59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34579f5-df49-4ed1-93a0-eafaa9849c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b350b5-6654-41e5-904a-2404ef773995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885a30d0-5176-4593-8345-e59e8889613c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134739ad-cb81-4ef3-8c5d-4916a31f0428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a64042c-911f-405e-9def-90d3403b6dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3357e1-071e-4466-9ad3-3e8b9be82822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c2bfd1-1450-410b-a546-2eae2888b32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26da2aa-a3e9-4457-a630-42f91b08c951",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b005a27-72f9-456a-987a-2cdc1ebdee39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b1d5c5-4250-4801-a8eb-b77d8fe9a375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d58fad-dde2-477b-962f-9fbe2fc0a2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed02b097-1992-46cd-a7b8-bd83e7cb8c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56845426-050f-4826-9a6a-a29fa8cfa84f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f46e94-a0de-4f78-b9af-f25b7d920b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c811577-5be7-428d-8869-d337f3b5ac9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de3745c-1fe6-49e0-a990-c913a09adac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347a6658-60b2-4ea0-aa31-f805d7112a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9653a4b-de12-4f5b-ab1f-e946b4f351e5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4aac479-9997-4fbd-87a4-97c80f5d19e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10736376-dead-495e-94d5-2c4d287bc1d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "983447ba-308c-46be-8709-3896dc1deba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79af1553-a989-412f-abb4-22b727c2bd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31fc18b-b79d-4f56-990d-7af3d3328f12",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8246bb0-be4e-404e-a879-a515024523e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8769b722-7e87-47fb-90a2-247db4726ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbe49ed-6ac6-4928-a51d-8a3024117fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ab5607-3d26-4b10-9918-2fe9597b75e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be09b4f-0d42-41eb-9f21-32702a2f8d4b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c2d687-5108-4457-875a-d7628752879b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e77207-16fd-4c06-b2b7-1ba8a3e0f882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f667cf95-a5e3-4119-891e-74a9a756a46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5742ec10-1a58-4f34-a26c-81dd2c7e4c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad38ae3-7d42-4ab4-974e-55cd369ce2e8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf84299c-63f6-472c-bc62-0d0d4a635577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9f85cd-f962-4a74-a710-1e4073c4e017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686e7e59-0d84-402f-992f-f3061b48f2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa33a887-db10-4c1e-8b12-d6a230d27bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40733c7f-2658-42aa-bf47-c0f4398f53ed",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0958cba8-e0a4-4d39-bf5c-f5a0951c4e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5e6097-9914-404e-8f70-e886c3ff9ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41d2dd8-7e8e-4232-9bf1-b1cfa18b2fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3c86b7-baff-4811-8fb6-c28dfaa347ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979452b7-dac8-4e9e-bff7-575c4d835de4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5ff185-f932-4d8f-832a-4d831ef6e775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926c7af0-d787-4ee2-b470-2607b32e4a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71a7901-149d-46e7-a643-3eaa22176000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbd8fe7-17eb-408c-adeb-c3d51e041806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52630834-b02b-4f85-8966-fe4b384912f4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e28cfbf-49c1-4d6b-9279-b35f5f690d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1d78f8-53fc-4b88-92b3-df7893026787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cc91cc-4d5c-48f6-bc24-717f2247acf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c844ad0d-17e9-4c93-a7f3-f4280ec76452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3d7b93-44aa-4700-acdc-a2dfb78ebd7b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab42814f-49d2-44b4-b06f-95d5c5c120cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d33892-9e92-4e20-a725-059ed1db4673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5ade19-d6d5-49d1-ae65-0dfda8f46eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07373732-2ea8-4b42-a906-fb08ce451daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124c73cc-dfda-4d88-a62c-fb160ca4f0f2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6202cff2-f370-4ee3-9af2-7cdfca027254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b5586e-5656-4fbb-9dc0-f67e14422353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9f62b6-dae3-4169-98da-ab33434bb675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1a958f-a3ca-419e-b72c-b7c6199dc618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c70538-2506-4ae3-b8c6-57af521b6645",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef2d8d5-de71-4c1a-b3d6-8391bb7a8859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfda02b-40a4-4e97-b9bc-b416b6ed8437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00275cc2-618c-4c8c-ae9c-465bc2144971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49322ae-2039-44ad-b93f-3f0a91e0e983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849f791b-89cb-4e20-a071-056d46844e12",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ec4c08-7d0e-43ac-8918-249638119f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04440b2-aa70-48a6-87e1-6852ebd8c7ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b5c9f4-889d-422b-82f9-f89df061fc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07d492a-b2c0-478e-8f0c-b6707172645d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f6444b-8f13-4308-b23a-6f006d6877c3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4305ab26-b44c-4d00-a2d0-50ec8cef16b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef149b8-a539-473b-88e4-6fb73badc28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840b316e-877b-45d3-aec6-ed48fc512c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05cfbe3e-a0bb-4842-bdb1-352b596e0673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488cd1af-760a-4aa3-9cbb-648679e73341",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6b52a9-d55d-4b3a-8cfa-0b314c516b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f875c2-0935-47c9-8be4-c7212d2e0342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d49c9b1-13d1-41d3-89e7-b382cfb911bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da587a8-8be9-482a-9054-9526d1679a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f130f4f-fadf-439f-8d10-9d45c457cafe",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d356bab-09e5-47d1-a65f-2ee48698c760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167e7394-e989-4896-be63-727e0983fca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a30a8bc-80b5-44f4-9829-14ef8b7ad492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45473658-f5ae-4d21-ba55-d9ab6e3bcc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995ed8f7-119c-4a2d-8de7-4ba2b36af7b6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9713164-10f1-4b18-a853-0fd326d345f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce260936-9cbc-44ff-9f37-365780082f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b9f674-5014-4f24-909c-873e0da8f0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292dfcae-6e39-4781-9ea5-3d72c1bde262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43fa4b9-97f8-42f0-ae23-ce333674f695",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3d8846-30af-4186-83a0-30238c860b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd779c1-b895-4570-a7d9-bb11f8d8bbbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5201bea5-91b5-41eb-b7fd-c804a04cda3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e1de9b-7fde-41e9-8ebe-0f75ea7c4ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2a2b9b-1448-4a65-996b-5b081c92e35c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7636a272-480c-4ba7-8d3c-b2838941c01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8218595-6b47-4402-8362-d250b990e354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58788685-cd8e-45a1-97b4-9c9e6285685c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a092d4c-a302-470e-8bce-1c03e8147dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb0ea88-9ed7-4726-9929-3e85277953ab",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fe72d8-7c5b-464d-b595-dbf9558aa7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98589d9a-eda5-4b6f-9864-0a86443d825d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576cbf20-86ea-48b1-9163-c877247c8bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acd7ce9-6088-426e-851e-d65a5fa7ac8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c333c98d-eab4-4a24-b9f5-4d6ec53d3f59",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a410171-1b79-486a-8983-e995916e3123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41465f9-19c4-46d0-b3d2-3d810ad296b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2f731d-eabc-49f6-ac7d-aaa73613d218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49180e40-15e7-4676-925b-74b7cda63600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5292f0ec-94ff-4f05-a334-7d74dcd618d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d0830c-4d89-476c-86f8-2ce214ea85ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98eaa525-89bd-4f3a-87c3-d5e7e733fc32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8675bb-0662-44aa-81cf-2390a1fadb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dd8167-6983-442f-ba2f-70bcd2dedcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6f722d-8961-4069-90b5-4fec62c5e559",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89531eb6-9e09-438c-bdbd-5c174c7a99e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d144b3b4-52ed-441b-9992-c2bab221567f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18f8b51-8c14-4db7-b07a-03968463e32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23172a9-2684-416c-a1ee-e3588d721a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3653a789-4a13-4d27-8abf-998238a7dfe0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aefc46-9b5b-4ac2-a1a9-28efcec2de2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56e98e9-ffc9-49cb-bb09-04d32a7feeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de531bef-d9b2-49ed-963a-9c8825327783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbc3553-120d-40e6-9d76-8c6f8f5c0178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c35e160-6d1c-446e-9117-41110b1a42cd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f3c7da-2b7e-4359-81df-0ac958990175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777d9281-76a0-427a-85dd-61a0d52ae615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2726fe99-6d37-4311-9055-ce8cc3ef68b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab52a17-db25-4000-87bb-1ed05ca9cc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24309ff-ed7d-4224-98a7-7bada9443e52",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11349cef-0412-44f2-b1df-f7691fa9e82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb83b47c-b1fe-42e7-8d3c-77c92e8c1f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f3b62e-02d2-4bc6-9300-b293a53c9927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29df75e0-fc8a-42b1-bc6d-eb8de17668db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2e8a55-2c05-41c8-b41f-b748a2c645d8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80699563-82a3-4103-8b58-949fa49f0dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa1d43d-70cc-40c7-b248-b45dc2ce4a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e51ee04-e55e-4794-9a3d-edab13f2b2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada9f717-24b6-4b55-a097-81c1f8fe4a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbe6dfe-4e3c-4514-94a6-6414d724dc5f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb69609-ad7f-4238-baa8-5bd1b4d596c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88235632-788f-4784-90f1-76cb6efd8233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2876c22-c37e-4f51-9a99-568c332a6b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54b0f31-4373-485c-a709-016862e01711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b774e6-7eca-4a89-ba1e-bf0894115a88",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9a8966-631a-4679-a57b-8956f1f53080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ed14374-693b-43c6-b812-1924dadf226e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2802d0-dc25-48a5-8bb3-b24dc0f97ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4953a54e-21dc-4db4-a9c6-090a24983e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc83dbe-dd5a-43cc-9676-cafdcaaca0a7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e555791-bdce-4889-be2e-2dc8e77c0c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcd010c0-6a12-449c-8375-14e179a55358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51589257-cfc9-4de9-a9e8-b070b72e2194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4054a0d-5881-4555-a1be-ec139a6c8e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f466874-48c4-4391-ace1-146e95cf668f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dbeb14-cc0d-4776-b771-c537556923a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68b31270-f4b5-43e6-94e2-3b35d7d9fe42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec5cb5a-87f2-44c3-83d1-0996065c2064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43099c56-4a1e-454c-a88c-723106af57dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c04b3c-ffc6-4fc2-97d1-23027e16aefa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adc0489-fe33-409c-9eab-3f97d6f1b8cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7617a3ee-c679-424e-9ac4-6a82552a7a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5db030-39ea-489b-ab0b-71f5e4ca6069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81de571f-3ea0-4c52-96e3-d3779394b154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dfe3b8-dd91-4149-8c82-065a55e1ae79",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6602fe1c-f01d-450c-ae3c-b791adeb0aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019a98f1-fd6f-486e-8c4a-ba264827234d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8008bb71-7c81-4010-8f47-7c2975cb7cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedcf4d3-bc4d-4308-be72-3c3000e12827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f2f0ef-22d1-45f5-9a6e-6b06864c492d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd52db6-d806-4133-bb55-66ccf57d1814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b9fffa9-edc1-44cd-9eb3-dc904dcc4054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e3af71-3f04-4af6-b8cd-c541432b7344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab258a2-8ecc-4c66-9c48-6d5f846627b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c6b7ae-a7f5-480b-911c-6f862d732e8e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316e1238-e3bb-4bb0-b394-b3ef2c9fe217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bfaf43-94ad-4d73-ad4b-1b31bd90837b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf30c71-100f-4155-9810-2a7948b979da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec1c4d9-2f11-4811-8d50-be2a2d9937b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed745bc6-d680-43a0-a4a2-8aeabd8a63a6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448fce34-4819-4894-8578-de96290b94a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18c8177-fd69-4911-a959-0607024669b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a038d51c-31c0-4bd8-baae-a364669a0df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975f2240-e3c1-4306-a4ad-7b0805b82481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe94a49-b847-42cf-8c1e-f0df11fb8eae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a097bec0-4b3f-42fd-81fb-53dffac1266f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6401ea2b-0bc5-4f74-a6f4-04dac48a6221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6851a274-df38-4950-be30-5c31c414e89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c44e17a-4c19-4a55-8fbc-61b949da88b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6439549b-aff8-44e3-bd9e-1f132545b7cf",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0eb293-6c87-46b5-8c6d-e8282929ce61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90c2e2c-08e0-4fbc-bb0e-8702f9a3acc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3248dfdd-6510-420b-92a0-e101c53af010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28530fed-a7aa-4c6e-8904-8c84cf9364b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3304fae-83cb-47d7-a528-a60a062561f9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9288f7ac-7fda-4d46-b4ad-0b3849483294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37b08ba0-194d-4f60-830b-777c7c28f3ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80008976-34e7-45a5-b24e-1ab3cd693951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e22b49-90a2-41d3-b026-7c01cfa39787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27cd2aa-af36-4c51-879f-b1f07f1c1ad0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fdfaa7-b6f8-40bc-95e6-a1e985349646",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ac0cee-f0c0-4737-8dbb-f15a7658b44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6621be07-b9d1-41a8-8a30-155115544dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db9496e-6924-4541-b815-4f60b1bb9e4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b65d56-9d9f-4c88-92a4-0ee9bef57da0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf59c0ea-6a9f-4744-b684-8a9a17386154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f41ca110-a7e3-4a05-b3a1-ac9871316331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87120c84-909f-4e0b-b681-40cd6172017e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8037085c-c8a7-4af2-994e-120373e17801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3bb723-7685-4687-ac20-9c8ebe794ebb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065d5699-50b7-4ce7-8486-b2b53cf33bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7f8c93-9590-443b-8722-0e6e44d13e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c2a2c5-8c51-4fe5-b21d-416d96f98ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce6ca82-f0da-41fd-898a-509b089e18db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765b5e5a-c34d-4d3e-b060-393a54861614",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be21b942-795b-4b61-843d-2f65f54704e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e46c71-57db-4e84-949f-6dd39d1d27a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef0d8d7-3dc0-4999-bea4-6a5d978febe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f7db55-feff-42af-8f24-19341b1b57ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a6f98e-03b3-4cf3-8fe2-36b9fff3380d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de1eb72-acec-4581-8060-a6fbbdec4a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e734b2c-61a2-44fa-b122-7439ed27901b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f4c6c4-9bce-41bf-8068-3017889ccc20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3d5b02-0559-4b8d-a075-ca6b15df00b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d334b40b-3d94-4957-a3a0-ed2ef7ad2a34",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92e61c9-98f4-4310-ab0a-05633d9fa860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90238f2b-77b7-4f29-a85a-8d45d346a34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4222943e-73b1-4a4e-a1a9-76e378bf3389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53613c5-292e-40c6-96d8-e386d83ccf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91456774-f3b8-4cae-a3cc-03eceac03f0e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91937391-ec9d-48f1-94c6-656495ec8e8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6e94f35-6e4f-4221-99cb-4fd42b5800c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a553d0-cd52-4b53-82b8-4e59c0f80012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aee0436-f19d-46b9-846b-4ca9611c7e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a5dede-45d8-414f-be81-74065d6faea0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd1bd8b-f3d1-45fc-af1b-519705e61f31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1efee8ea-7e81-46f3-ac9d-c9c44f3cbcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a05268-f07c-4eda-96ef-f051d65077b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecd3599-1bc0-44a5-aa64-30549ac685fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031164f6-8427-4782-9d1c-e003333a3106",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f971c02-0802-455b-9e55-78347502d6fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef319a30-1d1e-4209-ae1f-5f5a615cb2fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934c9926-dc93-4a3e-8107-0a638b01904f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d9b00f-db67-4595-9133-00aa120e16af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4cd976-169f-44dd-a5b5-5e1f0f3bc72b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852a640b-a7f9-4072-8aa0-ca0870a7fa82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f4f5af-f3bd-4845-bbae-08607359cf28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33be6ea8-8860-4e81-9cfa-e7413af48446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772f7b82-36f0-446a-996e-3f1d1920d8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec74b80-5f87-49b6-814b-df188758dbfb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a89e1a-9bda-40e5-854c-a4809c264455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a988f47-81aa-4854-8daf-0fea21258275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "786fd51c-9fee-494a-8478-60a1b1b5b53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f93270-8e6e-456c-beac-2c2303024359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f2b6ce-1a4c-49d5-8b93-cfa383a9299e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652659e0-e033-4383-8375-e3b50dcfc176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08060ca6-8da0-453c-a6fd-bebebecb6082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab58ffcc-d5cf-4e22-9146-ea139e4ca3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68cdd587-726a-40db-b73a-ca46093e985e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236ee3dd-3473-4f88-ba5e-5505e422272a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4592155-3bd0-4513-a735-46e1001f3058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d95d95d-4d1d-4fda-9052-b889ee19fbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec869a5-29dc-4232-9b29-34509460658c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d585d89-b847-465f-aa7e-88e6541d7727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0011d81e-fcce-4814-884a-a07a3ca31f26",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f055f9-2bd3-4273-984f-ab33473511e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5da48abe-ae4a-4660-a23c-1c546452819b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33885a17-d2a2-4367-a138-27bfee230e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a55442-83a6-49b3-a83c-44e6efe508a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22447fb-0bf8-4708-a3e8-d539255c861c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a981b2a5-d73b-4b28-977c-bed0df73c0f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6634e68b-87d7-4d3f-a64e-ccb86c2b5895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22986985-ef7a-48c1-851c-dad77e9a401a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee086d4-b446-49f9-8916-b4d863a9217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35428996-6244-45d0-8343-14173bc4485f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58aef21a-1b72-4d82-8431-c1632d919b3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4cd3496-934e-4be8-a658-d326c1304f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f8608a-2f47-4577-8782-60da75cf6163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1a3cdb-ea28-409f-ab0f-2085e98e13e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b392ee8-48da-40fb-a278-584b03cb6744",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf05df1-6a62-4322-adb1-375b0ab123ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "678047e5-1c66-415a-af1e-af9d0bba45b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d50a979-4b0a-4104-b81c-f8603ae9f20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4463afc1-f44a-4a4a-b782-213fa49756c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b269b80f-64fe-4bc2-94ad-68fac9545f98",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63349539-9e8a-4e91-892a-01a1397ab89c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edfc9e03-67a8-4c02-9bb6-e7c42f03cea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e6e4f6-9d0a-4e5f-be29-dbc7e1a80920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1b0bd9-ba3d-4702-b88f-cedc32aaf49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ff21dc-d65c-4909-bc18-01a2adf9c0f1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329a5f24-7d98-41cf-8b8b-a1b3b2aa6e3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f9dc92-f48b-4f20-8de1-bf56d5488b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95633e12-be12-448f-903d-68a0e18ed5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e36821-c93c-4041-af3c-7cd30bddf646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f670e0a8-74a4-4d78-af3f-48da1fc8db5c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64281fd-fd6b-4b11-99af-1de05daf2a5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3c8a8e-502b-40c8-939c-5b5e522ddd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b230c2-6236-475d-b21b-542ae678ebb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a0b5a4-8a80-4ea9-a5cd-d577cbcf2d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4216a0b6-2967-4f33-9f59-c01f2d4550a3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078e2e83-8ae2-46ae-901a-6cad4434ba58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f343a89-0f45-4b64-80b3-4b7cac2f41f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064af410-404a-4645-b9bc-cc44a670df5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6249008e-c0fc-405d-8664-64938ea151fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1264a98f-99a6-4621-a868-9359cef105b5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50304580-c826-4977-808c-aaeb1a3d757c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790612fe-52e1-43d4-86c7-9a821b6ed586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d563e13-3949-4193-8776-2c19336aff81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d5deea-f6fd-4ac9-8ee4-528f36d3d968"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6389158c-edea-4318-968e-f93e249b8db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83fc7091-73e2-4a2c-8d15-52cceaacba61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df0d5e53-882f-4ad7-b4c5-4bc22561081d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd580e9b-1e17-4025-a79a-cb5b5a8d7027"
                    }
                  }
                ]
              },
              {
                "id": "0a1aa262-4b57-4e0b-8377-92bf78666d44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "528837b3-59a7-4916-a39f-bf6cec43b341",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f03b126-140b-4bb2-92bc-f57e35cb1af9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "84861b79-be6a-4d4f-8c43-9b58a746c44f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02ae84d-6bf7-4c51-bc3b-bba4d0c71bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69819606-b326-420d-8968-2609e2875da7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f5fdb33-6a37-4507-b38f-0663bc881591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee6698fb-8c80-4ffe-87c6-44c615e0753e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "998c2f68-606c-4065-8b03-00d11770ad6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "401f765a-f601-4bb3-a151-baa2e435f9e7"
                    }
                  }
                ]
              },
              {
                "id": "0fe36d3b-a52e-4012-bd96-fdd9098e728d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e8eee49b-b854-4e87-9af5-b4a568c33093",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f52ac6f-d0d3-4453-a3fe-41d16445adeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "958d087c-44e5-4c40-9d62-e841d3c8bdeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8503410e-c540-4a00-a345-78e6809d16f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea105f1b-bf26-4412-9af4-c2eb00fc358a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5cebec8-b15a-4fcc-8cf4-50bff14d0522",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdcb2640-ddf8-49e6-9eac-83d7386d4a6f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0936fc6b-15e5-44ec-96af-ab0918ff4143",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bc2a485a-41dd-4663-9f00-a58893b57140"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b57cd6d-7827-40bd-95a1-221d5101263e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b913630b-c5f5-4786-baa6-d6727a103454"
                    }
                  }
                ]
              },
              {
                "id": "d36f20b9-7cec-42b8-9d4f-d88876d5c948",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e79aaa06-041a-4844-bc9c-6b3b9cc4c354",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ef8c420-a37e-4943-95bf-12f12f0e4428"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fe316e3-6d82-4932-a768-04bf3dce69a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86858987-403f-4bf5-888a-21561ec1bc78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dec09de2-a896-41d0-9ece-ac16f6181ace",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f2e35255-72e9-4081-93bf-5a11ff1362e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18867288-c2d3-4b4f-8923-92389f09c8cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d285951-115b-4275-bb7d-25259a81629c"
            }
          }
        ]
      },
      {
        "id": "00510f52-ec75-4fd8-9336-8904e5e1955a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ac989096-d9ed-4b82-acbc-6e698b3dab20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5be9adc1-7174-4326-b9fc-7e58d5fdc045",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea175242-8088-407f-b482-8724f1dd5b9b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab8caea-e917-434e-acec-14a244af4958",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9e0ef75d-37ad-4728-b06c-36c49b9dce6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ddcf58-a438-4ed2-80b2-c56964afba9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "941a4f44-3813-4913-8809-d63d96c5ce80"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "826026c3-04e8-4766-8235-1e0ac4841abd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d876a7c-bbac-454a-9ebc-1fd4545f99ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe6f1df-2102-4064-b32e-e92e4902524c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53e646cd-dabe-4c1d-94e9-7c697dab4226"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf32a531-8080-48b4-a3a4-266bb73a346e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c0439f04-e19f-4f90-9f17-2c85e2bdd107"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1e134df-58df-4810-8679-d3d720f6462b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97c111a8-0211-4bbb-92dc-31665d7b6c9c"
            }
          }
        ]
      },
      {
        "id": "e8c9c598-bb1e-469d-8817-1f34756254e0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "80cfbaa7-ba30-4328-a825-65243f0c9ed2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e650ed0e-a2fc-478e-b73a-c8e54d17aa3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fe7c00d-e153-4896-88ce-3922c3dc2b37",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db45ae4d-5fed-4174-b58e-5b902f2f39ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de6111d2-8a44-486b-a606-a482cbc9b3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f765fb-bf22-4706-8eb1-9dd5bf17c148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b8f56fe-e71d-4929-967e-8017a68436ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca4cc983-0355-4949-9d25-e2a79604d18e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "136d3e77-5639-461c-bb64-65469f96e4eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f60c49c-6a23-41d6-99b2-f8e8c34b8462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9308fd30-4aeb-4ea0-a389-fa70162e8ab3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06c4b5be-7611-4904-9e5d-4c0b13c80d64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4769097-39fd-4b4d-8978-03e2310a11d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a89cb91-4bde-4eff-a0e7-5a8d098f2239",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55764f03-eaac-4a69-a171-cc769a9a8449"
            }
          }
        ]
      },
      {
        "id": "8d098f7a-08f9-4d45-9e28-6c31e860003e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7ce28cf5-cf42-41bf-a127-e2390bb48f54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f0e23ccd-5dd2-4767-8bd3-c99f5f5ce572",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29dbf285-aa5d-4bc6-a5db-0bb2b06d4fff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52687cb9-5d7f-4454-bce4-e3a513e0e2d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40ee49a9-4243-4715-9352-231f04ab8bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58b0855-2b3a-440f-b5d4-0d12dbbfa106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55791924-5181-4ae5-b4ac-40d386dd0e36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afdc4191-80c3-40e4-bc72-023e4a75e92f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2c6bde1-1317-4b02-aaad-29c4c0a36573"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7929c9b3-028c-4793-b3b4-c4354c11bcdd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f088099-c895-4157-9c80-41d438f3a313"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b210a43-1e22-4ab6-b2db-f43ca19745e9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ab306f89-80ab-4351-888b-37b63ec3c10b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a59fd6cc-d253-4ef9-9c91-e02dd8a460db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85266c25-f0fd-41db-9a42-96791b2d4e0c"
            }
          }
        ]
      },
      {
        "id": "e6e851d2-66df-4074-ab53-52097bbfda8f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0789ced2-b5e3-4285-9464-c4638051d444",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bbd378c8-94a2-411c-8434-242b30d4a41c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "63983ba2-5ebe-4d22-8144-64c06f6d3a8b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a440579a-6282-4736-b4e8-40a61cf72c1f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bfb26b0-aeb8-4a64-a10a-7083d5f4f340",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 95.4047619047619,
      "responseMin": 21,
      "responseMax": 642,
      "responseSd": 75.64098353421032,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715733397235,
      "completed": 1715733430179
    },
    "executions": [
      {
        "id": "5ef46bb0-d91b-4825-bb11-26b4dbb5ba36",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "494a953d-a3aa-47c5-851f-d91236719ceb",
          "httpRequestId": "781e02b7-430c-40ec-b7ac-d10b77ccb858"
        },
        "item": {
          "id": "5ef46bb0-d91b-4825-bb11-26b4dbb5ba36",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "140a82f7-a53e-4195-bdd6-4af9bf029972",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "56c65b6e-d99e-44c5-8da3-12dc9fe14434",
        "cursor": {
          "ref": "f045fe7d-0bce-468a-b962-2a00c7d0f28c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "faf50b88-01bf-44f1-b2af-afb5d5bb14aa"
        },
        "item": {
          "id": "56c65b6e-d99e-44c5-8da3-12dc9fe14434",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1f7d58f1-08d5-4383-ac72-1f4294b0a112",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "6e86ccef-dce2-4e95-869e-c9f5214ab82c",
        "cursor": {
          "ref": "2a98743d-c650-43ed-9edf-625c9dc6fa7e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a1ee6157-1ec3-41ac-9f48-a294d56ec0db"
        },
        "item": {
          "id": "6e86ccef-dce2-4e95-869e-c9f5214ab82c",
          "name": "did_json"
        },
        "response": {
          "id": "be7c4538-e786-41b2-add5-a276e0a72d00",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66f86ed-5e19-4c86-b7be-9f6854b65ff5",
        "cursor": {
          "ref": "83d14a5a-df07-41e8-9809-b167aa59a8e3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1b91519e-c2f7-442d-b7f1-e706b966751b"
        },
        "item": {
          "id": "a66f86ed-5e19-4c86-b7be-9f6854b65ff5",
          "name": "did:invalid"
        },
        "response": {
          "id": "dabcec43-f9c2-43fe-8ffa-d6ed8a9dd9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66f86ed-5e19-4c86-b7be-9f6854b65ff5",
        "cursor": {
          "ref": "83d14a5a-df07-41e8-9809-b167aa59a8e3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1b91519e-c2f7-442d-b7f1-e706b966751b"
        },
        "item": {
          "id": "a66f86ed-5e19-4c86-b7be-9f6854b65ff5",
          "name": "did:invalid"
        },
        "response": {
          "id": "dabcec43-f9c2-43fe-8ffa-d6ed8a9dd9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c1e7e4-468d-404f-9780-5e6fba589a2f",
        "cursor": {
          "ref": "2939c822-c77b-4d01-9abd-afbc9a7eb1ef",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c3106e5a-6f0f-4046-ae56-f0d810f79d95"
        },
        "item": {
          "id": "74c1e7e4-468d-404f-9780-5e6fba589a2f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bfabd9df-42da-4b02-b443-e8ed8b4040db",
          "status": "Not Found",
          "code": 404,
          "responseTime": 191,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4cc4b2-151f-48c5-a49e-6f028a2bffc6",
        "cursor": {
          "ref": "320cf808-9e45-453f-b925-e69c94609fdd",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8e1025cf-c838-4849-aa48-47b548c48627"
        },
        "item": {
          "id": "9b4cc4b2-151f-48c5-a49e-6f028a2bffc6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b37412a1-9def-4727-8500-fd5140660673",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d47eefb-487f-42cd-a972-5c7bce5ac0b4",
        "cursor": {
          "ref": "c45020d8-0efb-492c-9fb2-249101b9e6a5",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "580351cd-5be3-4725-8551-7b4f8f4d3d78"
        },
        "item": {
          "id": "9d47eefb-487f-42cd-a972-5c7bce5ac0b4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f9f22a0c-74bc-442f-8798-4504bbbdff1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b10649-1d96-464d-a3a3-bec52dc45ccc",
        "cursor": {
          "ref": "a31c8cbd-22dd-4fa6-a270-ed33dc1786b5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c8de1b1a-ec21-4d45-9f84-473762b2971a"
        },
        "item": {
          "id": "30b10649-1d96-464d-a3a3-bec52dc45ccc",
          "name": "identifiers"
        },
        "response": {
          "id": "2a898e6d-eef0-46c7-8bfb-a44f553dccfc",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc12b0b-defe-416d-adc1-e265078bc0da",
        "cursor": {
          "ref": "7b20ad56-3b40-485d-89ac-505ec4da82b6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2a02fe0c-7ad9-4c35-adfd-ed5b46cb3602"
        },
        "item": {
          "id": "2bc12b0b-defe-416d-adc1-e265078bc0da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "facdeca8-98a8-4995-a599-ae5f66265e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3434a5b1-f119-4909-99ce-a13a6399a36b",
        "cursor": {
          "ref": "0a5a2d43-1827-442f-a23d-f80516462933",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1c071db0-7bb4-4443-8bb8-eaefbf2e9923"
        },
        "item": {
          "id": "3434a5b1-f119-4909-99ce-a13a6399a36b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "76a64cb3-038c-4da0-992e-5d5de81f4454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0527966-5068-4450-9c53-9877c7dc5c22",
        "cursor": {
          "ref": "115d1665-e22f-4a6b-9d60-da0267eae7c3",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "23626070-377d-4004-ab46-b7a7ca5c36b9"
        },
        "item": {
          "id": "f0527966-5068-4450-9c53-9877c7dc5c22",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1c58fc03-81fe-46bf-ae6a-cb28204ddd9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee898dfd-b266-4411-9bd1-2b0a7b3fb2fa",
        "cursor": {
          "ref": "661299b1-a7aa-46fb-8a46-01856b1b9709",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a8a6eff7-6b79-43e5-b2af-6f72ec529cb7"
        },
        "item": {
          "id": "ee898dfd-b266-4411-9bd1-2b0a7b3fb2fa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "22e27f10-1971-4f42-95c9-e8bef660a617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60ae9bd-ad4a-482b-87b4-a07fb176205c",
        "cursor": {
          "ref": "f7293351-1009-45f9-a3ee-d00c1ed94c31",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "01c4fd36-bd31-4859-a1e4-33659770a02c"
        },
        "item": {
          "id": "a60ae9bd-ad4a-482b-87b4-a07fb176205c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8e453439-b2d2-4805-b655-2de5df5935e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acf531d-1f32-4c0a-9102-f57fae4ec8fa",
        "cursor": {
          "ref": "9f453e20-8681-4bd8-ad2d-3b1e89bc05fe",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "132b511f-772e-48ef-87df-e4be9050650b"
        },
        "item": {
          "id": "9acf531d-1f32-4c0a-9102-f57fae4ec8fa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "515e6565-780c-452d-bcae-5936b58505c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a4f136-095a-4819-9e90-90ffad20a5b7",
        "cursor": {
          "ref": "a41c6cf4-0ee7-4577-a83a-5c675fcdc87e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "679c7144-988f-496a-ac4a-c730d97b9d4c"
        },
        "item": {
          "id": "63a4f136-095a-4819-9e90-90ffad20a5b7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a41a7b85-5561-4c31-be14-6e7083c4238a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a368bda-45cd-4bc6-9e17-ac54cf20a4a1",
        "cursor": {
          "ref": "1803f682-d2a7-40a8-8275-a31c1432b138",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c0864f11-5a3a-4a0a-852e-a3ffd7ad7f85"
        },
        "item": {
          "id": "7a368bda-45cd-4bc6-9e17-ac54cf20a4a1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6383fbe3-8452-4f05-a75e-0121998f520e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fcae3a-1574-4dc5-b3f0-8a74e506742f",
        "cursor": {
          "ref": "c8a364ff-22b4-4f31-bda5-5baa6865d64d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c928c359-f58f-46c7-8c0a-94c8eb90094e"
        },
        "item": {
          "id": "f0fcae3a-1574-4dc5-b3f0-8a74e506742f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4d1d88aa-833c-40d7-b9eb-4513a1825917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18ad6d8-0247-420b-a355-2ee5a22d6973",
        "cursor": {
          "ref": "352eec1c-a1b4-47cf-b63c-9cbc4ce5ea66",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d1fd5b57-c7d4-4955-bc69-c0b813d59d3f"
        },
        "item": {
          "id": "d18ad6d8-0247-420b-a355-2ee5a22d6973",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5f0c788b-d02c-4ae6-9f85-079a9e05a750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b440f9e2-5ada-403a-af85-b2048453cad0",
        "cursor": {
          "ref": "3c2faa68-cc9f-45aa-a0b1-44df287b5b24",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ec2b59cd-73f6-4d74-aef4-f97c0aec0218"
        },
        "item": {
          "id": "b440f9e2-5ada-403a-af85-b2048453cad0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6108ee15-6813-4c20-a951-b2c91920ca02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ac6b72-d6ff-4665-8fd6-b2895192836a",
        "cursor": {
          "ref": "e1e86aca-ab04-4db7-8016-15936776d1e6",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b678c076-0d66-460d-b298-d652f31b2e5b"
        },
        "item": {
          "id": "07ac6b72-d6ff-4665-8fd6-b2895192836a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c5335cfc-7b47-41e1-bc5d-ed0fa6db5c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f5e9b1-578d-442a-a6a6-8f72a36de396",
        "cursor": {
          "ref": "7fd82e32-73e1-4e93-bc54-3235842cb430",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5521f5d3-0d8b-4122-8ebd-3143bf144f86"
        },
        "item": {
          "id": "38f5e9b1-578d-442a-a6a6-8f72a36de396",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2dd2aecc-029f-41a9-9bab-eb8949760f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab6b164-808f-4b22-a268-30899571eba2",
        "cursor": {
          "ref": "c5e4398f-2d1d-4b51-b96c-330dca642603",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "41a63ba3-f1d1-4207-a126-0eeb86bb8eaf"
        },
        "item": {
          "id": "2ab6b164-808f-4b22-a268-30899571eba2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "30635631-c911-4ab0-9825-34db979def4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395c0c50-e371-4578-8336-70dc15aaec89",
        "cursor": {
          "ref": "653d7d3c-1a3d-499d-a2ac-e78bc3dbb893",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c82aacac-c5e0-4011-b000-8116e82f710a"
        },
        "item": {
          "id": "395c0c50-e371-4578-8336-70dc15aaec89",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "06990ff2-0b24-43a0-bbd8-5b62753270df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3470ec63-3e91-4892-b868-505b055b63f5",
        "cursor": {
          "ref": "d3507472-fe52-4169-99e9-8b804afea551",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6103c68c-98f3-4bcb-bf43-0ce7426ddb4f"
        },
        "item": {
          "id": "3470ec63-3e91-4892-b868-505b055b63f5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cb02b625-d4b3-4bf0-b333-a517fe8194b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d052a1a8-6e3b-436f-839b-a0d60a4fd257",
        "cursor": {
          "ref": "da7415c3-7de0-4259-9d84-5e97f3fd8d71",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8a4726b7-a7ef-4d9e-96bd-944eba732e73"
        },
        "item": {
          "id": "d052a1a8-6e3b-436f-839b-a0d60a4fd257",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bbd78303-16dc-459a-929b-43216e71f546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f717e6-8fb9-4ffe-aebd-04dcbcffcde9",
        "cursor": {
          "ref": "9c698e3f-4f72-4ffd-8ef6-d5a98b3fc230",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "515c9ab1-95b7-4ded-92f7-247f8297315d"
        },
        "item": {
          "id": "e6f717e6-8fb9-4ffe-aebd-04dcbcffcde9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a62e56f9-f446-48f7-8886-b5f021ae4f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d497da-5895-4cd2-ab1b-8f9528bc7172",
        "cursor": {
          "ref": "63a97e93-28ba-4eaf-bf84-8589ea745845",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a7cb2238-cc87-4de9-808c-2da59e07206e"
        },
        "item": {
          "id": "c1d497da-5895-4cd2-ab1b-8f9528bc7172",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1ff5c58f-3165-4407-92eb-eedde5c64182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17dbae7-8abf-4b4e-a235-601e761c65f5",
        "cursor": {
          "ref": "eacdd008-a2a5-4539-a55f-c4a6f53b5df7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fe098e32-e281-4423-95a7-ce949571f068"
        },
        "item": {
          "id": "a17dbae7-8abf-4b4e-a235-601e761c65f5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1521f92c-0383-47f6-b7cf-4257da48f397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df22a36d-9f7a-48f5-915a-c28bc274569a",
        "cursor": {
          "ref": "f63918e3-6ddc-4fcb-9b21-7366a44d80cf",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d494c79f-c442-4cdc-a8e0-b4a236b495d5"
        },
        "item": {
          "id": "df22a36d-9f7a-48f5-915a-c28bc274569a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "99805559-30b9-471f-96d9-7f3b0be4cdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053d18d4-4e62-4947-9381-e8159746bab0",
        "cursor": {
          "ref": "a1f34987-ed33-4d85-ad1d-aa9688583cfa",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0de58507-d933-4907-832a-0f3392cc41d1"
        },
        "item": {
          "id": "053d18d4-4e62-4947-9381-e8159746bab0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1c800f8b-e4b5-4d30-8712-88ab6dbeb5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d78d24-562a-4e9c-bf90-ae7409e10998",
        "cursor": {
          "ref": "5f9b8c45-8bfd-45e2-9673-1efa0c8eaf4e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "66408ede-c317-4a13-80cf-a5954101355d"
        },
        "item": {
          "id": "20d78d24-562a-4e9c-bf90-ae7409e10998",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a7923aaf-61d8-4ab4-a761-b24d7a911d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db4f5a0-0e40-4dd6-ac85-88c969fa51ac",
        "cursor": {
          "ref": "d2e4c246-f39b-484a-9bd6-4a8842a46445",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9823c4ae-b42c-4715-9bf5-f2f5fdf78273"
        },
        "item": {
          "id": "5db4f5a0-0e40-4dd6-ac85-88c969fa51ac",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "090f3565-db69-4df3-ac38-a25e90057b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada4226e-7a66-4d21-8f01-00b859762964",
        "cursor": {
          "ref": "a5c45a2a-a682-4a8d-b5ce-ea94081893f4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "69018cef-3855-4f21-a368-b106ea57bc3d"
        },
        "item": {
          "id": "ada4226e-7a66-4d21-8f01-00b859762964",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "574860aa-ab1a-490c-afc6-751c24b2a0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d3c3ae-9494-49b0-9f5e-35f21a4996ad",
        "cursor": {
          "ref": "d8c94c17-21a4-4884-b4b4-381ff1f97f90",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34a71fbe-48f1-4473-b166-2344dd05b97a"
        },
        "item": {
          "id": "06d3c3ae-9494-49b0-9f5e-35f21a4996ad",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "33b5ff56-3b47-418d-93a0-ebe2cad56304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fd2733-19f9-4cb0-889c-fffc4dbb30ce",
        "cursor": {
          "ref": "d241ea84-2432-459f-9501-222a486a58b1",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "36dff027-6895-4722-84c2-107fb9829c88"
        },
        "item": {
          "id": "77fd2733-19f9-4cb0-889c-fffc4dbb30ce",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f0c4c96f-cb38-4687-8347-f4de789168d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c799c595-6059-4ef3-94da-664f348af5ff",
        "cursor": {
          "ref": "de5f8914-53e8-481a-92c7-9579d5996ffa",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "04921f84-afd9-4d53-a7af-8de7862fc8f1"
        },
        "item": {
          "id": "c799c595-6059-4ef3-94da-664f348af5ff",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "adae41a7-3293-4772-a316-330b867e0267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f380d02-2009-4707-8f2a-520c7209ce40",
        "cursor": {
          "ref": "5d722d1b-d5b1-4f44-ad96-714796fc543c",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2cd75848-6b85-45b5-ae21-d0b7ccfc0df8"
        },
        "item": {
          "id": "4f380d02-2009-4707-8f2a-520c7209ce40",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "34c84f5f-3b28-4f09-9ff1-61e772ba0787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17808197-5fba-4033-94c3-962be686dd95",
        "cursor": {
          "ref": "43fcb7de-5663-4e44-b082-d6bed876b34c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "40f9fc1e-38cb-4603-af54-94ae52bd71b4"
        },
        "item": {
          "id": "17808197-5fba-4033-94c3-962be686dd95",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d59eba26-4549-4fa3-8967-18d442752dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897d40ca-3b84-41da-8268-d89f2044fa0e",
        "cursor": {
          "ref": "16e70a2c-f62b-4f6e-91ee-17f71e8a7653",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cb971b34-13ed-4fed-bcca-295832b1e452"
        },
        "item": {
          "id": "897d40ca-3b84-41da-8268-d89f2044fa0e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d896b886-de48-4466-abfc-526126826d03",
          "status": "Created",
          "code": 201,
          "responseTime": 642,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9a2a4111-b7d8-4ecc-8549-61a36e9aef2e",
        "cursor": {
          "ref": "7359033e-a20b-4892-a319-381c2fb59e55",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c7cd153a-13af-452c-b9a5-a361baeeb4fc"
        },
        "item": {
          "id": "9a2a4111-b7d8-4ecc-8549-61a36e9aef2e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3eb7bd2e-0be2-4bf9-9961-fd4d8a8b39a7",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "459e31b4-dcf1-4646-845c-be9476889220",
        "cursor": {
          "ref": "0fc233d0-08c2-459e-b5cd-9449aaf4d224",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fec2ecf7-c02e-4f6c-a5ed-fee369173a6f"
        },
        "item": {
          "id": "459e31b4-dcf1-4646-845c-be9476889220",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "231a193b-e44b-44aa-ad3d-79c704056e75",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d33e37c6-2273-4072-93f2-0fc7a1e5fcce",
        "cursor": {
          "ref": "90ac1a38-9fa2-408a-8356-3a4e54e43a2f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ce638b84-09b4-49b2-a626-3c66b88605cd"
        },
        "item": {
          "id": "d33e37c6-2273-4072-93f2-0fc7a1e5fcce",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9524c689-4992-4cfc-9f39-b0293c2de395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b914c365-097e-4604-93bf-199655a6223b",
        "cursor": {
          "ref": "372ad3b9-452b-4877-989e-33a1adf9f03c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a68b51aa-1be9-42d0-89da-1796334e699f"
        },
        "item": {
          "id": "b914c365-097e-4604-93bf-199655a6223b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9b93c2f7-8c07-4264-a6ec-3043beb76cbd",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5603fed3-8f0b-4cb7-a909-2978b01cb41c",
        "cursor": {
          "ref": "0f6ad417-ce7b-4035-90fa-61ce08b16000",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "33167db2-3ff6-443a-b8ba-8d59b49a9c87"
        },
        "item": {
          "id": "5603fed3-8f0b-4cb7-a909-2978b01cb41c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "656ca9ee-eded-45de-8ee2-9dedc18bb200",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9c8395f8-5c23-443f-9131-71617e3863dc",
        "cursor": {
          "ref": "c11e4c49-da56-42f0-83ea-bb2f41668474",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "652790be-8d3b-405d-b551-0411a6a10231"
        },
        "item": {
          "id": "9c8395f8-5c23-443f-9131-71617e3863dc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "eea405c8-8849-4198-8124-13d1606348fc",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "98351df2-84de-4617-b918-8ebb648ab46a",
        "cursor": {
          "ref": "209f02ac-47ed-4b78-8b5e-37d98238fccb",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a1250852-f5ee-4842-b931-6c841297ef23"
        },
        "item": {
          "id": "98351df2-84de-4617-b918-8ebb648ab46a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "642cb054-cc2c-499c-9301-7be28123c7ec",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1c0e7b6f-44c3-45ac-86cf-624155f11bce",
        "cursor": {
          "ref": "f4cd1406-3b8d-426f-a180-dbda3be5382b",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a58c38e-3769-408a-9f74-6ad383755526"
        },
        "item": {
          "id": "1c0e7b6f-44c3-45ac-86cf-624155f11bce",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4da93653-ea05-41a9-8458-cf9cc71eb092",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3ce1db4e-06c8-4004-9351-9c590ad5f784",
        "cursor": {
          "ref": "73b647a4-3207-49c4-96f0-1e7888383385",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "72ff392d-eb53-4e56-b462-2bbf13f7d775"
        },
        "item": {
          "id": "3ce1db4e-06c8-4004-9351-9c590ad5f784",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "071e9903-36b9-49a4-ae8c-448d1bad1657",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "3b9c46c2-626c-4c57-b488-d6168f22ddf9",
        "cursor": {
          "ref": "41079288-adc8-453a-a61a-194d272291cb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "86583eb8-6381-43ed-b179-275b058de26f"
        },
        "item": {
          "id": "3b9c46c2-626c-4c57-b488-d6168f22ddf9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f6bf0cda-539a-411b-beb6-53c1ee0747e4",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a0133f95-d12b-4bdb-baf5-10de43535933",
        "cursor": {
          "ref": "ddd17479-2015-4cbe-bfd0-d0ce2f16c7e1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ae5dd7f9-a20a-4cde-8927-2810e0da3850"
        },
        "item": {
          "id": "a0133f95-d12b-4bdb-baf5-10de43535933",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3b74c177-dbe2-4b91-a1ca-f6187d46ceb0",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c5884962-93db-468f-9fb7-a58c9ac1e997",
        "cursor": {
          "ref": "58fe6f59-12c1-4c78-9d69-622058ef593d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4ead7bc5-2c62-484c-9044-4676817a8bb7"
        },
        "item": {
          "id": "c5884962-93db-468f-9fb7-a58c9ac1e997",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d5b420d3-abbb-416b-9692-6261439796a0",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f5d305b2-9b35-48a4-95f1-c2098f2bec35",
        "cursor": {
          "ref": "3c7dbbbe-39c3-4b97-9d91-33602444d8da",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "07c6f77c-9c33-4b7d-acb8-0bc631b19f8f"
        },
        "item": {
          "id": "f5d305b2-9b35-48a4-95f1-c2098f2bec35",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7992a9ef-bf37-4eaa-870e-cef6ba7981b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc7b60e-fcbb-4b84-8b4b-4f6aba906445",
        "cursor": {
          "ref": "cc3c7403-8674-480f-acec-42977a10c06e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3ea47a8a-c431-46e7-b41a-f3f53935deed"
        },
        "item": {
          "id": "9fc7b60e-fcbb-4b84-8b4b-4f6aba906445",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f8398bf8-89fe-49cd-a144-dd3d68dc2007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3d435f-6885-43d9-8992-089d84d122b1",
        "cursor": {
          "ref": "bdf2ae6d-9165-4867-9a5b-c30ba9fdcd4c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7fb4451b-c9a5-42c5-a95c-18b21874f5c4"
        },
        "item": {
          "id": "9a3d435f-6885-43d9-8992-089d84d122b1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "faaca136-26f3-4169-9d52-e5b04182474a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823a7911-4a9c-4c9a-a780-084cb716b908",
        "cursor": {
          "ref": "3311f9a9-931e-40bd-af8c-1f5f274a24dc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1984cfd2-db25-4b0b-8d33-e2aa6c00422c"
        },
        "item": {
          "id": "823a7911-4a9c-4c9a-a780-084cb716b908",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "63e1b1cb-8588-4ea3-8cd5-3a1c462f9673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41de8b3b-3890-446a-84fc-1c70e4f1e5ba",
        "cursor": {
          "ref": "586eb0eb-4f43-4b55-acc7-8a25d2982aa5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ca0cd3fa-0363-4b44-b8f9-868678bc36c8"
        },
        "item": {
          "id": "41de8b3b-3890-446a-84fc-1c70e4f1e5ba",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "137b646a-c707-46de-95a1-f8d6578e278c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b061055f-1ed3-4d20-9d0e-f2d51f70810b",
        "cursor": {
          "ref": "eb7b9ba0-6db2-4b41-b028-1b44f6bf1356",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5f0e692c-d647-4f62-abc8-3f13cbfb492d"
        },
        "item": {
          "id": "b061055f-1ed3-4d20-9d0e-f2d51f70810b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "02e2ed28-72ee-4de5-8e0c-b4f99f907bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87275d3f-62f1-4e91-a41f-851b92953e30",
        "cursor": {
          "ref": "d2e6dab7-2f79-41cb-bfae-e14b480d785d",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ee95731a-660e-444c-816e-54c313f394bb"
        },
        "item": {
          "id": "87275d3f-62f1-4e91-a41f-851b92953e30",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "159e42bf-fa2f-4df3-82c4-cd654a9297dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae9c538-8ea7-4552-95dd-c020b058b59a",
        "cursor": {
          "ref": "3cd40103-d2bb-4025-96df-8144eb78b2dd",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3f98f6a9-73ed-403e-bb2f-85e175500a83"
        },
        "item": {
          "id": "4ae9c538-8ea7-4552-95dd-c020b058b59a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ab6afc47-446d-4b8f-a934-109f1b30bfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500c7913-40cb-4098-9e3d-9df5d7659141",
        "cursor": {
          "ref": "0773e597-29e9-4956-aa1e-8456aad45626",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96d6e639-5e74-4ed7-8c3d-50feebd51fd9"
        },
        "item": {
          "id": "500c7913-40cb-4098-9e3d-9df5d7659141",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fbb41fac-1afb-4cd8-8833-250a23adfa10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3b6087-fe47-4c41-afe7-2cf2dbee77e1",
        "cursor": {
          "ref": "6145bd7e-ee20-4ea9-8544-f7d35772385b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7b382ab-9d63-46d5-93fd-062ff20ef6d9"
        },
        "item": {
          "id": "7c3b6087-fe47-4c41-afe7-2cf2dbee77e1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bf6ce653-a7a9-48fb-a645-7a0841b50289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45a4c25-de78-4bc6-ad08-b97e5b624ea4",
        "cursor": {
          "ref": "8fa83ea5-5900-4bc3-b940-bc2756c9b40c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3d02bd55-6fdf-4a68-a750-40f79900ab8a"
        },
        "item": {
          "id": "b45a4c25-de78-4bc6-ad08-b97e5b624ea4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "17b0eea3-022b-445c-9810-1a7aababb8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830f8d85-077f-4cd8-b742-9d9d0c06aed6",
        "cursor": {
          "ref": "b7226c0c-5736-49ee-88d6-ed65287335c7",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b7d9b2b6-1e15-488c-9046-8e02403281fa"
        },
        "item": {
          "id": "830f8d85-077f-4cd8-b742-9d9d0c06aed6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4370c0a5-12d4-4733-b741-c7cbf9e29eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79aba3d0-ca54-44ab-8f50-0c27f15c6880",
        "cursor": {
          "ref": "c7a6e494-bebb-4be0-ad4a-6dd2dd589b34",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f86eb9a7-4a90-4d2d-8a91-6721b5e715c0"
        },
        "item": {
          "id": "79aba3d0-ca54-44ab-8f50-0c27f15c6880",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e1af1c84-1ad0-4d2e-a81b-c6ebeb3793b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fa4dee-3edd-47a3-96f0-84815220bfc0",
        "cursor": {
          "ref": "f7c7bf4a-6db0-47c0-823f-979e415e4136",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5019a795-e49d-4c99-a688-4762ea8cb814"
        },
        "item": {
          "id": "49fa4dee-3edd-47a3-96f0-84815220bfc0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ca621820-1195-45dc-bdd8-3c6118fa7059",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ee1b293b-7105-4455-9673-f768fbdb8002",
        "cursor": {
          "ref": "4825449f-1f38-4cc6-bf38-ce7f3d93ef17",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "703e2cd4-870b-4610-a970-2650d175cb53"
        },
        "item": {
          "id": "ee1b293b-7105-4455-9673-f768fbdb8002",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a63b7e8c-7fc3-4298-80ac-59fa68ef283d",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "961f34ee-fa61-43f8-b83a-000cf002548d",
        "cursor": {
          "ref": "88576d8e-75dc-4e4d-9fc1-d525a0a327d2",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3afdbca6-3187-4c75-abef-9f608b5eb02e"
        },
        "item": {
          "id": "961f34ee-fa61-43f8-b83a-000cf002548d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "73c22d8d-4dfc-474f-854c-e316df1480bb",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4cef09e8-a274-4c7a-bb76-37bbca5a759f",
        "cursor": {
          "ref": "77376ea8-4e3c-411b-994f-e3b5b7c9d10b",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6b47f9e2-789d-4357-85aa-b5fbc94735e3"
        },
        "item": {
          "id": "4cef09e8-a274-4c7a-bb76-37bbca5a759f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2bd91eea-359e-402b-b5fc-9b6e776fb850",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c6914f41-09a9-4ca7-bf1c-7cc001aa0716",
        "cursor": {
          "ref": "e14fca73-6fca-43dd-be94-186498a4f776",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bf1fe0aa-dd71-44b4-9fb6-fa99778d3f8f"
        },
        "item": {
          "id": "c6914f41-09a9-4ca7-bf1c-7cc001aa0716",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "14601df1-a31c-4e04-8be4-f200208fd2de",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e25931dd-dc5c-4f24-8bf2-d7610d369592",
        "cursor": {
          "ref": "40b1600f-1f6b-4bc7-8301-436b62b425a8",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fd602d07-7d57-4fcb-92d9-8f84310cfb4d"
        },
        "item": {
          "id": "e25931dd-dc5c-4f24-8bf2-d7610d369592",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ec5a7373-4653-44be-bdf4-f3a77c208b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5a580c-f58c-46b6-a8fb-c150bb054242",
        "cursor": {
          "ref": "0ccc1f92-eeb8-43fa-8aad-c3baf70dce0d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fd894499-e63f-45aa-b244-d29ccd4720ae"
        },
        "item": {
          "id": "5a5a580c-f58c-46b6-a8fb-c150bb054242",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3ebe0af3-83dd-446f-9969-a5fbc920b03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b62bef-17cc-4ebe-881f-4ab413027fc4",
        "cursor": {
          "ref": "5a3ab70b-e926-492a-8455-ff1b5d73f089",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cc9eec5d-fa23-4a8d-b549-540ecf4307c0"
        },
        "item": {
          "id": "c6b62bef-17cc-4ebe-881f-4ab413027fc4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5e0598d3-08e5-4783-a05f-e071189c6c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413a645d-050b-4f94-8f4b-21c68cb5cf6a",
        "cursor": {
          "ref": "3eab466d-b569-4d4c-badc-179c60e38280",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f5a10c9d-1d8a-4a32-b601-a2d754332d3b"
        },
        "item": {
          "id": "413a645d-050b-4f94-8f4b-21c68cb5cf6a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3db85e39-442d-44a0-aa6f-33c75a665e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402664c8-98d9-4d23-8f8d-0887d764a85e",
        "cursor": {
          "ref": "4a805545-91b8-4b6a-a63e-e06fccec0ea5",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f35727ad-ffaf-45f5-b047-da80155d1023"
        },
        "item": {
          "id": "402664c8-98d9-4d23-8f8d-0887d764a85e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9f6ab29d-cdf8-40b6-acc1-d510a9b69dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc859a51-259f-4009-a415-6f1574ac00f2",
        "cursor": {
          "ref": "158bfa50-c857-4419-b304-dc689b70162b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3d53b916-62e5-4ca7-afae-5dc90bafdd72"
        },
        "item": {
          "id": "cc859a51-259f-4009-a415-6f1574ac00f2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6e2a53a7-8160-4caf-9bd1-cc2b0f2a5daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab940865-7764-477f-9175-cae43e65be9e",
        "cursor": {
          "ref": "3f6cab37-c9dd-4d5f-ba6f-b59a541517f8",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6975e2c3-cc1e-4050-a6b2-d0cf5e925a55"
        },
        "item": {
          "id": "ab940865-7764-477f-9175-cae43e65be9e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fc4ed75e-77d3-4b16-93f6-06f564831377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a0a18f-6f3b-4e6e-bc04-3f717e83faeb",
        "cursor": {
          "ref": "3b459378-54a6-458c-9252-5c0685815324",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4c40dbb5-fa8e-4f08-89cc-73eaa9b3c766"
        },
        "item": {
          "id": "06a0a18f-6f3b-4e6e-bc04-3f717e83faeb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e9c2c1bc-31d5-408a-8189-22c937c885bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e90d5b-6011-44d3-a452-9eeb6cf7cca9",
        "cursor": {
          "ref": "5bd77d0e-3ac4-44db-9cec-af7996b49242",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "fc88f377-46b0-4875-853a-d0e75653e684"
        },
        "item": {
          "id": "33e90d5b-6011-44d3-a452-9eeb6cf7cca9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ff13e4a1-ae7c-43ac-9ec3-f33b46002459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836f1f0e-30b6-4a09-9c67-9ec3f9a9271b",
        "cursor": {
          "ref": "3260b890-13df-45b5-978a-3675aca3812b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "00bc3897-3814-4000-bce1-e6b94c80cc42"
        },
        "item": {
          "id": "836f1f0e-30b6-4a09-9c67-9ec3f9a9271b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "60cbdeb0-94e2-42f5-9503-f56aa5695045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92322c01-bfed-4021-b5b1-224fd322285c",
        "cursor": {
          "ref": "7ca03e12-2afc-456d-9fd7-d311d23fd358",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cc5a421e-7560-4bcc-a011-26942c73a2fa"
        },
        "item": {
          "id": "92322c01-bfed-4021-b5b1-224fd322285c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6d7a65fe-f3c3-4f55-b217-27fa4d98feab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cb7e83-1174-421e-a4b2-f41151c2d328",
        "cursor": {
          "ref": "d5e9088e-3a7b-44ae-8c00-c22e383fbbf7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4aebbe2e-b8e6-457a-b480-e3eff421c840"
        },
        "item": {
          "id": "07cb7e83-1174-421e-a4b2-f41151c2d328",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "64cf2eab-06e4-4935-8156-c277ad326525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8953122f-1fe5-44d2-b16b-4c0d45181796",
        "cursor": {
          "ref": "159ee5ad-6511-4c81-8fd5-23aac3fa01b6",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fd301b68-6cb2-4146-8193-3ea717a3ab2b"
        },
        "item": {
          "id": "8953122f-1fe5-44d2-b16b-4c0d45181796",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "72e8ee49-32a7-49b4-a3ae-b24cfa35ada9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10603dc9-d62b-4c57-aacf-f8ea3862689d",
        "cursor": {
          "ref": "af030288-4826-4f6e-b6dd-ce06f29718e4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8dd9f150-84a4-44f4-8c94-35fdf542880b"
        },
        "item": {
          "id": "10603dc9-d62b-4c57-aacf-f8ea3862689d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a00107b5-5d57-4ea4-a191-d2b753312b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21838ed0-bbdd-4a92-af66-a08bfe8f6ec7",
        "cursor": {
          "ref": "a9b3248b-ada6-4a04-86bc-01d69c9336b0",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6b8a6cd9-348d-4138-b430-e7876f7a42b5"
        },
        "item": {
          "id": "21838ed0-bbdd-4a92-af66-a08bfe8f6ec7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5533ffa6-e392-4914-b6cf-bdb661e0166b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c8e72-145d-4269-9765-1fa9af0473c7",
        "cursor": {
          "ref": "f15ce364-3a6f-47fe-8124-bb776ad6531b",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c4967f69-76a9-46be-a5c1-e9406ab02292"
        },
        "item": {
          "id": "9c9c8e72-145d-4269-9765-1fa9af0473c7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fb3b494a-b0b6-45f6-af79-9acd928a525d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da6084f-6d0d-47e4-8601-d56eab6d826a",
        "cursor": {
          "ref": "be114f73-8ccc-41f4-8a72-2610b6f471dc",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d98daf1e-6229-43d8-90d5-2aff5c6272e7"
        },
        "item": {
          "id": "5da6084f-6d0d-47e4-8601-d56eab6d826a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "10f15ad6-71a6-4ffe-9ec3-33f98599f229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b55abe-0765-4f47-88ba-98a10451621f",
        "cursor": {
          "ref": "f1ede736-4443-45af-a4ee-269cb1288072",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b386e17c-5605-4fba-a226-5b3b88f33d6b"
        },
        "item": {
          "id": "93b55abe-0765-4f47-88ba-98a10451621f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5b1ca462-f65d-484e-a820-1f07d856f852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0f554e-c5fa-41f8-b0f2-b14b88937ba0",
        "cursor": {
          "ref": "930e08a1-a6c2-4a72-926d-3ed67629a563",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8197b4d2-1c82-404e-b377-5635edea10c3"
        },
        "item": {
          "id": "cb0f554e-c5fa-41f8-b0f2-b14b88937ba0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "638895aa-be3d-447b-be4f-07d702577c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2766ec9a-d47f-400a-b5da-a1ab22ec8a86",
        "cursor": {
          "ref": "a5f39dc3-27fe-4de0-b945-f198d4d1a8f3",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "be0681f5-0220-4eea-be52-9e1c3c92513a"
        },
        "item": {
          "id": "2766ec9a-d47f-400a-b5da-a1ab22ec8a86",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "16167ebc-90a7-493f-8c28-57d5118158bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c5c26f-46a2-4996-ad5f-ddb3c3f95178",
        "cursor": {
          "ref": "76e7730d-50a1-4c8b-b6e0-0efecc4a089c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d18a95a8-662e-4690-9931-bd5cd617ed71"
        },
        "item": {
          "id": "16c5c26f-46a2-4996-ad5f-ddb3c3f95178",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e7f5885e-84a9-4e97-87d0-e9cceea5d537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c448ba3b-2189-4b36-af59-46dabbc36b12",
        "cursor": {
          "ref": "34c67cd9-a154-44a3-9059-254d95e59eb8",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2cdab220-f5f8-4b1c-a6ab-ee67e8ed8d63"
        },
        "item": {
          "id": "c448ba3b-2189-4b36-af59-46dabbc36b12",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a899d58a-b72a-445a-a7dc-acc76df47609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3795f685-5752-42b8-b499-03874e4ac756",
        "cursor": {
          "ref": "da0c6967-5b7c-4ae3-b5fb-537bc2ce9ed5",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "caf9dd27-4e61-4161-b2a5-34e01e5156de"
        },
        "item": {
          "id": "3795f685-5752-42b8-b499-03874e4ac756",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8124a6b9-a36d-441a-853a-b1aeab226436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c382ad5c-82ac-4a37-8c7b-4546512bb9ab",
        "cursor": {
          "ref": "7000bcef-97a4-4f18-b9c5-aca214aeb69d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "63f1993f-44f8-4c90-a247-d072116cb151"
        },
        "item": {
          "id": "c382ad5c-82ac-4a37-8c7b-4546512bb9ab",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "40b31c3e-167c-4981-a203-4b25338c93c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772ed5d0-0f67-44a0-affd-d14aac9355f1",
        "cursor": {
          "ref": "e366b85b-69c5-40ba-97b3-1216886450d3",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9cbd8412-75f2-4304-a287-c975ec3915f7"
        },
        "item": {
          "id": "772ed5d0-0f67-44a0-affd-d14aac9355f1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "18983da6-6f74-440b-9824-765c099b3588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89810ebd-114f-4734-b363-eddbe3764ef9",
        "cursor": {
          "ref": "bfb53492-1287-4322-a1bb-18055e9ad6f7",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "03389423-fe72-4411-b3c2-21fed7e2215e"
        },
        "item": {
          "id": "89810ebd-114f-4734-b363-eddbe3764ef9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0176b577-ded8-4f2f-9717-93d33fed5a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8ba587-bcdc-4f03-a0c8-7eca1bd41d11",
        "cursor": {
          "ref": "7988467d-7e4e-43ed-a9d9-401102c2fa72",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ddb81f0f-7c70-4333-beab-0b7194f8a030"
        },
        "item": {
          "id": "0b8ba587-bcdc-4f03-a0c8-7eca1bd41d11",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4d910480-3905-46f2-bbcb-bb6d3fd2b209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d7348e-72c4-4fad-bee8-e29f045c5a84",
        "cursor": {
          "ref": "c9a64204-c1ae-4b29-9d64-6769c5c4629e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ea03cc01-c92c-4bd3-b135-106e63955569"
        },
        "item": {
          "id": "e5d7348e-72c4-4fad-bee8-e29f045c5a84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9d25b195-2ccc-4e04-8a9d-77e543b307f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e0ff08-2339-4e50-aa93-c3dfb4e8c433",
        "cursor": {
          "ref": "a32435ce-78ff-45d0-a45f-7f39802f14cc",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f8ba8169-5d68-424c-9e0d-301860e1b46b"
        },
        "item": {
          "id": "20e0ff08-2339-4e50-aa93-c3dfb4e8c433",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "656bbc7b-1410-4d3a-b411-0eef66c9ae28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dd6614-5772-41ba-be5c-8b3c908bfa0a",
        "cursor": {
          "ref": "78a7ef41-026f-4897-b83c-5bd39df9620a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9dee114-be7f-4fa9-a3f1-3b9a9a4b04c2"
        },
        "item": {
          "id": "79dd6614-5772-41ba-be5c-8b3c908bfa0a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c8985626-e783-420b-ba1a-0b91f26b1d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1634537d-1463-4d47-acea-8f9652893cc3",
        "cursor": {
          "ref": "f5d886a4-e361-478e-abcf-359767b883bd",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b5ce7d15-b965-4d81-83a5-15af79f1f3d8"
        },
        "item": {
          "id": "1634537d-1463-4d47-acea-8f9652893cc3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3d5484cf-6803-4846-acf8-70c1b48bf42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe2b174-4768-4b40-8b3d-24b531bc5fdc",
        "cursor": {
          "ref": "9d98cd57-87e9-4066-b39d-51ad112b2536",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c90619a2-06f0-47c1-a2ee-986269891da2"
        },
        "item": {
          "id": "2fe2b174-4768-4b40-8b3d-24b531bc5fdc",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "331d1b98-376e-4d11-a6f9-374c94d82c86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2946e6af-c58d-43e7-9b5d-aab89b32b423",
        "cursor": {
          "ref": "afd042b0-1981-4862-8c18-6dea8ed7ce6c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aba4f351-1085-42ed-8124-89650053dbec"
        },
        "item": {
          "id": "2946e6af-c58d-43e7-9b5d-aab89b32b423",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9edbf450-db1a-40b0-9818-60e7e0516493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "76e67e7d-8113-4811-9675-ccf5fd0f32aa",
        "cursor": {
          "ref": "efb17f70-cac1-47e8-951b-935ed5d81aaa",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d50f22fd-b429-4385-93c4-5251582f68bc"
        },
        "item": {
          "id": "76e67e7d-8113-4811-9675-ccf5fd0f32aa",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a77c7a33-3e6c-4a39-8917-e1d783c5710e",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88b0b04-304e-416d-8637-0d02d9f0b468",
        "cursor": {
          "ref": "977f572f-24a2-4306-b569-0d891e57a298",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "896a850f-587c-46d8-915d-96377b9bf162"
        },
        "item": {
          "id": "c88b0b04-304e-416d-8637-0d02d9f0b468",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7a4900bf-4df2-42c8-925b-0d75f6fd3bd1",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f6b101-76fa-4bfc-ac45-d34fe0205a60",
        "cursor": {
          "ref": "a57ceb69-df20-4189-a0d7-8bea660a2f24",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2945b45a-c591-473d-bc25-572b1d056cec"
        },
        "item": {
          "id": "e1f6b101-76fa-4bfc-ac45-d34fe0205a60",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "db20656e-01b0-4824-a57a-80c4b017a869",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0abc80a9-24b2-431a-8351-e46004452784",
        "cursor": {
          "ref": "d1666414-7f9f-45ea-8058-d3466c9b6892",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "44188559-1696-405c-9a82-84000bc34b46"
        },
        "item": {
          "id": "0abc80a9-24b2-431a-8351-e46004452784",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4bfece7d-82e6-40d9-b229-629e8a345854",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa62102-30ae-466e-840c-e4f02080ba67",
        "cursor": {
          "ref": "e73776ac-7ba5-4bbd-9e63-80a68057e9c5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4204e2ee-10cc-472d-8ea0-b7e9e1083ef2"
        },
        "item": {
          "id": "bfa62102-30ae-466e-840c-e4f02080ba67",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "58348e51-13c3-40a2-8bc1-d88c2a60a069",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-15T00:36:54.345Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-15T00:36:54.345Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f1f9071b-e2bc-4b85-b0f3-dcc922f42407",
        "cursor": {
          "ref": "b2823f33-ca88-47c6-89aa-61b1d276cbed",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7ed2b4da-cc3c-4a2b-8997-ba70552d9825"
        },
        "item": {
          "id": "f1f9071b-e2bc-4b85-b0f3-dcc922f42407",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "42ada9b3-6078-46da-a46f-cc0e5995dc05",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c180ea97-d51d-414e-b8e8-03c3d384606a",
        "cursor": {
          "ref": "97c2a064-9c83-4344-b4f4-b62b9cc30a5e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bf086b2d-1e30-49a4-aa0b-3e4d610ab466"
        },
        "item": {
          "id": "c180ea97-d51d-414e-b8e8-03c3d384606a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b37f9cfe-48f0-43c0-ac2a-6ee8ebebe717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589e6d06-d675-4b50-a3bd-d128bc4b694b",
        "cursor": {
          "ref": "21a95ebe-c2a2-416d-9b21-1194802e3a4f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e0a0b50a-d3d7-433b-b706-49e4038f4c08"
        },
        "item": {
          "id": "589e6d06-d675-4b50-a3bd-d128bc4b694b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2fbd2876-d3e0-40a3-82d2-e69e4f1c1194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4513c876-5935-43de-86a6-a7ff2afc69e0",
        "cursor": {
          "ref": "2b478b2a-4ece-40e2-8281-6712bbda645d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "76d585a8-7c10-4675-8435-921f11d3fc9c"
        },
        "item": {
          "id": "4513c876-5935-43de-86a6-a7ff2afc69e0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dfa19609-f937-4ef7-8580-3fc50dc5728e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99926cdc-5ce7-4fe8-8ce6-9df766e877b8",
        "cursor": {
          "ref": "aa972ad6-66a5-40fb-8490-fa3dac69dcd7",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c25c698a-1ba4-45d9-a22e-ed03d60577b4"
        },
        "item": {
          "id": "99926cdc-5ce7-4fe8-8ce6-9df766e877b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "450fb114-e5fc-45ff-aa60-e6828690817d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a201797a-810c-4fd7-b803-d4bf8d00562a",
        "cursor": {
          "ref": "a6b753d0-a5df-46a8-86cd-2ed95e2a9f42",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "693a9c7a-72f9-4f00-904b-7ecd25287c11"
        },
        "item": {
          "id": "a201797a-810c-4fd7-b803-d4bf8d00562a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "abab82f1-be9b-4cdb-8417-d9e4e300a4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca36b3b-d3e2-4311-8f14-1cb4ddcf6999",
        "cursor": {
          "ref": "5bcc0bfa-5549-4af9-81de-b87391398c1a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3f607964-c43d-4035-af82-b06e09653118"
        },
        "item": {
          "id": "9ca36b3b-d3e2-4311-8f14-1cb4ddcf6999",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d853d57b-3eaf-445b-8170-e5f673ef3a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a09940-4405-4523-97e6-3e77fa0425d3",
        "cursor": {
          "ref": "d15c2efe-34bd-4404-a2a1-c9dec800ac8d",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b5ee4363-b954-4c72-8149-86b36bf28b9c"
        },
        "item": {
          "id": "09a09940-4405-4523-97e6-3e77fa0425d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d891dd53-0e33-43a3-b5c0-4e58b143651f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ba2606-cf05-4b75-b4d7-b61d63345f66",
        "cursor": {
          "ref": "661636cc-cfe3-486f-aa04-22d6c77d6fb3",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a8ad52b1-5d14-41e5-99e4-8c61ff0acd89"
        },
        "item": {
          "id": "76ba2606-cf05-4b75-b4d7-b61d63345f66",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "25399f02-0a3b-4926-b5fe-a4a6738290ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936149f7-41d0-44cb-a9bd-ff1be96dbe68",
        "cursor": {
          "ref": "5ad006a3-56bb-4584-b667-1e01643dc297",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a4e6205b-5de5-4feb-b737-bb91408bfa07"
        },
        "item": {
          "id": "936149f7-41d0-44cb-a9bd-ff1be96dbe68",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f9a0d1a5-be50-4b97-8859-00bd4922c7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0711aae6-2be8-4db1-8fd9-62acb9922af6",
        "cursor": {
          "ref": "d653d0fd-4d93-4ece-a7c0-32c1e313a0a5",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "05e1f856-d80e-4c57-89f8-54a3ad7deeb0"
        },
        "item": {
          "id": "0711aae6-2be8-4db1-8fd9-62acb9922af6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d255dca4-d67d-4aed-8d17-1e5ca92da1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6d7d2b-7779-464c-b6c2-547a85d890b9",
        "cursor": {
          "ref": "137927a6-21f8-4db8-9ff8-24cc59523cb3",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8fff412a-58c4-4724-ad31-2191fea10f71"
        },
        "item": {
          "id": "df6d7d2b-7779-464c-b6c2-547a85d890b9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b105ea2e-13fa-479f-b019-5805af373d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f901cfde-7c35-46c4-bc7c-514075958544",
        "cursor": {
          "ref": "3ef94584-5a44-41cf-8de4-d3613569ac0b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ba829732-fdb6-4ab0-8c89-37852d4d2b9a"
        },
        "item": {
          "id": "f901cfde-7c35-46c4-bc7c-514075958544",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c908f7fc-46fe-4d44-9ed6-912c22183a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4adfd4e-6414-4971-8cc7-d0c3c69c62de",
        "cursor": {
          "ref": "392181ad-e5e3-4b49-a6c3-c6c0838a9304",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6252b8d4-9115-40af-825a-610a4112dd91"
        },
        "item": {
          "id": "c4adfd4e-6414-4971-8cc7-d0c3c69c62de",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "517034c4-ede7-4973-813d-bf93dc7d997c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d493c9-a51d-4f92-8c0a-e20c72043cff",
        "cursor": {
          "ref": "5218a18f-5aec-4380-aa1b-974da669208b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fd0c5e5d-331c-4d99-b877-9c3671b94920"
        },
        "item": {
          "id": "16d493c9-a51d-4f92-8c0a-e20c72043cff",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9aa66266-9723-44b8-825a-87c76ba7d0af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d325bb9b-4cb0-4817-8fad-3d28d075fca8",
        "cursor": {
          "ref": "c4163d55-278f-4597-9393-5b10dd81d30e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a67de8be-4c87-4df3-8fff-e653df2f80ec"
        },
        "item": {
          "id": "d325bb9b-4cb0-4817-8fad-3d28d075fca8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c2e0c3f2-e19e-4297-a5a5-040293a60920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12af58ea-dde6-4a5d-a4a6-75794273ed4d",
        "cursor": {
          "ref": "2de3f645-988d-4b4b-8ed7-e9b59ae7b84c",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b2527955-59bd-4126-ba6b-fbc3ee924091"
        },
        "item": {
          "id": "12af58ea-dde6-4a5d-a4a6-75794273ed4d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b39eda37-0251-4033-8d34-8ab60554017e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc3637-86b0-4d57-935a-7fbc82b90beb",
        "cursor": {
          "ref": "4f331d4a-0774-4822-b3cd-a7a6c812e339",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c93ff663-098a-49eb-a9d0-514779e1559f"
        },
        "item": {
          "id": "57dc3637-86b0-4d57-935a-7fbc82b90beb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "92865290-877c-4fcf-92aa-b1540b351b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04ef744-25e6-401e-b170-122286339f7f",
        "cursor": {
          "ref": "3c10da5a-4b3d-4491-a203-1e8617ab8d6e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "92c9e1bb-fa58-47bf-81c6-15e2a602e9ee"
        },
        "item": {
          "id": "a04ef744-25e6-401e-b170-122286339f7f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0115322b-0205-4dbe-a2ce-27995d452c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cb7afc-fc50-4e10-a4b0-30a066f84cab",
        "cursor": {
          "ref": "fb02bd63-c19c-46c1-88ff-7306c5f5d0a6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8cb7f18e-927b-4e29-8ce9-6df56fb58939"
        },
        "item": {
          "id": "a9cb7afc-fc50-4e10-a4b0-30a066f84cab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d3f631cc-5aff-4da7-976f-2f55622c4ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e061472b-10d5-4fe1-9fc7-e8935f0298e3",
        "cursor": {
          "ref": "4ba59b26-030e-4208-94c6-2d68bbd77ce4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a529490d-ef1b-4807-b429-f7fc27340248"
        },
        "item": {
          "id": "e061472b-10d5-4fe1-9fc7-e8935f0298e3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cbd6b285-ccae-4902-89f7-ba3fd8571c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d4e663-bfe9-4c59-8389-9e4bd4eb7e45",
        "cursor": {
          "ref": "639bcf2b-e293-4980-a853-6a280a6e95ae",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cf0e5921-afdc-4018-bfae-21d833473c63"
        },
        "item": {
          "id": "18d4e663-bfe9-4c59-8389-9e4bd4eb7e45",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "85413994-4f73-483b-8c70-b0503de3e4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b1aeb2-5be9-4f58-aaec-373ce390d40e",
        "cursor": {
          "ref": "2a24267e-d708-4a5e-9805-265fd797ff49",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5617e8be-2d2a-477a-9eb7-d52dda7c2124"
        },
        "item": {
          "id": "b0b1aeb2-5be9-4f58-aaec-373ce390d40e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a1e0ee10-a943-4aa5-8c7e-febf7ab706da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c123830d-d2c3-4bf3-b352-3a76b1e8ead7",
        "cursor": {
          "ref": "1e54a986-a65c-48de-a253-303a813adfd4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "219f9c97-07fc-418f-af75-8dca492ba7e9"
        },
        "item": {
          "id": "c123830d-d2c3-4bf3-b352-3a76b1e8ead7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3fe476b6-56f3-48ba-a938-fbf76712e1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d48d3-2b36-42b8-b994-61f427999d68",
        "cursor": {
          "ref": "847736a9-5121-4aab-bdef-5d15a9772414",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5b9f7288-fcc0-40ff-8de5-97225c82fc89"
        },
        "item": {
          "id": "040d48d3-2b36-42b8-b994-61f427999d68",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8efdcf3d-20ed-4ae0-9a41-4ceed6b149bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a00b99-9b80-4da9-b284-6457da4a2c00",
        "cursor": {
          "ref": "cfe229fa-3162-426a-b91a-180ddd1b4091",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "030926a4-cdc8-4add-8e1b-303f8a9ac769"
        },
        "item": {
          "id": "c1a00b99-9b80-4da9-b284-6457da4a2c00",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "381fda45-cc05-4253-b654-3e70d0c45ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca05702-c301-4ea7-9212-77e9b56aaf2d",
        "cursor": {
          "ref": "52eb6826-199c-4af8-a860-b26919e1dc1d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "96ff243c-ec85-4d7b-a999-4f0f26c8b1d6"
        },
        "item": {
          "id": "eca05702-c301-4ea7-9212-77e9b56aaf2d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c277b76d-2db1-4c2f-bf3b-1209582b1d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6aab5ff-0917-4152-b436-c2388ecacf06",
        "cursor": {
          "ref": "ff4c86b2-59da-4686-80a4-5afe3a7d6876",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "caf9d8a8-ac33-4ccd-9b60-9003b15af095"
        },
        "item": {
          "id": "d6aab5ff-0917-4152-b436-c2388ecacf06",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "93499198-f1e3-442c-9c47-d1857d44af81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa669db-1501-4d8e-b90e-35a7c142534b",
        "cursor": {
          "ref": "128d4284-c30a-4d27-87c9-d4d996f2fa7d",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "15189f44-17de-4c31-bf1f-fff78df78ade"
        },
        "item": {
          "id": "dfa669db-1501-4d8e-b90e-35a7c142534b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a7a4b55a-3c4c-418d-b34f-f036b20d33a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb3c598-27df-42ac-b226-5ad203a84d0e",
        "cursor": {
          "ref": "f6286524-cd19-4362-85f4-4d477a89dc09",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "171b77ea-4b90-4332-ad4e-cc9443a15211"
        },
        "item": {
          "id": "7cb3c598-27df-42ac-b226-5ad203a84d0e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46f483b2-71d6-4512-bff4-99f36eae98ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39214b1d-3c31-4ebb-a767-02e77de9053c",
        "cursor": {
          "ref": "cfaa8a35-aa78-48c4-94b2-d84ab1887f92",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "55590a20-3e0c-40db-98ad-9b36696ec2cd"
        },
        "item": {
          "id": "39214b1d-3c31-4ebb-a767-02e77de9053c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b8f97855-5858-4b9c-bce7-a45a378dd4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a99acc8-0f1d-4316-afde-be144be4cd38",
        "cursor": {
          "ref": "2ad7e3b4-db15-4ad3-ab2f-6d6c63f5dcf8",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ec692ee7-9af8-4902-acd3-c26cbbd9c831"
        },
        "item": {
          "id": "7a99acc8-0f1d-4316-afde-be144be4cd38",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "866b524b-513d-4e94-8fdf-59e9329d869d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fb9301-a025-4200-98ed-b6e3ed026e83",
        "cursor": {
          "ref": "9cff7b9f-3298-4f1b-b415-defc9570dfed",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8f17230f-64d2-4706-82ab-e45db98907d1"
        },
        "item": {
          "id": "36fb9301-a025-4200-98ed-b6e3ed026e83",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "84be0066-bac6-45a6-b8b0-eb08c58e08c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c2ffd4-016f-4c6a-a893-a8b087cd017f",
        "cursor": {
          "ref": "eba6869c-c803-4f24-97f6-5416c3e8dfa7",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "056c8498-91ed-416c-ae99-08137da62907"
        },
        "item": {
          "id": "66c2ffd4-016f-4c6a-a893-a8b087cd017f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9ad7c4ad-6f90-42ae-a172-2743805224d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec51da0-8271-49ff-9913-4e25e39a3219",
        "cursor": {
          "ref": "435f473a-a616-4ee5-9c76-48214632ca08",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "18aeac43-54d0-4fc3-934c-cfebcb2ca964"
        },
        "item": {
          "id": "1ec51da0-8271-49ff-9913-4e25e39a3219",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2ab0a91b-8d98-4742-86ca-1c1192e80a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d54ff0-bf01-4d41-8c9a-7e8ad0912abd",
        "cursor": {
          "ref": "996f9433-5378-4008-8509-b3e39bd52f7a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e1e8fbe5-bdae-4531-9651-0128af4b427c"
        },
        "item": {
          "id": "58d54ff0-bf01-4d41-8c9a-7e8ad0912abd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "461f3a7e-b9f8-4efb-95c7-7c9f2c16b8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290e9cca-d8f2-4ad7-9860-8dad61035942",
        "cursor": {
          "ref": "9f7bfc23-30a4-4343-845a-c5dfcfb32616",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cf7b0eb6-ad61-419c-b806-eeb6b87f5939"
        },
        "item": {
          "id": "290e9cca-d8f2-4ad7-9860-8dad61035942",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "24ca20b4-1af7-4098-8236-d684568b65ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ccff5b-a72a-4da0-bab4-6f4e10f194ab",
        "cursor": {
          "ref": "66ec7eef-fa3d-4412-8787-d3ae18458506",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f27bf71a-f356-4f2c-b465-0cb0d0b7a118"
        },
        "item": {
          "id": "e2ccff5b-a72a-4da0-bab4-6f4e10f194ab",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7f560779-c825-4ceb-a924-0c95c45330a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cb4045-9a66-4e4b-a95f-22a6a25ea073",
        "cursor": {
          "ref": "2781fcc7-ffbc-4d09-a1d3-737cb4d421e3",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2c8f7c6a-c1ff-41a7-b265-e3d2ab88f2dc"
        },
        "item": {
          "id": "c6cb4045-9a66-4e4b-a95f-22a6a25ea073",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fd687f0c-708c-4ea9-a40d-6a4849f58ba1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2817c2-a0cc-4e9a-b4fa-113e820cb5ce",
        "cursor": {
          "ref": "35d7445d-40ad-4c01-b5d9-147df6ae51d9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c89b5389-ae4c-4da0-9eea-76345fe77cbe"
        },
        "item": {
          "id": "8b2817c2-a0cc-4e9a-b4fa-113e820cb5ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "49c5311f-b36e-4fcc-81ea-47159f6c91cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e567de87-9e95-4d36-8fcc-6920188714a5",
        "cursor": {
          "ref": "c152079f-12f4-4b3a-b7ce-0646732a2b07",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bbc79632-6811-4903-9c75-a7f0fdd6b4df"
        },
        "item": {
          "id": "e567de87-9e95-4d36-8fcc-6920188714a5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fa5146de-f5e9-46db-a54d-4779086c49a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af066bd-0b9a-4c90-a4bc-169d8db9d1e9",
        "cursor": {
          "ref": "d470c281-739e-429d-9dee-54572149a06a",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4fc0d7b6-45d1-4309-b667-3036249c5c25"
        },
        "item": {
          "id": "1af066bd-0b9a-4c90-a4bc-169d8db9d1e9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "750b4711-b982-4654-b74b-d7b61c417032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abab3af6-6448-481a-890f-f29fb8337fac",
        "cursor": {
          "ref": "4e8f2ca7-7b82-4efb-81ed-7d71a2223dd8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ab956a1-86e9-4e8f-b1f5-743c7c1f5a2b"
        },
        "item": {
          "id": "abab3af6-6448-481a-890f-f29fb8337fac",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "deab3ce1-ae64-46bc-acd5-69a6ad02ef7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703fb4e5-dec9-46a2-b69f-7669a97b130b",
        "cursor": {
          "ref": "c9d3201e-b181-4e21-8592-7f10972ad49d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d2d2eaec-ce84-4466-b1c6-8262182df4f4"
        },
        "item": {
          "id": "703fb4e5-dec9-46a2-b69f-7669a97b130b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "47f16787-e706-4e44-ad0d-41d1f12ed304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0e54d3-79ca-47c9-83fa-ee2548816120",
        "cursor": {
          "ref": "8c05dbc9-0f33-4eec-ad7c-57b44c5a22f0",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2b4ab9e0-a285-4cfe-a80c-6f351aa18300"
        },
        "item": {
          "id": "1d0e54d3-79ca-47c9-83fa-ee2548816120",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ff25f10e-e862-4312-8453-b9c523451c26",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d0409224-1e2f-47de-8702-57bd983b0cde",
        "cursor": {
          "ref": "e301e919-103c-4245-83d2-6eaf9c1f9d83",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4c694e42-43de-42a6-af6a-9b2fa8b67b22"
        },
        "item": {
          "id": "d0409224-1e2f-47de-8702-57bd983b0cde",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a43fe0ad-41b3-487f-84e4-024ee432991a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afdd30c-f5c8-4a3e-ae59-367c07b535c0",
        "cursor": {
          "ref": "5b6f9b9f-7ac4-4f0e-9f68-2dafd7b8c597",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f597d6b9-ac08-41df-ad35-32240b3b815c"
        },
        "item": {
          "id": "2afdd30c-f5c8-4a3e-ae59-367c07b535c0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "12b0c28f-e21b-4df9-866a-1f85e056131f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ec7191-ee7c-439b-ab99-43fffba0858b",
        "cursor": {
          "ref": "30c31a84-b9d0-46e0-9985-23ef14a57151",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e1089db6-e654-418c-bb13-d97ce6a19eef"
        },
        "item": {
          "id": "39ec7191-ee7c-439b-ab99-43fffba0858b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e36a1c68-8ae0-4aa9-b5d7-b2545b2393ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1284345-3474-448c-8234-6851c898504a",
        "cursor": {
          "ref": "80cd8a0b-08b1-47d5-9d59-507d0c64c3f5",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8d70b281-1016-49fc-986c-61f76a706b25"
        },
        "item": {
          "id": "e1284345-3474-448c-8234-6851c898504a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ed072216-8090-4370-9ce1-a50dab635cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120ed6ac-d787-45e9-b6e5-207c8d187d45",
        "cursor": {
          "ref": "c2cc1ff9-64f3-429c-9416-25da29f90991",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "06f23ed8-73f8-41b4-8ce1-273cdb9f21b9"
        },
        "item": {
          "id": "120ed6ac-d787-45e9-b6e5-207c8d187d45",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "557cced0-aed3-4cb1-8f75-a064e23d5933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3153007-10d7-4def-b486-9e8543214040",
        "cursor": {
          "ref": "e5f137d1-9979-4e1d-9765-307e1fb5caf3",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4c69fe29-323f-462f-943b-b114ce602b0c"
        },
        "item": {
          "id": "d3153007-10d7-4def-b486-9e8543214040",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b9900c7a-ad2b-4fd5-aa5c-d15a775ad44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e6b377-29cb-4b83-8b38-9c215d821f48",
        "cursor": {
          "ref": "56361845-f6af-4c54-90db-fec1097f0b67",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fc62b006-0fec-484a-9035-fcdd2a323e0e"
        },
        "item": {
          "id": "64e6b377-29cb-4b83-8b38-9c215d821f48",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6f3a33b2-6316-4d8c-8003-c26ce1850f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5545db5-c5ce-401b-ad70-034e3e2a66af",
        "cursor": {
          "ref": "9dcdaa8e-a036-4007-8bde-b04fe97c5cab",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "32282790-219a-4345-a5cc-7030cb1b694d"
        },
        "item": {
          "id": "c5545db5-c5ce-401b-ad70-034e3e2a66af",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "658b11bf-cca5-4e32-9364-bdfc5003f853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b710b9bb-ec23-441b-9365-9665f3690301",
        "cursor": {
          "ref": "6c6060ec-7f43-4593-bd3e-9cdd4a260718",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "565f9647-d3ab-4b08-a143-e7a9269cb770"
        },
        "item": {
          "id": "b710b9bb-ec23-441b-9365-9665f3690301",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "40961451-2a49-4d1f-b723-620151b86396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83481692-b3c5-4ddd-b8bb-3465b1dd0355",
        "cursor": {
          "ref": "170ece20-0229-4e36-a86f-4adbe116cd90",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ca3befae-58e6-431b-9f36-bfac3d8f2486"
        },
        "item": {
          "id": "83481692-b3c5-4ddd-b8bb-3465b1dd0355",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "49ede526-6b0a-422c-b28b-7f252498b89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bf885c-8e48-4ce5-9f05-6770dad92be7",
        "cursor": {
          "ref": "2fb4358a-71dc-43c8-afe8-fe864cd5af6e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ca47e5a-1a13-4929-9e38-046801d9ed95"
        },
        "item": {
          "id": "71bf885c-8e48-4ce5-9f05-6770dad92be7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "95ef2b7c-acc9-478e-b121-04da32db83a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc87174-6587-4f6d-b794-18102c9a3996",
        "cursor": {
          "ref": "50531bfa-98a7-40f1-ac0d-f68897ba683e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2372b471-f926-4732-a8c7-28e7ce013159"
        },
        "item": {
          "id": "2dc87174-6587-4f6d-b794-18102c9a3996",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4d45b2bc-a7b5-438d-a2d9-38e2c89687c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8bf3e3-165f-40cc-b961-1082b7657949",
        "cursor": {
          "ref": "5b4ae320-0a0a-4872-9f5a-89e7cb7bb967",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fe157377-3c04-4c23-887d-40f28779ccff"
        },
        "item": {
          "id": "2f8bf3e3-165f-40cc-b961-1082b7657949",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6f949f3c-f8d7-4734-98e0-cf493da2fedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bdcdd1-8487-4f69-a323-4fb60d394b94",
        "cursor": {
          "ref": "5e77a1ba-a46a-475d-a393-73b038de13e5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "372adf99-9967-44a9-b922-83776d9eab5c"
        },
        "item": {
          "id": "98bdcdd1-8487-4f69-a323-4fb60d394b94",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "38e8f079-0d0b-4cd8-ab25-7b0182a2ed07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f679cd-a8aa-488c-8ac7-4c0b55a133d1",
        "cursor": {
          "ref": "9823f650-00bf-431b-b9b0-73d1d60cfac6",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e7a8e877-6446-4f10-946f-1f99ae08f954"
        },
        "item": {
          "id": "85f679cd-a8aa-488c-8ac7-4c0b55a133d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "39ea7c23-7e16-4080-8869-c5b3d1dec9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26275a2c-13d9-4615-b48d-1e79a9245037",
        "cursor": {
          "ref": "a9d685fc-49dd-4d67-adad-c34cc03293d5",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "98ef7080-b93a-4447-9337-7f677a6dd4ef"
        },
        "item": {
          "id": "26275a2c-13d9-4615-b48d-1e79a9245037",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b140523b-1a59-4c17-a6e3-500a5f64b383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3fd057-f315-4bd8-9475-b67e526304a3",
        "cursor": {
          "ref": "4ced04c9-1948-4341-80eb-fd2b6d03c47b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "922e431a-69a8-4d78-bc75-e5241d1cfc72"
        },
        "item": {
          "id": "ff3fd057-f315-4bd8-9475-b67e526304a3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "820cfa8e-a89e-4bb7-8ec0-d5a2dac8a348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b29568-9eab-400c-89cf-d4fd572cdab0",
        "cursor": {
          "ref": "db75415f-e08d-4daf-9ff7-91ab456d44a6",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "afbd61e9-664c-4703-bce7-d264163155a9"
        },
        "item": {
          "id": "10b29568-9eab-400c-89cf-d4fd572cdab0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5470b932-19d7-45db-9546-1ec37fbcfce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4445e2-3656-49ed-95c3-8b880660c0fb",
        "cursor": {
          "ref": "7e192045-fa1b-446b-8f50-7316570e08b0",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "87674f41-1445-4260-b817-8d79af2de7c1"
        },
        "item": {
          "id": "8e4445e2-3656-49ed-95c3-8b880660c0fb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2b6434e6-22ec-45ff-968c-2362b8d0d33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b4699c-9227-48bb-89f0-ba0e5a9f5b64",
        "cursor": {
          "ref": "60a56a2e-336b-464f-9514-4e1bad8166e0",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "401d536d-aac9-425f-bc09-a4a4d0a69bf9"
        },
        "item": {
          "id": "c2b4699c-9227-48bb-89f0-ba0e5a9f5b64",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cedc4bcc-653a-4c96-a73e-331bc32bb244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487d5689-2ace-4b34-bc8d-d0a904a7c445",
        "cursor": {
          "ref": "fb78f965-a659-4144-bd8d-688a9d897bfe",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "06c07525-8827-4998-84b5-811fcbe94930"
        },
        "item": {
          "id": "487d5689-2ace-4b34-bc8d-d0a904a7c445",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0d8bb0fc-faf2-4520-996e-293def4f7e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e80034-a918-4e6e-8707-2da1216d1fc1",
        "cursor": {
          "ref": "cc0198d1-0f3d-49d7-8dba-47370ccdb64f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6b5cf085-2e24-4afe-8087-a25560b6551e"
        },
        "item": {
          "id": "b5e80034-a918-4e6e-8707-2da1216d1fc1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fcfaaa6a-06cc-4379-a9bf-e2d5a544da50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0847e605-11d2-424a-8922-eec3a3cf648f",
        "cursor": {
          "ref": "41b340df-e5f9-46d9-a683-2fb764beb0b0",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f0555df1-2d46-4785-ae79-094457d09508"
        },
        "item": {
          "id": "0847e605-11d2-424a-8922-eec3a3cf648f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "79f2b5b8-78a0-4eea-8aa8-8a73c7b728be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62038b05-56b9-46d4-9a68-76ba59d85b44",
        "cursor": {
          "ref": "e0df2d3e-3ee8-4975-92b3-36d4eb4b2c17",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "45d94038-2cbf-47a3-a7b4-fb0d1b62df6d"
        },
        "item": {
          "id": "62038b05-56b9-46d4-9a68-76ba59d85b44",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8279571a-ff1f-4f55-a7af-905e06bcc79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1682b38-b58b-429b-a4f9-83d37d12d8e4",
        "cursor": {
          "ref": "d5f37dfb-d766-4fcb-9801-40ec35e2de42",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8b5e62f5-b889-4e11-bb2e-c4588cb829d5"
        },
        "item": {
          "id": "a1682b38-b58b-429b-a4f9-83d37d12d8e4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e26192d6-1b7f-45d7-a9e1-8f09658446e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b59cac-0a22-47a7-a84a-d109d5d0fd42",
        "cursor": {
          "ref": "f0b8fa79-2803-423c-9152-74ead151684a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "36283a5e-5102-4d84-9400-833dc820acfd"
        },
        "item": {
          "id": "89b59cac-0a22-47a7-a84a-d109d5d0fd42",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4912fb20-e77d-4b6e-9662-f8cd0a0ee3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb0dccf-90ab-401c-8ddc-aebf690e12e0",
        "cursor": {
          "ref": "da1de10a-759e-47d2-b644-a1b8d7f903d9",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a7c92d0f-5de4-4699-93cc-4df6f8b8b7d0"
        },
        "item": {
          "id": "cbb0dccf-90ab-401c-8ddc-aebf690e12e0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a8787884-a4cc-414e-81cc-ab8fddf0df93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a39a343-14ae-4e7c-bc8a-09afdd075fad",
        "cursor": {
          "ref": "37f31f53-0718-4e1e-a600-5bb52a9edc0b",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6caadb12-b859-4df8-ae0b-c7eba0a97bac"
        },
        "item": {
          "id": "5a39a343-14ae-4e7c-bc8a-09afdd075fad",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "48ba3392-7d86-4aa4-ad85-2856c5978a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c9fda7-2762-49cf-86f6-63856d40ff7c",
        "cursor": {
          "ref": "0e6a38b7-8a22-435a-adfb-f0ffca7c21c1",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bea1e7b7-d9a8-4580-ac38-eb5eb074b069"
        },
        "item": {
          "id": "c8c9fda7-2762-49cf-86f6-63856d40ff7c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d99dc02c-04f0-4130-8b4d-f92ca58e09a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885a30d0-5176-4593-8345-e59e8889613c",
        "cursor": {
          "ref": "8d0af618-1e16-461e-9821-e97b24cea295",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "94883ddf-8592-48a0-bc60-51846cfecf8d"
        },
        "item": {
          "id": "885a30d0-5176-4593-8345-e59e8889613c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7fdf8a72-cbe1-4c05-8e0e-ffde88e7899c",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f26da2aa-a3e9-4457-a630-42f91b08c951",
        "cursor": {
          "ref": "997155b4-c994-4fa1-a7d5-b06ec4931935",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "38414033-6d85-4761-9262-73d02a525ed7"
        },
        "item": {
          "id": "f26da2aa-a3e9-4457-a630-42f91b08c951",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d993a8c6-54e8-440e-a462-cb78e2fbbf7d",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "56845426-050f-4826-9a6a-a29fa8cfa84f",
        "cursor": {
          "ref": "ed06e077-18f2-49ca-8bc0-5128d20265b1",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b76f0474-b4bd-4dd0-8b79-2da7ad15d57b"
        },
        "item": {
          "id": "56845426-050f-4826-9a6a-a29fa8cfa84f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d34eb3d7-5f78-469e-a7df-6770ba97e62e",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a9653a4b-de12-4f5b-ab1f-e946b4f351e5",
        "cursor": {
          "ref": "3d0f7d10-1626-442b-a469-e559e0a5bd2c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "eb6fb2bc-8be5-486f-ba08-f1bd0b8fd44d"
        },
        "item": {
          "id": "a9653a4b-de12-4f5b-ab1f-e946b4f351e5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "177f7f9c-222c-4d4e-b9ef-bca0f427ff2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31fc18b-b79d-4f56-990d-7af3d3328f12",
        "cursor": {
          "ref": "ee25c6c8-524c-4988-878d-de3ef065c4f3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71a8b016-a8bd-4a1b-9701-4324cbfbbd48"
        },
        "item": {
          "id": "b31fc18b-b79d-4f56-990d-7af3d3328f12",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8a75c1f4-0c39-4b09-873f-f12f264a9f66",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7be09b4f-0d42-41eb-9f21-32702a2f8d4b",
        "cursor": {
          "ref": "524e6d79-9335-4349-ba8f-de97d176e749",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4f794bb6-ad64-4e47-9260-bd9d93ed402c"
        },
        "item": {
          "id": "7be09b4f-0d42-41eb-9f21-32702a2f8d4b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "17738627-d386-402a-95b6-733b3240d23c",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "aad38ae3-7d42-4ab4-974e-55cd369ce2e8",
        "cursor": {
          "ref": "a7aa83e1-8d60-42de-92e0-38a8bd49f001",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c5f4c7f1-2f49-420e-b437-9ae5ccbaa2f6"
        },
        "item": {
          "id": "aad38ae3-7d42-4ab4-974e-55cd369ce2e8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "56dc04ee-3492-4a78-88b8-14053bcc2151",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "40733c7f-2658-42aa-bf47-c0f4398f53ed",
        "cursor": {
          "ref": "870cfc74-33ac-4633-812d-f4f1a6eb110e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7e055368-6a3c-44b5-bc66-25b50961d89f"
        },
        "item": {
          "id": "40733c7f-2658-42aa-bf47-c0f4398f53ed",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a4c52d12-6e2c-49b7-911e-31809bbb5853",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "979452b7-dac8-4e9e-bff7-575c4d835de4",
        "cursor": {
          "ref": "89048c01-1c95-4c52-858f-354bc7e8fc82",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "01f03ebd-6ba5-49fd-a396-586e046f10eb"
        },
        "item": {
          "id": "979452b7-dac8-4e9e-bff7-575c4d835de4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "753279af-4825-497a-abba-c471ae90b3af",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "52630834-b02b-4f85-8966-fe4b384912f4",
        "cursor": {
          "ref": "b11711e9-c404-42e7-9d81-918b924aef2f",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "107e3e23-acf3-4b08-bfea-74aaadc49b86"
        },
        "item": {
          "id": "52630834-b02b-4f85-8966-fe4b384912f4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "74220a3f-0d66-44fc-90d3-28ad8a4f47f7",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "cc3d7b93-44aa-4700-acdc-a2dfb78ebd7b",
        "cursor": {
          "ref": "f9ba9aee-180f-441f-a60b-aca7c61d51da",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "068f8267-6981-4cd3-93d1-306f10684bcc"
        },
        "item": {
          "id": "cc3d7b93-44aa-4700-acdc-a2dfb78ebd7b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1088de55-4cb2-4324-a431-fece29df976d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124c73cc-dfda-4d88-a62c-fb160ca4f0f2",
        "cursor": {
          "ref": "eb7c3abf-36eb-4791-8cc3-720bfe1af01c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "62c06585-526e-410a-972e-b3457525e858"
        },
        "item": {
          "id": "124c73cc-dfda-4d88-a62c-fb160ca4f0f2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "32a76d44-056d-4964-b114-50c14ba2bc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c70538-2506-4ae3-b8c6-57af521b6645",
        "cursor": {
          "ref": "25f052a5-5dc6-4814-86fc-2ae47713abe4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1ea9b679-515f-44b7-922e-ada0eebee0d4"
        },
        "item": {
          "id": "16c70538-2506-4ae3-b8c6-57af521b6645",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5435241c-5950-4d0a-a9f0-93e23d44db6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849f791b-89cb-4e20-a071-056d46844e12",
        "cursor": {
          "ref": "fbe25f05-3e02-438c-adda-cf6d98d07909",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b26cb414-6c05-4174-a47f-9dea283e58a5"
        },
        "item": {
          "id": "849f791b-89cb-4e20-a071-056d46844e12",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5e2175ad-8afa-4b98-9bea-e9bf08c21ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f6444b-8f13-4308-b23a-6f006d6877c3",
        "cursor": {
          "ref": "d94a0f95-5108-40de-9c44-fa7a20a52fdf",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7aa30170-340f-49e7-addb-75b45840e1ef"
        },
        "item": {
          "id": "01f6444b-8f13-4308-b23a-6f006d6877c3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dfa3ba4f-920e-49e6-9eae-2ccfabc7546d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488cd1af-760a-4aa3-9cbb-648679e73341",
        "cursor": {
          "ref": "5db95b0a-3395-4b2b-a2dc-c3b0de57f341",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2eedb462-8d2c-4513-a8b2-75a6cf6896c8"
        },
        "item": {
          "id": "488cd1af-760a-4aa3-9cbb-648679e73341",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2b196358-f746-4620-8b5b-ec6dc1ebeeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f130f4f-fadf-439f-8d10-9d45c457cafe",
        "cursor": {
          "ref": "5f01f54c-ad8d-4a89-84c0-7c57223cecc0",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0da3f6d6-83b4-4e49-a92d-7afbfe8b43e8"
        },
        "item": {
          "id": "4f130f4f-fadf-439f-8d10-9d45c457cafe",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ee9d41c7-1b77-4923-be85-0c1cf5155a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995ed8f7-119c-4a2d-8de7-4ba2b36af7b6",
        "cursor": {
          "ref": "0f436ded-be87-4d73-afdf-ccda48825501",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6bc1bccb-6527-49f5-a653-83bc6d1b5143"
        },
        "item": {
          "id": "995ed8f7-119c-4a2d-8de7-4ba2b36af7b6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "79793fde-3557-4a96-9833-7a4768a1a407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43fa4b9-97f8-42f0-ae23-ce333674f695",
        "cursor": {
          "ref": "73ba46e0-943f-4edf-a187-362431de6b27",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b396fcf5-a380-48b5-81cd-ce6b180dce91"
        },
        "item": {
          "id": "c43fa4b9-97f8-42f0-ae23-ce333674f695",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8568d814-1b54-466d-9b06-f052a5a9245d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2a2b9b-1448-4a65-996b-5b081c92e35c",
        "cursor": {
          "ref": "63657f11-e0b2-48b1-ab18-6c378274e538",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bdd4abc4-6376-4499-b3d9-1255d8ccfa85"
        },
        "item": {
          "id": "8d2a2b9b-1448-4a65-996b-5b081c92e35c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "556a3ccf-c5ec-4e75-abf6-e32729a91c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb0ea88-9ed7-4726-9929-3e85277953ab",
        "cursor": {
          "ref": "56b8f4a2-e295-4f72-9493-3249062e9a5f",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "de502628-0fb3-448f-8b74-3f9cbc757f2d"
        },
        "item": {
          "id": "dcb0ea88-9ed7-4726-9929-3e85277953ab",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fd501987-0ee6-41a7-a60d-edcf5bbbb712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c333c98d-eab4-4a24-b9f5-4d6ec53d3f59",
        "cursor": {
          "ref": "0358ebcb-0aa7-41c3-85dd-455ef3c07808",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0c99b2df-3f2c-4bd7-9dcf-8d99464179d8"
        },
        "item": {
          "id": "c333c98d-eab4-4a24-b9f5-4d6ec53d3f59",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "987bffe8-fd9b-4cf9-8944-72a366e35872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5292f0ec-94ff-4f05-a334-7d74dcd618d2",
        "cursor": {
          "ref": "09448372-c7d1-4629-82f5-9d511e3353bb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8c3f35bb-4966-4da3-a31b-4bc8950b18e6"
        },
        "item": {
          "id": "5292f0ec-94ff-4f05-a334-7d74dcd618d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "64b99a1f-5ffb-4cf5-824d-5bcc97ead090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6f722d-8961-4069-90b5-4fec62c5e559",
        "cursor": {
          "ref": "ce1c54a3-3da9-483e-a2d8-824339dd9ab1",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "63eea816-2264-457d-8962-1a77793f27cb"
        },
        "item": {
          "id": "fd6f722d-8961-4069-90b5-4fec62c5e559",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c63b202c-2fea-4423-9aac-669789959164",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3653a789-4a13-4d27-8abf-998238a7dfe0",
        "cursor": {
          "ref": "f3f7d021-29d1-4089-9981-6619558b0e02",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2771665a-f87f-468b-85d0-0987c6f69c11"
        },
        "item": {
          "id": "3653a789-4a13-4d27-8abf-998238a7dfe0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "988ceaa8-c678-447a-b4cc-a1b120722112",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5c35e160-6d1c-446e-9117-41110b1a42cd",
        "cursor": {
          "ref": "b31f5de4-f4a9-42ac-aa7e-3e2d1b48ae93",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "335b1ab5-1d28-4d7b-8629-b8e1ef5526a3"
        },
        "item": {
          "id": "5c35e160-6d1c-446e-9117-41110b1a42cd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6ec3a653-5539-4862-8275-27dad1b9c583",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f24309ff-ed7d-4224-98a7-7bada9443e52",
        "cursor": {
          "ref": "081f74e8-0bab-4a99-91b8-f812b09bf8ea",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61018657-3ff9-4c5d-a7fe-0a241f4528d0"
        },
        "item": {
          "id": "f24309ff-ed7d-4224-98a7-7bada9443e52",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0d5dde6-07f4-4687-8d5e-6ac49f52ef7f",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "9b2e8a55-2c05-41c8-b41f-b748a2c645d8",
        "cursor": {
          "ref": "e59bb7a5-13f0-43b4-a026-b5b65176485f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9082f94c-240b-487a-8e55-34fca18d0824"
        },
        "item": {
          "id": "9b2e8a55-2c05-41c8-b41f-b748a2c645d8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8dfbeb7d-4bbf-4405-b90a-7bbf31ac9de7",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2dbe6dfe-4e3c-4514-94a6-6414d724dc5f",
        "cursor": {
          "ref": "9aa4e813-b2d2-4729-85b0-c02bef9c00c1",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "244bb146-426f-4cb3-b8fa-81858f61411b"
        },
        "item": {
          "id": "2dbe6dfe-4e3c-4514-94a6-6414d724dc5f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "565b9c52-3048-48a4-ab6d-1db8591f8ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b774e6-7eca-4a89-ba1e-bf0894115a88",
        "cursor": {
          "ref": "84822672-b96c-42ef-9e51-fa06bb161171",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "538c6e68-0751-43fd-97e4-a400d199ffb3"
        },
        "item": {
          "id": "d4b774e6-7eca-4a89-ba1e-bf0894115a88",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "84e03b11-be2a-4fb6-8042-0d0ade5ccfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc83dbe-dd5a-43cc-9676-cafdcaaca0a7",
        "cursor": {
          "ref": "b01cc15c-2f1c-43dd-833b-95ca7fce694e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7fcc7acc-9aab-4423-8a1c-24e117fea01f"
        },
        "item": {
          "id": "0bc83dbe-dd5a-43cc-9676-cafdcaaca0a7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f78a697d-9868-49a5-862f-1d45f2ab3641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f466874-48c4-4391-ace1-146e95cf668f",
        "cursor": {
          "ref": "7546bda8-1506-43e5-8367-ecf9f9cce917",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5a897d67-413e-459c-a8c7-c7e7020e3495"
        },
        "item": {
          "id": "1f466874-48c4-4391-ace1-146e95cf668f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c3bd8e0c-bb4b-4b69-ab00-240baa38ec8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c04b3c-ffc6-4fc2-97d1-23027e16aefa",
        "cursor": {
          "ref": "cda33129-e063-4ab9-aad4-3c34c7717e82",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "84f2fe54-474a-4e25-9857-8c9788167dae"
        },
        "item": {
          "id": "f7c04b3c-ffc6-4fc2-97d1-23027e16aefa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "834ba21f-74b2-45e0-a7b7-ee79f4fa6775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dfe3b8-dd91-4149-8c82-065a55e1ae79",
        "cursor": {
          "ref": "f082c906-f1f9-44b6-871f-5a3104569b54",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "434a4dc1-5da5-4a9b-a3d7-e3971193e811"
        },
        "item": {
          "id": "76dfe3b8-dd91-4149-8c82-065a55e1ae79",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "281f9adb-822e-4075-97c5-47aa06883480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f2f0ef-22d1-45f5-9a6e-6b06864c492d",
        "cursor": {
          "ref": "47eb5940-534f-4aa2-a320-ad9f54c3166e",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a3629792-5813-435d-95f3-bb50c1c1e767"
        },
        "item": {
          "id": "78f2f0ef-22d1-45f5-9a6e-6b06864c492d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29298b42-99b4-4f4b-8a1f-0ed1b65d42ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c6b7ae-a7f5-480b-911c-6f862d732e8e",
        "cursor": {
          "ref": "b82c155d-4cd9-4a98-a7ca-c24379437c5c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "66080ba6-6369-49d4-b428-b45e5400dce4"
        },
        "item": {
          "id": "23c6b7ae-a7f5-480b-911c-6f862d732e8e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "97e279e7-353d-4c50-a0c1-9a2533c9007d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed745bc6-d680-43a0-a4a2-8aeabd8a63a6",
        "cursor": {
          "ref": "e864cda3-d0d5-49de-aa1c-61e26eab7231",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8cc1e44f-0a12-46d7-b31f-eac0fdfe0640"
        },
        "item": {
          "id": "ed745bc6-d680-43a0-a4a2-8aeabd8a63a6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "32dcd2f8-4999-4df3-a0ce-e2bbaafd2a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe94a49-b847-42cf-8c1e-f0df11fb8eae",
        "cursor": {
          "ref": "68846eea-c91d-41c5-8285-9772f81fc138",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ad0f58a8-1019-4c76-94c2-3b5942fb41a7"
        },
        "item": {
          "id": "1fe94a49-b847-42cf-8c1e-f0df11fb8eae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "51f2afc0-fba9-4cf0-a64a-74e64075b013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6439549b-aff8-44e3-bd9e-1f132545b7cf",
        "cursor": {
          "ref": "46cea49c-a05d-478b-bb6d-5db48db3a1de",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c9b795c1-fd5d-4daa-ada4-35d196dd0665"
        },
        "item": {
          "id": "6439549b-aff8-44e3-bd9e-1f132545b7cf",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7da2a820-99f2-4e18-a311-a9956cc6157c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3304fae-83cb-47d7-a528-a60a062561f9",
        "cursor": {
          "ref": "874af885-3309-408a-8e02-dca2aeabe906",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "280882ab-b7a8-4f2b-bd4e-9957c28b6c96"
        },
        "item": {
          "id": "a3304fae-83cb-47d7-a528-a60a062561f9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b4d646ff-0a7a-4e42-8e1b-dbe2d97b9610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27cd2aa-af36-4c51-879f-b1f07f1c1ad0",
        "cursor": {
          "ref": "adcf9926-18c3-4096-99f4-48ea652ef192",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0cd04f06-1f7f-4d0b-9921-9ef961a01009"
        },
        "item": {
          "id": "f27cd2aa-af36-4c51-879f-b1f07f1c1ad0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "82ab216f-711e-4664-842e-40c6f2284358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b65d56-9d9f-4c88-92a4-0ee9bef57da0",
        "cursor": {
          "ref": "7a6dad3b-bcd4-49fb-a067-34ee1b493421",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4c75e0a4-19c9-444a-a11e-99bf107a861a"
        },
        "item": {
          "id": "36b65d56-9d9f-4c88-92a4-0ee9bef57da0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e95bfa54-f714-44c6-b1a1-54fcaa49a397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3bb723-7685-4687-ac20-9c8ebe794ebb",
        "cursor": {
          "ref": "90fba877-d914-4c73-8442-ea5a5c7bb8ce",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "adf389dd-1007-4393-948f-9541054cb533"
        },
        "item": {
          "id": "2e3bb723-7685-4687-ac20-9c8ebe794ebb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3317337b-c8d6-49ed-a649-9534303f7e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765b5e5a-c34d-4d3e-b060-393a54861614",
        "cursor": {
          "ref": "06501ff8-7e6b-45d1-823a-a495456f7032",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f8c492e1-22d8-4017-8cc9-5c5ed22a86b2"
        },
        "item": {
          "id": "765b5e5a-c34d-4d3e-b060-393a54861614",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1f640747-8b80-44e2-bdb2-a056b2c8f58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a6f98e-03b3-4cf3-8fe2-36b9fff3380d",
        "cursor": {
          "ref": "51b70b80-c6b9-4dc6-b9ed-78ac47619130",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1879439a-636a-4e00-ba3b-ff512786c5fe"
        },
        "item": {
          "id": "e2a6f98e-03b3-4cf3-8fe2-36b9fff3380d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "125ef0a9-b96d-40d9-8c83-37b150b23474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d334b40b-3d94-4957-a3a0-ed2ef7ad2a34",
        "cursor": {
          "ref": "1243461a-4359-4bd3-9764-d464308bf089",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a2f36e9d-d13e-486f-934d-184dcfcd9b0e"
        },
        "item": {
          "id": "d334b40b-3d94-4957-a3a0-ed2ef7ad2a34",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "afdd601e-7294-4f5f-8971-6986a58b5f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91456774-f3b8-4cae-a3cc-03eceac03f0e",
        "cursor": {
          "ref": "70b17c9f-7519-45a4-b1fb-d3f8a549ce09",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d976bcca-9a77-4df1-abae-bd8bc8d4f94a"
        },
        "item": {
          "id": "91456774-f3b8-4cae-a3cc-03eceac03f0e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0e34204c-b2f3-46db-8262-d9e181da45bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a5dede-45d8-414f-be81-74065d6faea0",
        "cursor": {
          "ref": "4546a34a-952d-4306-b997-de394d4c5e6c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8343ed41-6beb-480a-abac-9bba5eb4d85e"
        },
        "item": {
          "id": "28a5dede-45d8-414f-be81-74065d6faea0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6098e37b-81ba-43c7-b692-e3d907e6bd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031164f6-8427-4782-9d1c-e003333a3106",
        "cursor": {
          "ref": "dea8028e-4529-4610-b978-db0996489b00",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "17ac5c23-1346-49b1-ba88-f6944e85d05f"
        },
        "item": {
          "id": "031164f6-8427-4782-9d1c-e003333a3106",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "18bb70ad-58c0-4708-8fcf-1a78acbadffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4cd976-169f-44dd-a5b5-5e1f0f3bc72b",
        "cursor": {
          "ref": "30329380-f5b1-4f8f-a608-0270c185df2d",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d26cf0a1-baec-442b-8be2-7b965e192d91"
        },
        "item": {
          "id": "3b4cd976-169f-44dd-a5b5-5e1f0f3bc72b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "035f4e63-cb8e-451f-9301-173caa5ba268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec74b80-5f87-49b6-814b-df188758dbfb",
        "cursor": {
          "ref": "4991e9b3-1535-491f-bf0a-b1d2801a1ad9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0681b797-c009-4de0-b75c-9ef43a287a05"
        },
        "item": {
          "id": "9ec74b80-5f87-49b6-814b-df188758dbfb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7ea6d469-9921-4d71-a121-367cc8d46027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f2b6ce-1a4c-49d5-8b93-cfa383a9299e",
        "cursor": {
          "ref": "a7b84623-4123-4e9d-8c2a-76559777e042",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "da40e591-d8bd-4aa6-9efc-639b992115eb"
        },
        "item": {
          "id": "27f2b6ce-1a4c-49d5-8b93-cfa383a9299e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c3221f9f-6613-48b4-81f9-1e21a1415362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236ee3dd-3473-4f88-ba5e-5505e422272a",
        "cursor": {
          "ref": "ce7b2c4f-02dc-4290-b214-36491915a0d0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4b947946-13a0-40ee-8b5d-82b9f8ef7c19"
        },
        "item": {
          "id": "236ee3dd-3473-4f88-ba5e-5505e422272a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bb1f9ead-895d-4bed-badd-4665feca899d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0011d81e-fcce-4814-884a-a07a3ca31f26",
        "cursor": {
          "ref": "725ac1fc-73f4-4a8c-94ba-e80e11b0181c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f21e6631-100c-4833-a2d6-adf4a55a795b"
        },
        "item": {
          "id": "0011d81e-fcce-4814-884a-a07a3ca31f26",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "418ded39-cfbb-4e56-ae8b-57d74164128b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22447fb-0bf8-4708-a3e8-d539255c861c",
        "cursor": {
          "ref": "9e7b35a8-aa9a-4ff7-86fe-6bef4e621be7",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "991020f5-72bf-413e-bd05-168ef830d610"
        },
        "item": {
          "id": "d22447fb-0bf8-4708-a3e8-d539255c861c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e9824bc8-4112-4220-9c3c-df1f415747a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35428996-6244-45d0-8343-14173bc4485f",
        "cursor": {
          "ref": "817a8f32-f055-4b2a-8cc0-deda8e09a6e7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1d568116-bdee-450d-a3ef-f211bb0b9a4e"
        },
        "item": {
          "id": "35428996-6244-45d0-8343-14173bc4485f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a77134c6-d990-487e-8ed5-62e6b8c6d302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b392ee8-48da-40fb-a278-584b03cb6744",
        "cursor": {
          "ref": "d1a6d8e6-fab1-4587-a5e3-f00e1321a0ac",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dd6338d8-7e07-4269-865a-ac8783e589f7"
        },
        "item": {
          "id": "6b392ee8-48da-40fb-a278-584b03cb6744",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f96b34d2-24d6-4619-b1fc-ce7b56249d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b269b80f-64fe-4bc2-94ad-68fac9545f98",
        "cursor": {
          "ref": "474245ae-43c4-4b78-8ed1-ce240abc72f5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8e13718e-a6dd-43cd-bf6e-4923a7c429d6"
        },
        "item": {
          "id": "b269b80f-64fe-4bc2-94ad-68fac9545f98",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e8b947b6-2a59-4313-b7c4-acfea397a9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ff21dc-d65c-4909-bc18-01a2adf9c0f1",
        "cursor": {
          "ref": "dbf610ef-e47b-4ef7-869f-ffd0e216fadf",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4256b72b-28dc-4d6a-b6fd-38b331115078"
        },
        "item": {
          "id": "26ff21dc-d65c-4909-bc18-01a2adf9c0f1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4b95d6e9-a852-47e5-844b-8cb7807296bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f670e0a8-74a4-4d78-af3f-48da1fc8db5c",
        "cursor": {
          "ref": "bf22ac50-b47c-4fec-8d1f-dda6299e872d",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4bfd1936-a19b-47e9-8c95-19059ca48ac4"
        },
        "item": {
          "id": "f670e0a8-74a4-4d78-af3f-48da1fc8db5c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f1bb461c-0a00-4d07-aef8-dc33ee32f4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4216a0b6-2967-4f33-9f59-c01f2d4550a3",
        "cursor": {
          "ref": "bd002f19-5b89-4ed9-bf10-cdc9055a8018",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9f27a54a-ce09-4cff-b0de-300686677afc"
        },
        "item": {
          "id": "4216a0b6-2967-4f33-9f59-c01f2d4550a3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "444047fb-2ad7-4e82-8d4e-23225060451c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1264a98f-99a6-4621-a868-9359cef105b5",
        "cursor": {
          "ref": "5d05f946-d0d0-407d-8d5f-a24b6feb533d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6baec5dd-eecd-437b-9cba-0271858fdac5"
        },
        "item": {
          "id": "1264a98f-99a6-4621-a868-9359cef105b5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "93dc6da2-ac31-4d76-92b0-9afbfe79d45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528837b3-59a7-4916-a39f-bf6cec43b341",
        "cursor": {
          "ref": "5a503811-5e0d-4eed-b234-0964358a742a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c6935d67-891d-42b1-88e8-ed295841af93"
        },
        "item": {
          "id": "528837b3-59a7-4916-a39f-bf6cec43b341",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0b723ebc-528c-470d-9037-e1967df3e7fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eee49b-b854-4e87-9af5-b4a568c33093",
        "cursor": {
          "ref": "8ae27eb8-8453-4538-ab09-470b10082026",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "93e716ee-eaec-4b38-be58-4b2b1e577780"
        },
        "item": {
          "id": "e8eee49b-b854-4e87-9af5-b4a568c33093",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4cde4204-1fb8-4633-bcc9-49af71c57978",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "cdcb2640-ddf8-49e6-9eac-83d7386d4a6f",
        "cursor": {
          "ref": "5ae4fa9d-b3b9-4a4d-a777-9db49c4ad070",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "61536cde-1104-438d-9dfe-984bb5fb6344"
        },
        "item": {
          "id": "cdcb2640-ddf8-49e6-9eac-83d7386d4a6f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3625bbd6-c0bc-4007-9d82-d3db38d52a69",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36f20b9-7cec-42b8-9d4f-d88876d5c948",
        "cursor": {
          "ref": "8651d817-9d35-479b-b992-5440a2699631",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3f729239-ab22-4ade-ba5d-b1ea2a7fab84"
        },
        "item": {
          "id": "d36f20b9-7cec-42b8-9d4f-d88876d5c948",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5f23c9a5-9767-45a8-ade8-d96ec328ef69",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea175242-8088-407f-b482-8724f1dd5b9b",
        "cursor": {
          "ref": "c96fcfb1-0d04-4b8d-ada0-a23eec37cfa4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d556303c-b6a1-4153-8683-ad99a5462192"
        },
        "item": {
          "id": "ea175242-8088-407f-b482-8724f1dd5b9b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b1560b6-e336-4941-925a-390fbca54f6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea175242-8088-407f-b482-8724f1dd5b9b",
        "cursor": {
          "ref": "c96fcfb1-0d04-4b8d-ada0-a23eec37cfa4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d556303c-b6a1-4153-8683-ad99a5462192"
        },
        "item": {
          "id": "ea175242-8088-407f-b482-8724f1dd5b9b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6b1560b6-e336-4941-925a-390fbca54f6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe7c00d-e153-4896-88ce-3922c3dc2b37",
        "cursor": {
          "ref": "367c1870-d846-42eb-8494-1d16aedd4e37",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9b02303a-1ff3-4108-8662-62e819e7509c"
        },
        "item": {
          "id": "9fe7c00d-e153-4896-88ce-3922c3dc2b37",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1cdcc5f2-0c4d-44f3-982e-60d7b22d2600",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dbf285-aa5d-4bc6-a5db-0bb2b06d4fff",
        "cursor": {
          "ref": "b0f3fb59-8c95-45e7-9c0f-bc63f30267e9",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "76db3ca3-9ba4-46d9-986d-5dd1e760ed7c"
        },
        "item": {
          "id": "29dbf285-aa5d-4bc6-a5db-0bb2b06d4fff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38e5f126-b250-4fa4-b731-ae780c4c2d3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}