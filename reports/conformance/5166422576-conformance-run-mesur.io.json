{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6c334ee6-04ff-45ee-b4ae-b6cb764120f0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "429ab954-172f-4c95-98a0-b4a343a193da",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c43ecc4-7d29-4164-854a-160a40163572",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4fd48497-2243-4376-af2f-82f14d28cf34"
                }
              }
            ]
          },
          {
            "id": "1327ec6c-ea75-4ae8-a435-70cdee42c13b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0028dfb9-0c26-42ef-bea9-6dbd1091f798",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c0082d39-80b8-4546-a96a-1e169b9a289d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13d8ccaf-9407-4412-9cbb-3ef840ee6b4e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3def7b39-b412-480e-a1f2-b2a70ea8d599",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dcc31a3c-6b5d-41c2-8c43-a632de624e6d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "136b22d6-167c-4e97-87db-927bcff6999d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b1eed39-e08a-4084-b8c3-fe2a1a82467e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "398bd69e-1a61-41be-a645-02d767fa306a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2203b0ba-5185-4c63-be42-41b3f8c0bc55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "66a37ffa-42c1-41ec-a3cf-4da4f7bdd291",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da55bd52-99e7-4b6a-b9f6-d0f6b61785a4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62071214-de7e-41a6-bfad-77378e5cfc34",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "524af2b6-4fe1-4c04-bcb7-e4d918fc4d9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6451b43-076a-4716-8ab1-5c77fe97623d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa6f9572-220b-464b-a18a-9cfd9168ed74"
            }
          }
        ]
      },
      {
        "id": "5c14d2e9-92fb-4918-ab10-bc775e4538eb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0674cd2d-f6eb-45c0-abe9-16f24096ef00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da038a0b-25d0-4b62-97e5-f9e753e79090",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6eafac91-7f6d-44b2-80c1-d183cd3b5d38",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe0ee41-b834-4447-833b-fccc4f699c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a34c81bc-1c9b-4333-bd46-07c8a0e04fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c458844b-2213-4838-9e7c-76436989ca9c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ec711f-7ee1-4376-8381-b41834c1ffad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "490e66b9-bc0b-4bba-b99d-997a52f5b38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac23d41c-f412-40ee-99e4-b14b2962f312",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a68ea5d-e8e0-44b1-9a7f-81f226619a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da78cdb7-de88-4ebf-b03a-43004f80a5aa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7dec1e34-6f1c-47c1-85f7-ed2c577c9651",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4dcc5eb-177e-4257-8f36-9a5a490527bc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d08e63-8c97-4cc9-8f9f-31c9b92f9b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce863d03-f6a9-48a2-b0e0-1553cc794916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01995c4-63d2-49e8-885e-dd61c04dbde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706eec44-5b0c-4f43-bbcc-547f56ac23cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d8c3546c-8a2d-43b4-9ff5-cf05f7aa03e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d8873263-23d9-49e2-976c-461a03aa2e95",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "faf34d4b-9df7-428c-8b75-2715fed727b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9ab3c020-dc7a-47e8-89b6-ca5b89e1228c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c131060-9745-481d-91e8-b71dea415edd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "446b3b71-86e9-4b6e-9bec-60d45bd0fa3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35ccf5a9-9e11-485a-a2f8-12928d40383f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc29ab57-921f-4c6a-b7f7-9933acd045fd"
            }
          }
        ]
      },
      {
        "id": "828d5411-d71d-4cb4-85f1-354d08c9f97d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "644c75e6-2e6f-404a-9b0d-fe0a2718d247",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c17b410e-b74e-4e3f-9839-5860dff4c980",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "24f70948-7f22-4bc4-8a4e-5a3abc28e2b8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd79aa6-27c0-49ff-a407-b3746254ea0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dafdad-354d-4ab7-8da6-6d51343113b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717d0da2-1d73-482b-b131-1e88a7494698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b79e662c-b6b5-43e5-8359-065cdcb02a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07a0adf-aa75-47f4-83fd-d995677db63d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba25df4c-a64d-4583-8f6d-051f4a191f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c316b864-9f5d-42fc-8c04-3483287ddba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4728e20-36ba-439a-ac03-6e7f191917c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b604010-55fa-4898-80da-80c7f4583cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d8b78d-7b88-4c81-b1fd-53de6413f4b5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0f4fb5-674c-4221-a7c6-a627d87bdff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ac8e6a-7565-4c19-8639-7010b50a7644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ec4828-1751-4dee-afab-af5cff44e47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecb03ace-47e1-4038-aacf-41d44996b7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f4c9e1-98a0-44e5-848e-ac0d0dcf2bc1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a189f9-41a0-41ce-9c7b-9021fe5814d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc91dfa-aaef-4cab-9a06-3f36ccb5810a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd8d85a-8397-464e-86e3-c2455f56f163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e90233d4-7936-4978-a0b7-0d99c0820364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824ebd3e-90c7-41a0-8d84-60a65c4ec3f1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb3f091-c3cd-4333-af50-6163156f7266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2559d89-8037-4f04-914c-ec546e26a3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a922d6-289e-4a5b-b9df-ce3f8840744a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bef727f8-931f-4305-9a94-52f7939f41a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34d35b-56ab-424a-9cc0-9b22245016bf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0e5c58-8de5-4d89-ac87-d27ff3c95322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522cc38f-c8f0-4ea5-9fda-402e66e26468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf62e45-6d10-48e9-9882-64e00871fddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9231630-6b09-4a65-bda9-1d9e5619e204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a01398-76df-4c2d-b25d-309a5ed9b262",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b658c6-af7c-48e0-84bd-e5fe992316cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff01b073-22e9-4158-9572-199af8b848d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c984b6ba-cd5e-40d0-b6d6-afc3ef126418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e9b34bf-9378-42b9-8da8-160c02a942e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2280efe7-856e-4a9a-acef-a5839004bb43",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9506737-9d21-40a4-bb25-8efe83ffc158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7238d8c-0182-4239-9aa7-e7928d679bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb530ea1-38f8-4050-8477-a250eed3e1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a18bbae5-1263-49ce-b39b-94dcd9853bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eba378f-a35b-4f1e-a9f3-7a989a4d551d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ede04d-44a4-4cfc-8085-19203679645a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f77663c-110f-4135-8efa-968bd40eedc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3f26ef-57ad-4f01-ab33-8065e64d4be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd998e90-6461-42fe-b672-a1f1dd08ecdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0c640b-abee-4e0c-b6c5-9faacb31dba8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e026c9-4a4c-44a3-bb27-8d2dcd7b26ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696c96df-477e-463f-995f-ab7d0bdc8d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3ba55f-d0e5-4eb4-88ab-134d1b6c021d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e3303d7-5207-4d28-8b71-7e8a67fcb01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba479fcc-382a-4a71-9f22-5a02c2b3a6c4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b9ff1f-c597-44b5-80dc-fb61697a81f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf2e98d-7a7b-423f-9c4f-00794644a7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca42f2f4-6d6d-4200-a6cc-654add6466db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "937e3e8c-b299-4061-9e73-aea9023ed4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261efe4a-51b0-4dbe-bcf9-873f23f489e3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b6ffb3-e7fe-45fb-9e93-e975f4377333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a96bba-950e-4eaa-9f53-2cf027548090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6c92ce-7897-4900-9d26-5192d3e834cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbac76b5-02dc-4746-b5f8-975693805e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38225d61-518b-4459-a766-3ad41f5154e4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a647f6-5f93-48dc-8b67-82c914734455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ddbea3-c73e-49dc-aa6d-42c2ab8b2f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f0195c-829c-4e24-bf47-75b46151e92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fa1b56c-1df7-4e35-972e-501a8eb4cd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e01550-c1f6-4ae5-974f-426a843a40aa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742e9c37-34af-4416-8ca4-d95e0d8ed813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77f1cc9-89ac-4505-8bbe-6fa89dad3740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f69811-b6b2-4917-9737-1077d4ef492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db61a567-feb9-4a5c-80e0-aff08028005e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33118ad-d433-46fa-aa38-c3ad87275631",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb3e501-844c-4cc8-9861-15537a80841f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0cf58f-eb85-4ce2-b0a4-7b6abd517584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0ecd14-1b93-4f6d-8e8b-2271b47c4200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "318373be-9257-4144-a785-131aa57d6be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a45f460-e1c6-4fd4-b344-0379df7e6af4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6463c68-d87e-418d-ab91-7e878cfa66a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c11c3df-5b59-4944-bdcc-948ce8cb848f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b5b089-860a-433d-90aa-1596ed260e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2a07748-855a-4c93-be5c-b4d3f5e2f0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e33f82f-3d53-4ef0-92b8-f99ada31a676",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2d5284-6761-4c19-8eed-6f6a2db37cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d3e0f7-2c4e-4b66-a002-6746b0b27e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d6787a-715f-4fe4-b4b3-c47740c6f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d37b27b-d5d5-47ca-8c5d-9bbb39bc4ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f356deec-67d9-4887-ad07-2bd3593bd139",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28c4b9b-60dd-4112-8f08-c684e46a1bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fdd158-1cd9-4366-9f8d-dd1d38bb6cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62386997-b66f-47e0-98a8-30bd53116d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ffb0ca-cbfb-4691-a3fb-49de4366073f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e3d290-c39e-4b41-a4bf-50bfcf17e6fa",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fe7e41-240d-4d42-b052-9071f28fb031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3b0aa0-0881-4405-ae3e-d3e2bfd39ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3780b570-25ac-4fa7-b91a-7914caef5393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19b4b6f2-14bc-4bc2-ab90-0341c24144c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e24548-0ddc-409d-99d8-7daa66a6782a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c5e6ec-df82-4a77-a654-40be01a6caea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d16470-e862-4566-86d2-ae8a607804ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef3e454-0dbb-4ac5-9dab-7384d9dbd14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96e8ae8e-f05b-4de3-a49b-e4f5c338ede1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78422f8b-5687-4549-9d35-835bd914dbd0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e738f3be-12b3-415b-b374-30234413476f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90acb990-f6df-474c-96c4-52c38d73bad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028d4373-7744-4b1d-a4cc-d8b0a8771f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51bcf153-4a4f-443c-aff1-f93c80bcf1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec3592d-1f28-48a9-b45d-2c08b2050d2c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9070b2-6f32-4e28-888d-2710c1ee6682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e13a3e-ab78-4268-bbd6-822a23aae4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e328964f-68cb-4025-a75a-93e699c78bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf4f21e-9cc0-4573-8cd9-3b6bc5544bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5875781d-f033-434a-96ff-22ba8ad1a72a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638ccd9d-63b2-4670-94f1-096d1c363316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210824d8-b1db-4cb7-b195-c276da22cbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032073ad-1995-474a-b31b-55e2dd509dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a488d8ee-3326-42a2-801c-df1525604882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa64765-6c68-4216-b79a-84a006fae737",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bec1a0a-505a-49fe-9dd3-1bf188b353a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff04bfa-5070-4d11-950e-72d8fb77fd77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91e52f5-446d-4472-be42-11b338a9ce11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "51602d44-365a-43f1-b224-d55ac0527822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb55028-3871-4438-9593-5b2fa61d27d4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4af29a5-5502-4e77-b54c-a478fc8b485a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6612daa4-7c5a-4160-a87e-1a40171806ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c6dd80-069f-4e09-afc5-0e33cc75576e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "860d3134-28f0-4969-a3d6-969f915837b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571709d9-284d-4515-9c40-3d24b7bf1db8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d438ef-4ac8-4ff6-94da-be476efff038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dbb779-1fc6-4754-8ab6-d7b92fa01572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5f676e-2b6e-463d-a530-5c30197dc1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "afeaeab7-dbca-42a1-918d-f54403979687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64c7f4c-e950-46ea-8504-af681a199520",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933c6cbf-2075-428e-9c3d-16dd08846a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ad1a82-95d6-437a-90db-feb35d4fe433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0274b926-bb38-47e2-a260-15d20fe083c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "427e2171-92d9-4e19-b84d-7009ebac0eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfe093f-9a0a-4a4d-a296-2bd916e0466e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0249a34c-7ac6-45a2-b6ce-cb40350706e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b093df-0162-496a-8df8-c0c3510f5914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac795ea-c1ca-4060-b6bf-85240957ade4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "318ee50f-1862-4730-be18-668dc4211b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c673f074-e70d-40d4-9cb0-7d1a4515126e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cc6f1c-4e8a-49d8-b3f5-44819ec61686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c5c379-7804-4822-a202-f05e989e6739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f4393f-d82f-42c2-a67b-febfaf3a19f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e305bdc0-a91a-4181-b7b5-1b306a850757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0fbca8-e98e-45f2-9555-a82e83c0d21f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d342374-e8fe-460d-84e6-81df80d04511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68b80fe-885e-4a7c-91f0-e24c874bc94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7282471-0ec3-43ab-a793-08ad32b2ba6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3b0c66-2f22-4e31-9cc0-aebc13a0fb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7241e34d-55f9-407a-89a9-cdf972c3b254",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03703e7-90a7-4b7c-a8ab-fc00f0377c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4839c793-2502-4436-98a2-0ce22a2d80fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e70906e-23d9-4d80-b277-577861191dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98d847e-adab-4181-a5c3-f4721f88ac8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7787e-3368-4ce7-be80-775e428502bd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73c66a9-6b6c-44b8-8c3b-e2388d3b65bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3addc321-9946-4213-bef2-44c7e34f54ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af51cde2-c871-4817-8224-33e18a68d2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bab3a79-f9f6-4c68-9c72-6aee1aba0d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be72d15b-0552-418b-9cd8-6f3534c09f0f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f377e8a-6f6b-4cc0-81de-ee0f1dffa493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18061bc4-16d9-45f2-87d9-9fa215bfbf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1334af-82aa-4053-8134-5ef0e3de718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9108e4-28fc-47e2-9426-97c9853142ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e667843f-4c8a-41a0-a54a-0e4195307617",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c56022-6a82-452b-8561-1b6d22d81cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a56d4bb-8905-459b-9252-9522a563d94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0bb3a7-9905-484f-a2ac-b665b6bdbb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e41687d-db04-4428-8da7-6931fbfcce9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21dcdef1-16d7-44a7-83ba-ee316b574c52",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84496432-d154-463a-8442-e8740bc659b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf49d64-52c0-4156-b8a1-0ba8219b7e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac4de3a-f19e-49c2-8871-b47e70701dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7f26f344-c010-49b3-b4b5-f2e879a2a9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e14837-d8eb-43a5-83b1-82322c245ae7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154ce9ab-c658-4595-8955-98a0c04e6f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd0ca22f-8b45-4452-9f3f-47c71c0c3955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c1e414-599e-4edd-b5df-aefda50a04fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdf308a9-aaa7-4f90-9749-e33acbd6f877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6760c3f5-f2fb-4b02-8085-339fb138aa9e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ec2cea-973b-4356-8e9c-66d7ed423729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73aa9641-6d98-4fb7-867f-fff78abc04b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe926f2-eb15-499b-b159-ce143a378645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd8b9a9d-df82-4226-9f49-cb798ada2000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20681500-ca56-486c-8f36-e2cce44f911d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ce13b-7f1d-4417-810d-7831b292bb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41edf9d4-2ae5-40e2-ab67-f916ae6634cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc00eb5-780b-47d0-9df7-5d5d54943011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3c6edd-9317-4b61-a497-7684fdac96c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b949060-8f12-4d2a-ab47-d14508672bbb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c6e488-b852-4963-8467-fb95902d2c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa0dd1d-54b5-414f-b0d0-743d48167db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2898b381-ac4d-4e36-bf36-03234307dc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "88308ccc-6bf3-4c8c-945b-0e9d5d4822c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8cba70-2399-467b-b5fe-333c077d4c40",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95509636-71ee-4e02-9185-614bcfc8afdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a30beda-855c-43d0-aa0a-f4209e2e58dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1f0f42-90c6-4684-8837-e200cf96e8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "233ba492-00b9-4d3e-8316-c3b7d6e07e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49b73d4-1244-4de1-8ce5-a7410d9d0d1d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47d0e4d-cef6-4d0d-bcbc-55596b63938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f19af0-a03c-422d-bf9a-f461cf7443a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2c2a63-c90c-450a-ae84-a27c32c36453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee0e29d-2aaf-425b-b345-90bf715a9373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f7349c-a081-4552-8161-ce880dfa331a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a0e58e-142d-43d9-af09-30d798e95e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c1b761-c487-4208-afb7-8efbe5c4c061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3eb7e3-bb28-4323-9110-70d481c6aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8e54828d-1919-4d37-bb45-b353f107cf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9501b2f4-0ec3-4563-9148-ef55c523a2d5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bff10cf-656f-4cfd-a357-1ee9f42648e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41e084f-c070-4ffe-9caa-cfb4b5839028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f61a91-a27c-4044-84f4-35f76243c54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "65963309-db1f-4af5-8763-1e7301dab3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5f7ffd-d1b2-4b89-a3ba-f0624aab3695",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8303f036-5234-4ca3-8537-2e9c4a6ef926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f33f52e-bc47-4e25-93b3-79bdc7927f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbc66b2-eeff-4db6-b548-e1cfd46587d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d01c623-5a25-49c5-8ad5-8f6aefe94e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfbe034-05d1-4150-be6a-06253ee10874",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f01739-8c38-4b75-8e6d-28034540a25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30354880-61bd-4600-a1cb-0c21d2050fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d86f33-6b03-4faa-aafa-4f37b0e47230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d126caf1-c963-4b18-82a5-c5d08d1e6ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0314d94d-9b14-4204-b555-e07e7ead83c6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00eef4-cc5f-4e4b-aead-b8b99ceb672a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7f6522-897e-4c22-9b65-8bd859b95cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8ce0b8-0df9-419f-a515-0d927f940320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3eb766c-7fd5-4f1e-8b50-d2c4a57c23be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b66798-b3bb-4984-9ef7-be2853d1da06",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48e2fa4-fea5-4169-854c-e09786d75f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9a3e28-0d72-41a4-ad09-3486167865f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a1e5d9-93e9-495f-8d1f-95badb82ec33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2aa6e77-e150-4cb1-8ad8-bce97462d226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a68dd2-75b1-4506-b449-b846fdd07d79",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05434a9-a490-4897-bb0c-8b656095ec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b422d5f-91ca-4f69-a74c-407844426cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ac7951-dc66-41e0-b471-0501b4250620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74bd8de7-fa8e-4785-b892-96dccb976524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3e80f2-f55f-41f7-9a25-3b81b949a117",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0ee1da-64d6-454b-b19e-0656cd13e7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8a7183-052e-4594-aef8-e430c966aaa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085abab6-7076-4cc8-981e-e14da5ce690b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "680d6cc0-0e1d-42ef-9ce2-1e153d4bf0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9a6da2-6244-4130-8c15-c2fcc85daae2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393927a0-0097-406d-ab16-0daad88f8591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5225aa84-dc28-452d-af7f-8f8ea555661f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90862529-6508-4502-b96d-56303f0de3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6cfd8bb8-e9eb-49df-b808-e684656fbb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c6a5aa-21c2-4ff2-8dd4-1d693c5386f0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b020d6-9b98-401a-bc0d-5ab3e06f1503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa15048-9fa7-4eff-8668-4e8d3fc52a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227d9459-efe4-4cc1-9d02-77ccda3fc318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "02ace96b-4ef1-4bc9-860c-2336e81e2168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a9c99b-76f0-411a-86c5-9b327d133f56",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bfa3b2-da1c-4427-84ab-dd08890d0c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5e671e-714b-49b9-9324-cf0ce99b1a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2a292e-7973-46c8-8153-e2d05f223c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55461895-dea2-4788-b7a7-95cf5c744fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba2d9e6-6127-4eb0-b217-715ad59f622f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5303e8f9-34e2-44ae-99c3-470dbc1725c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0df9c5-1a43-44e3-be96-ffa5aba576e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a487c5-5952-42d5-88c8-47c1bf4852cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8d237d-f5cc-43c8-94ba-139ebfb17f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0285e227-f4c9-4a2a-a36b-33d23ea44b31",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b389df94-4105-4d21-8a89-044a8f7ed57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fa1e23-00d2-43e2-a537-215eabf49fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931e4eb8-77a6-460c-b418-193c2ad1ac7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b15bd6c4-43bc-4d3f-bc6f-0811bd1eeb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2171e40-ab0e-4b0d-9493-f757bad32eab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0c05a4-ea01-4356-80e9-5c4d43089428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631e596f-e612-4935-a1e9-bcc02c1a31d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716766dd-0b7e-4fae-b9d0-8aa00982f615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de0aca03-059f-424e-ab04-511a337d5867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4d02db-c766-4755-ab2c-29c8829d190d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63c594a-82de-4b45-b3bb-e59aca8be526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f366c5c0-208b-465d-ad31-d88f14a14545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b28a9d-4e11-405b-99bb-32b8671aae2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf0bcdd-6a77-4c6f-88ef-27123ad59421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106015ec-ca9d-4d12-b23c-10d2b0194dee",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7473e6a-258c-421d-b3cf-cc13037d24b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1750876-f9a0-4d02-80dd-26bd3079a4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fae717-1e91-4640-ab9d-0de3ff7261db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "acd08083-d520-402c-a804-68f1ce056cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3877aef-d1c0-4c8d-a4b0-c71686f1175a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa98b19a-b306-496b-adf3-8492766cf319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dd27ae-111a-4675-bcbd-d7d8fdc4e50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241bd734-b423-4a2b-a9d6-cae48be67abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "086f3027-8e92-4652-b5a6-376845869db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5936d82f-fa5a-4b1b-ac75-b59c85bc5b26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9cc572-f034-4301-8721-38ef39f7ee1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fbf401-2b74-4809-a1b8-222c6a588dee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403ac558-9416-456b-b419-c07b7dcd586a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3655aa2b-b891-4b19-86cd-ad45f8c89860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0072cc6-3aa0-41db-a3d0-863895caabf3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d93dfe-4648-4109-b4fd-f59db3a681eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bd482f-3541-4c92-bd5a-dca92a2a3bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17711b69-4467-4a1b-9c28-4758bc27cb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1783ba-050e-481d-b9b2-01932c60b3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efac3bde-0661-4819-8cfe-55b9b8ad7aa8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682b59c7-a625-444a-9047-a94c7a03eacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71644f95-8b28-4eea-a2d3-c60fb51c92d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dcf1a4-8c22-48f1-bf7e-d7d6b7d0b972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f970415d-c1de-4621-b6aa-c4f6aed787bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480c5940-40be-49df-80e2-f9c5c1e234c6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a687eec-1072-4046-9876-13299fc3cc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b247c5a-df04-4c53-907f-21f5ed14ab1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dc3019-c423-4a4c-8b71-8df60ab6a5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcaa0ae4-3bae-4c7d-99bb-929c0cde5639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c0fcb9-241c-46f9-9cfe-ffd0d461b1b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe693ee-8c05-4996-b3c6-c7fb51f30af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990e0c15-46cb-42a4-8573-6242c6eba005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15728f9-d2e0-43d8-9be9-a61b1dfe460a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2deb23-9be7-47e4-9442-ce424703b135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb28da5-590a-4b72-afef-3010b84a52da",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989c647b-a858-4e12-9adb-a05e2298621a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087788bd-4de3-4875-84d6-b9f75db9d1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebc6093-989c-4d5b-b08f-ddbbd61c8fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98818187-0618-41c4-998d-64a5e4c43e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca722b3b-4ec1-457e-9beb-0b01ef8a32f0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78a191e-a756-4bfd-ad0b-4721cc6419ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05636cbe-f728-4bb0-a703-6defab084acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c0bfc5-4d70-476d-8a14-5711cd467288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f747a95d-8f0a-4de4-a002-af119e332d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6778ef87-29e2-4fb8-8fc8-3a33435e4c61",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577e2e70-3842-46d1-92cc-b7c8e1dc264f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483e2e12-97c6-47a4-a06f-ea42856c9eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3a060a-9141-4d81-b944-5fb104bb7458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a79cce85-4950-428f-bfa9-5f12694cd2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ef9c9d-14ed-4604-bb5a-d4643ad910d3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecbeac9-2ad0-4751-a1db-af56149d2dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91df41fe-8714-47f1-b097-f5abd8b5f8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd24af4-da9d-4fb7-b293-521ae50989a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5cfb874d-70bf-425e-9c36-733b2f615747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab4696c-4118-48e7-a56d-aec1e8ef9b87",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473bcb60-b447-43a6-b181-8785e567acc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb05ec68-e9cc-4e66-9437-ff1c663f1317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1862ca-2e5d-48b2-851e-18741b145403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f307f775-830d-4cc4-bb48-addea1f921b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cadb69-51b6-460f-aec1-90397b81a351",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640df3a5-0305-451a-be14-66afe1b51a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0537157a-d6e6-4817-88cc-66ef2ef824c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17b4584-ecbf-4c22-9f08-e3c0648c21bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "25e8ccd5-cd22-43a2-9680-3df28fad387c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5780be82-0d25-4550-aaae-31366477a83e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc76230-9aba-481e-a514-6ca3f993ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429e12ea-3049-4908-8d93-3ba3beed13e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee96906-a363-42ea-9599-4dea558910e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "767d6f5c-fe15-4a72-928e-08a417cc101b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ff91c8-ca12-4984-a79c-3d1c868de1d8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7faa70a-df37-41cb-9302-173165758c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c614255c-cf14-4897-8585-175ddb66d474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36965ab2-cd90-4be3-a2d2-f62eb7a8d02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8eff3ba-c5ef-4bde-a497-55a4981b8231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25d740d-3e9d-47fe-b435-7ff309b1a7af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7c9ecb-83d5-4bb5-acff-0ac9feeff431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b78c587-bc2b-433b-b4f7-f9ecb7cf3a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e962985-4188-41f7-9d3d-df0eec8a4771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a50510-3f2b-4f85-b221-80380c065915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9b6acd-d1d5-4ec3-be27-d76e76020894",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8db115-65ec-4104-9829-d17f29e31693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df401f05-e041-4df5-84a1-094a70ccd80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a480e8-0abc-4aee-ad3d-df2511f18ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1a1c6c-b37b-47ce-803a-6f6811698f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a28372-7452-48c7-b302-6809cdef91d3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af3b19f-bba2-45d0-800f-1846885dddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab650ee5-b38e-4052-9c72-17655d237c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36573446-d0c6-45da-ae35-407c8578d140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27c99e1d-d377-45bb-9cee-a7f0aeb7c426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d396377d-103b-4943-bc8e-dbac8953697f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab22b294-2493-4efa-86a4-8ad7ed260911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf602cf-6503-4c32-a1aa-718b1f52b03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec2a5f0-4479-4133-9973-aaedc37c47df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1404918b-2777-4b67-9019-1134f547f4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bcd62e-e984-41a9-8e48-3196938ff628",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc9c820-c887-4e01-a8a7-1844e32094ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd43ade-5df8-4266-aa04-bcc27ba83421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c37a4c4-ba40-4030-8e14-bfb5d02f0985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6311c0a-ce32-4acf-acb1-651953ed05d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd008d1-86d6-4bf3-b5a5-439930f0812b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c186ecc7-21f8-4e6e-8b0b-a3f6583b268e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda76aae-83c7-4291-9971-135aa98baa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439056a9-7b17-4de2-934e-7439a1969dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3295fe-4f48-4548-92c0-a520033fec4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7b979a-9cb5-4829-a37b-bc443336bac2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5624880-c4c4-4478-b4c4-217f0fd5cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e4f961f-e40f-46f4-a33e-cd7140bf1e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234d0427-62a2-4635-b93e-15eb31fdc583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84655244-b806-42c9-97b2-48c859ca53cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c94dd3e-35ae-494a-9b5e-a385523b1269",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c5928-5ed3-44a5-bab0-a26f085f537a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2e3fcc-5c6f-4339-a347-d7fab53c6a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c07e7e-2ec9-4bc9-955a-434a33fc5fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef00436-2227-48fc-a58f-e6d3e39f8454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4205e2-2a65-42e7-aec8-9c834f275aec",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f5e606-dcd3-4c31-b8e1-a73394720e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1652d4b2-b2c7-4378-a979-1884531c7f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98b952a-86a6-48bb-8575-c81de86a8bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "067502e2-ece2-4cf0-83d1-83ba73df2be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5dfc3b-dd7c-42da-b992-77919bf1c945",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2242bfaf-309f-4d23-889c-eb2ed2b855b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a7ea42-c223-44d7-bb53-457f8b4b33e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5452b119-a6c6-435c-b8d2-89d2d411d091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8617167-979c-4ee9-8713-123d11e1a83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4d3337-6986-4394-825c-b9dfb01f4756",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0252ba-e17a-4733-9b87-e951d22f9fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f93fe4-8db5-4d9f-a758-0418fae6cbb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6ede27-849e-4a76-8d55-c3ef118b03c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97d91857-2762-4d4d-a165-f8dfeb16f310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e20e9a1-2577-46a6-81f6-c2cee895aa9d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1f2fda-f859-48af-b1f2-39b898721081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960f3ad2-0e16-4639-8021-82d93d43c801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2aa6fbf-36ba-4fdf-a804-e883ab1f16a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4787854-ea50-4399-8d84-07888b85a2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5258a183-c724-4bd8-9e74-cb5b78003e6e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82646d74-3f0d-4ba0-8bb6-aef2645c38b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36782e0-919f-4912-9f32-7c1f35aaae77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648226a4-c462-46a6-8170-0fd478d9a388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0808d6d7-3934-4d54-b8b6-1a7dd5c1d8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67dd2e72-74e2-446b-843e-9e727c68be82",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f87fd4-824c-40c1-b23d-334f1d78ffcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e76a7b-eac9-4782-a1de-d62f50381256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b370e9-c10f-437b-acc6-466408abac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22df8391-230f-4af7-8b52-aca6d1078fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f6d4f9-a1aa-4f26-89f5-0b4756d546bd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32e0c0c-229f-470e-9a77-33c1b0f6ed73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcea075d-e10e-40f9-a6c0-3f2110c0ca60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e4b9b4-ab59-43ca-bb97-5986c1ad4e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80d599e2-16d8-41d6-a6dc-a040c3f89510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4782af52-df08-4524-ad3c-4d8699174c99",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609b4884-6e11-4661-b976-2f9fdbc2ef48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a528a25f-6a03-4af3-a3f2-3a41badd800d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00cd496-ec86-4332-9002-669bde71a6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4522ab0d-cffd-4031-998b-5f0e6926b59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cf3749-d9c7-45e1-bf29-96764c2aca20",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e38179-5e91-4265-b566-7776f53cae89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db7242e-a926-46a9-a8a0-c67d534638df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f379200-c1fa-46c7-a42b-5741dd9d9cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f85795-20e6-4ced-9d22-fa3e4ce2d769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c48a657-f751-4753-98c1-7466a1f6c51d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d512ddd8-44cf-4edf-b19b-56e437748b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3da13e-f501-4d8b-9d30-4d6d6858ffdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3fee44-69bd-48af-96c4-da22e6d6c9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c1e039-3954-4cf7-a184-0e69d2f0ec0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e700e22e-2a09-46f2-abf2-3e7dda4f81b4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e67210-2fb2-4bcd-861d-8b37ed715671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bc4af3-4ea0-480e-a468-1d55592cd9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb00fe76-ab7e-4d6c-8738-106eb8006c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d97e220-2555-464d-aa5d-d620b0506980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83606115-9302-4a2b-907c-52d7a5873ba4",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947c4cad-2216-4e65-8529-dda112786734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c33a66a-43a9-4430-b02d-c80f54ed52da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbb6000-f7b2-4cc4-b262-93f84a573dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d572afb-911d-460f-a445-9d22aa8058de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa3d110-5a0f-486b-b7b6-d96b9dae8d3a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d171c3-27b8-4327-8ed8-115b0c54ef95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "657c2e3a-9f07-49b5-884e-8fbbcb40f5d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d024814-bd3e-4277-9b1f-19dd96d98335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4819557-365d-45a0-b2af-4198b99ab501"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "399f2951-1318-4479-ac36-6c2dff0ce914",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10c1d9a0-9aa9-4b3c-981c-d261ac32f6b1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4d146d-29a2-46d1-b1c6-01d9d65695d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66fdc1cf-049f-44ba-81d7-d168176b6f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccefb08a-1500-4a92-87d1-8382f988b255",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aafa666a-121a-47c4-9411-e95d44a4f490"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a32d050-e4b6-4673-b139-07f642e7d3c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94671150-2fce-4c05-8de3-b2bfcce22c5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43384f14-0aa3-4374-bccb-c593fbc1c792",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e4f2ad5-5906-4772-a995-a32e50870d83"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5daa6fd8-6d39-430e-a002-feb0119ef93c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62426e0a-5cfc-41c2-b41c-8f94f22ddb28"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3fe61b26-098b-41d4-8056-b8b3efb0bb56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6092505-1d5d-4f81-8e6f-17f458247ded"
                }
              }
            ]
          },
          {
            "id": "90dd7271-8c8b-4a72-882d-67ce5b505488",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fadb244a-63f2-4d1f-b13a-11110ffe8677",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48b799fb-40c5-4354-9d69-602520d17cda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5942a3ea-dd91-4e79-8b7e-197adf0511c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e040347e-4654-47de-95fd-890e242b818b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "58404ddc-444b-4a34-9a16-f05199819fda"
                    }
                  }
                ]
              },
              {
                "id": "d6d89b39-7128-4764-91cc-48d21a8a99cb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2850368d-7624-439c-8ff8-ea98ac6c4ed7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c00c79c3-2186-4acb-a3bf-5639cd46d000"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "579dffc9-d623-4189-b048-c6e0d6c52afe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d7a4477-5e28-47d2-a795-8307e7082082"
                    }
                  }
                ]
              },
              {
                "id": "88274a36-c70c-4de6-abbb-908fc6dd3e81",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da9e1b68-c703-4ada-8ce0-515e05fd9835",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4688a2de-7c17-4a4a-ae2c-82a2aa7da3b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7273414b-4449-4206-85ed-2bca1357650e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a3b9a7e1-e8e3-47ec-8362-e19e11438ad0"
                    }
                  }
                ]
              },
              {
                "id": "6351fe8e-3077-40c3-98eb-c257eb190cea",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cac008a-dea4-4949-9272-336c5d26d7c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8e2d070-4a52-4ad0-8ec2-656dcc18b47f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "815664d7-fc1d-4a63-a6bc-03599485f9e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "50cbfb6b-bcf3-44bf-b3cd-e17b40f37b0d"
                    }
                  }
                ]
              },
              {
                "id": "5035a8d1-dffb-4783-8c49-4debfc7d66be",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b157e5f2-f354-4dfd-95a6-5078cd8e0720",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "741194da-f6ce-4235-96a3-7ac7472f883e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9eebc01b-ed6f-4c13-8b05-4cf65545a903",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "53b62283-47d3-439a-8754-3ad185272143"
                    }
                  }
                ]
              },
              {
                "id": "4252f3d6-9d86-4abd-8352-6fb433682039",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3defbeff-dd6b-46fe-8e6b-97ea72b691d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ef30623-fdaa-4849-bff9-f282bcc5cfd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ded1cd11-86bf-4f22-9ee0-9b60eb440cc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6de419a2-a0a8-406e-a6e9-160036059e66"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c9e2259-db76-43be-a007-c75e9b157b32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87c0cf69-e348-42a7-95ca-2480e2c13477"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d9865aa-137a-4a8e-bd32-12f037171391",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76997ef4-59d4-4045-9121-a315519e3c35"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a613c864-ddaf-4ab6-be50-c4a4a33effb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "09b894b0-bef4-49a6-95c8-4cfbef5d70c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7bed13f-e30a-42f9-b143-1f47dece5815",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "420ca566-2cc5-4740-803f-70b897286890"
            }
          }
        ]
      },
      {
        "id": "cd687ccc-5149-47cd-8ef9-257b6275dad5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e62fe82b-4fcd-4da3-94f9-3398fa9c4cbe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8addf329-74e4-4404-968b-d89a6422781d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3afb246e-de5d-4cca-b343-504a0bb92613",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7eb2a4-8365-4579-97f5-d6734f9678ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3a2efa-af1b-4f5d-8196-b2aeb6f8705d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b478af-f871-49dc-8ed1-1dca2216246b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d02b04d-1a3e-4df4-8310-e92087bdc438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b032bcf-f0dd-4f26-bbdf-4c4f099a22e7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c7b1a8-a711-409d-b221-5a814754dd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4da3d6-e9a9-40ef-a71c-93bfe3371fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e75b627-3ba5-41ed-82ed-93f69b654db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9480472f-4f4f-40e3-93fa-ee8c33d7f3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0462607-2954-4db3-9ab8-7399328c2525",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2411f24b-0184-4780-aeb2-b414c0240837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7049c75b-fa5f-4082-95a6-139670d4cb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1474f9df-2893-4922-b4d1-50d42b7fb645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a884d4-b8cd-4725-ad01-505ad9ade237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33bfccc-75a8-4d41-a9b3-b2236917e15e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dc4269-d8f4-40d4-a64e-049d5e5048c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a0afd9-1188-4f06-b8cf-1a80cfa3b11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bccde46-afc8-4d14-aaf8-6a43f7f1a856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "339a8d8b-634e-47ba-8754-d2b8dfb17d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf25ce6-6a84-4727-bfd0-3e2c78ae9b39",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9168363-4662-466f-92f1-f52c33f1fda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27120cd-61e3-44c8-aec8-fc0da48692dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0df8e9-5a1f-48d4-9270-e1fde7dadd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9db07d34-91bc-4e75-ab6e-2525d49fbf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c0279d-3df5-44c5-a360-b4af213277a4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e631adea-4e68-46d0-b2d0-5c5bf20c79df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f25d4d-9abf-4735-84e0-087d5edde4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fa144e-f071-4329-8dc4-02744482f753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e7fc9a-2b36-4df6-aec9-67eb0fb8861b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d81a784-d242-4cfd-81b2-3a139b10a61e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3467cf-440c-4d18-bdeb-cda270846b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e1ffd2-39f8-4d2e-b101-e66909fa0a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c0c54c-dff9-4911-afb0-3ea44a756b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84337e4-df91-4cc3-9196-4bb1338684bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069d4c87-bb22-451f-9a06-496940d26101",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30dfcea-a3f0-435f-ae0b-649956d3b147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d32f0fb-f852-4545-8aaf-e8e4a0ca7ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5324b879-6099-4b5f-a9ad-b9f313bfa5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5982d4a5-f508-4f89-8cc1-00b0f7ff90f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a47f50e-421b-4c0d-9d5d-997f22a802d6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2660d9-7dd8-48bd-960c-c0dc353988ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "040b46f8-fb7b-4eb1-b942-347f7d1e2be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f049534b-32c0-4364-a2f5-3420f156ac11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4830918a-82c4-45ea-b770-4098557831fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86225a9f-6d4c-45e5-ab5d-0f9a656bed81",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4be18c-f3a3-44c8-ab69-59aa65682e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39591d6a-2856-4928-8ca0-d0ad364c6c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23960e6e-8377-45ff-9255-305037346875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0f8e11-6ce2-4f3c-ae87-528d9a9d39d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a5a417-79d3-4a90-94f9-47788c4d435c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9884cd49-1cb2-4e14-969c-864c87f8ebf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8191f1-c26a-4a0a-ae82-691c90022c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a4aa1b-0df6-49d5-8c51-826a7d66a6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fe57d00e-35ab-49e3-8329-a7d3af38852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a918c59e-16b7-46c8-841c-f7c7a96e0814",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3f952c-c9ed-4676-af3a-fef2d59506ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d696d3-2d5d-4dca-9bb0-cb88bd1ca834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d6e847-60c0-4d5e-9231-4ad6033e2e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f90d38b-27bc-4e85-a196-8cc2a572fc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b827622-5d8d-48d2-b1ee-65ce80c0c45a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "114598f3-c3ff-4c46-b0e6-57ff3ce05b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d4e152-3aeb-47b4-b3b8-77d90d667c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd7c5f3-c61e-46e5-b412-91e5988d3491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb15eadc-4904-42b3-984f-5ebc21dd3013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0757802b-aef0-4e6d-96a8-928741f3db1c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071361da-90b9-4a72-a204-7ff0b0873cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e686bb23-f183-4b71-b186-a9bd9a85da01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393dbbe7-e687-4721-badb-b9323169e419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1accb94-dc38-475d-8030-b918ff377c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6958cf-5178-4971-83be-e52ad29039d4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c3b19c-8b30-4d29-b09c-192d708d5d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a966204-bd45-4d57-addd-2931e8e17e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10742292-4f00-409a-8154-a94b727f05f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "216bc1a2-df59-4bb8-a77e-44e2306a6381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5028d026-4c06-4d8d-8f57-9c3054181030",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3357f9-a167-468b-93cc-7091a928238a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9ee082-794e-4916-9fc7-fe975069c4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955a16fe-57b5-4936-b875-7318ad0dc26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a488d286-1773-4077-8da5-031d75498836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4829b80-5be5-4e67-b588-4fbab328c77b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef983396-189b-4bea-afcf-62700cbf5dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71928427-48fc-4dc3-9cf5-3e716425a411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff04f529-17c5-4888-853e-6efe4310cedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "67257645-1d2b-47c8-ab34-c7927b108d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41753b9f-5052-4288-8b39-9351cc1693e0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf2bbdf-8a90-4dd5-ae08-754cf7923c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f413627b-5761-4390-90f3-e3628f0ab5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df4d65d-fffa-4d0e-a509-8290c19bcc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a485fd66-e2a1-4bc7-86ad-9a483ade84e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9470d89b-5785-4fb7-b4a5-1d23f11ddc78",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c284ab4-2edc-4b35-84db-a752bca767cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae0373d-862e-409a-8cbb-8c66fdb80603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cb29f8-ddc0-4616-8ade-249f3f7327aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d3b29b6-6716-48ef-a7b6-0d02089d746b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7223b595-bcd8-4caa-ac3b-b87203f7052a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c3ceb-c483-4ca5-9c63-6e2fe5b4712c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26866ae6-98a6-435f-b103-916833adfaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce45f25e-4121-420d-99f0-abdba42df746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9a33ce-e294-463e-8b86-1fc4444c7d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82b2cdb-b7bc-4714-9041-5d28ae98f6be",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf041944-0d0d-4f3a-9f49-886da492c508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a66987e-de7b-4b9a-b9a1-50e7bce56c5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a430a5f4-06db-4278-ad69-fd66d6709bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "706120be-4f4c-4929-9813-c12760728e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759fbe9a-2c2a-4f0c-8eae-eebd03c84535",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fee5ee-7035-4d38-88df-1927a9f2ad2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18078482-9f9e-4c39-b361-616a25deb20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45769fa3-f487-4155-8cea-ee799484cab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a642e2f5-34c7-432e-9b4e-bf89d9dd9971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4aac308-54be-486d-9f34-4d400bfb1aa2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f55635-b253-4798-9647-ccd532a9a0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c72dc60-28e3-4d3d-b73f-94b2c6c45855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8064068-16f1-4ab9-be2b-0a810ab24790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4188fa1e-17ea-4c76-a170-fcba464e1753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf32a63-147a-47ba-b58c-9a5b18b56130",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9869a2-633b-4100-8b07-a5f2e46d3c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ce8a92-1ddf-478d-951f-a0229802c327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1dd779-ec9c-480a-b275-02a5843d540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1ca83c-1c14-4c9f-9f3b-3d6633667501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7130c6-8a75-464f-91ea-e87dba0f0c95",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2544c312-da05-4c3d-acd1-0eddea44f329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd77920d-0745-47b3-bbb7-7ad4c3f5573b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d38fb4-d6e6-4f7e-9435-633a018a537e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1593c5ad-098f-4f94-9610-0cf92b5ab6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb63eac8-fa8f-4bec-b476-21542d8dac5a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12509e7-ee15-43bd-b8c7-f03a82b465e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b79bece7-3247-4310-b3cb-a297584f49a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254469ef-b944-4678-9753-db7a6c032dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3bdb0d-4168-469d-90cf-ffdee0b84f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3474d65-4049-4817-bdcd-4b5c6464ba86",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee61dbc-f824-4bbb-83c4-1106a20ec947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d5fff4-864a-4a1a-81e9-701ae306a818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a1888d-f338-47e1-b580-af1d63d7886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2fc547-9365-403b-8371-b6d88e2b0387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfee074-d200-4036-9d70-c7f8c3180497",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da67a020-760e-49bc-8b7f-3ad8703e7558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0adef27-140a-4ac0-9ca1-989a8ebf8a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb41ec7b-ef3a-4f63-ac09-69ac29185b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5d58c7-d92a-40ae-a59a-9880978a77f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adcc1f21-e51b-45c5-8e40-c81e3ebb060d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9646d1-0ab0-4e6d-897d-a558b729b3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defc8200-a42b-4d24-b989-147aff6e8c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff44e25e-0320-40e9-89ec-a94017d43aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dda5b73-7651-4c36-9ab3-13889ed7eb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec1db02-60bd-41a6-b72f-2fed9215af01",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c85b718-e3fd-4e64-9a4d-f39c0731ae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee31ee05-dc02-4ab3-9b66-c3e0b481e961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dd4b53-4241-4b8e-91e4-faba412d5c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a62a615-0ee1-472f-b38e-ba90aa3ff572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbad9e85-08af-4a38-bce6-2332a772b6cc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d43299-e89e-4f89-8d34-01bb1b789bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfb365a-b6da-4bdc-a6fe-93f23e7a3781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d2ee1a-214c-4a86-a389-0c6a8f7d9baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea95ba6c-db37-4e25-9043-ad909a9083f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325729b3-9543-4417-8957-7ee35ffa819d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71da7a79-a865-4a82-a2b5-d6f73579d4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c0447a-905e-493f-9f28-dd11636a41e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c927a8ca-ad5c-43e0-8741-4ae487b4fe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78a5a12f-8b67-431f-9ab4-b0f33b773cc1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4d2900b9-e753-444d-9932-1e831c2839bf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df212d75-3bc9-41b1-8dfc-f49189f3bef1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfd3612-5ad8-4f8e-a860-28b2c29a0933",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1052ba06-0df7-4c89-97eb-b3c7ffcd8d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "779b4a15-e0c6-46e9-8b51-dacf3d5ac0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6ddc85e-d529-4ebe-afd6-7f5812a6a47b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4620fd9a-0b92-4b58-94ac-e09a2e646759",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef15a90b-9d93-474d-8f0b-7b9081c12313"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8118a9e-2856-41b2-82b5-4a144a8a8f8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "374d5cb3-6182-440f-8921-08e10c0fd1cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7e60569-c795-468f-9767-12854ce6ea03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b3b5b5b-796d-4fbf-b36b-226bf4fb9528"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a2d1995-fde0-4839-bfd5-e7ec3ab5c09d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b251b0bf-f99f-43e7-bba0-be741975e1fa"
            }
          }
        ]
      },
      {
        "id": "da022f21-5ce5-44d8-9470-81cf02067c82",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f1764762-7075-4f75-a62a-25fe2f4e729c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2220adf-dc7b-4b2c-ba15-8555c71acf78",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e0b9220e-17e0-4a54-a913-2a9ae5dd8b1f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a3fa67-e0ef-42dd-b128-d708a5225e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1c17bf-14e9-4a39-a3b3-0a3eba5c8132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcd0767-1a5e-4d11-b1ee-ecc341236b58",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db17222-be1d-4aeb-9fa2-60985e5e6fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5056291b-3679-4ddd-b144-7befbef01c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de38913-30f3-44bf-8a30-d39b7728fe58",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b972e92f-9eff-4b5a-9d64-978da892f6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54721d85-7b94-4c97-8dd6-e339a5f64841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14aab33-10ac-4689-8a56-52d5b7c0aa82",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7632305-0c80-41c5-bd43-edae03ea2f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b740a5-bf71-4ea0-b6fc-3826ff8529c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35416651-cc33-47e9-87bc-dd7c64d9d7a0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4c1b02-26e2-4e59-b287-cddf03f4dfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96d0770-9bb1-4c56-89d8-506b4d8fdf3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcffa396-03d4-444e-a795-ff6adf98f400",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49404bc-40d3-4eb9-8be3-67f6c956e835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2d9fd1-d17b-4bda-9697-2b93ce249875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534d6bd2-63e8-4afb-a3b4-150bcff3c5c3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83f8c3d-77bc-4159-83fe-fbe1aef10629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf5f8e1-ecb3-489c-823b-4bcfb761cf19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9531b9-a4c9-4d32-a178-963e4c42dd49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d4f9a5-fbfc-4bc8-95fb-b010fd9efb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740693e8-021a-4c99-a04c-4b0297fb5c1d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311f8bed-a4a2-410c-bbb2-da8c7c216552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d74eddb-0b26-4754-9a99-35e940089df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0215ff-946c-4dcf-9622-59ddd41a3ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e92027-ec1e-44c9-ba6e-ee6c26d51c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf6e17b-ff4e-4509-ab65-e895476d24ce",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350bb96c-7629-4cdc-be17-4e65272754c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca2ea6d-fa30-4020-84b8-3802647a6ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4021073c-4211-4285-8b95-2cb7bac15b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc8c989-66c7-4e60-86be-7817269bdb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb29c54-b02b-40c6-8b94-9ee6b9d334ed",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da40345d-1176-409b-b048-18510feb511a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51dee90-f077-4414-ad4f-0db4cfaf9a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f49e434-2af7-4bb2-b84b-e16151dd1530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ff1155-3a12-4de4-a830-23fb9962959b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae294a6c-1f08-45a3-b9d7-8d25e9041b5a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584384c9-df9b-4262-a528-9c3f3bcf4f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f745768b-bc70-455d-97e1-e9b8f693c58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47488190-3752-4517-a43c-2f6b30adc617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88816665-550b-4400-a314-4b4d2757da19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddda242-d5ec-460f-b05e-7fdda18af18c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1440ac42-30f6-4991-8527-86e7794ea870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d88f39-30cf-4f86-aef1-7a185c16914d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d83f67-c530-45e2-8752-fe2d21da6ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229768b3-9474-4d39-87c9-0b463d54c81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4debacdc-aa14-4ead-8ec4-c81d6d1db6c9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57d9302-c1cc-4eca-a8d5-b3a67a538e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "908280f1-8019-43ad-9f29-167956148506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6083e687-2be3-4af5-a39f-27863766d981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91615b6-e725-4a6d-9391-b49875c615e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93228d58-f009-4659-9c7e-10ff3cf272d9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cfaefb-2468-42ac-9884-6195665e8e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ef0b67-3102-4771-a938-9ed5e01b325e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057e4979-0887-4df3-88c5-be2a62af5295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d5cc44-e0a1-48f6-88e2-fd4c72c07e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e217b29e-78d5-40cb-bdce-b152257363cc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb4d6e0-22bf-4000-9ac0-4fe6d508e926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a23a953-91c8-4337-9f11-a97186164849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70414cd7-32a2-49ce-9116-b1c4aecc27a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7dbd2a-354b-4c31-9b8b-3f3a10346de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4640d79e-7d85-4c5a-a9d1-755c001a93b7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca801fda-103e-45c2-964c-e7d8c74e8d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afb8bdb-1665-4be4-94e7-3228446c5d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933e1605-f7de-4d64-a6af-1358363fee40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c851cb2-b2f9-46da-89b7-917d6f7a4de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff4fce0-15ad-4b63-af15-70aa43de72bf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa5ac74-8e13-4c73-973d-8663322e0bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c849c076-f475-4778-8ff7-b0a55fec47b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1767533b-d441-4c7c-8191-56c3ba7f692a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aefd42a-dd0d-4cb3-9dcd-f64bbc467d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22602f60-8ad7-41ab-a5af-239e3931b731",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fdf5b3-8967-46d4-acce-db624fec8c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e176d4bd-afd4-4c0a-ace1-a9c5d73c0779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9fd9a1-8b9b-4ffb-9d53-2f6520bf9644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012fe96b-8df2-46f1-8ad0-1cee75c643fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9fe3f4-46af-474c-8162-74d370ec6182",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c15352e-e6de-4c74-b4b7-3a77ff59dd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60b5d9e-b732-4d1f-8a38-875cfc321101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1685429-abb5-4350-a725-8a140697928f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2126c457-ad9a-482c-84d1-2f161edd19d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e4d10f-1199-4d38-a212-243d3ff24e8c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef067ce-430a-4f85-b0fa-e3725f47fc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0b31ba-30f9-4dc5-b31e-6882c7c40630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f618fd-e419-4433-9a15-cba55cc96728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9630ea3f-973a-4d03-ac2e-34c62e7d79ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337459e6-1893-4b84-8300-4fe5f44989ec",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19f1264-1f43-4205-9b7b-a69af4d4beb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eca687c1-df9d-4215-8936-bc931d8105fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a670862e-ce12-47b6-859b-91f3e222ee7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb22810d-caa6-44b4-be53-16cba62a20b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d829d1-455f-4abf-a972-607c3e234098",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1809b1-2e78-4081-b6ec-f48b09276992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a54e8be-31da-45f1-8445-6a4e9de2a156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24275454-7724-4731-ba5b-4016ffb15f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373b1722-429a-4627-a136-3640847b1da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fee788b-3a58-489d-8648-81320e309f55",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7c5810-73d4-4d3d-b97c-bd97e065101f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bff9830-d631-4489-ac76-5e6983c72d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c483c01-8fb7-41b9-82c2-da45b98fc28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e830d8c0-01b9-48b8-9cc9-00cd5e7a52b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6917cc-4f3a-4195-9c21-e78ade568ab1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3645185d-4940-43db-b46a-328944e4705f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d349e20-488b-4ecc-9970-dadbdbd44e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea830068-3886-4b3b-94f0-90a19829b79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3d3a10-e688-4f65-b98d-662a3959b716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80967cfe-62da-4eac-aada-3e97390b9e71",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64455889-120d-42a1-b789-d36e3db4d4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba66c2e0-87c7-49d2-8f19-0b8526071169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4912f776-3d54-49a0-92e1-9afe4a465fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d8d8d0-d06c-4c40-ba7c-b84107cd4345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a124230f-8258-4cc7-847b-b546ac05e022",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70c5589-9f0b-4265-8e60-44ae1221e9a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f99a01a-193f-4494-af45-39bfe02b9ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3742a7a-5b27-40eb-82c4-aa72976895d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43629fd-fcb4-4b20-93fb-deebd205b256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7606e2e8-b738-4cd3-a041-4a8b66d58ee6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702da630-a900-4d1d-b338-01624ba3ff6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77db443d-4180-43c9-873e-5f47b1f7f3bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6657ac88-022e-417c-a76d-77e1f31422dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27118fba-f831-4b06-997b-9bc92714d7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601cb41b-8feb-4fca-b646-e8a0a48a4639",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d95d5e-3cef-4829-a2cd-d104954697d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583c2557-36c7-492b-8340-cb93f62d7095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59d73d-e8da-45fa-9517-f65a81e44036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f0569e-44e9-4b8f-9ac8-f6fe886278fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185a5115-ace2-4aff-aafd-cde36119a659",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234003c-e50e-4b59-95b3-d43cef26a378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57a0015a-6f9d-4f4d-8434-0ff1806b3d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037bf5a2-668b-493c-8aaf-bf5dbea4fee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d78851-c140-47db-993a-66e2a8eb8ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c011e4b6-6331-4aa9-83ca-df4d656497c0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac1ef76-2a09-4107-8006-e661cfa32500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8b495c3-5719-4abe-8e92-5bf77202d88f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0f3d37-20d1-41f8-b3d8-9253309345e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d3a962-55c9-4d1b-afad-293bfdf15a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273afb0b-5711-4d14-97e1-fa1ed90bf20a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a92c24e-e37e-4bb8-b943-240661a7ca13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3bc8329-c436-40b6-882d-2ba599f44461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d789c5-565d-4774-8129-a939b8d9f971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48fc483-5de0-4435-8aeb-d9c1f7dc5d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6fd2e8-119d-4418-b2f7-fca4efee06ed",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915c9ef2-4d25-43d6-8eb5-8144ea05f84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe13af4-e819-4e6e-97a5-6eace16138a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac4e68a-d7f5-47b3-a109-2e600555f238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a718bc20-767b-4bd7-a412-e9bc3d1e8e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b146d1d1-2e60-4611-931f-b5d2c022883e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3ba952-2f75-4dee-9fbe-5309508aa785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4eb9f65-cae4-44aa-ad82-4ef011e5af35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7d12ca-0197-434a-9b02-d936e140514b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f1f2bf-ae93-4c60-93fd-5b1d98cb71b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2b273d-6790-491d-9d67-7ae62cd72c46",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa09945-462c-4beb-8719-c6ceb358a1b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e79140b-993f-48ef-add3-f7c71427d41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70e8cae-550a-4b37-b8af-46ac47c5d9ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73eebee9-250a-4f46-a23c-f4b0c49058e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e9b218-e3c0-481e-9c84-74f81383ecab",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd63f9e-38a5-41ff-9863-7486b2e1af5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cff3be6-3613-4a7d-8ac5-843fd8e55ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49631713-0770-491c-bdd6-848cf4df83a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6160e01b-54a6-4364-8df0-8f979842de65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f8d44b-c5e3-4001-85d5-f606db0db7d7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b28d68e-5d6d-42cf-a6eb-b55ac1eca3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e073a49f-599e-4343-966f-348976ee44e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c3c4a-028e-41f6-8527-2aa0da00bf2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf08d21-f0a2-452b-9d79-039554d9e3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b8f204-848f-4320-a5c6-0864e6977222",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddad2fc9-a945-4dc9-afdf-8a8852cbcdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d291ed-df72-4bc0-82cf-a9cbb8236d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5fbaae-a54d-4fc5-b61e-bcbd2ab247e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04fad9b-3ed0-4227-8f49-070b4ec337f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3debb80e-82ef-482f-9d1f-0fb6d7dadc87",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c00b14-2582-4eb9-9a92-a4df1d3bba70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e692bf-1939-4ecb-ba94-2b8ee372868e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e06ae6-4d49-4d9e-9676-99b5cd1293a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881b4cde-2cba-4611-ac28-d502cb0d2821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea15974-e53c-48a4-bf26-dbd9ba4fb93e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a6d2f0-16b6-4609-ab54-9e40abd57bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2f9c13-3e50-46b4-93ea-a69ae175ef64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a19229-0cb8-4ec0-a219-00811e7e791a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1acc36-fdd0-4db9-8aa0-5ea854f377ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0b3e3e-a3ba-4c4f-af72-e4e133b27464",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f135e4-aa60-4e8c-aea2-af12774e96a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea4e221-8d2e-463c-a9f4-31ccee31a08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e9e723-579c-4334-9dc1-20cd13abb92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99f1867-5b55-4edb-a957-9104d0a8291e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975cb9d4-21e8-424c-b967-4e800e906df0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca629269-f374-4751-b355-23c522a2404f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cd021d-eb37-4ff9-bc9f-8602969090f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ae468e-d228-490c-a129-c6a07194aace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91697783-ba6b-43fb-af72-f0918ce4c14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ee7b52-3045-4172-94f5-9e9b5e5f8543",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102c55f2-a8b4-42fa-b1be-8567b6827ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8364ff6-ebc1-49b9-8088-778e98543048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa8c9c2-adfc-47d7-944c-dcee51d61f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4761c1-9ccb-4fc6-8291-75a4d6d93e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a6e924-84ef-4e21-a893-43b40c64e288",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2620652-fba2-402a-b95c-ba8346005a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20133501-85c8-418b-a773-7148e0119046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4989fe91-dbdc-4cab-9306-a758a398dbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62cd1ad-7d21-49ad-8deb-1453f14df878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e210fbe-c723-4f01-9187-5e4bac338e5f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f890dfd3-ff6b-443b-809c-1b991fc15ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6d4d4f-33ac-4d66-8950-f095fa94a54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c039f3a-908c-4942-b45f-42ca012ed450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1810e9e3-468b-4676-8645-fc079955f9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a005a9-9602-4475-9de3-b3e5ef7124cb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbd1455-33bd-46db-a2e0-980afdc3da73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d4b654-0c86-4cbc-9e3f-7016273c13ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d752b5-7e22-41dd-886a-806f0f780743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d61b70f-c66b-4adc-af6b-807c8ae712dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c790795-b5d5-46d7-b70d-80b2a298fb8c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127a3a27-6f7d-4873-880d-4f64265285fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1851b5-db47-4c71-8d68-3f9b3b8003d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633a9c4f-2d6f-4705-9a62-158af5c59554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb62c622-1810-4dce-86f7-bec5aa2bfa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75034270-1d1c-4df2-a825-30d11b6a3326",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e79c7dd-934b-476e-931d-2a5a5feaaf6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53692a9-ec5b-47a7-8389-53adcee000bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f313414-a29f-4561-8029-5638cd59286c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84744f1-aaae-4dfd-b255-6ad257e1b737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33fee48b-8530-45e4-bccd-371f15dd6990",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bf6633-3631-485e-bc9c-941b9e6a2c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bdd81d-41ca-4c4b-8fd2-44f8ecea118f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600759d6-1c44-49ef-a0c1-c6149bda533d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed6ebfd-caa5-44cd-8efb-ddf0ac527b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6939dc3c-5e11-47a5-b5a6-3f91472c49b6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bf2eed-907f-4aaa-94fc-66e3a6fc7d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa4e815-3135-4087-b672-4d5c8b0ebf15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02577eef-c0ed-4486-81c9-b02611a6f075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cc154e-6c21-464b-a8b8-bd2efcef6cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928df268-a18a-424d-82c1-a7419fcae4c6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa653417-65fb-4b48-a9b8-80c59eb93d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300c4bd4-cd6f-430f-9bd1-6236d7df9230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd36be6-c9c3-4a52-97b1-54ba4ddee8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ae1593-edc8-41b6-9684-bd041370fab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55dbb39-2f6a-47fe-a459-07f02f5f8e05",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d0d2bd-1c36-4595-8d2e-3e6c9dae1d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a937eec9-6f92-4ef6-9576-976650bd4f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "915052c6-9aff-48e9-bf65-baf5c598583d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716d5fe4-af20-48c8-8fc2-347e533a24a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eda5e64-26a3-438f-b8d7-72166f93530e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45a403e-51f6-4dd4-afc2-bf818e214afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae83726b-788b-4e56-b69a-735806150a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ad5b0a-3d6f-4012-afc3-24c8f1c90eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a44bb6-771f-4d37-96a8-4aea9c114fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc8b1ff-fd98-459e-b457-fe3893a44cef",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf0d69d-d223-4423-95f4-4dd93dbc65e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf642969-3cda-436d-bb16-6fb1300c89b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cdd150-4aeb-4c0c-8e80-5ca530fd7068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812fd5d0-95bc-43de-b246-a41cd992aff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0788879e-5824-4894-9203-ee904b98e162",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d078133-4214-4990-9327-ebfc90e7254a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954ed7a5-8dfd-4163-9d4c-267176add08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2da1743-f761-407d-b390-ff1121c3c63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259651d0-57e9-43c0-a812-f74e77b56231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5f9943-485c-4110-a9fb-00e82b83ab9d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecae2780-1e1d-404f-aeb0-345f05b6e3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac62470-64b4-4b26-be7b-6a93efda84de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3673fc03-59ce-4c3c-b330-4876870d34bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77aee97a-f531-4470-9b65-6657ad961b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a0221e-aca5-45e6-8146-6324fad5b7fb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afe20dc-22d2-4186-9a1a-ef98c8039898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd11372-99a2-448d-a0c5-911079d45be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d09b3b-718d-43f9-bf3e-bd724c2d3d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80821098-da96-40c7-bafd-17c7a6bb7d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86cc0ce-9285-46f6-9d6d-f5a77df24316",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793bc1e5-ecca-4a04-8ecf-0e92f0e4ca14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80aa28e1-899c-44ff-80b8-ba83afcc2aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e602cf2a-40c4-4665-b263-d8f30da5896f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb254e88-61a4-4c86-b484-b9a2818e634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e265cf8e-8ac4-49ee-ad2b-25cb26e8dfbf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22759735-ef95-490e-8fc7-4ac2185d767f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066d33f0-2cf5-4f04-98e0-21dd53b9c3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9dc035-a977-4049-89e9-558f9fa45cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22800efe-382a-4d1a-89fa-49da4ddb7a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5cde7b-8082-4ef5-864a-dc5d9d622a4e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6012aa-71ef-47d4-a847-ebeda495fee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698a7b62-5d03-4b3b-bf95-f6c379d830a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0227a852-c87e-4796-b4ce-6b0e79fc0d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb889388-8118-4cfc-afaf-cf4dd32329a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55992382-c00e-4544-afe0-97fff4d8945d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a58e48-ecfe-4e60-9732-9de40ff34a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd3c4f0-d4dc-4127-92dc-8c9e7c70798c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42ad64b-cbe0-4d7e-a9d5-e540199fa6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1bcc1d-a76d-420d-837a-00fa128cc951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3324af07-4a9d-4e54-87a4-e4b344cbb599",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d0ce61-f739-4a14-985a-ad9b56652a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a0c9f8-97b7-49d1-900c-4c5396526c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0d5fff-fcf9-4196-b647-f444544c2f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ae1390-7cca-4601-917a-6cdefb07462e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d77daf-3d3b-44e5-905d-18d0497b4772",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c70c0a3-4f0b-4818-b7fb-da4510cb2f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e277d78-8212-4725-a671-d2d39b022c93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c20bb5-d3a6-4dab-b7e8-7d6f100313d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0007f3-67a2-4e1a-afbd-fa509df8cb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f97d83-a79d-433a-a9f4-b8c3097f8370",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174db523-923d-4981-82ae-73915374e311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171ce0f7-f485-48e8-b81b-9de2e55aad92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b58707-4f20-4d35-a910-8450fc50c38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf66354-b780-4cb7-83b5-048bcefbca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7136fa-e32e-4096-a2ae-eda9c5be9d91",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b678e4-42e9-4fe1-a144-029e564cc61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5fc8f0f-e432-4562-ab7f-6852c1d72bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52f282e-ce08-4303-bfeb-2d6f70da4d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c10da4-f937-4800-86b7-e0b716f618df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3c86ac-4d53-4881-8b83-58261364ba17",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62894a5-2ac0-429c-b661-062f9ab334e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77b3f84a-a421-43f0-888a-5ddc2ab36700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166ddf51-cc47-4a65-b2e1-360384f353a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80cbfb0-73b4-43d1-b42c-ed290c1c1c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbff9ef-7ed8-427c-99b2-c9fa519744f7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bc6df4-4675-45f8-8baf-9dd77b10ad0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "911f44c4-fa71-492d-bc68-32df8717924a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2687ba3d-38ce-4a30-8cf1-7be33fc2d0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e734104-d091-4d8d-a729-2dd72e02f662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03034f75-3966-4651-adbc-50a525ff0c0d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664b599f-e916-4bdb-b3dd-afde51ccd934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d256738-278b-4c62-aacf-fd47aedd73be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4da0a7e-e8f3-4268-8653-e6c9392ba714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df74b60-16ca-4d54-84f9-65ef4172ef48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755b9733-0ccf-4eb6-aebe-ff85c87b7d4b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35cb401-e441-44b2-a1d3-afd3b5dde673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65ef73f1-cd07-4bd5-a737-556e96e92844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8a1a56-92bf-45aa-ba97-ce5ba0db4832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53740bfd-3367-49ea-967b-dab9de0f3502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da797787-c807-4a01-930d-1b3d843de89d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ee5e49-3933-48e6-935c-3c0e01ba1150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06042163-700c-4e29-9702-cfabd05ab1f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d65ebd8-714b-4b71-aa5f-3056e64bde61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e31623f-f393-4890-85c0-ad553c34fd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a941840-5142-4c12-9284-77eeab037fa0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0134fa-0f49-4b5f-a1a9-84ab474233a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c312c5aa-c368-46da-bc5d-fad8eaa1cebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697a55a9-3297-4f60-a03c-c4f79eeec418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196ec1eb-198f-4d02-8b07-118cbfd67458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2ed8e3-ee21-4c71-a189-def2fc760d1a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cabcb26-beef-4f4b-9a0f-ea9ab2d6260a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf66e0f-7280-4846-a7d6-8ca9d7188fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf573238-fd43-4c3b-8046-dcb6e2ee1595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4d9cd5-f630-44d3-b1c8-2a6db78fd68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec78a763-febe-4f38-83f6-b2aa5a64985e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42090025-afe0-40a4-ad34-c68621aea300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7fc35d9-492b-4ab1-8c6d-173cbb87b31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd90df87-1b96-4cb2-9ccb-b703b8e90702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445520f3-8f6c-4ddf-9c4b-ad6172ecad0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e014a26-6eb4-4a5f-91a5-467d6777b001",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289e9ea6-cc9f-4cdd-a9f0-97d9e45ba019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b90bb4b8-1445-4071-b5ce-e950ac736a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040977c6-3106-42ab-b895-c0901a699a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce47a2f-d2a1-47f6-a8e2-63cd74e249af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2182e77-ab81-415a-b7c7-e206c255cad2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e415168f-12b1-4fc4-aeba-887caffd9488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36598caa-9ace-4968-b95e-212f8f7494bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed83ab8-11d2-4cde-a0ca-193fb5b8324a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8584d3e3-6381-4232-b08b-74e1aadcd2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88411a44-54dd-44f5-bfec-8229ec4409a0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928cfdd1-4249-4c5a-a1a1-10fc37f90e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f5b5e4f-88be-4194-9648-15f63d1afdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9665bb2-31fa-446d-9ffd-9c56276d876b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f49433-bd34-478d-aaa8-3030fe1c089f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477344f0-93b8-45ac-a084-c8bb379e9722",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a40779-53c7-465b-88be-34310f53d293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c106f686-4f2c-462b-b1fc-95b837125ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a456d2-ea6a-48de-b612-bc3c69de59dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9580d1d-8a1c-481e-8e04-246468dde81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d303a1-a682-4449-9ed0-d9c438a779ce",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e44d87e-6a08-4786-ab1a-f2d3323ebc4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e0cff0c-5df0-4f1d-99cf-b1ca0d222b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4384b25-8643-4aa7-94bb-ec31ffe2138d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5eebef-9767-4607-9d7b-6ac7737b71f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2e904a-c263-4bdd-920e-01d8ecbdb810",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09319cfd-11bd-448b-8803-8931287403a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2615eedf-3cb3-4f9f-a77d-02b2c21fcd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8a4bc6-9e3d-4cd0-bd59-0d0a80958e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4404e594-c99d-407d-bf1f-e23cf82105ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04595ae6-25ce-4527-ba04-c7f8bc544dd3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34dbfb0-eb8c-414d-a9e7-d36fbb0c1115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46e7e875-aa2f-4734-b84d-c3d3c04de461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8295222-d8ae-4983-b3a1-947742339c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1b9f08-ce14-4ee3-89ce-b02bd8304168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb033cac-0610-46f9-8127-b012f72fbd37",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8f057a-4301-4d8b-b501-362fac883512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2a83075-fa73-4a0b-8b67-8b13f9d2a4c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d530ac9-b1ec-445b-b803-906220f1d90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4822f132-cff5-477b-a612-799cea93c981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fd4fea-6be4-4ca9-984a-4ff9d0694d8b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38509dd-f80d-4a6c-9114-635a5b31bb34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7a44ac-e0a0-4df9-a9fb-65a12f778485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b359c68-ede2-4d80-9224-a74392c9f029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57eb2b9-6181-4f4f-a695-1fcb4fb0d320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba6b500-4d82-4683-96d0-26001ce79052",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700601c6-ad92-4f58-8f50-23cba56f4114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ee96cad-1691-4e80-b17d-bec4b5f4121c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07942a95-c324-4095-ac45-9487ff388e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385c08e4-db2f-4b96-a873-078c63c5bd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ee4603-48c4-496e-a7b3-9f0cb64b5dac",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbfc29c-4df8-42a2-9fa1-e9b6bf99ef1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a83102-286c-4e49-b859-23277916e8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b49b6b1-5617-4ad2-8414-4a528bc7797c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09181e0c-f9cc-44a2-a768-6c5bceea22e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67696c79-58cd-4b51-b61f-6fff20b6e122",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224ed2ac-416f-475d-9328-29fa4100b50c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3d43158-6ded-4210-950d-c4497aaacac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae2df83-3e09-4de8-b6c4-5506e13aa6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc7e09f-ba72-4e44-b3c4-10277d4eca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1076723-1b39-475b-ad17-cca4e76e66ad",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff23b122-4fb6-4c8f-b69d-32b010e20c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "608bc6fa-31bd-4b31-9613-589c4ea91be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d378e4-30b5-4074-9540-eceabebdade0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2827879b-d973-468a-9cda-a0ba491603bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e923a38c-ad19-4d15-a61a-50df9dbf9db4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea6ef3f-57f8-4084-b58b-7a73a69e3533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "964cbfa3-4233-4f59-afc2-fc08d8b4e5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c8e7cd-50d9-4321-9a19-e5652e546b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d636d15a-b15f-4578-8e01-b83d51638ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d372f8-5591-4ce8-92d8-0c000acc4749",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7448eb75-0eb0-4141-9098-525dbedeb9e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f115648-278b-4268-a336-4527f428ba11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53581f7a-7b31-4200-9e79-a7e89b3c08a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0ecc43-df85-4a15-a0cf-240993df26d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acfdaf3-e02e-49ac-b3e8-e82275c63ded",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864d928c-f257-450e-a830-66a623f86574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9049ebb-c9de-48c0-ba61-dac020863ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157a5970-85c3-4a96-9dd8-29cfb937d4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415c88b1-52a4-4de3-afa4-d05b7344ade0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b711ab44-6893-4eee-acaf-0efbd21ecbe2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ce10ed-a500-4bb0-8375-3e9b1254c66e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c02c55-2765-42de-b2e8-d7456aaf392b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d3d833-e50f-46dc-ad18-30840b9b2dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a98c4d0-0668-47a9-9d37-bb27c1549ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9ad27d-094b-48c5-be2e-49b5ae7bd606",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585be8dd-8d0b-4178-b63f-6a9b263e9336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa6b2f3-f0ff-4294-ad1a-69dfcb7c0716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fdd593-21fe-45f5-a5b9-d2c8db554bb3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4d4cd9-a274-4dd5-bdd4-9717d8aff069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0662f8a7-1aaf-477a-af5f-baf7c16b808e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb50d04-7b9b-4c3e-9cfc-f5c5d5f85e0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45325db0-8709-4fc4-8fec-7c3c1583caaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd7736c-7a20-44e3-ba61-ee9d3bfac7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7721625b-70a4-4e24-873d-00407c953719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9374f36b-6884-4f94-8199-f17468ae136e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80eae76-71ea-4b4e-b9fc-ab45b85ca9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bd66b3-ac1f-4a61-bd21-c2b28eb2b2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7099153-6653-4b2b-b276-639704bb618b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e20bae-d472-4396-b03d-d4f29cf5f938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8a4573-58a5-4aa9-8bb8-650724f6d779",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a270a2-9a0c-4201-9482-9e17ce22e10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965f4938-11e9-49df-ba78-0dd05bb29fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51e13af-d2f0-4995-b6c7-14c903e43b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3845ee99-f91e-44b2-aa88-3ddb02a31291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277415e9-2cb7-4e04-a105-f9682f71ad18",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264b4ad6-125b-462d-850d-65f23841a74b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84957c81-bbcd-43f9-9660-0d3fb0885b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef54987c-a3cc-4180-8d6f-02f3ad930aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af286a6-4670-42ba-92ac-0423e68476b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf69951-e541-4e14-b4b2-281414d7f7ec",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a490dc63-b82d-425e-b945-d4281cf05a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f9d29e-cae9-4aae-8980-f66f59d3d7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d53096-530b-4f63-b27d-a460df1e260b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31cfcb5-c999-488d-a184-902b529598a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3069676d-822f-46c8-8a4c-ae5f47fd556c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296b5490-7b1e-4a58-8c97-62561dede6b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83c94f68-8630-46c0-8ac9-140dafa33229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8621fb-fb52-44c6-a061-35ff418bbaaa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debb91f6-77c3-4e34-a73f-500fde4b8f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e8750c-5dc3-498e-9586-8472f9cdc671",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b343a0-02b6-4ceb-b893-14824f3bd292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6343cb95-ff64-436c-82b7-567a3aaaef91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12900881-5d94-41ea-9bfc-3fd32bed5cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdf4d17-4e7d-4936-b7bc-0a3e37c0fcbb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38d312d8-b318-4518-83a9-1ee20f980b93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae2f0ce9-c0f5-4151-a214-bf9171a9ba1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "737c3449-6323-45b6-bc8f-b0c923b5fb6b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e1e96e3-612f-4618-a7c1-cb1cfd90e0e8"
                    }
                  }
                ]
              },
              {
                "id": "c9b08a50-43fb-4833-9864-43e56496ca6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ee15765-0923-46a9-b4d4-5e76c0154332",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fb3bce-f420-4352-99aa-ee2311ef6ba0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "26dbd702-a411-4204-bfee-158b04494d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c535e0d-8330-408b-ba30-b3f0b1fb2342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3eabf972-26b9-4593-8435-dfcef98a86ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a18c4bcb-a15f-44bb-91bb-38621fc59a6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b02782f-504b-4c58-9cdd-0e59941fde0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b04bc222-0371-4076-93a0-d9811b450e08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21951de7-05bc-4dc5-9ec7-d48512730888"
                    }
                  }
                ]
              },
              {
                "id": "6e3685b1-87e4-43a8-aa80-205d036ee5f5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9ed43b90-2226-41ec-b37f-4d2273e4a010",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffdec6f4-59db-4f7a-bc89-988bc8b28fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "476cfe4f-b46f-4ad8-87ff-6df9397598ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057d8d58-5d71-4ead-b206-c4a343b77892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b1f317-0ee2-47b7-b2e8-0d32dc69d8ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0ff37c4d-fdc5-406b-93c5-748e5f9e9a9b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d87227d2-00c5-47c5-be0c-1dfa41cab295",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9d7e227-3074-4391-a990-62e1dd59620d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d45419c6-6872-4032-a594-08b5b525ec86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1599aecf-620a-4877-8399-b21db91e140d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b6debc4-ea7f-46d9-a6ae-60f45474be27"
                    }
                  }
                ]
              },
              {
                "id": "568e48c5-7413-4fd6-9228-8ba81d91a3bf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9a44ea0-1489-479c-928b-a0065ae9cefb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e646c3d-a0bc-4038-af3e-48e9e5e30fde"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49e55e20-09de-438f-b74c-cd2b9f3c8624",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4665369-c6c7-44e3-803a-4d85f2a134e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5eb3c06-81b5-4760-b4f7-c1b427b9b4bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e390bb71-b032-4583-be21-7ae0db68b3b9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9f9a036-8986-4de5-82ea-6bb4970ea843",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cbfc7fb-349f-411c-9f14-067b71108207"
            }
          }
        ]
      },
      {
        "id": "c0b2ec44-5b96-4502-9abc-e96de99daa5b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c14127ae-6619-4e1c-89d2-9fea8be841fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "61c15cc7-6258-4d12-87da-051526e549dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cf423a4-35d0-40b2-8de1-06f0442655fc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9f92f4-9dd9-4ea3-be3e-b158e95b5534",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5e5e9a57-c91e-4f24-bfa9-74a506618fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f734a5-b6cb-4b5a-b6b7-f1d50992a497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9793e8fb-b4ee-4a64-a234-e24556f483cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0c10bc3-18ff-4441-ade0-bb5f82deb7d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1d451c0-fab4-4c84-8bbf-1c2a2bf6e3b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bce80e3-6253-4aa9-b7ed-c9937a093418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40bc99d0-c36b-42b7-b490-47b5e7c85e55"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1b9dc0a-0ab0-4431-afc6-e59f0ac5b2e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6d754633-618e-491d-890e-f1b2743ace49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60b1b263-aefb-4ea5-84f9-2fce987fdd4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d416363-389c-4cea-b69f-a0277652d830"
            }
          }
        ]
      },
      {
        "id": "5f19f810-93a5-4601-9ef5-9b00e5b12ecb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1a359f2b-f453-4cd7-b17f-7b3cf4748c53",
            "name": "Negative Testing",
            "item": [
              {
                "id": "750f63b4-b653-48d0-88c8-cf767ee6da9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "451ccb47-aa69-42db-b50e-33e0a39be8c9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd92761-7b48-418e-b7b8-2af3be1ef2fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d70ff5f2-9bfc-4a3c-bfc0-67139db7bb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3225b242-4b9c-4e1d-9781-24213cfc5863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a70ac245-0aa4-465f-b88b-297c873c7e7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b4ba433-3c05-49dd-a065-4cc3aa82f6b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b2d8c33-4b3a-4a99-b350-bb46be195fc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a17e660-c855-4e26-916a-c4f7576a93f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24483fc1-e0da-464b-85c1-eba068955b55"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9088df7-c583-4e52-8834-6101315d1b22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bb1ceb7-be4c-472e-9a9f-a207ae51476d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8451cd1-debc-46d0-994a-08e76bd2a7ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7be0b451-576f-4288-9fa0-0473f23bf1b2"
            }
          }
        ]
      },
      {
        "id": "036d33cd-f777-49ce-9348-970e4bf3937a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "910f3b4e-8f28-452d-9993-56e46312c04f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0c80799-a395-468a-be3a-e32e3ef64635",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ef8e2b2-da0a-4aa1-8a73-a9056b3a5feb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a39002-2eef-4547-8ed4-d29e2118f43d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f659deff-7d93-466b-a5a0-e7cdb27c0b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960271c4-8418-4a6d-b599-e0dedd2063f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12fbb859-5b42-4066-bc5d-ae701c9de6c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "632d4470-0e19-44c3-8dbf-74a235110147",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "714ba8ee-433f-4565-b620-cb45075b2035"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ff291aa-4517-4e95-930d-1874bb395c57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c8f6dc6-b1b3-4b4a-8195-e45ea445777f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85ed15e2-596f-4dfd-9d94-0f2481aa471e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c3013d83-c883-4893-bd0f-aa1708004a6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2cff0936-1891-4ebe-9866-04ac9490afd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6461cd09-3763-431b-b14c-4a5e23ceb1f5"
            }
          }
        ]
      },
      {
        "id": "9a9030c8-e571-4495-b671-22efdc78ba5f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2ffcf8c-8763-4a69-9ca3-ad896892b045",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ec8a9c4-5992-437e-ba87-f29ab6e594e2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e2a2812d-9e1c-4113-8803-1f4e475d6df2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8524d43e-df22-4b8f-8df2-c4fa6eb25def",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fc0ee3c-542b-4f27-a688-5c1d18ec495b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 393
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 11.130081300813009,
      "responseMin": 6,
      "responseMax": 310,
      "responseSd": 21.939480450375616,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685839715012,
      "completed": 1685839728059
    },
    "executions": [
      {
        "id": "429ab954-172f-4c95-98a0-b4a343a193da",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9a4f12ff-3465-45b2-8e5f-e29934b72faf",
          "httpRequestId": "d9e041b0-e05b-4f11-93eb-b85f6b97de2b"
        },
        "item": {
          "id": "429ab954-172f-4c95-98a0-b4a343a193da",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d9a94235-bbb8-4563-8ebf-c7cfee27f98a",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "1327ec6c-ea75-4ae8-a435-70cdee42c13b",
        "cursor": {
          "ref": "ecdbf920-e872-4495-bba1-67c6a09f7593",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "358971b5-ed58-4d8b-9f54-ca0cc9e745f9"
        },
        "item": {
          "id": "1327ec6c-ea75-4ae8-a435-70cdee42c13b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "925fb38f-454f-4402-ac0a-91daddbd0d3e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "dcc31a3c-6b5d-41c2-8c43-a632de624e6d",
        "cursor": {
          "ref": "ce00a12c-1ef5-4bbc-b03c-4d7cee4a42d9",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3888d38d-3a0b-4446-adff-05a340327c11"
        },
        "item": {
          "id": "dcc31a3c-6b5d-41c2-8c43-a632de624e6d",
          "name": "did_json"
        },
        "response": {
          "id": "fa504b4f-b495-421b-8e37-b50b12dce649",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eafac91-7f6d-44b2-80c1-d183cd3b5d38",
        "cursor": {
          "ref": "4d56b3fa-4cd8-4468-816c-174a2ad6583c",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae22fb5a-442b-4438-b130-dd2f6b2547d8"
        },
        "item": {
          "id": "6eafac91-7f6d-44b2-80c1-d183cd3b5d38",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1a0c3ef-b41c-4e78-900f-75c077370343",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6eafac91-7f6d-44b2-80c1-d183cd3b5d38",
        "cursor": {
          "ref": "4d56b3fa-4cd8-4468-816c-174a2ad6583c",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae22fb5a-442b-4438-b130-dd2f6b2547d8"
        },
        "item": {
          "id": "6eafac91-7f6d-44b2-80c1-d183cd3b5d38",
          "name": "did:invalid"
        },
        "response": {
          "id": "b1a0c3ef-b41c-4e78-900f-75c077370343",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "c458844b-2213-4838-9e7c-76436989ca9c",
        "cursor": {
          "ref": "5eac0707-c8d0-4406-9da5-e67192b2367f",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "41ed99c4-9cdc-403d-b219-99193cfe76d8"
        },
        "item": {
          "id": "c458844b-2213-4838-9e7c-76436989ca9c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7d31765c-059c-4fd1-83bb-22f7251c1cd5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "ac23d41c-f412-40ee-99e4-b14b2962f312",
        "cursor": {
          "ref": "b68df0f4-8bc2-4017-8de1-2d6eebe343c6",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "73b54a27-3b14-4867-8a58-da38d9d6aefd"
        },
        "item": {
          "id": "ac23d41c-f412-40ee-99e4-b14b2962f312",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "20c73959-6a14-4ecb-b087-21881d350302",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b4dcc5eb-177e-4257-8f36-9a5a490527bc",
        "cursor": {
          "ref": "73205ff1-5c41-4812-82ce-316d54aa84b6",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c28ad95d-f16c-4384-976f-6ac943f1e322"
        },
        "item": {
          "id": "b4dcc5eb-177e-4257-8f36-9a5a490527bc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c0afec7a-aeef-40d4-9896-721cef7b3401",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8873263-23d9-49e2-976c-461a03aa2e95",
        "cursor": {
          "ref": "3b48c3d2-3892-47be-b419-53f44dbbab9d",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4195074f-cedd-424f-8c69-acc3830990c1"
        },
        "item": {
          "id": "d8873263-23d9-49e2-976c-461a03aa2e95",
          "name": "identifiers"
        },
        "response": {
          "id": "ed02db47-4a6b-455f-929b-44bdc869bf46",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "24f70948-7f22-4bc4-8a4e-5a3abc28e2b8",
        "cursor": {
          "ref": "20a8a190-9bb8-40dd-8fb2-aabed1c883c0",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a3bd590-3ce3-4ed7-9d6a-031125ba8944"
        },
        "item": {
          "id": "24f70948-7f22-4bc4-8a4e-5a3abc28e2b8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5522e009-758f-4179-be61-8869d7a21f9f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "a07a0adf-aa75-47f4-83fd-d995677db63d",
        "cursor": {
          "ref": "e8846c99-6a17-49de-b95a-904b0f13def4",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8bdb05bf-d26d-4eae-a852-fd98677faeac"
        },
        "item": {
          "id": "a07a0adf-aa75-47f4-83fd-d995677db63d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "35f44c26-cbc9-42a6-bbc9-4cb33640a90b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "11d8b78d-7b88-4c81-b1fd-53de6413f4b5",
        "cursor": {
          "ref": "c7886234-a395-4fb8-8d0d-76d8509c986b",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4fde6e7e-7463-44dd-b861-c95374f9793a"
        },
        "item": {
          "id": "11d8b78d-7b88-4c81-b1fd-53de6413f4b5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9bfecff6-8cbb-4aed-8e44-946dcd2d4097",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "49f4c9e1-98a0-44e5-848e-ac0d0dcf2bc1",
        "cursor": {
          "ref": "27e44119-a5b1-406c-9fd0-7487b5b40fae",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "74e43d9d-bf68-4616-a839-8d9e336ec372"
        },
        "item": {
          "id": "49f4c9e1-98a0-44e5-848e-ac0d0dcf2bc1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "88c41e1d-bc07-4f2e-ad2a-6ca4caeb4159",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "824ebd3e-90c7-41a0-8d84-60a65c4ec3f1",
        "cursor": {
          "ref": "59c67745-6197-4ee0-b2a8-9020d6273a20",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4aecf3bc-2b84-4bd6-9f70-03a276eca1bb"
        },
        "item": {
          "id": "824ebd3e-90c7-41a0-8d84-60a65c4ec3f1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "51373b88-cc37-4d32-ad86-07feb5a41598",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "6f34d35b-56ab-424a-9cc0-9b22245016bf",
        "cursor": {
          "ref": "a1632810-c385-4553-a92a-190f434aef21",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8a17e44c-ba22-4105-8901-905d2dd1626c"
        },
        "item": {
          "id": "6f34d35b-56ab-424a-9cc0-9b22245016bf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "eacd2496-926f-4d51-9eba-879dab06a82b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "35a01398-76df-4c2d-b25d-309a5ed9b262",
        "cursor": {
          "ref": "d7c0b45c-6c9b-4a06-a36a-4945f08115b9",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fedee48e-2b72-4c8b-b0e5-806b4c40b52e"
        },
        "item": {
          "id": "35a01398-76df-4c2d-b25d-309a5ed9b262",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b17d08e8-93e0-4aaf-b688-c1d6a177b4e5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "2280efe7-856e-4a9a-acef-a5839004bb43",
        "cursor": {
          "ref": "93d59cc2-2efe-4834-819c-5dcbcc6386ff",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ed4949aa-8f8a-4a6b-b8c9-f0854253c856"
        },
        "item": {
          "id": "2280efe7-856e-4a9a-acef-a5839004bb43",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ab694c26-363b-4148-a463-f0e5a2a4261b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "5eba378f-a35b-4f1e-a9f3-7a989a4d551d",
        "cursor": {
          "ref": "0ea05574-0d4f-4929-a4ca-1f70d4b508a2",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7bc0c3d6-06f2-4cc2-97b6-625d2f4b36b5"
        },
        "item": {
          "id": "5eba378f-a35b-4f1e-a9f3-7a989a4d551d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9ed833e2-28ec-45c3-bcde-2feb78a2fff7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8e0c640b-abee-4e0c-b6c5-9faacb31dba8",
        "cursor": {
          "ref": "e59e1f2f-97ca-4fb9-8d10-4cc28a6c4e49",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "306d1daa-f303-405c-a7af-8e8952432740"
        },
        "item": {
          "id": "8e0c640b-abee-4e0c-b6c5-9faacb31dba8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8b9d25ab-2433-45fd-ab6c-51e7b485f652",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ba479fcc-382a-4a71-9f22-5a02c2b3a6c4",
        "cursor": {
          "ref": "f8c35ade-f351-4ac6-8ee1-d5dfdc14fa81",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fb08d1d3-55dc-41c0-b7f9-38bc84e65cfe"
        },
        "item": {
          "id": "ba479fcc-382a-4a71-9f22-5a02c2b3a6c4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6c7e620f-df75-4255-be55-3095eaa98d7c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "261efe4a-51b0-4dbe-bcf9-873f23f489e3",
        "cursor": {
          "ref": "f5eebe4f-7329-43c8-b741-9978a5e696c4",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9fc022a0-eaa4-4766-ac82-13acb938b620"
        },
        "item": {
          "id": "261efe4a-51b0-4dbe-bcf9-873f23f489e3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ed68563c-28ce-4c63-b4d5-018260aa0414",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "38225d61-518b-4459-a766-3ad41f5154e4",
        "cursor": {
          "ref": "2a733d94-696f-4bdc-8623-937a3d2b7c4a",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "93d1074f-a695-4ff8-ba39-94fbf2ffe468"
        },
        "item": {
          "id": "38225d61-518b-4459-a766-3ad41f5154e4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "69173668-9086-41e1-ab32-615c0c014439",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "03e01550-c1f6-4ae5-974f-426a843a40aa",
        "cursor": {
          "ref": "f3670a6a-e7c6-4eb9-9389-75ef1b566b39",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5ff8d50d-ed2a-4c83-87d7-3f438e01c67a"
        },
        "item": {
          "id": "03e01550-c1f6-4ae5-974f-426a843a40aa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ca3b0096-1bc5-4a6b-b5c2-0da2ee91c38d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e33118ad-d433-46fa-aa38-c3ad87275631",
        "cursor": {
          "ref": "95239ccf-52a0-4b0c-b8c0-d88af5bb256a",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3f5a43f9-fff2-4041-9423-2efd49aea501"
        },
        "item": {
          "id": "e33118ad-d433-46fa-aa38-c3ad87275631",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "975c7102-d7e6-4fd9-8f8a-b7ce4e9dadb7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1a45f460-e1c6-4fd4-b344-0379df7e6af4",
        "cursor": {
          "ref": "44a93416-be91-494e-a86f-b9f309af4110",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9e42693d-0b4c-443b-894c-bcee03f3b4a2"
        },
        "item": {
          "id": "1a45f460-e1c6-4fd4-b344-0379df7e6af4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4b3a039f-939e-44d1-9b9d-03a60eba8f1f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4e33f82f-3d53-4ef0-92b8-f99ada31a676",
        "cursor": {
          "ref": "f04d0f3b-f2cc-4023-8826-a483e9f485ca",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fec36648-e448-4da6-a068-1f66aab82d46"
        },
        "item": {
          "id": "4e33f82f-3d53-4ef0-92b8-f99ada31a676",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "12ee30c8-4aa5-4ddd-a9e7-ef19df1b4c35",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f356deec-67d9-4887-ad07-2bd3593bd139",
        "cursor": {
          "ref": "1ae5374e-f645-4b3c-bc5f-ebcb6cac2eff",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b53ea9bd-3c5b-4307-a0ea-277f07d641ff"
        },
        "item": {
          "id": "f356deec-67d9-4887-ad07-2bd3593bd139",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "79662e23-95f9-4059-9d10-2a7c1f76806f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "30e3d290-c39e-4b41-a4bf-50bfcf17e6fa",
        "cursor": {
          "ref": "6e1e7a11-7c39-450d-8435-25c435fe6b9a",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3aa884bf-250a-4bbf-8434-821cd1857957"
        },
        "item": {
          "id": "30e3d290-c39e-4b41-a4bf-50bfcf17e6fa",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "058d2814-2cc2-4894-a013-5ac822429c0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "42e24548-0ddc-409d-99d8-7daa66a6782a",
        "cursor": {
          "ref": "7014c2e8-eccb-4088-b9c4-8baa0320c93c",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "989665fa-0757-4ff2-b091-ee54ad8e0b34"
        },
        "item": {
          "id": "42e24548-0ddc-409d-99d8-7daa66a6782a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4a5a8a17-5a3f-4f0a-ba06-0bde7ce47ec3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "78422f8b-5687-4549-9d35-835bd914dbd0",
        "cursor": {
          "ref": "d85c15ef-59c8-4d4c-9ad3-c5c535ec52cf",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d4866b8c-49e0-4d4a-8fb3-43beac1dcdc0"
        },
        "item": {
          "id": "78422f8b-5687-4549-9d35-835bd914dbd0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "26a068e1-0148-4e69-863f-eb44e25aa6b5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "9ec3592d-1f28-48a9-b45d-2c08b2050d2c",
        "cursor": {
          "ref": "43b95817-0fd3-4750-8baa-4e2bf26e2615",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c2d04c74-47ac-4f7a-9813-4deee427cba5"
        },
        "item": {
          "id": "9ec3592d-1f28-48a9-b45d-2c08b2050d2c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "70929477-3129-4dbe-8bd1-97c217f83371",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5875781d-f033-434a-96ff-22ba8ad1a72a",
        "cursor": {
          "ref": "40632522-17d9-4d26-a076-ed1c859353bd",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0a01328f-50aa-4b42-9c5d-cd40a7f443d9"
        },
        "item": {
          "id": "5875781d-f033-434a-96ff-22ba8ad1a72a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d560af49-82ef-47f4-a428-c32cff5c2cb0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "9fa64765-6c68-4216-b79a-84a006fae737",
        "cursor": {
          "ref": "2b8a9a03-3683-4367-a85d-3583e554c7ea",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "372b86fc-51e5-4249-9a0f-da481a34b74f"
        },
        "item": {
          "id": "9fa64765-6c68-4216-b79a-84a006fae737",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bf77c71e-bfc6-4007-9a5b-b28f95889a99",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5fb55028-3871-4438-9593-5b2fa61d27d4",
        "cursor": {
          "ref": "50258cb8-78e9-40d3-b726-81a6905a68cb",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5bc2fe4e-5eb7-41a3-bd19-47987cfa3c8c"
        },
        "item": {
          "id": "5fb55028-3871-4438-9593-5b2fa61d27d4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "caf71aad-05d1-46e5-8f70-d8f2d436f9a9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "571709d9-284d-4515-9c40-3d24b7bf1db8",
        "cursor": {
          "ref": "fdee24ac-0516-4b26-8ca7-8661d6406c48",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "de9dceed-8d3a-4d48-8f9d-d327545741a9"
        },
        "item": {
          "id": "571709d9-284d-4515-9c40-3d24b7bf1db8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1e4a5c2e-e33a-483c-90ba-24be9f937a2d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "a64c7f4c-e950-46ea-8504-af681a199520",
        "cursor": {
          "ref": "69790183-8b06-4fc3-a52c-2be07cd59698",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "40dc1dd8-badd-4523-869f-137c37ebdcb4"
        },
        "item": {
          "id": "a64c7f4c-e950-46ea-8504-af681a199520",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "20b6e5e3-2955-49a6-a851-0173df3b5938",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "5dfe093f-9a0a-4a4d-a296-2bd916e0466e",
        "cursor": {
          "ref": "5fb6298f-895b-4c09-a267-d17c9d87aec7",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dec3e6fc-9271-4070-9dc3-c0e231bae1e7"
        },
        "item": {
          "id": "5dfe093f-9a0a-4a4d-a296-2bd916e0466e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cf46a8f7-8e6c-4e92-90eb-087616ab2b63",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c673f074-e70d-40d4-9cb0-7d1a4515126e",
        "cursor": {
          "ref": "513ae573-bf51-4cc7-acba-8cf2dcc9bdd2",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "51937379-f344-41ef-b1d8-fdc04da8e3a5"
        },
        "item": {
          "id": "c673f074-e70d-40d4-9cb0-7d1a4515126e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "282ff698-7c81-4303-b0c5-f4c0a7db8ee2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "db0fbca8-e98e-45f2-9555-a82e83c0d21f",
        "cursor": {
          "ref": "13fb2a4a-8489-4128-b152-16d34920df2d",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9cf88f9a-ae45-4da2-af6f-53a831b449b4"
        },
        "item": {
          "id": "db0fbca8-e98e-45f2-9555-a82e83c0d21f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5039c587-ddac-4bd3-99b8-a4a2af191b93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "7241e34d-55f9-407a-89a9-cdf972c3b254",
        "cursor": {
          "ref": "a06527d5-6b3e-466f-abc7-30eb8aa25054",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "13514727-4c73-4cc4-9b3b-9e931deab070"
        },
        "item": {
          "id": "7241e34d-55f9-407a-89a9-cdf972c3b254",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "42ba64c6-be56-4cfa-838c-a5b8b86e906d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6fd7787e-3368-4ce7-be80-775e428502bd",
        "cursor": {
          "ref": "689b7dfa-3f3c-4788-9889-f387ba2f1b83",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7cd2ee2b-fb2a-44e2-9e31-5016f1f9406d"
        },
        "item": {
          "id": "6fd7787e-3368-4ce7-be80-775e428502bd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "621a2902-1a8b-4b28-b2a1-b8e71baee93c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "be72d15b-0552-418b-9cd8-6f3534c09f0f",
        "cursor": {
          "ref": "8b3b7ae4-b316-4fda-a0ab-b3296d672d42",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "827fc10d-7a8d-4430-97b6-acbfdd5055c1"
        },
        "item": {
          "id": "be72d15b-0552-418b-9cd8-6f3534c09f0f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2f01afb9-aebd-408b-ba3d-15eb6538b4a3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e667843f-4c8a-41a0-a54a-0e4195307617",
        "cursor": {
          "ref": "d4d3412b-f4ab-46c0-9afd-72805fe00284",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3ae03ca5-9517-4c84-952b-74fbaa76ec08"
        },
        "item": {
          "id": "e667843f-4c8a-41a0-a54a-0e4195307617",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d2922b25-38a2-4c15-ad2d-1ae05a647938",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "21dcdef1-16d7-44a7-83ba-ee316b574c52",
        "cursor": {
          "ref": "c0cbad7f-fc76-41f2-b75b-92be4d405cee",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f151e28b-7300-4924-9685-cbb83327402d"
        },
        "item": {
          "id": "21dcdef1-16d7-44a7-83ba-ee316b574c52",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8e366163-9925-4056-b90b-54a1d63cc8a7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "49e14837-d8eb-43a5-83b1-82322c245ae7",
        "cursor": {
          "ref": "79b43b1d-147f-448b-8812-15bc354c66b5",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e7911055-b9f5-471f-91f0-89c3f2f9b6a3"
        },
        "item": {
          "id": "49e14837-d8eb-43a5-83b1-82322c245ae7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "512c1f9e-e921-4a1b-842a-0f6d8e9441cd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6760c3f5-f2fb-4b02-8085-339fb138aa9e",
        "cursor": {
          "ref": "b5158b91-1c10-4a7c-a5e2-b891f522fa1a",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "90ad7cac-1d6f-4338-abe7-64bc0f6d396d"
        },
        "item": {
          "id": "6760c3f5-f2fb-4b02-8085-339fb138aa9e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6786fbd0-7d8f-4d52-a59e-32e6cd5a862f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "20681500-ca56-486c-8f36-e2cce44f911d",
        "cursor": {
          "ref": "790cdc52-28bb-446a-8dc8-f5fcb5e82748",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "10772ad1-936e-48a9-8a83-3a3b53d21ccd"
        },
        "item": {
          "id": "20681500-ca56-486c-8f36-e2cce44f911d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8521cc12-aff5-4ea6-beb0-fe157e1bfe7b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6b949060-8f12-4d2a-ab47-d14508672bbb",
        "cursor": {
          "ref": "2537c3e7-caaa-4141-b013-02226c4c21ec",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1de1c4b0-c4d7-4362-b1bc-5bda22c6012c"
        },
        "item": {
          "id": "6b949060-8f12-4d2a-ab47-d14508672bbb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "337a7d89-b913-4fa0-837e-dfad8d612c9b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7f8cba70-2399-467b-b5fe-333c077d4c40",
        "cursor": {
          "ref": "124e71dc-e99d-492d-8b38-c4b4af12689f",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "68279de4-7558-4766-8f8b-4451b71d6843"
        },
        "item": {
          "id": "7f8cba70-2399-467b-b5fe-333c077d4c40",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4457cf2c-35f5-4df2-bfa8-730361ddddc2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a49b73d4-1244-4de1-8ce5-a7410d9d0d1d",
        "cursor": {
          "ref": "2d4c3228-4214-4676-9b42-3663e4ba27bd",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "244a177e-bc92-42f0-b202-cdc6f07bf13a"
        },
        "item": {
          "id": "a49b73d4-1244-4de1-8ce5-a7410d9d0d1d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8e378850-6b6d-41f8-9e1a-d952881ac257",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "72f7349c-a081-4552-8161-ce880dfa331a",
        "cursor": {
          "ref": "68be47fb-822a-4e94-a08f-8657b1b78b6f",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a965259d-1ebc-457d-86b0-a96a6d7e4b4b"
        },
        "item": {
          "id": "72f7349c-a081-4552-8161-ce880dfa331a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d192d849-4b6b-4c2e-a42f-153bd0f73cc6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9501b2f4-0ec3-4563-9148-ef55c523a2d5",
        "cursor": {
          "ref": "9f183651-4376-46d6-a8a9-bcfa1583f450",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "81fb364e-b955-44d8-96f6-f9cf8e095bf2"
        },
        "item": {
          "id": "9501b2f4-0ec3-4563-9148-ef55c523a2d5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "111547df-822e-4ad5-b477-d068f50fd83d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e5f7ffd-d1b2-4b89-a3ba-f0624aab3695",
        "cursor": {
          "ref": "28eae11b-45b8-419f-9542-25a766764a59",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fae098f2-10db-496e-b4c6-f36339411d0f"
        },
        "item": {
          "id": "0e5f7ffd-d1b2-4b89-a3ba-f0624aab3695",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "768f2e02-455c-4741-8e4b-7256aaeec6d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "acfbe034-05d1-4150-be6a-06253ee10874",
        "cursor": {
          "ref": "afc7123d-fead-4add-93a3-873d772e01b3",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6b343183-4918-4b2b-bbee-7593111ef193"
        },
        "item": {
          "id": "acfbe034-05d1-4150-be6a-06253ee10874",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4ac75f83-0b46-4478-b1c3-5365a3b266ba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0314d94d-9b14-4204-b555-e07e7ead83c6",
        "cursor": {
          "ref": "d9ad94ae-c535-426d-95f9-a6aedf61b31c",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3b9e0580-4f7c-497d-b06c-fc41e1dea1b6"
        },
        "item": {
          "id": "0314d94d-9b14-4204-b555-e07e7ead83c6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4924330b-80d6-47b3-aec6-6a9f31ef9ff4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "01b66798-b3bb-4984-9ef7-be2853d1da06",
        "cursor": {
          "ref": "c5a7a4ce-b555-4f22-907b-0c5f89e9a626",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3a322d84-7040-4501-b2b1-28fdc3ca6383"
        },
        "item": {
          "id": "01b66798-b3bb-4984-9ef7-be2853d1da06",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d44aab0f-9fbf-4616-8867-96054818a264",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "53a68dd2-75b1-4506-b449-b846fdd07d79",
        "cursor": {
          "ref": "fdf96ef2-b4c7-45c4-8fc3-b461141bafba",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "27e6ce35-ba86-4996-9b38-fb6dbc100bee"
        },
        "item": {
          "id": "53a68dd2-75b1-4506-b449-b846fdd07d79",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c52c6ed4-804a-4fed-91e5-b3a92f826820",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5d3e80f2-f55f-41f7-9a25-3b81b949a117",
        "cursor": {
          "ref": "57b90968-3cd8-4618-ac88-e2e3dfcdba4b",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1e9e06c7-e124-4068-90b2-7d9f5772d3c4"
        },
        "item": {
          "id": "5d3e80f2-f55f-41f7-9a25-3b81b949a117",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "50a64b62-e331-4eab-b103-4d00cfeea454",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ab9a6da2-6244-4130-8c15-c2fcc85daae2",
        "cursor": {
          "ref": "c80ac25b-e303-42d4-b7d7-70b08d001128",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29eb6767-6bdd-4b33-b7d2-fcc6396724f0"
        },
        "item": {
          "id": "ab9a6da2-6244-4130-8c15-c2fcc85daae2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8107eec2-09a3-49cb-8aea-84e928c45391",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "99c6a5aa-21c2-4ff2-8dd4-1d693c5386f0",
        "cursor": {
          "ref": "8c549243-4685-4d83-b9c4-57b8e5ff8c82",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0c5fb5a1-aa68-4657-980c-ca2380052cee"
        },
        "item": {
          "id": "99c6a5aa-21c2-4ff2-8dd4-1d693c5386f0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d448db80-0c8b-4304-bafd-132de2d45f67",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e2a9c99b-76f0-411a-86c5-9b327d133f56",
        "cursor": {
          "ref": "76b01519-9462-4633-b40d-72a6bf7b6d00",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "489217c6-e6dd-4da0-81f5-d0d1ce84c51f"
        },
        "item": {
          "id": "e2a9c99b-76f0-411a-86c5-9b327d133f56",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d86a183d-b7f1-4292-b610-f27ab56ecb02",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "9ba2d9e6-6127-4eb0-b217-715ad59f622f",
        "cursor": {
          "ref": "50c44be1-4af8-4b44-aeda-0a277f24355b",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9489094b-8a8b-42ce-acdb-ed26a011be18"
        },
        "item": {
          "id": "9ba2d9e6-6127-4eb0-b217-715ad59f622f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "404f7891-e700-4508-81e1-9dc1263f8401",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0285e227-f4c9-4a2a-a36b-33d23ea44b31",
        "cursor": {
          "ref": "c2f9032e-d844-4ad7-ba5b-d34ad1f989b2",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "32d717ec-4633-4a6b-9382-dd9f484a9d6e"
        },
        "item": {
          "id": "0285e227-f4c9-4a2a-a36b-33d23ea44b31",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8df3cc1b-32e5-4f1a-94a3-6b369dd832fb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "c2171e40-ab0e-4b0d-9493-f757bad32eab",
        "cursor": {
          "ref": "3031d531-39d3-4fd2-ad10-43d6a854f64f",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "51dfb4e1-917e-4e3c-ba89-b49a4e1c8d8d"
        },
        "item": {
          "id": "c2171e40-ab0e-4b0d-9493-f757bad32eab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6fdeb8a3-d755-41f1-a767-4edc5cb70c1d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "2b4d02db-c766-4755-ab2c-29c8829d190d",
        "cursor": {
          "ref": "a70ffe31-bb5f-4422-8b8c-b6ca52a9bce3",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dfd968a1-7648-497d-aa04-98c9f55be491"
        },
        "item": {
          "id": "2b4d02db-c766-4755-ab2c-29c8829d190d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "47a07b27-2010-4f66-b1c5-bf0fb2313fa3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "106015ec-ca9d-4d12-b23c-10d2b0194dee",
        "cursor": {
          "ref": "158c3e1f-6534-4051-a98c-929b92287952",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d9f393cb-4341-48f2-95c3-136f76d94b4e"
        },
        "item": {
          "id": "106015ec-ca9d-4d12-b23c-10d2b0194dee",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cfb8b5f9-69fe-4f5e-a3bd-24aa1cd455fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a3877aef-d1c0-4c8d-a4b0-c71686f1175a",
        "cursor": {
          "ref": "19377d28-84a8-4321-a08f-f41add997343",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "478fafd5-bb52-457a-8129-75639c760b78"
        },
        "item": {
          "id": "a3877aef-d1c0-4c8d-a4b0-c71686f1175a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "77da6757-dd2a-4603-b54b-375860fc0f3b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5936d82f-fa5a-4b1b-ac75-b59c85bc5b26",
        "cursor": {
          "ref": "f862ab42-ab17-47f0-bee4-b9307b95e338",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6cd9248c-6ed0-454b-84d4-a1337cae241b"
        },
        "item": {
          "id": "5936d82f-fa5a-4b1b-ac75-b59c85bc5b26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5f3d6030-b3ee-43a1-b0ba-98b0b968a806",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c0072cc6-3aa0-41db-a3d0-863895caabf3",
        "cursor": {
          "ref": "c02c75eb-7716-4818-af2a-ea55169296d4",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f97de5d8-3b54-406c-8e82-3854cc03ecc0"
        },
        "item": {
          "id": "c0072cc6-3aa0-41db-a3d0-863895caabf3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "93842f79-7aba-475a-a5c4-eca8aa2ba5e0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "efac3bde-0661-4819-8cfe-55b9b8ad7aa8",
        "cursor": {
          "ref": "9c6711b0-011b-497c-bbd1-b2cac0553c38",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0a976ab5-b6fb-4786-860c-c45022ea7ff1"
        },
        "item": {
          "id": "efac3bde-0661-4819-8cfe-55b9b8ad7aa8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5987673f-b749-41d0-9078-b3a16321ef24",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "480c5940-40be-49df-80e2-f9c5c1e234c6",
        "cursor": {
          "ref": "bd3f5b9d-c675-4716-8ea7-acbddc10ced8",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3abb8c91-4175-4706-9103-9a6ad6ff3933"
        },
        "item": {
          "id": "480c5940-40be-49df-80e2-f9c5c1e234c6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "db9b462b-d0b2-469a-92eb-584b178e948d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f1c0fcb9-241c-46f9-9cfe-ffd0d461b1b8",
        "cursor": {
          "ref": "0bc65481-d387-40e4-858a-24ff4717c2f7",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ab7e1f8b-69c3-48cd-b7a7-9081be0e6118"
        },
        "item": {
          "id": "f1c0fcb9-241c-46f9-9cfe-ffd0d461b1b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0c0335e9-caa3-48b5-98bd-6f62183fdd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 571
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb28da5-590a-4b72-afef-3010b84a52da",
        "cursor": {
          "ref": "f2459383-5ffd-4fdd-947f-f079cbd9840e",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f981a9a0-ee14-49ee-9451-6d69ef6b783e"
        },
        "item": {
          "id": "9bb28da5-590a-4b72-afef-3010b84a52da",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9919de1a-63e9-4255-9307-f3328d255e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 570
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca722b3b-4ec1-457e-9beb-0b01ef8a32f0",
        "cursor": {
          "ref": "9a3ade97-b273-438b-bfba-b002ac787879",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "370f0c72-3d77-4a57-91eb-0b6a6d6ff28d"
        },
        "item": {
          "id": "ca722b3b-4ec1-457e-9beb-0b01ef8a32f0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a08f4cb5-b5b9-414b-973d-0a71e6103129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 572
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6778ef87-29e2-4fb8-8fc8-3a33435e4c61",
        "cursor": {
          "ref": "5e3cee64-acee-4b4d-8f2e-eb360d1346a0",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5306f5d1-4e0b-48a7-86c5-98c4ecb37971"
        },
        "item": {
          "id": "6778ef87-29e2-4fb8-8fc8-3a33435e4c61",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c99c6c95-60cd-4b94-8132-0a02b4c3c5ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "e9ef9c9d-14ed-4604-bb5a-d4643ad910d3",
        "cursor": {
          "ref": "48077ac6-2bb1-4e9f-88c5-307dc35638bc",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f60eb3b9-e17d-4212-a6d5-4b7fe92842a1"
        },
        "item": {
          "id": "e9ef9c9d-14ed-4604-bb5a-d4643ad910d3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9af66309-9d01-4dad-9833-4c2a4e17e503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 572
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab4696c-4118-48e7-a56d-aec1e8ef9b87",
        "cursor": {
          "ref": "9eb37f68-af82-44af-9292-536087875039",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "882cbcaa-efd4-42f4-8d69-018259cbc6f4"
        },
        "item": {
          "id": "1ab4696c-4118-48e7-a56d-aec1e8ef9b87",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d7326fe1-6381-40fe-94c6-fd83b079753a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "88cadb69-51b6-460f-aec1-90397b81a351",
        "cursor": {
          "ref": "02c50a87-8053-4ac2-b2af-91c10abd6fcf",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c5ac8775-dcd6-420e-9447-0449783489ff"
        },
        "item": {
          "id": "88cadb69-51b6-460f-aec1-90397b81a351",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0f7611e2-79a6-4482-9bfa-1e46e2304c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5780be82-0d25-4550-aaae-31366477a83e",
        "cursor": {
          "ref": "2dae2f83-ecbe-4c75-ae3d-a00424cbd0b7",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6231e8c0-fb0b-4202-90a6-f342d44f3fd4"
        },
        "item": {
          "id": "5780be82-0d25-4550-aaae-31366477a83e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bc8640e1-37d2-4d8f-9005-95c49f037033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ff91c8-ca12-4984-a79c-3d1c868de1d8",
        "cursor": {
          "ref": "d86a481d-2c1f-4980-a305-b82d359010fa",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f3e2a900-0e96-4e78-9bf2-9b4b359a8395"
        },
        "item": {
          "id": "62ff91c8-ca12-4984-a79c-3d1c868de1d8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c9ea893f-4a83-4795-93d0-824e99c21ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25d740d-3e9d-47fe-b435-7ff309b1a7af",
        "cursor": {
          "ref": "51d0ab31-6517-4bc2-94eb-d3c448226c86",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "26a64dd1-70cf-4680-9223-107a567abc7b"
        },
        "item": {
          "id": "c25d740d-3e9d-47fe-b435-7ff309b1a7af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "aae0dd9b-cc77-42c3-887e-b10b4c63794f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "dd9b6acd-d1d5-4ec3-be27-d76e76020894",
        "cursor": {
          "ref": "ece783fa-70eb-4dfd-b2bb-f8dd5b3bf7aa",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2a9aba74-cf85-4acc-80fc-47be68bb65b1"
        },
        "item": {
          "id": "dd9b6acd-d1d5-4ec3-be27-d76e76020894",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ea1c2293-dc69-49ea-ae85-441ba908c472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a28372-7452-48c7-b302-6809cdef91d3",
        "cursor": {
          "ref": "a8b5a2ef-0c8f-4f12-ad06-cabbf8aef816",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "62cf25cb-e215-4989-b3ef-766dff09d28c"
        },
        "item": {
          "id": "97a28372-7452-48c7-b302-6809cdef91d3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5a260b5d-5a10-4a9c-be69-652cd82cf8d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d396377d-103b-4943-bc8e-dbac8953697f",
        "cursor": {
          "ref": "45e75d74-6182-4e65-b278-1dd49dc4f0a6",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "193685bf-2131-4c7d-95c0-5e84a3fde736"
        },
        "item": {
          "id": "d396377d-103b-4943-bc8e-dbac8953697f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ab4b987b-8ac1-4cdb-aab0-38ee1b36c9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bcd62e-e984-41a9-8e48-3196938ff628",
        "cursor": {
          "ref": "9ccb9849-86e8-4fd5-8212-d66e5c170811",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6c3587d6-0839-40d3-a78f-c5f1ac3eaae4"
        },
        "item": {
          "id": "d2bcd62e-e984-41a9-8e48-3196938ff628",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b72c09ac-db83-40fe-a6ea-e1e59a088681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd008d1-86d6-4bf3-b5a5-439930f0812b",
        "cursor": {
          "ref": "1baf5a50-ac6c-4073-b338-2b0c00a53aff",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "af45b845-66ef-455a-9d77-dd6f576976ad"
        },
        "item": {
          "id": "5cd008d1-86d6-4bf3-b5a5-439930f0812b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a38c8215-37ec-4f35-b7b5-6f85b3345ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7b979a-9cb5-4829-a37b-bc443336bac2",
        "cursor": {
          "ref": "775d0bdb-3938-4db9-892f-30ee3a4735d4",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a6916103-d006-45a9-8a0d-6b0f325a56bd"
        },
        "item": {
          "id": "7e7b979a-9cb5-4829-a37b-bc443336bac2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0aef365d-ff01-4798-9129-128e2dd402e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c94dd3e-35ae-494a-9b5e-a385523b1269",
        "cursor": {
          "ref": "daa8b3a8-cdfd-41d6-a8ca-30bb3c053f43",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "63d800f4-24d3-4998-8ed5-8a51e9117991"
        },
        "item": {
          "id": "3c94dd3e-35ae-494a-9b5e-a385523b1269",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0cc85f66-9f92-4a6d-a52a-6b17dedd789d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4205e2-2a65-42e7-aec8-9c834f275aec",
        "cursor": {
          "ref": "d1fa6cd0-86ae-40ab-ba7d-3eaca76d6304",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2310b171-8261-4aca-9b98-b92b416489dc"
        },
        "item": {
          "id": "cc4205e2-2a65-42e7-aec8-9c834f275aec",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d45bfd04-ae71-4ded-a981-2878fc5e16ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5dfc3b-dd7c-42da-b992-77919bf1c945",
        "cursor": {
          "ref": "f60ce419-d3f8-4202-999f-56a1a0049513",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "994cbac4-d018-43f4-82b9-b287aefc0b3f"
        },
        "item": {
          "id": "6e5dfc3b-dd7c-42da-b992-77919bf1c945",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d5b17974-fba6-4341-8095-861d81c73214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 402
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4d3337-6986-4394-825c-b9dfb01f4756",
        "cursor": {
          "ref": "509115bb-2956-4a7a-b4a7-420e8bff8608",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6cd5247f-f2f6-42e1-a0b8-88ce2c2c6ccc"
        },
        "item": {
          "id": "1c4d3337-6986-4394-825c-b9dfb01f4756",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0db8e809-5d01-4faf-a003-70d03a401a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 401
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e20e9a1-2577-46a6-81f6-c2cee895aa9d",
        "cursor": {
          "ref": "b9030e4d-d5dd-4558-83b4-6e3c2d8f5872",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "017fa26f-9dc8-4c9d-87f1-7b69eca8a617"
        },
        "item": {
          "id": "9e20e9a1-2577-46a6-81f6-c2cee895aa9d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2092fe40-3e6c-43b4-bd40-48abc71496b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 403
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5258a183-c724-4bd8-9e74-cb5b78003e6e",
        "cursor": {
          "ref": "9a6bbb3d-26b3-463d-97e2-12cfc8fc156a",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5262da7a-3acf-4302-b22a-3cdb5997df10"
        },
        "item": {
          "id": "5258a183-c724-4bd8-9e74-cb5b78003e6e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1dc5d29e-0d15-47eb-82bb-fd37758b0144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67dd2e72-74e2-446b-843e-9e727c68be82",
        "cursor": {
          "ref": "d6bdddbb-79f9-4a95-97ee-f5a5588202bc",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "84bd100a-4f28-4796-b870-c7c9bfdf2b96"
        },
        "item": {
          "id": "67dd2e72-74e2-446b-843e-9e727c68be82",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0b9bd53c-a51f-41d6-be14-11074263a750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 403
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f6d4f9-a1aa-4f26-89f5-0b4756d546bd",
        "cursor": {
          "ref": "aec8ad6b-2cbe-4542-bfc6-57dbddad6852",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b3a9405d-7512-4d09-ae23-66040146df12"
        },
        "item": {
          "id": "75f6d4f9-a1aa-4f26-89f5-0b4756d546bd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ad1edf33-2580-4ad9-a7d6-67feaea7835a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4782af52-df08-4524-ad3c-4d8699174c99",
        "cursor": {
          "ref": "fb52857e-1a38-4966-897f-35fb8a01032b",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f8bf9776-98ce-4afd-a2d7-b794aa4d5444"
        },
        "item": {
          "id": "4782af52-df08-4524-ad3c-4d8699174c99",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "38286c57-b1ac-4a45-9182-63aa5f88b5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cf3749-d9c7-45e1-bf29-96764c2aca20",
        "cursor": {
          "ref": "9271abb5-e4a0-4447-8e57-e558960e8fcb",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ce9e2b9f-61d1-474d-a85c-c56821835b53"
        },
        "item": {
          "id": "38cf3749-d9c7-45e1-bf29-96764c2aca20",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f67ca9d9-3dd6-4c15-b389-624dcaf065b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c48a657-f751-4753-98c1-7466a1f6c51d",
        "cursor": {
          "ref": "f3bd069e-f475-4b75-b748-b43cfca2a246",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d7b5db4e-f9cf-45b6-b435-e8bf1f1a7f2b"
        },
        "item": {
          "id": "3c48a657-f751-4753-98c1-7466a1f6c51d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1dd08c4c-2e69-49ed-aa75-786638925074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e700e22e-2a09-46f2-abf2-3e7dda4f81b4",
        "cursor": {
          "ref": "2dbf833a-b13a-42b8-a757-98215ada15dc",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "13d7b415-6f02-4380-bef7-e1d269c9c72a"
        },
        "item": {
          "id": "e700e22e-2a09-46f2-abf2-3e7dda4f81b4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5342d198-518c-4809-b972-cb03f392adac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "83606115-9302-4a2b-907c-52d7a5873ba4",
        "cursor": {
          "ref": "47495860-9b0e-4190-9a95-bb43dc072fc1",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "16d92f2a-0ebd-4a75-91fc-63bab4679a3d"
        },
        "item": {
          "id": "83606115-9302-4a2b-907c-52d7a5873ba4",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c828b454-eee7-40a5-a4ab-38f3eff1224d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa3d110-5a0f-486b-b7b6-d96b9dae8d3a",
        "cursor": {
          "ref": "d1d4dbf5-b488-436f-8129-c51cf4fde076",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "30c71bf4-a7b7-456a-b460-43754e4716bc"
        },
        "item": {
          "id": "0aa3d110-5a0f-486b-b7b6-d96b9dae8d3a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "df95095c-a8ac-4ff3-bf09-d6174463cd90",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "10c1d9a0-9aa9-4b3c-981c-d261ac32f6b1",
        "cursor": {
          "ref": "69f6e4db-11eb-4cb7-a2d8-dc0b7be50d96",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c1aa4dda-6264-43bc-9983-02e964e8d9e2"
        },
        "item": {
          "id": "10c1d9a0-9aa9-4b3c-981c-d261ac32f6b1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e7ab5f62-a36a-409d-8b3c-1c0422a2e039",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadb244a-63f2-4d1f-b13a-11110ffe8677",
        "cursor": {
          "ref": "484ffdd6-5dbe-4399-84be-d0810c4de656",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f3aabdde-a23a-4afd-8476-3e4e65cdaaa0"
        },
        "item": {
          "id": "fadb244a-63f2-4d1f-b13a-11110ffe8677",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f4544d1b-5879-49be-95f1-bc3c9f388983",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "d6d89b39-7128-4764-91cc-48d21a8a99cb",
        "cursor": {
          "ref": "9179dd39-90b3-4780-bdd1-4df76e8a715b",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c9d8776d-46e0-41fc-b99c-6ca8ea752a76"
        },
        "item": {
          "id": "d6d89b39-7128-4764-91cc-48d21a8a99cb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8c9d88cb-cb77-4257-8924-fafb8a06df3c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "88274a36-c70c-4de6-abbb-908fc6dd3e81",
        "cursor": {
          "ref": "db27db6d-f58a-4b2c-bc15-d060becb89f9",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6d938fb2-5a9b-4ede-9e5e-c41b93e3744f"
        },
        "item": {
          "id": "88274a36-c70c-4de6-abbb-908fc6dd3e81",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bf310d5c-0928-491a-be27-0ef986cb2997",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "6351fe8e-3077-40c3-98eb-c257eb190cea",
        "cursor": {
          "ref": "ae332acd-9c92-4f82-acf2-191bafb02159",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9fab1cd0-7d24-42f4-93bd-157eac1c8322"
        },
        "item": {
          "id": "6351fe8e-3077-40c3-98eb-c257eb190cea",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b0dc3527-03bb-4228-be5b-e9758f4c5fe5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5035a8d1-dffb-4783-8c49-4debfc7d66be",
        "cursor": {
          "ref": "5a5084ea-0c9a-4b43-9626-b8d9ce93aa2e",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "46e53c80-81ab-4093-a5ea-f23868c59ef3"
        },
        "item": {
          "id": "5035a8d1-dffb-4783-8c49-4debfc7d66be",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "473c3d10-cf27-4594-9104-0b2b3a783b2e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "4252f3d6-9d86-4abd-8352-6fb433682039",
        "cursor": {
          "ref": "900d9ed9-e75d-489a-a091-4832abde5d6a",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "358233df-3bdd-4bad-8907-8d015b6aaf58"
        },
        "item": {
          "id": "4252f3d6-9d86-4abd-8352-6fb433682039",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "361f8984-9959-451e-9ffb-b2ed1b3696c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "3afb246e-de5d-4cca-b343-504a0bb92613",
        "cursor": {
          "ref": "cec9938f-c420-4b47-8ec0-a441dba52643",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9dc53893-a2a5-4fc5-8459-610681f933e9"
        },
        "item": {
          "id": "3afb246e-de5d-4cca-b343-504a0bb92613",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1872d209-08d0-498e-9968-4633760f964c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8b032bcf-f0dd-4f26-bbdf-4c4f099a22e7",
        "cursor": {
          "ref": "f5195880-b26c-4655-a22f-1ecdbecaec55",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1583c7a0-e0ea-4cde-953f-151173de5717"
        },
        "item": {
          "id": "8b032bcf-f0dd-4f26-bbdf-4c4f099a22e7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ab4093c5-9bf8-40b3-84a9-61c889d165f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0462607-2954-4db3-9ab8-7399328c2525",
        "cursor": {
          "ref": "b685257f-b343-4b62-a2bc-11956e103d71",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "780d27c7-b314-41c2-b3df-ce8c8fdb306b"
        },
        "item": {
          "id": "a0462607-2954-4db3-9ab8-7399328c2525",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1e710ecc-f129-403e-a9be-3e00108ed0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33bfccc-75a8-4d41-a9b3-b2236917e15e",
        "cursor": {
          "ref": "f0fdee66-ade6-425f-9fac-abba709ef6b7",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "06da1638-e5c2-47f7-a582-c30759611a55"
        },
        "item": {
          "id": "a33bfccc-75a8-4d41-a9b3-b2236917e15e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13ae5c35-1f50-4a82-8b54-d8dfe5cc11fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf25ce6-6a84-4727-bfd0-3e2c78ae9b39",
        "cursor": {
          "ref": "f68d605c-c554-459a-8f84-a499ce49e0bc",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da7f44be-d734-4f87-9186-a30b82ed6842"
        },
        "item": {
          "id": "0cf25ce6-6a84-4727-bfd0-3e2c78ae9b39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "dac31828-1d81-4550-a92e-534e0a6d0e60",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "88c0279d-3df5-44c5-a360-b4af213277a4",
        "cursor": {
          "ref": "ac9afe93-4f59-4024-b3b1-b201222ec667",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c8574d17-edf8-4d36-b3e1-f17c0da04e8e"
        },
        "item": {
          "id": "88c0279d-3df5-44c5-a360-b4af213277a4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9065e23a-3677-4036-9660-b65ae868ed7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d81a784-d242-4cfd-81b2-3a139b10a61e",
        "cursor": {
          "ref": "dfbf6dc4-14fc-4a33-98e6-cc62ade7e728",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "814f4914-2995-451a-97dc-860177315512"
        },
        "item": {
          "id": "0d81a784-d242-4cfd-81b2-3a139b10a61e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "87c5614a-ad63-4e04-8789-7303f0838f3d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "069d4c87-bb22-451f-9a06-496940d26101",
        "cursor": {
          "ref": "546affc6-beef-469b-aef8-411751b8f311",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f7f6d687-8492-4613-a85f-73ce66aa43fa"
        },
        "item": {
          "id": "069d4c87-bb22-451f-9a06-496940d26101",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6cfd6122-35c3-43fc-a67d-d604950523da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 334
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a47f50e-421b-4c0d-9d5d-997f22a802d6",
        "cursor": {
          "ref": "930c6b0b-79c4-44b0-b893-fdaef5850819",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "73286100-0869-492e-918b-b7372896c2b7"
        },
        "item": {
          "id": "2a47f50e-421b-4c0d-9d5d-997f22a802d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2ae31150-b448-4372-b1b0-173186a7bf7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86225a9f-6d4c-45e5-ab5d-0f9a656bed81",
        "cursor": {
          "ref": "02c708d9-3b01-47a0-9eee-c3ce3cee1416",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "65f03bdc-7ee6-483c-af29-5370622cd0c8"
        },
        "item": {
          "id": "86225a9f-6d4c-45e5-ab5d-0f9a656bed81",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "74739a74-22c7-41d3-8750-d807b846f5b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c3a5a417-79d3-4a90-94f9-47788c4d435c",
        "cursor": {
          "ref": "f7bd95fe-4cf3-4f53-859e-2233b59a219e",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "abefc870-8a9b-4b58-9f8e-c349f0c7d108"
        },
        "item": {
          "id": "c3a5a417-79d3-4a90-94f9-47788c4d435c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "130faa07-1b9d-4692-a5f3-e68c69b4ffe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a918c59e-16b7-46c8-841c-f7c7a96e0814",
        "cursor": {
          "ref": "8ffadac0-899e-4acb-af0f-49675a271325",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "52644535-af6d-4a3a-8b9b-20cc9bdec508"
        },
        "item": {
          "id": "a918c59e-16b7-46c8-841c-f7c7a96e0814",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f1071677-afad-442c-ab2c-f892e73e3a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 336
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b827622-5d8d-48d2-b1ee-65ce80c0c45a",
        "cursor": {
          "ref": "c34a7c15-60e0-4e9b-bcbc-381d98ed7e91",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9a24ace4-8216-43f7-9d26-0644a06977f3"
        },
        "item": {
          "id": "8b827622-5d8d-48d2-b1ee-65ce80c0c45a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fba3aa26-d893-4d99-875f-447d2d712298",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0757802b-aef0-4e6d-96a8-928741f3db1c",
        "cursor": {
          "ref": "77b404f0-d01d-466f-bdc5-3480cc22c24d",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "40e633cd-40fa-4b90-a8a6-4b236a9b56c9"
        },
        "item": {
          "id": "0757802b-aef0-4e6d-96a8-928741f3db1c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e23b23c-d076-4515-bb14-d59b5a855778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6958cf-5178-4971-83be-e52ad29039d4",
        "cursor": {
          "ref": "7574cc3d-f015-4b1d-b7fe-42455e4c8159",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3cca3210-aab6-4fc1-9141-fa8a8ff507e9"
        },
        "item": {
          "id": "2a6958cf-5178-4971-83be-e52ad29039d4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "24b6c40c-152e-4326-8936-a848d1f95f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5028d026-4c06-4d8d-8f57-9c3054181030",
        "cursor": {
          "ref": "a730c395-2eb9-48e3-9b6d-2ee7eae1ae4c",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6b8784f8-2a9f-4908-a794-005f97ba6e92"
        },
        "item": {
          "id": "5028d026-4c06-4d8d-8f57-9c3054181030",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "34e1491c-0734-4cba-aeea-d40b8bee4279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4829b80-5be5-4e67-b588-4fbab328c77b",
        "cursor": {
          "ref": "6f14193d-30f8-44c5-88cf-fb67b8fee132",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "26befdf4-2edb-4b35-be94-c6a0c1e2a5b7"
        },
        "item": {
          "id": "d4829b80-5be5-4e67-b588-4fbab328c77b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9b414051-d9a9-4cc6-8eb8-aacdb31a77d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "41753b9f-5052-4288-8b39-9351cc1693e0",
        "cursor": {
          "ref": "1d87d15f-1422-48ad-8b4b-8c2fbfa628ce",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c8b528d3-e8e1-4c6b-84f4-4251ea80798d"
        },
        "item": {
          "id": "41753b9f-5052-4288-8b39-9351cc1693e0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e250884e-cde5-49cb-b57d-8ffc6965165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 539
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9470d89b-5785-4fb7-b4a5-1d23f11ddc78",
        "cursor": {
          "ref": "0413df3e-430a-42f8-9988-6c7635c1cd6b",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "95e7d6a7-c9a6-41ee-bc8e-01f83d083d9e"
        },
        "item": {
          "id": "9470d89b-5785-4fb7-b4a5-1d23f11ddc78",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dbe51e2f-510a-46f4-873c-56351a241ecc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "7223b595-bcd8-4caa-ac3b-b87203f7052a",
        "cursor": {
          "ref": "4c8288f8-b4ed-4ef5-9576-ba0337c1e25e",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "27f3b15b-c7f4-4030-80f8-138e359051d7"
        },
        "item": {
          "id": "7223b595-bcd8-4caa-ac3b-b87203f7052a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d221c440-cb61-4126-88a7-822dfd2a5e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 293
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82b2cdb-b7bc-4714-9041-5d28ae98f6be",
        "cursor": {
          "ref": "bbab9459-ca93-4f1c-abc0-d448458f141f",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0737cced-3844-480d-a5bb-014ea72e79cd"
        },
        "item": {
          "id": "b82b2cdb-b7bc-4714-9041-5d28ae98f6be",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "35b5aad9-2d2f-42f5-bade-7a521aaeee68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759fbe9a-2c2a-4f0c-8eae-eebd03c84535",
        "cursor": {
          "ref": "77aa3627-2cd6-4da7-af0b-4075c8cc9840",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6293b6d0-14bf-49e5-9b23-7a8325a25e8c"
        },
        "item": {
          "id": "759fbe9a-2c2a-4f0c-8eae-eebd03c84535",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c26026d2-1d25-4159-8d66-02cede9d51a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4aac308-54be-486d-9f34-4d400bfb1aa2",
        "cursor": {
          "ref": "975d3f67-9b71-44ef-b2b7-7828c05556a9",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "519cc681-fb7b-4493-86a8-285a85932ee3"
        },
        "item": {
          "id": "b4aac308-54be-486d-9f34-4d400bfb1aa2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c09a7699-5606-4d8b-b4e9-b412afabe52d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "bcf32a63-147a-47ba-b58c-9a5b18b56130",
        "cursor": {
          "ref": "8e1d6b07-1fe0-4251-9dec-199fa7084428",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "01f75e25-83b0-41da-ae08-dbbd6a4987e5"
        },
        "item": {
          "id": "bcf32a63-147a-47ba-b58c-9a5b18b56130",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6d8ce5fd-dd45-47a8-8caa-264dff68b6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7130c6-8a75-464f-91ea-e87dba0f0c95",
        "cursor": {
          "ref": "bf513a14-d658-4bdc-bb87-8932dcd43862",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "83e371ac-c3c4-4e74-86d9-4031d0d93a21"
        },
        "item": {
          "id": "3b7130c6-8a75-464f-91ea-e87dba0f0c95",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "60932c05-4e2e-46fe-aacc-437fdfdbc81d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "eb63eac8-fa8f-4bec-b476-21542d8dac5a",
        "cursor": {
          "ref": "ea237be6-3431-46c8-9f20-ab78c07036ec",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c6663065-3709-42b5-8fec-98234bc6f7f0"
        },
        "item": {
          "id": "eb63eac8-fa8f-4bec-b476-21542d8dac5a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c825b0db-54ad-46f3-9440-9a4dec070472",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c3474d65-4049-4817-bdcd-4b5c6464ba86",
        "cursor": {
          "ref": "a9c3d4b2-8f8f-46ca-821f-b8a9e1817b0f",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4483bdd7-17c2-4dcd-bf24-99133db26bb8"
        },
        "item": {
          "id": "c3474d65-4049-4817-bdcd-4b5c6464ba86",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "da5dee26-cc42-4615-85b8-42ba09077105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfee074-d200-4036-9d70-c7f8c3180497",
        "cursor": {
          "ref": "ab82e778-0677-4238-8049-a95d74e000de",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "268fe65a-e09e-4a63-adc6-e7798528c035"
        },
        "item": {
          "id": "6dfee074-d200-4036-9d70-c7f8c3180497",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "31469a8c-25bc-427d-8b66-f948881389da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 294
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adcc1f21-e51b-45c5-8e40-c81e3ebb060d",
        "cursor": {
          "ref": "edbc6172-c987-4aa4-b821-041be52bcd8c",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "80afe975-f2d6-4f80-9a22-00b29ee8baf0"
        },
        "item": {
          "id": "adcc1f21-e51b-45c5-8e40-c81e3ebb060d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0a3d4779-819e-47f6-a957-e1dbd4e5d87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 296
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec1db02-60bd-41a6-b72f-2fed9215af01",
        "cursor": {
          "ref": "03d6807c-b65b-4afe-a697-e184153a11f1",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b59d6b80-ff02-45a6-999d-b3077e5bbfcc"
        },
        "item": {
          "id": "fec1db02-60bd-41a6-b72f-2fed9215af01",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5e478ea5-f2a6-4551-9031-8e63c62a467c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fbad9e85-08af-4a38-bce6-2332a772b6cc",
        "cursor": {
          "ref": "ec7994d1-0380-4300-8b8e-c93478cf1676",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2f55485-30c2-46b4-80ee-3456ec84d5cd"
        },
        "item": {
          "id": "fbad9e85-08af-4a38-bce6-2332a772b6cc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7fbe46bf-7253-4a1c-8d09-42773011f1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 296
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325729b3-9543-4417-8957-7ee35ffa819d",
        "cursor": {
          "ref": "970d32dc-65e5-49e5-a3e1-82c2201b0f81",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c55503cb-7f18-44d2-ba5f-c12a886c704b"
        },
        "item": {
          "id": "325729b3-9543-4417-8957-7ee35ffa819d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c110d947-63eb-42fe-982a-a8fd3e648b51",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "df212d75-3bc9-41b1-8dfc-f49189f3bef1",
        "cursor": {
          "ref": "648b0275-7257-4271-bae3-a4fa480218db",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62e8069c-ca27-4acd-a30e-12dcbd15e55f"
        },
        "item": {
          "id": "df212d75-3bc9-41b1-8dfc-f49189f3bef1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "257f1d7a-313c-4f1d-b77a-51ebe3612063",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0b9220e-17e0-4a54-a913-2a9ae5dd8b1f",
        "cursor": {
          "ref": "e1fab8d5-4873-4947-bf6a-89ab1a4302dc",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "359a7adb-02ee-492f-9067-c8e11fbf1e75"
        },
        "item": {
          "id": "e0b9220e-17e0-4a54-a913-2a9ae5dd8b1f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "04545c80-67de-4410-96ac-6967df5fc798",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9bcd0767-1a5e-4d11-b1ee-ecc341236b58",
        "cursor": {
          "ref": "7fdfec6d-1d67-4ac1-af86-7fb0d74facf3",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6c900dcd-544c-4a2e-94ff-9185d5e11a97"
        },
        "item": {
          "id": "9bcd0767-1a5e-4d11-b1ee-ecc341236b58",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "135af571-ef25-4533-8fab-9f1a9b97e384",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "2de38913-30f3-44bf-8a30-d39b7728fe58",
        "cursor": {
          "ref": "bdea9bdc-6d2b-4508-a3a4-b2c73d06a3e2",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7e0a7e78-6d3d-471a-bd66-5d08dc4fe1eb"
        },
        "item": {
          "id": "2de38913-30f3-44bf-8a30-d39b7728fe58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1368bcdc-c28b-48e4-89a1-d472bbc55fc1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d14aab33-10ac-4689-8a56-52d5b7c0aa82",
        "cursor": {
          "ref": "c423824b-584a-406a-9080-ec8034f5cd82",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "132bbd29-35f7-4177-8ad5-3cc59da5fcaa"
        },
        "item": {
          "id": "d14aab33-10ac-4689-8a56-52d5b7c0aa82",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6809432b-abb0-434a-b2c9-cc2abc8a23b6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "35416651-cc33-47e9-87bc-dd7c64d9d7a0",
        "cursor": {
          "ref": "378556bb-f9cf-4feb-af92-e22f4ee26719",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9319fabe-0e32-444c-b774-8ac3ff672188"
        },
        "item": {
          "id": "35416651-cc33-47e9-87bc-dd7c64d9d7a0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e21c39e7-2f84-4c65-b6b1-546084d80827",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "bcffa396-03d4-444e-a795-ff6adf98f400",
        "cursor": {
          "ref": "d5dce749-4c49-40f1-81ce-aab768a4f685",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "44e1bda2-2cf5-4a78-9d0a-2f0317e5c349"
        },
        "item": {
          "id": "bcffa396-03d4-444e-a795-ff6adf98f400",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "35350d88-6151-43d2-915f-1c8dd2f175c3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "534d6bd2-63e8-4afb-a3b4-150bcff3c5c3",
        "cursor": {
          "ref": "12385eb7-27d3-4d7e-8d4c-e195ec74d3a6",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "54d64904-1cc1-447e-b374-a704c701f8bf"
        },
        "item": {
          "id": "534d6bd2-63e8-4afb-a3b4-150bcff3c5c3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "65bac08c-02ea-46b1-a3e8-e7e692ba16b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "740693e8-021a-4c99-a04c-4b0297fb5c1d",
        "cursor": {
          "ref": "6cc9d99a-69e5-40e9-8332-fd4d927fb3b1",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d7ebb4d5-bbae-4c84-830f-61952909c3c4"
        },
        "item": {
          "id": "740693e8-021a-4c99-a04c-4b0297fb5c1d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "79e0a909-edb0-4327-bb3c-8b16ebbec96a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "cbf6e17b-ff4e-4509-ab65-e895476d24ce",
        "cursor": {
          "ref": "da27b65a-d0b7-4766-a871-4f8aaa4f5718",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "de15de5b-c759-401f-9cb4-cbffcdf0eca6"
        },
        "item": {
          "id": "cbf6e17b-ff4e-4509-ab65-e895476d24ce",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ca6d6ee1-a15d-4fae-9993-d85e1ff8397d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "4cb29c54-b02b-40c6-8b94-9ee6b9d334ed",
        "cursor": {
          "ref": "70c01947-d09c-474f-8dcc-1d74f26e84e8",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5905baa3-1e11-4c72-b061-fa12701db85b"
        },
        "item": {
          "id": "4cb29c54-b02b-40c6-8b94-9ee6b9d334ed",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a0bf7004-3a65-45ec-9e35-4dfe7a980e9a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "ae294a6c-1f08-45a3-b9d7-8d25e9041b5a",
        "cursor": {
          "ref": "50743300-8a68-4410-9cd7-1c39fbdd937a",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "855daaa4-7713-4bc2-b961-fbb0fb755eb9"
        },
        "item": {
          "id": "ae294a6c-1f08-45a3-b9d7-8d25e9041b5a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7dd67565-c7b5-4758-a929-c2d1664ec0a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1ddda242-d5ec-460f-b05e-7fdda18af18c",
        "cursor": {
          "ref": "83427d13-c597-4ce4-a5b7-4b5a0990e7d6",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8866e8ed-5a21-42c3-b023-5792e1f6f7e7"
        },
        "item": {
          "id": "1ddda242-d5ec-460f-b05e-7fdda18af18c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9ccc1b30-5e3f-4243-94cf-f35ed55b8368",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4debacdc-aa14-4ead-8ec4-c81d6d1db6c9",
        "cursor": {
          "ref": "41250fc2-b496-47e3-86fd-093ea00b3aee",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "82995d96-0fe1-42d7-a69d-b3a9f3a49dff"
        },
        "item": {
          "id": "4debacdc-aa14-4ead-8ec4-c81d6d1db6c9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b0f21ae8-561e-4aa0-a63f-b335bd442c82",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "93228d58-f009-4659-9c7e-10ff3cf272d9",
        "cursor": {
          "ref": "58830ffd-0004-43fe-89e5-f25c2dd0cac4",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ef6f4dd7-efd1-453f-8741-793d1f0995bf"
        },
        "item": {
          "id": "93228d58-f009-4659-9c7e-10ff3cf272d9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "697b11ae-a0f5-4a83-8010-3d478e886811",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e217b29e-78d5-40cb-bdce-b152257363cc",
        "cursor": {
          "ref": "7770218d-7077-4035-bb17-e8da3ad60a9b",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a4fa1644-428b-4803-b414-4a7e3de464d7"
        },
        "item": {
          "id": "e217b29e-78d5-40cb-bdce-b152257363cc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "85aa7e10-4794-4947-898d-16ee8ec6b5d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "4640d79e-7d85-4c5a-a9d1-755c001a93b7",
        "cursor": {
          "ref": "59e4ab82-f1ca-4dec-9830-721993a4a733",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9f7d54de-03d0-4a8f-afcb-323693983556"
        },
        "item": {
          "id": "4640d79e-7d85-4c5a-a9d1-755c001a93b7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f0402b35-f5f3-4117-91e7-d3cc794d3963",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "5ff4fce0-15ad-4b63-af15-70aa43de72bf",
        "cursor": {
          "ref": "80d28814-65ce-4918-850b-40498d1bab48",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "914b18b3-9549-4936-908d-3a50189f18cd"
        },
        "item": {
          "id": "5ff4fce0-15ad-4b63-af15-70aa43de72bf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c834d5f4-87e9-4bd0-b4e5-45d51d01c649",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "22602f60-8ad7-41ab-a5af-239e3931b731",
        "cursor": {
          "ref": "5df4c8c5-f452-404e-b807-e7510f17e62a",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd26f9d7-6a1a-426e-808e-1de1bd38332c"
        },
        "item": {
          "id": "22602f60-8ad7-41ab-a5af-239e3931b731",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b669f9b6-e4c5-46ce-9d41-6547de353809",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "1f9fe3f4-46af-474c-8162-74d370ec6182",
        "cursor": {
          "ref": "05480faf-4857-46ab-bf19-da4e6f42075b",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a31515f4-32ad-43d7-8634-ae2bfededc23"
        },
        "item": {
          "id": "1f9fe3f4-46af-474c-8162-74d370ec6182",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "fca18c84-ebd4-4e31-a3bc-386fb669828a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d0e4d10f-1199-4d38-a212-243d3ff24e8c",
        "cursor": {
          "ref": "1a62301b-61ea-4064-b10b-30c6cfc929b6",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "201652a4-b039-4496-857b-4411e8be9568"
        },
        "item": {
          "id": "d0e4d10f-1199-4d38-a212-243d3ff24e8c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ae22aac1-0864-4607-9b8a-4e5487c5955e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "337459e6-1893-4b84-8300-4fe5f44989ec",
        "cursor": {
          "ref": "1d37a441-a86d-4e2c-b8e3-10dcb6219d27",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8919d8c6-403b-4d8a-8f95-c4570709b579"
        },
        "item": {
          "id": "337459e6-1893-4b84-8300-4fe5f44989ec",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4d39aa61-ac0b-460c-8709-86ceb56f68ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "13d829d1-455f-4abf-a972-607c3e234098",
        "cursor": {
          "ref": "a6593bfa-84ae-4440-8ce6-64766010fcde",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d343ab3d-57d2-4747-8e87-bd8a352b7aba"
        },
        "item": {
          "id": "13d829d1-455f-4abf-a972-607c3e234098",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6c121521-67b7-4835-9236-7f8cf990f432",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 28,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3fee788b-3a58-489d-8648-81320e309f55",
        "cursor": {
          "ref": "7bb707f9-8726-40de-a10c-99fc22c8536d",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5273e141-4f5a-44eb-bce1-15a16a960e28"
        },
        "item": {
          "id": "3fee788b-3a58-489d-8648-81320e309f55",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b5768d80-e5f0-44c9-a201-d4076b703c05",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "3e6917cc-4f3a-4195-9c21-e78ade568ab1",
        "cursor": {
          "ref": "b553ea0d-63a2-4a65-a2f2-3b54f11c5ece",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "aeddeadb-1462-415d-a680-16c4cc9c626c"
        },
        "item": {
          "id": "3e6917cc-4f3a-4195-9c21-e78ade568ab1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b4753a18-a75d-4b04-b421-cf67f18cef4e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "80967cfe-62da-4eac-aada-3e97390b9e71",
        "cursor": {
          "ref": "899c2173-540d-4173-96cd-fd60a88cbbdd",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "67479083-adf4-448e-ae21-7e7ed3da7772"
        },
        "item": {
          "id": "80967cfe-62da-4eac-aada-3e97390b9e71",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f36fb0e4-4d0d-498f-89f5-4cca709d2b1f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "a124230f-8258-4cc7-847b-b546ac05e022",
        "cursor": {
          "ref": "9fd16d31-5e26-4d18-bd33-393e02156d0a",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aa1706b7-13e1-4314-b48b-0a09205dabf5"
        },
        "item": {
          "id": "a124230f-8258-4cc7-847b-b546ac05e022",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1c775fb2-2621-48a3-a547-fc62647e894e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "7606e2e8-b738-4cd3-a041-4a8b66d58ee6",
        "cursor": {
          "ref": "538edc18-03a6-4d0a-905e-efaba8d35ee5",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "48573255-a3cc-46d1-87d8-b327a6b53f25"
        },
        "item": {
          "id": "7606e2e8-b738-4cd3-a041-4a8b66d58ee6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b6053a36-78f6-4feb-aa7f-5b67ff26cfdd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "601cb41b-8feb-4fca-b646-e8a0a48a4639",
        "cursor": {
          "ref": "00d25345-b6ef-4c3a-a9be-e45f275a63a0",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9e170cd0-1871-46fe-a116-06fba5b480af"
        },
        "item": {
          "id": "601cb41b-8feb-4fca-b646-e8a0a48a4639",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ebd3f766-ae01-4929-8b1b-c8c5aea2fb65",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "185a5115-ace2-4aff-aafd-cde36119a659",
        "cursor": {
          "ref": "c7556681-78d1-45c4-801e-51a2b4a47aca",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8be79a84-c99d-4175-b633-5ec819d3973e"
        },
        "item": {
          "id": "185a5115-ace2-4aff-aafd-cde36119a659",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bc97a429-446a-404a-ac64-e0b05426bf3e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "c011e4b6-6331-4aa9-83ca-df4d656497c0",
        "cursor": {
          "ref": "3a5f5261-3a81-4ece-9a8a-261f6a49a882",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "688c2978-ef6c-43e8-80d1-b5d07689491c"
        },
        "item": {
          "id": "c011e4b6-6331-4aa9-83ca-df4d656497c0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8d1d2d1c-5daa-4140-97d4-577569996e12",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "273afb0b-5711-4d14-97e1-fa1ed90bf20a",
        "cursor": {
          "ref": "3d76d4fc-fa78-4d92-873a-9b557f7fad09",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c0781fee-38e0-4a1c-b13c-204c6ecfda14"
        },
        "item": {
          "id": "273afb0b-5711-4d14-97e1-fa1ed90bf20a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "694ef726-ac76-44d2-9eb3-7c3b81eaf737",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "3d6fd2e8-119d-4418-b2f7-fca4efee06ed",
        "cursor": {
          "ref": "91fac85d-3ac5-4fed-ba84-087f02a86f87",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af6dba54-c36a-4bc6-bfbc-3d304222f4ab"
        },
        "item": {
          "id": "3d6fd2e8-119d-4418-b2f7-fca4efee06ed",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b410104c-9358-4a1a-aa07-3ac98f905f93",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b146d1d1-2e60-4611-931f-b5d2c022883e",
        "cursor": {
          "ref": "59a683c4-8f48-4e22-9515-164297ca4a8d",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c09d8269-d8ba-4ec8-af85-a641c8c89310"
        },
        "item": {
          "id": "b146d1d1-2e60-4611-931f-b5d2c022883e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dd8d6a78-98d5-40cc-bfb9-3ee4faeb8c54",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "0c2b273d-6790-491d-9d67-7ae62cd72c46",
        "cursor": {
          "ref": "57aaa43a-f4eb-4dab-b8a2-d1cc0304bcc5",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2ee75594-9a08-4e30-9041-eca2e49f94ac"
        },
        "item": {
          "id": "0c2b273d-6790-491d-9d67-7ae62cd72c46",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "aeab3d5c-0bc5-4d0e-9d83-f718073aa245",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a7e9b218-e3c0-481e-9c84-74f81383ecab",
        "cursor": {
          "ref": "b8d699f8-916d-429d-a7b9-8818c04f78f3",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "194bdc89-446e-4324-acbd-d435e7e67773"
        },
        "item": {
          "id": "a7e9b218-e3c0-481e-9c84-74f81383ecab",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2ba76ce1-1111-4c3d-8fe6-34ee52b73032",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "55f8d44b-c5e3-4001-85d5-f606db0db7d7",
        "cursor": {
          "ref": "a0030faf-5cdd-4210-8653-7bd6eec7c19a",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "35bba2f5-9eb6-4ad7-9ce8-d0ec3f8e3fdc"
        },
        "item": {
          "id": "55f8d44b-c5e3-4001-85d5-f606db0db7d7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2c0bf420-251e-4247-b4ac-a6a67dc6f0d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "75b8f204-848f-4320-a5c6-0864e6977222",
        "cursor": {
          "ref": "fb55e722-e54b-41b1-864b-6e71e790d93e",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0714a18a-235a-42b1-b869-bea6e14807c9"
        },
        "item": {
          "id": "75b8f204-848f-4320-a5c6-0864e6977222",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4ff6f5f6-0012-41ab-9471-beb066811a49",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "3debb80e-82ef-482f-9d1f-0fb6d7dadc87",
        "cursor": {
          "ref": "5608869b-8d07-4549-b88a-e0f19f478ddf",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a932727e-5ffd-48b6-a31a-e7feba6205d8"
        },
        "item": {
          "id": "3debb80e-82ef-482f-9d1f-0fb6d7dadc87",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "05ae07a0-b0c2-4650-b7d2-6475b45a902f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "7ea15974-e53c-48a4-bf26-dbd9ba4fb93e",
        "cursor": {
          "ref": "7b1e5383-62bf-45e1-a82b-1a5ffa597347",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "53c93fbc-3129-4b86-9571-aaa98d404864"
        },
        "item": {
          "id": "7ea15974-e53c-48a4-bf26-dbd9ba4fb93e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ac954927-193f-48d7-a091-ad3e3c1b0b02",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "8a0b3e3e-a3ba-4c4f-af72-e4e133b27464",
        "cursor": {
          "ref": "22e38728-41b9-4eb3-b535-70a60057b91f",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3c4b38c7-8683-4d5a-b9ac-fef64f0f8681"
        },
        "item": {
          "id": "8a0b3e3e-a3ba-4c4f-af72-e4e133b27464",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ed2b6606-1335-406f-b8be-78de3d9fcf03",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "975cb9d4-21e8-424c-b967-4e800e906df0",
        "cursor": {
          "ref": "8cb7424b-c797-401f-8333-474e93a249f1",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "25001187-7fcf-4a7d-9216-3ac29665c438"
        },
        "item": {
          "id": "975cb9d4-21e8-424c-b967-4e800e906df0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be9c44b9-22a9-454c-816e-e89920639c91",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "f1ee7b52-3045-4172-94f5-9e9b5e5f8543",
        "cursor": {
          "ref": "683c3141-e178-421e-875d-5fde73eacaa4",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "26ca0bbb-6b66-455f-afde-7849e6822ec5"
        },
        "item": {
          "id": "f1ee7b52-3045-4172-94f5-9e9b5e5f8543",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ef16bec3-e588-40a7-bba9-9d0e33671625",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3a6e924-84ef-4e21-a893-43b40c64e288",
        "cursor": {
          "ref": "b1c11ef5-b444-4004-8afd-6cb63e0062b9",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ffac541b-ed74-467b-91f5-48744660953b"
        },
        "item": {
          "id": "e3a6e924-84ef-4e21-a893-43b40c64e288",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e0154da5-53b4-4bd2-a492-b8313c9091f6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "7e210fbe-c723-4f01-9187-5e4bac338e5f",
        "cursor": {
          "ref": "fcdd3fff-ac8a-455f-83d5-1be98b5202ed",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "19e7485d-93c3-4b84-a9ce-7737d2ec22ec"
        },
        "item": {
          "id": "7e210fbe-c723-4f01-9187-5e4bac338e5f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6fa2de4d-3b88-49e9-af73-10d7a0606f40",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b5a005a9-9602-4475-9de3-b3e5ef7124cb",
        "cursor": {
          "ref": "39f19951-ef90-4225-b52b-ab28d45675bb",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1bfd7f71-50a7-4cd6-8b29-5d01988c7584"
        },
        "item": {
          "id": "b5a005a9-9602-4475-9de3-b3e5ef7124cb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e8932fb8-4791-4a69-9e3d-0dc25a83f735",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "6c790795-b5d5-46d7-b70d-80b2a298fb8c",
        "cursor": {
          "ref": "7ec5d9ed-70d4-42f6-aae6-3a179c338610",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5bc25c28-1d46-4bf6-bac4-503b5c2f3f21"
        },
        "item": {
          "id": "6c790795-b5d5-46d7-b70d-80b2a298fb8c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "87004526-6ef6-4332-88ca-4d4e6a0da125",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "75034270-1d1c-4df2-a825-30d11b6a3326",
        "cursor": {
          "ref": "0c7265e1-3334-43df-81fd-951d82e5a491",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fe561763-fcf2-49fc-afe6-32f16e8da95f"
        },
        "item": {
          "id": "75034270-1d1c-4df2-a825-30d11b6a3326",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "15ed5651-eac4-4a15-8408-f1bc50021d3d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "33fee48b-8530-45e4-bccd-371f15dd6990",
        "cursor": {
          "ref": "5a64985b-1706-49bf-be3f-edc52914dadd",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "086e91b9-053c-4bb3-9571-ee0f2be9c7a7"
        },
        "item": {
          "id": "33fee48b-8530-45e4-bccd-371f15dd6990",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2244fb7c-8963-4c7a-86a0-fe106373b690",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6939dc3c-5e11-47a5-b5a6-3f91472c49b6",
        "cursor": {
          "ref": "fe39d42d-dfcd-4643-bf7f-430db863b501",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bf0df200-70e9-4c82-8289-559dbd862095"
        },
        "item": {
          "id": "6939dc3c-5e11-47a5-b5a6-3f91472c49b6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d6bbd503-bd45-4191-974d-906ed5e9a062",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "928df268-a18a-424d-82c1-a7419fcae4c6",
        "cursor": {
          "ref": "2766cb3a-358a-4e5d-9e7f-09ef1b4b7526",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "95ff667a-fd2a-4b4c-b970-6867c8f21dee"
        },
        "item": {
          "id": "928df268-a18a-424d-82c1-a7419fcae4c6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d07d4942-fe2d-4d65-8833-a8ce7ea56c4d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e55dbb39-2f6a-47fe-a459-07f02f5f8e05",
        "cursor": {
          "ref": "b25b7f4a-1685-485f-918f-4884f7b24c34",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "26fbbcc6-eb69-4102-8fcf-488f05b64a1f"
        },
        "item": {
          "id": "e55dbb39-2f6a-47fe-a459-07f02f5f8e05",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e596f4a6-48ab-4b59-8741-76863d91c45e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "5eda5e64-26a3-438f-b8d7-72166f93530e",
        "cursor": {
          "ref": "3a1c18e6-1f12-4bcb-ac27-a7bcd9d58cdb",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aa32cbf7-f607-4256-8607-a81f7798f1d8"
        },
        "item": {
          "id": "5eda5e64-26a3-438f-b8d7-72166f93530e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "db8de70f-95c8-497c-9e61-a5e8454641c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "fbc8b1ff-fd98-459e-b457-fe3893a44cef",
        "cursor": {
          "ref": "cc8d4d60-705a-4cf2-9847-90e5b395808b",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e866c6ed-1e7f-46b5-8efd-fd81ee7c365e"
        },
        "item": {
          "id": "fbc8b1ff-fd98-459e-b457-fe3893a44cef",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "45651e29-9dd4-4c1a-90a4-b646de3d144d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "0788879e-5824-4894-9203-ee904b98e162",
        "cursor": {
          "ref": "b2a493bc-dbdd-4278-8b7e-100310917c5c",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "be9669d7-e98b-4f46-b30f-34eeeaa9e351"
        },
        "item": {
          "id": "0788879e-5824-4894-9203-ee904b98e162",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "817c8d46-f234-4394-9c3a-035d82e02900",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "7e5f9943-485c-4110-a9fb-00e82b83ab9d",
        "cursor": {
          "ref": "6937f2b0-fe7f-4a72-bdf4-4a2171a8ac42",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fe3bd540-8066-4d57-b4d2-7f4e5faf1e88"
        },
        "item": {
          "id": "7e5f9943-485c-4110-a9fb-00e82b83ab9d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "24877945-44b2-4144-812b-6e997209e575",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "05a0221e-aca5-45e6-8146-6324fad5b7fb",
        "cursor": {
          "ref": "67504f6f-073d-4b7c-879b-e426456deda4",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f727fa07-85eb-4f18-a0a7-8f13fdfb1c29"
        },
        "item": {
          "id": "05a0221e-aca5-45e6-8146-6324fad5b7fb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b2fef41f-35d9-4061-b584-79b9feba2e17",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b86cc0ce-9285-46f6-9d6d-f5a77df24316",
        "cursor": {
          "ref": "52090693-c0f1-4cfc-8620-f575dfd6b5fc",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e3fd3fe8-78c5-4ca0-92a6-403afbdfdf35"
        },
        "item": {
          "id": "b86cc0ce-9285-46f6-9d6d-f5a77df24316",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fc801c6c-8baa-496e-bbd0-af81fe72e070",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e265cf8e-8ac4-49ee-ad2b-25cb26e8dfbf",
        "cursor": {
          "ref": "8278d9cb-1cfe-41be-8f2e-9bac28a3248a",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d62826af-0d04-4cb6-b851-4037c686669a"
        },
        "item": {
          "id": "e265cf8e-8ac4-49ee-ad2b-25cb26e8dfbf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "62deb3d7-26d9-431d-8d96-388a0f9c3bf0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "4e5cde7b-8082-4ef5-864a-dc5d9d622a4e",
        "cursor": {
          "ref": "12cbc2d5-670d-4a89-a4f6-14cc09be6639",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "aa4fc6d1-87cd-4446-8ad0-b0fa9ef0b281"
        },
        "item": {
          "id": "4e5cde7b-8082-4ef5-864a-dc5d9d622a4e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "36d04abe-4cc8-4208-a11f-484d8f730a07",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "55992382-c00e-4544-afe0-97fff4d8945d",
        "cursor": {
          "ref": "ff4b5dcb-dde4-41cc-b7cb-a5c6695ac630",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c8c20750-bf17-48e8-bf0c-1c867e1d41ed"
        },
        "item": {
          "id": "55992382-c00e-4544-afe0-97fff4d8945d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "28721f11-547c-44dc-8595-0748f36cea31",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3324af07-4a9d-4e54-87a4-e4b344cbb599",
        "cursor": {
          "ref": "1dec5c8a-fe45-4f1a-87e0-e97625094942",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6f69d266-0e4d-4d13-b10c-199c7fcf5298"
        },
        "item": {
          "id": "3324af07-4a9d-4e54-87a4-e4b344cbb599",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5423ef30-7f9c-41fe-adfa-9d7aa5aafe1c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "f4d77daf-3d3b-44e5-905d-18d0497b4772",
        "cursor": {
          "ref": "4ba15d1a-e176-4e23-9a03-1aa63aadcc19",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0b8f7f27-abdf-4c78-b091-289ecc01241a"
        },
        "item": {
          "id": "f4d77daf-3d3b-44e5-905d-18d0497b4772",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a7b2141b-8b50-48a4-b59a-128656ad64bb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "14f97d83-a79d-433a-a9f4-b8c3097f8370",
        "cursor": {
          "ref": "7eb6be7b-7a02-402f-8c35-aad61d0a22b6",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "68e7e542-ea5e-441c-a270-f609b13a1188"
        },
        "item": {
          "id": "14f97d83-a79d-433a-a9f4-b8c3097f8370",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3510fd0a-2f2f-49f4-a180-617222d9b32b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 162,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "4d7136fa-e32e-4096-a2ae-eda9c5be9d91",
        "cursor": {
          "ref": "dc50968c-1d8f-4784-a953-1b5345ebb1f7",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "74d6efb7-fd4d-48fb-8fd8-6cf8134d3d60"
        },
        "item": {
          "id": "4d7136fa-e32e-4096-a2ae-eda9c5be9d91",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "52365d0e-8d2d-4d35-8f79-a3c471a250c4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 17,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "aa3c86ac-4d53-4881-8b83-58261364ba17",
        "cursor": {
          "ref": "204d5ed7-b447-4104-b9de-5e472d1a77d2",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1c58765e-9022-4bc2-aab3-b296571b5b92"
        },
        "item": {
          "id": "aa3c86ac-4d53-4881-8b83-58261364ba17",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4120c318-3687-4a64-bfa5-a90455187edf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "abbff9ef-7ed8-427c-99b2-c9fa519744f7",
        "cursor": {
          "ref": "b2636879-785a-41e4-90d3-03dfbe62854d",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "08b7a89e-00bf-489a-bb69-2f1de14eb531"
        },
        "item": {
          "id": "abbff9ef-7ed8-427c-99b2-c9fa519744f7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2a0037b7-e390-493f-b8e5-b4a79f4b8900",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "03034f75-3966-4651-adbc-50a525ff0c0d",
        "cursor": {
          "ref": "b8f3fef5-ab32-425a-9e8d-806b21582d97",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "380048d3-b62e-40cc-831a-475f55cfe9fc"
        },
        "item": {
          "id": "03034f75-3966-4651-adbc-50a525ff0c0d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e077a180-f53e-42f8-a374-44bace170c8b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "755b9733-0ccf-4eb6-aebe-ff85c87b7d4b",
        "cursor": {
          "ref": "7b19355e-65d4-42fa-bd53-3df7d96234dd",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c9aec2bc-f6e0-4817-b59e-5165b7d72641"
        },
        "item": {
          "id": "755b9733-0ccf-4eb6-aebe-ff85c87b7d4b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9b1a6c25-d929-415a-b99c-515bff5ee091",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "da797787-c807-4a01-930d-1b3d843de89d",
        "cursor": {
          "ref": "cfedddc6-7993-47a0-adb9-c22fa59e9a07",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "69cc7f52-8f6c-4d04-a74b-54afba87ef85"
        },
        "item": {
          "id": "da797787-c807-4a01-930d-1b3d843de89d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2aa587c0-ac03-43ad-a141-a6f518b90291",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9a941840-5142-4c12-9284-77eeab037fa0",
        "cursor": {
          "ref": "fc449913-d8b3-4c3b-9c24-a7e072100658",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "35004ee6-e2d8-494a-ab7a-dfc802743e84"
        },
        "item": {
          "id": "9a941840-5142-4c12-9284-77eeab037fa0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "23817452-4a07-4bfd-8cc2-8ab782647884",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "9c2ed8e3-ee21-4c71-a189-def2fc760d1a",
        "cursor": {
          "ref": "d52eab86-2665-48b5-b4f2-ccf6a8dcdfec",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "592972c7-c0af-49b5-842f-6756ac52958a"
        },
        "item": {
          "id": "9c2ed8e3-ee21-4c71-a189-def2fc760d1a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "73cad6b0-14f3-434e-b039-3840b9ade83e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ec78a763-febe-4f38-83f6-b2aa5a64985e",
        "cursor": {
          "ref": "d2c7b2fb-5429-47b2-994a-b78bfb26890c",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a678553d-8c9b-469a-b8fc-35b48fb0cb2c"
        },
        "item": {
          "id": "ec78a763-febe-4f38-83f6-b2aa5a64985e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "52ac51d6-a8ff-43dd-9f10-3db69691592e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "9e014a26-6eb4-4a5f-91a5-467d6777b001",
        "cursor": {
          "ref": "ddd3a741-5933-428e-b7cd-c19ed8da21ea",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "de468469-6e28-4ea6-b69b-d276b4111428"
        },
        "item": {
          "id": "9e014a26-6eb4-4a5f-91a5-467d6777b001",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "106ec4ae-20b2-40e7-a101-11ec22ae82d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "e2182e77-ab81-415a-b7c7-e206c255cad2",
        "cursor": {
          "ref": "f1a6710d-e7d7-4863-8465-0f9ea0f5f864",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "21502bd3-5d01-49c5-8529-49516631b7a8"
        },
        "item": {
          "id": "e2182e77-ab81-415a-b7c7-e206c255cad2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e5964f38-4ad0-4203-99df-c6f66758788d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "88411a44-54dd-44f5-bfec-8229ec4409a0",
        "cursor": {
          "ref": "b8296403-3b38-4bac-9b7f-52cd21639434",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "396ded09-a4de-4dda-8606-87c9d608c483"
        },
        "item": {
          "id": "88411a44-54dd-44f5-bfec-8229ec4409a0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4d2079a7-5aa3-4a1c-ae4b-0e4f1befd0eb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "477344f0-93b8-45ac-a084-c8bb379e9722",
        "cursor": {
          "ref": "b55a8bab-b511-4819-92a9-3d7ce80eb622",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c7bdde54-e755-4193-bd0f-b9c99915d064"
        },
        "item": {
          "id": "477344f0-93b8-45ac-a084-c8bb379e9722",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "867d67da-b0b4-44af-8f83-df54ad417a0e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "53d303a1-a682-4449-9ed0-d9c438a779ce",
        "cursor": {
          "ref": "13d45dd6-0654-45fa-a8d6-907da9e65967",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d45eab18-1169-46a4-a896-796f03fb88ec"
        },
        "item": {
          "id": "53d303a1-a682-4449-9ed0-d9c438a779ce",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "34a89faa-c1b6-4b47-b139-caf75c1ce598",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8f2e904a-c263-4bdd-920e-01d8ecbdb810",
        "cursor": {
          "ref": "a9a03d57-828d-43ab-9c12-ff5b0e22f3e7",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "13015ac8-624b-4127-971f-79f3f6d3921e"
        },
        "item": {
          "id": "8f2e904a-c263-4bdd-920e-01d8ecbdb810",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "668127e9-0134-4c2d-b11d-8b8443a146ba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "04595ae6-25ce-4527-ba04-c7f8bc544dd3",
        "cursor": {
          "ref": "1f5df81d-193e-4ca5-a464-f858008b67ec",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b948c3c3-8a28-4fcd-8160-737bb0536942"
        },
        "item": {
          "id": "04595ae6-25ce-4527-ba04-c7f8bc544dd3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a55a9e80-93f1-470f-a589-e756b4e18c8e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "eb033cac-0610-46f9-8127-b012f72fbd37",
        "cursor": {
          "ref": "b92b8a35-b9dd-490c-80c1-93be0b9a10c5",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "124c3572-2ab9-4a38-af30-20180aa009d0"
        },
        "item": {
          "id": "eb033cac-0610-46f9-8127-b012f72fbd37",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2ed035a4-3e3d-4fa7-834b-a5419f2f4265",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "32fd4fea-6be4-4ca9-984a-4ff9d0694d8b",
        "cursor": {
          "ref": "d0e135f8-da64-4edd-8a16-cce77539351d",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5fb49509-1746-4e09-86ff-0c6deb1d1915"
        },
        "item": {
          "id": "32fd4fea-6be4-4ca9-984a-4ff9d0694d8b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ef350c0f-bbcb-4f0d-9355-0a5a72678aa3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7ba6b500-4d82-4683-96d0-26001ce79052",
        "cursor": {
          "ref": "5f426124-6408-4759-917b-89fb73b38329",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a4e2f37e-897d-4646-9eb2-c9d4f84ae262"
        },
        "item": {
          "id": "7ba6b500-4d82-4683-96d0-26001ce79052",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "997d540a-9eba-4110-96b1-3c5c74208075",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "d6ee4603-48c4-496e-a7b3-9f0cb64b5dac",
        "cursor": {
          "ref": "ec8a9306-1dd4-4599-9287-507283f16803",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d421e18f-5b94-4693-aba7-4eaec27c5832"
        },
        "item": {
          "id": "d6ee4603-48c4-496e-a7b3-9f0cb64b5dac",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4f526fab-45eb-47bd-b986-4cb434684458",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "67696c79-58cd-4b51-b61f-6fff20b6e122",
        "cursor": {
          "ref": "24686d13-af34-42a9-9789-7a53c2c23669",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0b08017b-e436-40ea-ab8a-37c867222490"
        },
        "item": {
          "id": "67696c79-58cd-4b51-b61f-6fff20b6e122",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0dbda859-7d1c-41e7-b56f-01d4c56fba05",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c1076723-1b39-475b-ad17-cca4e76e66ad",
        "cursor": {
          "ref": "ee7ea77b-5be3-471c-a8dc-d75e7f7a33ff",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "873cedd9-c00f-4dec-b5d9-ecac1ae613cc"
        },
        "item": {
          "id": "c1076723-1b39-475b-ad17-cca4e76e66ad",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f79e6c3b-20c1-41d7-a981-81062c8b4420",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "e923a38c-ad19-4d15-a61a-50df9dbf9db4",
        "cursor": {
          "ref": "0d575bf8-9e0e-4adc-9641-6702354338e6",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0ddcd6e4-f7ab-4415-bd99-868b86882e4c"
        },
        "item": {
          "id": "e923a38c-ad19-4d15-a61a-50df9dbf9db4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ba2d143b-ebb5-4895-b452-2a838887dea3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "56d372f8-5591-4ce8-92d8-0c000acc4749",
        "cursor": {
          "ref": "d1392367-2c7f-4863-a425-71a81c8d7dea",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7781ca8f-dc56-4646-a6e5-f24f110080bd"
        },
        "item": {
          "id": "56d372f8-5591-4ce8-92d8-0c000acc4749",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d7099f1-9f44-4787-b052-ec498c2838f1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "7acfdaf3-e02e-49ac-b3e8-e82275c63ded",
        "cursor": {
          "ref": "97b68cc1-a8a7-4164-9ae4-30cb11865050",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0f0c4895-16e7-425a-b63b-12c04ae5e72f"
        },
        "item": {
          "id": "7acfdaf3-e02e-49ac-b3e8-e82275c63ded",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "176e3ac9-1d3b-4f1d-84fe-11fc457c20e5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "b711ab44-6893-4eee-acaf-0efbd21ecbe2",
        "cursor": {
          "ref": "02d46345-a082-4b02-a7f3-670d3af68935",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f0c1fe8-cca7-4961-956e-861114b25663"
        },
        "item": {
          "id": "b711ab44-6893-4eee-acaf-0efbd21ecbe2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bfd97621-0536-47c6-bbb7-084a1c4d6c80",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "dc9ad27d-094b-48c5-be2e-49b5ae7bd606",
        "cursor": {
          "ref": "1f2d68f0-9fff-4ab9-b0f4-24a6ec642e5d",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9f205c99-6b9d-47d3-a78f-5f344a1628d7"
        },
        "item": {
          "id": "dc9ad27d-094b-48c5-be2e-49b5ae7bd606",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "62722f07-acc7-460d-8da5-70c54821ca52",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "0662f8a7-1aaf-477a-af5f-baf7c16b808e",
        "cursor": {
          "ref": "0aaac621-a59f-4e22-8f3e-17fab25d0005",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "baed5657-d677-478a-b789-2dcb72405473"
        },
        "item": {
          "id": "0662f8a7-1aaf-477a-af5f-baf7c16b808e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1f2de98b-2096-4308-8ee3-1593bb44a13f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "9374f36b-6884-4f94-8199-f17468ae136e",
        "cursor": {
          "ref": "34084213-4a8f-470f-a723-50073d04de23",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ef933a39-a3fd-4a56-830c-c8ad87bd132e"
        },
        "item": {
          "id": "9374f36b-6884-4f94-8199-f17468ae136e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3dfd23f5-930f-41f1-a9d9-7c74de0a1304",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "cd8a4573-58a5-4aa9-8bb8-650724f6d779",
        "cursor": {
          "ref": "30c1a602-90ec-4209-a493-39a0c12e742f",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "18e6d191-47c1-4830-8fd1-a06d18fe1d38"
        },
        "item": {
          "id": "cd8a4573-58a5-4aa9-8bb8-650724f6d779",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f095f01d-429d-40f0-99bf-88380099857d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "277415e9-2cb7-4e04-a105-f9682f71ad18",
        "cursor": {
          "ref": "c4e1843c-e333-4011-b232-5c95c3031452",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b93e5a3b-6239-40d7-859b-12281036a48b"
        },
        "item": {
          "id": "277415e9-2cb7-4e04-a105-f9682f71ad18",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "24e1614a-7f4a-42be-96d8-c8e4fd63fd0c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "8cf69951-e541-4e14-b4b2-281414d7f7ec",
        "cursor": {
          "ref": "9692c9c5-c08e-40ca-8c94-8f5ba2bef290",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7951eace-befc-4073-852a-ee6eb9baaf70"
        },
        "item": {
          "id": "8cf69951-e541-4e14-b4b2-281414d7f7ec",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8e77933c-4ac9-49dd-9465-d1b80d353463",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "3069676d-822f-46c8-8a4c-ae5f47fd556c",
        "cursor": {
          "ref": "9b6c6b57-dbf1-42aa-9cba-8f087e5feaf6",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "398ff445-db82-4605-8410-a5a063c1dd95"
        },
        "item": {
          "id": "3069676d-822f-46c8-8a4c-ae5f47fd556c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2f044585-7a27-42e7-9006-f55caef852a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b2e8750c-5dc3-498e-9586-8472f9cdc671",
        "cursor": {
          "ref": "a519fa3d-79a0-496f-baad-a4afe2026b39",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a619d8d9-443c-448b-94dd-a63424e475eb"
        },
        "item": {
          "id": "b2e8750c-5dc3-498e-9586-8472f9cdc671",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9fb41e12-63a7-4677-bed7-35da947d68a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4ee15765-0923-46a9-b4d4-5e76c0154332",
        "cursor": {
          "ref": "ade6724e-32a9-46ea-b01b-bafa54f0927c",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f96b46e0-8b80-45c6-806a-0d667f0d2085"
        },
        "item": {
          "id": "4ee15765-0923-46a9-b4d4-5e76c0154332",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4cc287ae-ad9b-4828-8e17-e43eea19ccca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed43b90-2226-41ec-b37f-4d2273e4a010",
        "cursor": {
          "ref": "c8ccd69c-6477-495b-bffb-230d3a29223a",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e1a01496-062a-46e9-837c-b72f1db3fe5f"
        },
        "item": {
          "id": "9ed43b90-2226-41ec-b37f-4d2273e4a010",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a2bf52ac-24e8-4099-a07d-6711d89e55f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "d87227d2-00c5-47c5-be0c-1dfa41cab295",
        "cursor": {
          "ref": "224e29de-c4d8-497f-a495-280af1c100d1",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ebc8d661-b31c-4458-9a06-478a986dc403"
        },
        "item": {
          "id": "d87227d2-00c5-47c5-be0c-1dfa41cab295",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0da3f297-a015-4b0b-94a0-20f5faead4e4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 8,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "568e48c5-7413-4fd6-9228-8ba81d91a3bf",
        "cursor": {
          "ref": "58107e50-8d1c-4035-afda-673bcd160182",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6c522d21-6fc9-47f7-8168-750aafab98ea"
        },
        "item": {
          "id": "568e48c5-7413-4fd6-9228-8ba81d91a3bf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6358b2d7-bf48-4084-b88b-8fa30d4422fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "6cf423a4-35d0-40b2-8de1-06f0442655fc",
        "cursor": {
          "ref": "80fa25c9-979f-4de1-afc9-fd688428ec39",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "55c06cd4-f687-41ab-b4fb-7718af28e173"
        },
        "item": {
          "id": "6cf423a4-35d0-40b2-8de1-06f0442655fc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "66272c9f-ce20-4e32-92f9-2c6840f1d5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf423a4-35d0-40b2-8de1-06f0442655fc",
        "cursor": {
          "ref": "80fa25c9-979f-4de1-afc9-fd688428ec39",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "55c06cd4-f687-41ab-b4fb-7718af28e173"
        },
        "item": {
          "id": "6cf423a4-35d0-40b2-8de1-06f0442655fc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "66272c9f-ce20-4e32-92f9-2c6840f1d5b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 7,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451ccb47-aa69-42db-b50e-33e0a39be8c9",
        "cursor": {
          "ref": "46ec16b0-7448-4f4d-a045-9db48d0047fa",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "834b80f9-bf17-4056-8120-36b4b2c0c545"
        },
        "item": {
          "id": "451ccb47-aa69-42db-b50e-33e0a39be8c9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9c01f28d-8cbb-462c-8063-9bfffed0f9fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef8e2b2-da0a-4aa1-8a73-a9056b3a5feb",
        "cursor": {
          "ref": "5dbeda86-3ed7-4ffd-a52b-09b0d2bb2d4f",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7ba963db-277a-4d48-b699-d627e30f0341"
        },
        "item": {
          "id": "1ef8e2b2-da0a-4aa1-8a73-a9056b3a5feb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a1c05492-5614-4967-a98e-db338b6ec3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}