{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b3041fe9-7217-46ec-b5c3-e678813d5359",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7093740f-8345-4cf5-8eb0-11c9e94cd188",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8bf0ab3-94ef-4f81-bdda-d3109e353704",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0aeca164-d988-49ba-8875-6510e4b57d80"
                }
              }
            ]
          },
          {
            "id": "34b22dc0-4cee-41a3-b22a-4f0e2a647df2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4b15750c-8161-434e-a48c-fa479b4ef40e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "876c87c6-0f60-4c9c-b7f5-13daa7cef14f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5de83f07-f937-4ee5-9d26-534829f4e621",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c0bbecbe-5a2c-40f8-a00b-27b4dff21d5f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "307f8209-d39a-4802-b195-5833e5aed921",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a272c5e-41ae-429d-b420-a3e7527af82c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22ad60fc-e8de-4e6f-9879-456b14fd1785"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1d76fe2-5741-4660-aa09-09da23319378",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9d4a2c9-01b0-4e98-a16d-178117f39d6a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c6b046b2-78c0-4cb0-9391-3775b10f7728",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b4883cc3-4fbf-42f3-b0a3-808814288b14"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf785056-b38e-417c-b6ac-f5632d9fd041",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e5391142-e371-45a3-b284-5a990f91627b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da5a6aa3-050d-48f5-920e-1ccfa580f4b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74d5a291-6ebd-4abe-82f6-206704c0d606"
            }
          }
        ]
      },
      {
        "id": "2d703910-bbc4-4cd1-8b96-c774c6c6d4ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0dc97be5-ff89-40dc-8613-0d386212f041",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da54855b-4e67-42d5-8726-970080413f21",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14bc04ed-1265-4f92-8c55-37fefe1dce98",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35a1c47-549d-41fa-92dd-6e033e68b82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2f2d11f-5b82-469c-8035-096b49f6d7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e115d88f-2fd4-494a-b5d5-9614e10f8a84",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550e50aa-fa73-4b89-b08a-3155297f0e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c984899b-8e34-457e-9a77-fa106fc63b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd629054-2c9c-4ef6-bc22-ea72eeb42452",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e51b579-96cb-4ff7-8109-26e695f49b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a45ac8cd-b287-438a-bdc8-5b63cdbd95a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc50b6b6-78f6-4329-8afc-0c6774b01dca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3d32866-6cb5-49f9-a93a-0d173491b6a1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c631387a-24a2-427e-b76f-f2c6d6b019de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9eaa3ea0-b7c5-4453-9806-f4fe6ffb72e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b972d41-5003-49ee-be54-7b7c9e2a1714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6b91c2-cb0d-4f8f-a5d0-01c77edfda1b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87bf0568-29dc-4833-bc50-338603e42f05",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb64eef5-d0f8-4ea4-b9a0-a93b419fd923",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4ad08a2-a8af-4489-94ee-f7dee799d380",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1fefaefa-7706-465d-9659-cd50537d855b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "020381a8-79ff-4135-91fb-ba899856996c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "779f8b34-a2d3-4d61-867f-a70a658f2d77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1a96e33-ae73-4002-b4dc-b8ce69d4854f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cde3da7f-95d9-4a0d-b2af-72689927f366"
            }
          }
        ]
      },
      {
        "id": "5c564d82-f432-45db-8031-f5008cebb0e0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "fd8f75a3-c292-4a39-a5dc-33ee0ba654f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0be1ea37-0fae-45fc-bfa2-7a4ee71bb8d4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0dc9ce54-2bc8-4989-8ef6-0b7dd06cbf7b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3b146b-7003-4529-af7e-910beafb8856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cec858-51a7-43a6-b415-2c6742d7d259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6366ea30-20e0-41e6-b615-f26c0df76f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16715e68-2825-4d8a-80bb-453d834959c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f362558b-93d8-4b79-8062-a3d7a507942e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427a743-dcb0-414d-bb95-9dd9be191f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb6e9db-00c2-4edb-bf36-e3625deb680d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27919821-83be-453e-b1c5-bfb18828e945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ffde282-c90a-4796-9eb0-77d2082ac2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf83ea6-b4c6-4ce4-a8a4-ed97c086f641",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a5c066-bf8d-4618-a579-8d8d0e95a105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b84c43-9f1a-42d5-b646-e74b8d95e876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07efdb91-ca6a-435a-a004-6d84718e0ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "329c46a4-7a76-49e6-9f67-ee91f34156b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03af2925-2d5c-4412-8b76-33bf75d6ad20",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c48fcfc-1e92-43a7-9f69-634822c23cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ff6f3d-b931-4494-978b-796845e42d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0886e5-aab9-4d6f-aa10-5c0b41683d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64514496-3805-44d7-b486-b8646b17af34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca886415-8ee1-4602-914e-4dcbc0f47398",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6890c26-3724-41d9-bd01-6323e5cc9504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c9456f-e1cf-4355-9282-a11004cd32e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cebed7-2a93-42d5-a8b1-e68f0b56b865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0c6f5af-1aa4-40bf-b62a-5ca19ff9dd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678aa923-2500-4040-a742-52641c4aa0be",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df0b4f2-ba2a-4518-b072-3afd0e2e967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d26fcf6-9ee9-4020-94c5-3cd8be04ab62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fcad6c-a163-4eb7-81ad-474fba0582d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c022add-f9e5-4d19-871a-b1ee9b25d9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2adf59-c52d-4a49-848b-74a17dc3de25",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297f37af-714c-41fd-b60e-205dae58b538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692f97db-1f0e-4c4c-9c81-559afb5570d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f64431b-db15-473c-84a3-de51bb8d2b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1841f8c4-4867-49bd-ac34-3bfb6c881b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5394ac5-b013-4f93-be5c-05179fa48bad",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0871d420-e3fe-4b32-a327-8ca35ad3fe20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec2fb7b-2f3b-406d-bd3c-d17585dc57ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6902ea0f-2ac2-41ec-9b7a-ba7a81bdf3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "479f7994-be05-4313-bf02-7d00b29abee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24da8e09-78c4-4559-a03e-c8238b662986",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9afce5-f6f1-45df-938e-41a02dd44874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a5676a-3375-452c-be9d-b68c6e413f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8662abb-ebab-400b-a201-af6519b51f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d91e878-7f98-4dbd-b88c-d08b957c4d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe7b69d-b388-4140-a524-391614e6fde9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc81963-3640-4037-8c67-cb6610f10582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be49d3fc-cdc3-48e9-894a-6d18763d8845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5c76df-ad2d-4e61-b9ea-da1e5d92a8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f293e7b9-195c-4e79-84b0-1617680dab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8a709e-9342-459f-b9d8-0745ac6d701f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff6868b-b828-43ba-8fcc-8bd5023da9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe91908-17eb-40de-aaf5-5f615aa3e0cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f38b91e-4555-407d-9176-6d07d9d4117c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68cb004c-9391-4cb6-a4bb-3fb8e9bb280d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0eb6b9-71d7-4b27-befe-9086e901ed5d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5777b0b9-2a39-4992-91d4-f6aaac0ad6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d294ef5-03cf-4864-acd5-15e328afb6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0b52b1-e2c3-40e3-bac0-4c0e04b8c7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "728614f5-8336-47ba-bc4d-c36aa691a318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5565079-fcb3-45fc-9c85-17948dcb46ac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dd1f56-efc8-476e-bea7-ffbaaff1b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa678c4-4cc2-4f64-92ee-c44e174bcc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77f9757-6377-44c7-ba0d-d6e4816fe99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94bb2532-7392-4096-a761-0fc63e76d572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e05511-99fd-4a7d-8c8d-8f17c4332370",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaca3041-e272-4f9e-bab1-92869c029ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61733d5d-3c27-4dc3-86c5-e2cd7da44bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a49c2a5-b3cf-4069-a3e4-f85fd53730bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec721a16-e643-4944-974d-93b99c0477ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8750bb-6d8e-40ff-85fa-9fd13741f1f2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fa1d0f-7958-4393-87d9-89da1b8ec4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f38e65d-eed9-4409-a434-3e41ab8a40f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c92a8f3-1bc1-45c1-92fc-c53f2bed8b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17b4d1a6-f2d5-4097-86d4-2f73435a23d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88dc38a-735c-4bd5-a655-bed34f8e03ac",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c6184b-52e3-4bc8-91df-c17faf2c3e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c5d8da4-6fe3-413f-9044-efdcd7d33ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e0e5f8-eea5-49aa-9dbc-14d3fe8d99eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10f1bb34-2a1d-4bb9-987a-a89d9758d8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edb9b6e-ddbc-47f7-a916-83a9a8edaec9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118ba62f-262b-4259-ae8b-650f4c58286b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9deae918-a878-4e39-99c3-befe340062c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742ed937-4646-4db0-b282-1b22b203e229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45122148-e225-429d-abc6-5b68939a795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ea7c9b-ae94-454d-8524-b056795e96e4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3248dc57-1d0e-413f-bea9-059e69f700eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7588db1d-9bbf-4b75-be38-f10822edeb57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a341ef31-6d69-4fb3-ba14-de02eadb2e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3674db-f95d-45bb-975d-a388a7d5153f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f43223b-3178-4d6c-a24e-a623a4c2cc53",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef1aa2e-6747-4a7e-aa81-f3d964eeef32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23bbc845-83ef-49e8-8c2d-3f5f6d861b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0adb8ce-6262-4432-a70c-df8c598ae1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e26b953d-b3f7-47bf-846f-11f94b9f0b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05040467-138e-46e0-b870-32ac96876b73",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735d4ffe-4d62-47c6-8327-604622c4be10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe95625f-6668-45a0-b26c-69b4b8a9bbd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e14939b-225b-418f-9e50-208e656a604a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c8d39b-ff42-484e-af8b-3d4f9863e0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22aff95a-5253-45a5-b6a1-51422c2d52e6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c7bc40-91fc-4ab2-b333-0144350490e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ce6d61-856a-4d02-beb7-7938132bb4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597af2b6-21cb-4d46-8e16-91ecde124406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c20e7bae-2f44-4e96-b526-5d1f25732038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca42225d-d362-482d-a676-c005e0375251",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7c4844-a21a-4e03-9fa6-cbe5259b8ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a95e8b-e4d5-4de9-a7d6-136d87d82bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb58fd0b-6c7d-45b5-86e0-d01fdc66edaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0382edb0-5b12-4059-9ba4-1576c2446969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d198eb-7d7e-4b8f-a54b-66d0d857dd5d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4a6483-0020-44cd-870b-9cac1cad2d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747ed890-5995-4cef-88b7-0976c7d848e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a78e68a-54a9-4c25-a85e-bc4586ed8598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83215403-d92d-42c0-b868-f863d3b293d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d95475-6fec-4e1a-ad87-ebdbb6e6b9a4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafc524f-536a-4d9c-8c16-b361598c16f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad213b5-6845-4206-b38f-ff3bad10e0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73cee578-2b45-4aab-875a-895e6a1424d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "211b137e-bb21-4640-b453-1398bf800ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c80705-02d7-4677-a17b-9bed81bddf7b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3351088-9145-453f-9737-7a7b8b10b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d531c0b-5c1d-43e3-8316-61a692c722f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aa5f14-8c01-41bc-be4f-f3dcab5183ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12a4cf36-2ce5-433a-81b8-5f14bfd39ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed506e5d-1ce7-46de-b4fb-29f9f54074ae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631577c3-0800-4a15-92f6-01533827c241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94c6c36-5ec8-4696-a686-d70caef61ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ef67b3-2ddb-4621-8bdf-aeb6bee234e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f7731c-79ce-413f-9f6c-8e03ad8ea31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae0ed25-42a2-4c3d-a0be-26b40e22a5f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5162c93f-8377-4af5-b463-17b4986635fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56eb63bc-5f8f-4f09-828e-61b6ce7163ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84e62af-61c3-4e27-87d2-f9fcd7638258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f52b0d50-0ae2-4f0f-9ecd-bd39f908e367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc0c9f9-1ccd-4092-8f1d-8da7d2d665ae",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9ec8eb-4995-412a-9d92-4e6fa2a56b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a4e4248-3956-4acc-8fd2-a7985b5b0ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b247e5-6970-48e9-93e8-07117afdddfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f39867e-d969-43b1-91a5-9fc01d89a64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989f6067-b6c9-4d5c-ba87-5e057df20c00",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11d7250-5577-4022-8a01-896782c633dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ba380b-0b2b-4fb8-a76e-1c8e726b45c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a644b6-96e1-4f04-9c76-46f91341370f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d81c9dcc-f7f0-439c-82a1-671ef3f348c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a797e2bd-d5eb-44a5-89b4-bb4201ef38fb",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331ac06c-6cf6-4210-b9db-db626c1bd713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c02fb0-ae7a-46d6-b0de-5d7f83cc03e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d71e72-3bdf-4941-a979-d359029e4cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "431ca47d-c90a-4e86-b0d4-bfe5272d203b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d76d3e-942d-4ecf-b546-ef8d9a03e594",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91b7977-088f-4a27-8da8-ae0a954976d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9447fbb0-48e2-41f1-92cc-3fd9fd2a6c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24178bf-c6eb-4a9e-9b3c-c33ba8dbf792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "572eb7d2-5cb3-4084-b97b-d8ed112bf2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82288045-6a77-4585-9e52-b629b07e38d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2120f060-8dc3-4dda-b25e-05df378936c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d41eef8-3cba-4828-9cb2-83dc32f1e6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440fa51b-0471-406c-b10e-bc164db4a707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd8a333-b595-4895-9088-106177798600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c983c55-799f-4d29-8bd5-560a323e7d0a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81335b26-86a8-46af-89a9-fee004ed64b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b9fdc5-38c8-499f-ae9d-4757ab967fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a60e18f-58bb-4f80-9130-dc9a62963471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6be505b5-b4b3-45c0-96bf-49057e3097e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87ca733-3a6d-4b81-baf8-6b4119a6532e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81abe0f8-3eef-4545-b325-659bf66f3f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8246d1d-da90-440b-895d-dd9a1b4726fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ff2941-a440-41bd-93c1-bb7a75980ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03944805-9dc9-4cee-bde6-1bc38018cb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d26035-05d6-4434-af20-c875b98a0cdd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "204b7065-3d54-49be-8ee4-dd0ee7a698e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7cf09c-23d9-4e54-9ea0-3a11227f63b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e992d1a-3f04-463c-aa2a-a111958cb34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f857019d-985c-4672-b4b0-c7a75c1f219f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c9bba8-3832-42da-bf56-0941304b3fd9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18aa3c23-ff89-460d-8d5f-8da27c1ff8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc70079e-106e-450c-8124-623d276b677f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d6793f-8794-4955-adff-6be2f0ebc137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1baac504-f460-4f23-97e4-6c586ea4bb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb74883e-c2a8-43de-be58-c5ffb6aacf8b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0d0740-bed8-4cea-a03f-0d07fca19613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a33fd81-60f2-483f-b86f-4af3eaca7f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8a41a0-4df9-429c-bfd2-13c33a52d4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28648c18-dab6-4f88-885f-218973ba32d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8ec7c2-6a8d-4197-afbd-ada9c8fe1888",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9519fc-a0ae-4707-a946-8e65ba5aef1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f860a449-111b-47d0-80e9-18a2d6ac917c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85dcea8-51e1-4765-af1e-c76f626355c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9acba644-0f36-40e5-ab62-92ff1c624b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811056d3-000f-4926-b7d1-d9626b3e7701",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4584f63e-0d24-408a-a26a-ea4a36ce607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c349703-03e1-4b84-9559-8a7460ef2797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31875828-0806-4e5f-ab3a-de361bb87c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e60f61c3-7ad0-4014-903e-5c68f9cc8cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac2639b-b0a6-405c-ad72-364f1e438a46",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96bafe9-f17d-47a0-8394-dc0468228be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1df7317-e8ba-43e2-b0ae-75779272d5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85988f37-147e-4503-892d-f66e5da9a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "62640896-0506-43b6-a520-52ba10e3e465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b77198-b890-4893-a208-bff5ce9d75bc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c6fd16-0b24-4056-83aa-cfee209758aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7dfcbd-8bd1-4003-8ce1-e773994b72c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d9c072-1fb9-473f-b801-345cc7e4a63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5411edf-18ca-4eae-9526-4899122b8bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf49fc61-8b9f-4e16-9842-fa090f0b1231",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fe1d51-b497-4f07-a1df-bbd1c2927a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7228c1dc-1322-4dd7-bbe8-bbc018435133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b3c640-224c-4f24-b894-da158c2d9910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "939bc5f9-2ebf-4e2b-b7ad-f135f2926932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0857f1-38e1-4d9e-9be4-70125ca00a62",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0d1694-27fe-4a37-892b-e8de9fc968fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d9316b-05e7-4a53-bd7c-f2f04ffcffbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f54992-4c4a-4aec-985b-69dbee4fc9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fce0ba3d-b58c-4c73-953c-34e08c903de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90edeccc-0660-43c0-af83-81545a1b2900",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c5545d-4573-452c-8057-031580f4c208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8a0327-0d1f-4287-8ef2-24168fa8a6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c141925-95bd-4885-b027-4af2dfd99c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "63eb3463-8b3a-4f2a-8944-3fed7182b16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f293259-5759-409c-8c61-bb6e61a9aa5a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088d30b3-9bba-4c74-b308-24b065086b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00896707-6bd4-4e91-8640-34ea6a8df18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9024f24-dd13-48d5-b5c0-4a66f8786f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0877a568-ca56-40f9-a916-f47f71175703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792ccc1f-5677-4612-bd10-36df2b9ffe61",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883d7850-9357-401f-8c7a-056bd0838c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71160ff2-7842-4971-b7f1-5091fae93f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fd8331-bfac-4ea3-b1b4-b246b3846647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef09855e-fc6c-4675-a946-4968475a64f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f663d88e-9b1b-44d0-abd3-e58a5c278a54",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f422acbf-d326-43d8-b7b5-3f4edf02f418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61d8439-2aff-4ea5-96b6-bf4ea54bbea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa6c9ba-4055-4b87-8a62-4c08a6aed2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cd2a91-06a3-4aeb-8759-162fbb4a5e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc361f6d-3c57-435b-ac9d-d34d34d7d579",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b39e46-bba3-4353-bc21-528f7476f8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1fdeaf-e533-45a5-b83c-14e494f8f8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cf4e71-a7ff-48a1-a251-4f6c02873235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06871d94-9efd-48d1-9c4e-82ab5dc50ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff07ff0b-2dd8-4f22-8669-d8dd6756210f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a965a1d-32dc-424f-9d22-f85533f2a3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28419a8c-67b1-49dc-9f09-a24caa1e80a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33e91da-3acf-4105-928e-b8e2559229bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c74ccda-76fb-4e70-8956-bbc1817b395e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2566b8c8-e20a-456e-9409-d82681e473f3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1740afe3-0e2b-41e0-a3a7-0055da658355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72656f31-70c5-4232-b07d-051d388d4284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c6f283-feb2-405b-b3b4-82fcee27df19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb10a02c-d9b4-4f5e-8c09-a1ae6ddc2d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fb8d76-2753-4aca-a694-910a4baa92dc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbb80f2-5786-4cd2-8bea-cb6b2dad0e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482d3620-2326-4f50-aedc-275da1b8a9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768dd05a-b50d-4836-85d5-53cc5129135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a67c2ef-49e3-4388-a97a-193f9d4c3264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b75efd-496a-4148-b650-312d80ff0ff6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d758e2c-1551-40d6-a669-91475a4e3af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a3b286-d7c8-4730-8c7a-964038bc122b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af16de5-5b7a-4f45-982e-347efbb7b7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4271399-eeaf-4037-9a45-fd2a632bad81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3d1fcb-fb58-4d2b-9185-06822126900a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e79f24a-bc7d-4501-917f-201d6ad6a1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9635c516-69ae-42a0-bb7b-8561021caf0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596e17b6-2033-4e88-b5a8-2a5f19408b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac6c525-c3c6-482b-80ad-c958b2a7a1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a1a8b8-c5b7-4a09-819c-ac6c5cfc5218",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70fa3b1-8da5-4eb0-96f7-72bfa1d8ee47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a62861-830a-46e0-af41-310b5c0a1b48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d5d69e-46d3-4484-95ff-f5a2cd01d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea60802c-ed4e-4e6c-93e4-ddcccb143d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f534c757-baf9-49ba-91ff-10e227d47a77",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec78b1c9-f36c-41e7-b948-5670850cc2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80df3c63-629b-40e5-b011-b59e3c0432be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e3a9ac-fc71-4e94-a2b7-4851c8785c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8dd64b-4815-4149-a4ce-bf000b489e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faf85ba-d36c-4e39-9ea1-c104fbd5bada",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975b1970-a030-4c91-af26-b320c9ba1358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d407ec-4a39-4ff3-97e1-76bdb7c18b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f8daf9-4203-4066-a7e9-36edcf4f3fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b009d2fd-c4d7-4857-b51d-89b2ac44c5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a329520a-176f-4575-bbb5-945a95d0dd6f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50c42c1-722b-45fd-82e3-5a90c475a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e48357d-d33c-4346-9004-cbd1d001bc4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bba2f84-d8b5-43d7-98af-453e2baf279f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c19fb98c-f222-4727-9ad6-5c1dfaa806da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523c39e4-02d8-4cc4-985b-ccd71cc36697",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f57c14-1dcd-430a-9818-39925d47f196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba92cd5-e001-43c2-aa25-adda9d6390f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340cc09e-e01f-47a1-90de-859079af49e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aff8b9b-2119-4b98-ab66-dbe3940e6002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4fa1a1-7123-4834-b205-0e2cd40ec4b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3837526-bbd2-4b90-989f-6f8432e4ea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24eb011-fd31-4637-a6b8-d89762b4c344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5716e7de-2a7f-4433-8b55-f2ef0d60a635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af274e4b-ab7f-470d-93ae-8b82b5f656c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9009fc6e-716d-419f-9ce9-75544896c7c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92c2b21-660b-4068-b7f4-39a613c171da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babc7a11-0dde-4380-aa7b-cc8e97948c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a69ee7c-0a74-46ee-920c-a6cebbc18a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8da1b8f3-8e7c-46a8-a14c-f58acf974862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b00686-bec4-4c68-b04e-880afb4e32a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5373b46c-4dae-4048-8ed7-cfea930e459c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dee0ff6-143e-4a13-b88e-9c7eee2164ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6bfa79-e5b9-4e89-a86e-f0ca684dc8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "da2db95e-2637-4947-864d-3ad67d67b7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe39290d-df06-4235-8a58-67e77a525c8f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7367fc-b624-4ff4-bdd8-336638636636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fb1c48-a4f6-4047-8a28-6984eebf9d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ca0fd1-dbea-4e42-be7e-bbcb96273bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "38c4c583-a480-4112-99eb-47e8765bd70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acc3f6e-60d4-4670-86a0-20075cedd35f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6174d82-7edd-458f-9d54-4935a0efc9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c05c29-24c5-4139-b0ec-afe39e2974b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9024b69-9137-4b0c-b011-cb4d5ad5d72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0a4bbf-8f87-4e5f-9a13-7802fccb933d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65ccff4-0ece-4475-8509-be7495c53d0b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301f7e1b-d063-46fe-8a67-cd14e64567d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ebf08d-daca-47b8-a099-51cbf5cc7bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab9c70a-8764-4eee-b6ee-1eb535b05d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff007b15-0823-42cc-af3b-c1f8431e2816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd91b4a-e39a-4e5d-ab9a-88e66dfcec5e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9462d64-f6ba-4dcd-8b1c-0202911e8ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652b3fae-29ee-4c74-8ae4-2d402ac96972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66cdc36-ca7e-45a0-9855-6295e44cc261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2934049d-cd8c-4142-8af8-cd2f3522560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82498eda-82eb-4725-9f17-ba39e45e8dd1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eafb4af-9ce9-4ca3-99a5-9228cdb7dee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73011533-b0e0-4d1b-81fb-4a5a2d3d85d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3917d34-a729-4559-8429-52821a14b34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9692c7f-cda3-4770-a59b-ef06d0a65e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8e8a92-e03f-42d4-b80a-912997da8ef1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9ddd47-9929-4cf5-ad97-64735a0adde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595c5e96-6fbf-4858-a64e-155e279b98a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef05c887-f857-4200-96c8-c7f5d144bf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02b35d88-f7b5-4138-875b-a6d780a3a1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bccc0a-b74f-4b31-94d1-832592205f45",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec79c4db-64af-4a78-b437-a3191a733cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38061e74-e760-4fa6-9e74-d717a4182764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb62c8c7-ec49-4ed2-b31a-4029793057b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "49794500-90dc-49da-9db2-d4b74f48ef9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cab5d10-e861-4eb2-8448-538831c16eeb",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18bfe09-9220-4c48-bb89-fe7a816ac96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d864b7d1-dc9a-411b-9c29-e0707c6d3603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e44baf-3a2e-45f7-b8cf-6e67e3fa1b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e60605a-7988-47f0-b7bd-325f474a5881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d088a1-3cc3-4843-8958-40e489f475af",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e858e-cee1-41fc-b9c2-542aab9ae784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162ef607-4fd3-4dff-8ba9-9f82b995d8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9d4f9a-bf2c-4aae-b08b-3266be01e644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab2eca4-c238-43ad-bbd7-b05292f010fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5977c7ca-b970-4c55-b29b-cb02202968ff",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccb32c1-d540-479b-a0ca-3c06cb4e97a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3065721a-9cb1-4484-b8ad-acba775fba16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018321d3-8689-4a3d-bb46-90d67aff36d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d94ffc8-4f4f-40e1-8165-73335511bc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79882b1f-4fcf-4c24-ad7a-dd996c94e5cb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ab70e8-4e10-4845-9ac5-a56dbcbcb4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3816263-92de-4ca5-8a33-86aec0a72712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7122511-d3e1-4658-8e09-ccc44a00b01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60222aba-b55e-49f8-ae6f-140dbbebfc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2b3625-7043-475e-98e6-7b16d665eb78",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6372c33e-8aac-48c8-b114-895dad5a41a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa00a70c-c2f6-41b7-8526-af671a3665e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2656f21-3e38-4181-9b41-9d1d7ff42787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e131e2d1-ea3e-4cc1-905c-2b2dc5a5829f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812cb212-ebb1-4b34-805c-0e9a0798747b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e02d0f-c0a0-48da-9ddf-d0a24a0adb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504f25f0-dda6-4148-a2f8-5131011d9a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fee9b9e-98ed-4f16-a6fd-edae5d8c7aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0ffe7b-77c0-4e86-bef8-7e653ccadca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0ef632-c4fb-4c5d-b421-3deeed124d03",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed13809-f4fb-4f9c-9a27-c3c0afcc7699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb67619e-33ca-4dbd-aaa4-8539a3617ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1303c714-ef92-4e11-9364-619c6a135ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fab0668-4759-43bf-8ba3-88d667a8d93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4004a0da-24fd-4014-a087-a9fd593c7002",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2070fc4a-dca3-4b7f-80ff-d0462c7f30e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a962a6-e3b3-4521-96fc-b4eaa6e01feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6a5f0a-7a0a-43d4-a464-ec33f67f69c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d67d63-2256-4134-a717-672e6c25c4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35fa8be-60bb-43c8-8969-671de26ebb3d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c42ef12-cc15-41c6-be29-4f0d73d8266a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798f5558-2f82-4080-a234-91c77c924ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d368f75b-fb9e-47b6-b90d-754ceb424b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "677cae5c-222d-4f75-9740-6e1e3dddc7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16357016-10c9-4c2b-b155-3b17f435f780",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5c0da7-692c-4d77-b214-db2e12960304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122b3b36-8219-4b94-8647-87e211dfba41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d93dca-a9cc-429e-8dc4-dcf4b3ce6a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f4d46c-2a32-4318-b428-117681094565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c4656e-36d6-47be-b8c5-d808f51e9cb7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa1218-e593-4d81-9e4e-b5e0233ce868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043ef15c-9c86-4f33-bad9-e9854b4f27cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18012f4e-ff7c-4b23-a193-fe24dd7b02e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3824540-7091-4e86-b751-0d32f30c2045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf39a615-ffb9-4872-8591-6abdac920ff6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eddae1a-4273-443a-ba6b-695a03f487f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91e95013-7bf2-4b00-b13b-cb332b5c25b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83207eac-3e7c-4e37-bec6-e616fd72b33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7515085e-70d3-4be8-bdda-e0b8e819d977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54170f7c-ce75-4818-8bc7-1bcef3d7236b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "501ffcf9-a0be-41a9-a9ca-b4e3841b2ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1dbba9-d29c-405c-9d4f-2704df075063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7332dafc-ba5f-49fb-b1b9-9edb400aea55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87ad1dc5-c8da-48be-814d-5ed0c9ce7230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f116982-a9a9-44c5-84ca-2894e3284dcf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f22cf6b-2f36-4806-80ad-984b8400fd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c22718e-24e3-43ff-a819-26860ba41521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb72b720-4054-4aeb-abbb-27987bec2f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7e8c8c-775c-42c6-b801-9e69f76fe302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62e639a-09c3-4de3-81e3-a465e9e40a66",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c4f2dd-2d46-4b0f-a1a5-a176938d3e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec39d0b-85e2-4c3a-9518-9eea2fa40512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4a7d48-9ddf-4ef1-86ef-21f751f39ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b7163a-baa4-4c13-87e3-9ab13667d7e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d878c9-61f1-4098-bb83-fce650c7a8ab",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd9adc5-5eba-4412-a4ac-7fb94d62e9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18756c66-10d9-4505-a77c-44ad934c089d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddc7b61-1cf3-4de2-98db-57dcc9720a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb178d9-70e7-4cc7-bb7f-9054b47316f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29a1e85-251c-4240-a283-46f699bc6113",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38db2055-e343-49a1-9321-4918ce987ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee46fad-6442-439c-906a-5a0cc6a32818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27eee0ef-a7f7-4394-bbcf-a78c7a42803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d49c05c-1121-4527-8f18-3aa88edb2ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8a59d6-6b6a-4df3-8955-c3949fc6b078",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f563fa-dfcd-440f-971e-424c99c72d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5573e580-d94c-4a83-9e72-a2a21639b599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565a1273-c6a1-45cc-968e-78ceace9309e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "159317ef-0ee6-4b4e-87d2-f900e39c4213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99db260e-9985-4760-9905-14c811d8791b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb454b6f-be5c-4c2c-8d76-82d63f43a8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ededeed7-bd9a-44ff-a0e4-4941a68807cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7dcadd-e88a-4013-9c69-d669e6d27ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "433a7df8-6bda-44a5-a6a2-bcc1aee7c7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2e4b41-27a3-45aa-91bf-63d9f72d46e8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45531ead-30c3-4889-9c63-094bf0290a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655c2899-dfc4-4059-86eb-a8c9ad4a5fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c4215a-0d25-4dd0-9d9b-ff26575c680a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf0c949-d90a-4ae8-8eed-68672ddb4869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53f96a3-d808-4af7-b608-6bd5cf36bbe8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823a480d-64cb-45e5-93dd-b82b2f33c28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2550ace3-4364-4dd7-93fd-02f6ef64ed50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f905d-fa4c-44b6-b660-6dd7f3b13394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c31dba6f-b3b1-4630-9f9d-f3af1f0dfe6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4dae35-784e-45d4-adc7-fc550b5cea55",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2cbaed-0157-4f64-87a0-d5f4d655b92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548bf40b-c8ab-4d82-bf1d-ac06f2caf15f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b031d9-1ac3-46bb-a6f7-327c44065fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e45c40d9-b6fe-48a5-9cee-f50b24b29bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5438972f-0b5c-4636-a95c-8d52bff508a6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff227b64-63a5-4458-abdb-b16408b157be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d36b3c0-2733-4f67-9f12-40851716434f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfe34b8-707b-4135-a94e-1b1c294ca984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5dee33-6dac-4509-8162-120b488ac982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b9d9ab-a918-461f-9245-ec42190406bc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa8baa3-017b-422b-bb24-eeae6d832684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9b38333c-f4a7-4377-8c8a-e32d2c562168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dcfcb9-5934-4fef-bb1d-2c3919771294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e39d49eb-600a-4e27-8f24-215c72bb601d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6ca5545-97ed-4369-9d66-dbe79bd4ede2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e057c6aa-0d16-4727-b8ce-90e2a9c2ead1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b568cda-daa3-4c37-925e-75e31867e2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18009678-f828-43dc-9aef-392587ca043a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894ab8df-8add-4a0e-8443-a4d2b7e71027",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af9bc06e-b35b-4574-8f37-9ea607fd8fec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75526590-411e-4241-bab1-015de2f0b6be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c688e960-2318-41d8-9967-da3eaff827cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb5a1fe-d32c-4ec0-958f-780c29b1cb30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e17aea0e-7f04-41c3-8b08-e38558f93221"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68393593-acc8-47ee-9d9d-91d3da7e66b4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab2f33ad-ea19-45f7-a5e9-16a0737f9dc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "70603651-1714-44b1-a13b-4a3e9633460f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e958892-e201-418f-b16c-2959af2ee7a2"
                }
              }
            ]
          },
          {
            "id": "2e96c22e-31f7-4ea5-aa5d-b86092577938",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b634d37-7f61-45d0-8d47-d086ad8ea4e3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4df5d440-c16d-41cd-9ad6-a781adc977bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e8a6e17-5eb6-4976-bffe-f786f264b206"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e366d50-71b9-42a1-b59e-cc51361f495d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89631a4b-e769-4111-af82-da9f6c97a1c0"
                    }
                  }
                ]
              },
              {
                "id": "60aa105e-d5b8-4db2-a1d2-92263b61b561",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21edb363-4c4c-42ee-a869-1627fbeb6f25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9287f769-0620-4a8f-ab86-84fd57cef397"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95b4a149-44e0-4f5b-bcb7-7c8161bc2e46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29da1a58-a8b4-4364-9c95-94d7c6f8f207"
                    }
                  }
                ]
              },
              {
                "id": "c602e6d0-bc8c-45da-ba1e-7dd41aeb4067",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de185785-ce24-4f91-953c-ad6a2f007881",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b343a79d-f278-4ed5-9129-e9d1611e76a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81ec7bf5-f389-47c0-b0ac-ae200e7b8083",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ed6a9a2-3e38-4af7-a30c-fa98d82f08dd"
                    }
                  }
                ]
              },
              {
                "id": "7c743f6f-226a-419b-8480-e60d56056126",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b5f2191-71d3-4b98-a1a3-8c4540aca30b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "635ad22b-751c-4424-89ff-8c664318626f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84b086d2-d875-46b5-bdcb-3f040a18a7fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3fe91916-69c7-48fa-a509-cbd47b0676be"
                    }
                  }
                ]
              },
              {
                "id": "29bfc8f6-4e57-431b-836e-d828addbaf74",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a8178b7-52a0-4f6d-8bf9-1cd58edd7ead",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7926245-695d-44c5-9e1d-70244f9d42a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c4227bb-c107-4472-bea3-1e4d23974ef8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "60e1a2b9-0607-4af2-be4a-a09e0ccb771f"
                    }
                  }
                ]
              },
              {
                "id": "24b3b6aa-49f2-4607-9b76-1e2195ccf1e5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1e00d0c-2ed3-4364-8f61-a814ef7db3e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff169580-9ca3-4b33-adc0-eac1c6599dd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27539490-b0b6-41e7-9bf8-6f5420e74df0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf4b6c60-81b7-4577-ac5f-c761420ad557"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b969ffaf-1c04-4ad9-ad1f-d29734036529",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f859187d-2c9d-451f-a59e-d8e823cc1b99"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6156c290-88e0-434d-a323-93015e003240",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b301942d-e3aa-4726-a7a8-40e186439453"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c64d21a-ef64-4fed-b5bb-4ea466ee8866",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0ab9deb5-43c1-44f6-949b-2f2eb97f3463"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1926883-3917-47b0-a97d-67f386d99067",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1faab42b-16ac-435e-b833-34290aa5e2d5"
            }
          }
        ]
      },
      {
        "id": "fff1191f-7c2c-4e10-bbb4-68f8f7650bcc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6a941d17-1341-414d-906c-c6341e1df0d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e8bf1c0-6ea0-46ff-ad96-448f93a050fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "12243762-ce5d-415d-8597-7374c027462c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a834c4-e177-48d5-a20a-054b2d658bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673ec8c8-34ad-4153-843c-d5ba9732f512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2d14ad-a2d6-4576-a18a-279c54801e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf33007a-2b7e-4308-b03e-aa0591795700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02063e1-663f-4b2a-85b4-088216683338",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fef9923-9d91-40d1-8a2b-ad11e6a8bba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5707f0-2c68-432b-9bb6-19682cf3b9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0310aba-a90d-462c-8da0-41fad611498f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c928dee6-96a9-4b33-a389-c3a7a344b6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b12e6c-2995-439d-8345-6cde553a2de2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df43a67-a14e-4979-b5fe-b98a98ffc47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187f78b1-3379-489b-9dfc-570b6d2d7342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55aaea85-58f3-4027-a7d3-eadaf399ac5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "313c7863-9576-4f06-9774-5c64af7ac4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02178e5-a0f3-48b0-b5f5-811e4bb73c81",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5e05e5-8be1-4203-a3fa-992419129969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b28077c-0d07-4c56-89ac-eb08d5d600d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475447f4-56a8-46be-bcef-eead653a46b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aad3cbb9-fe59-4f4a-8d3c-1b7d341e7a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc8b803-0e74-42dd-a388-81742794e0c8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f88acb-3eea-4e02-9f90-b33d9d8789b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500fbe61-02b5-48d9-9587-a05f24d72ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172012ab-52a5-4374-91f4-e078d2303c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8edc80ac-6426-4f0c-a83c-a8c77fdbb42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfefc80-712a-4c93-a51b-c7921d431b37",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6fe134c-27c6-4d9d-a954-ae89871aca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cdc1b6-e50a-401b-9ea7-73a40027b3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b9b59e-215c-491a-82e0-b0aad0647d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03fb1c8a-0024-4644-9780-4cf5c7906bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d1e80-3447-44af-8226-d8cd3d969237",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7326b9-1006-4efa-af30-ee3ed9ad1b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51aa702c-8f6a-4b90-97e2-bf7cf2738af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9caef8-7100-469c-9cf2-eaea96ddbb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "85b5eb1e-121d-414c-8206-0e38c8b65752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6638c30-c88d-4a3d-aa9e-92f11f7c50fc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b5aed1-0398-4d9e-95a8-038489bb6a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fe368b-5ab7-4219-9a47-3e9c05bbc089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b963d4eb-7a7d-43d7-b8f4-bd8eb02a196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22fb5423-854e-48e1-aee7-3b188498f3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb06809-f37d-4098-848d-bafccf9c478a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc97df97-aed5-4f06-97fa-e091b5e8629c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbd8213-3754-429f-a1cc-79a371969fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a1c31f-3f38-4d15-8b50-bd0419f1f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1438d7d0-1813-413c-abd2-544d1291e353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64949811-e785-416e-843a-c38e073af910",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8305b3a7-51ad-4ccf-816f-c51fa4e8b70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa22788a-6147-4f91-8b1e-c01434752571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af15a5c-efb4-440a-b224-b83c2dbb8331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af1f335e-de9f-4ce2-b3df-2be914752b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf0e7ec-3d57-46aa-add3-85aec6bbb080",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95183390-5b16-435e-a708-fb52d6c43447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a711dd-6f32-4d61-a305-7c0fc627fc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99ee984-63c3-495c-a44e-dacef391a2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5a27a689-3d51-40cb-936d-fd1f74b3dde6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d4519-1493-4766-ae6d-f54bd235b273",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7561f908-c530-488e-a6fd-a23e0aec5bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314174b5-f090-475f-bb99-9de995497755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29dcb5f-ffcc-4b46-8d98-ea3e1b496ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cc86b86-c2db-4249-bfe3-267dae984218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f104c1-b1b0-4e0c-ad33-b2a293a0da4d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18e41ba-5114-4bf9-a19a-72a3c4cb5d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559eaa99-2422-4ac7-a9cc-248a20369de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5efbdb1-a86c-43f3-b05e-a96fb1d17b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ecd6bba-3273-4d68-97e9-afd4477d243d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a55a466-cb21-4ff4-963d-d0edd3915f9d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63abca50-7aab-4c1a-9a76-e446d68a81b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4702f5ce-6ee3-4412-9777-0fb9096c5948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99223849-1b5d-42cb-9982-8bfd4041e5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "01fe3d10-07a6-453f-9b21-21676df8a1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8094c10-bb01-4555-8584-44711521fc8d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce47b997-e321-44d5-bb36-110eb845fbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f679cd-ba49-46c9-9a68-d7b03b3f2daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c516259a-01ea-4009-873c-47db1affc24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1de4691-849f-427b-94ad-27306f46c911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8189bbb-e0f8-45a0-8d0f-87b0a010b3d7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f587eea-2ae3-4895-a9e7-8bfdb7e45060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1053fd48-9ca7-4f3a-873a-5d2c1a04a8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc581b72-f008-48cf-b2b0-2488142d4dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "69799711-08f7-460a-b7a2-04742e19bfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92012d6-4301-4c2b-8d95-aa4bf32e56b4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a2b82e-1467-4ccc-a262-d0758f9b385f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c116da42-548d-4235-93e2-6a8fb22da5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b418b3-116a-4be8-bcb2-dcba0edfa146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba83917-4c90-4671-82f7-16874a817952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df98a11a-bf73-4a4c-813d-cc97c3f6be58",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa934bcb-a55b-4b27-973f-1040e1fed098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814b6574-6e06-44a0-903d-ec8249910ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ada4b9-4b6c-4f97-9f47-3451823aa7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3961a5d4-01d9-4c3f-95b7-b6f3127ef4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84aa2808-53bd-4b10-a32c-cff3c792b6b3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da82215f-1d14-4ebb-b1be-5cfebeaab7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b42c5773-6032-42aa-832c-bea7d2fdbbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a757d1af-5b79-4c27-93d9-8910c8a89cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b26d4e-e6a9-4438-aef4-f2d72ddcfaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffedfe6-2515-4bd4-8076-d3cb12bbc0ca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5b0dec-06b4-4076-9748-b88fa512270c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64f0a2d-a51b-44cb-b184-b58305047312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6667d8ba-9a4a-4264-979d-d16fa890414e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9fe90e-5e5f-407d-a0ce-8bba31ab0286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ea3d6c-0e72-4671-a4d6-c683a36c02c1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed513c3-09af-4a07-ab19-7437a5a40dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318f0125-5b77-4187-9b6c-51526f5e810c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12110e3-f662-4eaf-a2b2-faac64d63034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8ed514-5d5e-4057-8ab0-64592744e93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7264781c-04e1-412d-b725-899dfd06bdf8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac0b4f4-3e13-4375-892c-697c221dd0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f23a0708-3040-49f7-b3a3-148168cd07a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277be5e4-715d-48a9-a279-cc75187fcba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e3cccd-c097-4ea0-85f5-f12640bd2c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5ee6fb-cf61-464e-aee2-5da90f9250e6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6769e62-bc32-4dec-a339-0b63390a8b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1229854-40fc-4843-bd8d-d1f04633dd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487994c6-dc16-43ac-91ed-f7b2a4eb942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "747ec3a6-be53-4600-9287-10e992f43072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d2f7dc-c308-4d8b-94b3-0ab5fa2b4b04",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3132985-8e87-4acc-9789-8df96dc43176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed8203a-4043-4f32-adbb-697c0feb2d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2918532-bee2-478a-a767-0936cad1864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "056c465c-f485-4620-9830-15dc7a1ad99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdc1bae-f8e5-4020-b617-70598cd8a74d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eea3cc-0408-41bb-b456-ba59e17b7a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb4078e-44d6-45b3-8e77-a4cbd21907fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4f5252-4811-428b-a615-eb200b934abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "187e5b49-d5b3-4ee4-a30e-c2520f65d253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf74593-a8a2-4142-bb44-49b65403e929",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d58965-cd76-4e9b-9ffb-bf05b6c1b2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9b3cf6-119b-4aba-8554-bd56c0b29ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144f98a9-497d-4ed4-95ee-641d481f822c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "602d60ce-b265-46fc-83c7-c4847d100403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42415eb4-ec87-4197-ba33-6e6a882ba934",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b52dcf-f757-4222-8645-2a19d746f59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0283daa1-0138-4010-ad6c-9e374f55392e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e07ad6e-43ed-40ee-a843-1c8e87883b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff4387e-82b5-4c67-afde-d6b5771df038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8fd5e7-5d22-4cb2-aea8-2fcb2f1a1891",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f711836-e6b5-46ab-b9bc-6c7b6384b9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6200a3-3b70-41ac-b0a7-e5ce3956ff1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16d05f1-119f-4549-90b2-619da96b71ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b99467d8-9d75-4246-a421-18462fd24e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88de0a8a-2a15-4e9c-bce7-31966ffef916",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "177dd4c9-de70-414f-b148-228b9725b702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed48b6a-e421-4e49-941e-85dc0359ba76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049a4427-1b1f-4216-8fcc-cb8c9b3e6fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff0930d-1ea2-453f-80f9-0f08ff967fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7daf8a-9b6c-4567-b500-7394827b71f4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a55e7d-e613-4b26-b8e6-ca95cc8eedca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edac7afd-6311-4ebe-9802-f9463ffbe296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb14092-cb6c-466c-8189-78afd45fe955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38c1e809-9324-42ad-9694-d5aa35786c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475cdbb3-86b2-414b-8efe-36caaec1ec90",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e07d64-7b10-484e-9af1-fb7efb33853b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9996a0b-4fa1-42e5-a717-7dc885511e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7572cb92-a28f-4082-a94d-b89052065e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93d3580-d51b-4dbc-b0a6-48b2cd0290e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f713eea7-63da-4fe8-ad0c-d434dbb9afb4",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d5e255-1322-436e-8f81-791f8343f1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c72f3b7-bd26-46ac-8372-43466694f729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a583e265-a1a4-4ec5-b296-7e01a40ba2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeea9f67-ef29-45bc-b6f2-b5ab86949641"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5917ba20-49e4-404c-8982-d1921a4970eb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c649753-6e7d-4455-8a21-fc0a12cfbb4b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf080614-22f4-44db-8ed7-584f32cc6fe4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "199153de-0a33-40ee-9664-44c757b91b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bd3834-e870-4da7-80b6-3212998ed842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "035509db-9e01-4e8b-9712-3bc350a16784"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d53f6260-fdd8-430f-b979-29f5250feb8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73a3a1d0-f3ae-4306-a848-b7ad8daccddb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8681183a-2a7c-4688-aed9-16e462b1724b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0850c7bf-b594-49db-b605-9c79689544e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddf0e50a-a8b6-4ab4-9f23-f2d05942c358",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a40c7aa0-077a-4c46-af93-b761c1c69fd3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1574437-b4a8-4a99-9fc4-2cf9d95846dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b1896b1-cd3f-4a7b-97de-0504797d9fc4"
            }
          }
        ]
      },
      {
        "id": "e8e32130-6a7f-4e05-ab9c-e2d31a8db712",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1a8f6684-313d-4fc0-957c-eb871007844f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b74eebaa-5fc8-47a8-a6fa-443f72116707",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8bea4205-df48-4290-b713-10329dfb3755",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3639ee-0775-4961-b8b9-3331370911e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcc2ff9-5fdf-44ac-9a18-5e5ed28c5b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b09479-2903-4ae2-9b6e-5dce1c735114",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f8a70e-3cca-4f09-a99e-a1fe2c445360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4514aa-179a-456a-9a79-52d5ed6fe959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4316f4d3-d728-419b-bc18-f83beab9de5b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725b3124-3264-45a2-80bf-8e3271b641ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5a45f4-be3d-4c87-8911-e9fe8c68f8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c87121a-d3f0-4701-9f56-9f3d769436f6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d36d09-78e1-42ea-b3b5-740aafc8c05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959b7295-267b-4248-bdca-68581727ccbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5245d87d-0fdd-46bf-9c10-6524b1d76de9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84f61a5-8c1b-4857-b830-ad7cbacd7ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1310cca9-aadb-469c-acde-4c019aa5f69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d38a2e-aa2a-46df-a4d0-93f9f25d9b58",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caff6ebf-bee4-4252-8ee5-e3698d34c66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6e2e75-4e49-417e-aec9-8844124f90a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8d1cfc-c547-4f2c-9a09-6190e1b3be5c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e53563-30b5-4918-ba72-e63dfc3e9188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5becc0-20c7-4bf3-b7ca-25e17b09e6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abfe244-1451-4f8f-9346-c893d1a8b510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfffb94-0e68-4b1a-a263-71291f4ae9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adef0c05-c135-499a-afbb-a5d39fe2e62f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b610086-ae47-4c91-924e-9d688cc84771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a80b8b8-6dbc-4837-a636-148f6676d895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e646ae5e-5620-4c76-a6f9-64f94c069936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db72f585-199e-419c-99cb-32e231334811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078f89ae-e52c-4c97-b641-f2563fa2bc53",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a00b3ae-e129-4023-b0f6-9c83194dd370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce231599-60f4-493b-8b19-0af998b0c3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4fe093-0c80-4ab6-9509-192ceb013f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468fe3a6-688e-4d98-94d3-edae5726c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7485751-1ee5-4ff1-8ddb-8bc88a7afb1f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8801ad-37f2-4644-a073-e850803e888b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf9519ce-e064-4d18-8c62-36008359d6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59eb7c9-5300-437e-a115-784c0148d47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f87419-729f-4aff-919d-bace89b6979d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fc49b7-68a1-49a2-b0a7-3dc82391442c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6978a11a-2713-4153-90b0-e258eaae77fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cda63d3-629d-41f2-bebb-3fd20b8a187f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab52b002-b23e-4a0e-a410-2fc95815720a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d0ef71-418c-4da3-b6ef-82ac1e6eb330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593d7f1-67e9-4c93-852a-c756a5b5f923",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df148cd1-4318-4826-8e78-7a59f2ee40d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94117396-78b6-462a-95cb-0ec434971f85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c0aa50-b21f-4c11-be38-f1ea6752f990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f45f54-5790-4c74-889d-055f0db2522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2865ba6c-9fe8-4131-8465-d6485ffb751a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2a0e17-6cbe-4e08-888b-3f193933568d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39982936-4a2b-4599-88e3-67d08a8071a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc14535b-6ddb-4b2c-951d-c4646c47c254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adb27b6-cff7-4620-878c-f34c905a2d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48000c50-56f1-4455-b038-a273edd78c83",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8d9e8d-c059-4727-95cc-9ec5c282bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee539cc0-8d11-4fdd-834c-f14196ed785e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6729fb8b-fcbe-4759-9deb-284427f6dee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f55682-6a09-4def-8a21-2dd591de7cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa110586-c6a0-44c9-a390-6db06ea68301",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee4df51-30fe-407c-a522-4baf181a9019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "787d4115-941e-477b-bdf1-8961432d0009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d5cf62-ece4-48f7-ba00-cb96430b6e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0224f2f8-4b4f-4e6d-89a0-4523900f2e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f5974-e8c4-4cba-9a36-36774a25b66c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af189b7-c863-4ec9-b1f9-b2e7b3a25696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd298bfe-e56d-4582-9e1b-c702c2d5650d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ca3193-cfa0-4d03-a930-7b3ef7cf982f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ce50e9-539e-42ff-9314-803161372294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6617a54b-9d64-4663-94e5-11e77a68e9d2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3b4960-0729-4889-8f60-6b3931a1d3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4031effe-5267-43bc-b71b-544894f425d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e25b86d-8722-4c68-b00c-bd6623e1d3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77906cd0-188a-44ff-b883-179a9cb0f54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a11fab-3c0c-43fd-9233-3b58a8e77f17",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9fa64b-0882-4a80-b6ba-50cfb3be9bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "065fd307-089d-4c13-9fc6-abb3d8b91cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddbad7f-f908-4032-a42a-202a42e399be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326f097d-9bf1-46e9-8dae-693b26e153d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c45099-b4b9-446d-b59c-eaf69b2560d2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf3f99f-b1b3-4ad3-a739-7c2e073aff04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecee463-bb89-44bc-a886-f557d01b6464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5eb14e-ae08-4e7c-bb87-a16ef323e962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796d7647-8326-4a09-bac9-eb1e31b682cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffd7ffe-e286-4a34-b174-870471e16fda",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bf7c20-b93f-4937-8e30-1346c1999b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3983dd0-6f7f-4e27-bf92-0c699362d1b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f23bea5-67c9-44cc-bf64-e21644086d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d103ad-35b8-447f-94cd-e62d5d13ed2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cb0f8a-5919-4fc0-a779-e0ec603cb2b9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d34315-f0cb-4bc7-9627-294f2017da46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4352d29-3743-4c20-87e6-33ba335cefc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3376e8f3-efa5-4339-8ca1-5ba999a1889d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebb8345-8f2e-424a-8d2b-e055b1a18138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd130cd-9682-42f0-86e6-0f77e33b182a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96be2d9-e71b-4870-8808-486406ffc288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3ed1a5-eaae-4dd0-9f89-6628f22df8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa593da-c1a0-4941-8aed-7eeeda7c531c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d94d3d-4273-4f84-80ad-a51b50af82e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c8a901-0a58-4b88-b43f-58351c15d25f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85507b9-fd53-427c-9baf-01cb458e1ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5027ea9e-484c-4fc5-92eb-09bc52fc4992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8376a10-0833-4af3-b828-c74be1a8ee44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81338a6-b0e5-4b69-8b75-0e9ea8ff5c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e1aefc-f9d5-4732-b313-949c737cb016",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e13d64f-15c5-4ac2-9aed-9bd518dcef81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da2a8d4-f468-4bf8-aa25-08339e506f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e953fa0-81b8-4355-91b6-396373c2809c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924174d2-beca-447d-8b31-b7e8d0c33404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c325705-89df-4b17-9a4d-815f365fda71",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c24520a-6992-41d3-ba9e-46adc338e642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0065c24b-070b-4a8b-88ff-1a84805e6d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213fd609-a7bd-465f-8e40-6c51d2833b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5222b20-888f-4cc1-b03d-719f0baed146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b942c1e8-d4bc-49d8-a980-376ee5744ae9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3b8fa4-df9e-40ff-8bb5-de63bea8c981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbfb1997-fe71-41b7-baa1-361e59b9a6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afd6ce4-404b-4136-bd0e-1447d6a47f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6d9a17-c95c-45ba-b478-4644c54c40e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f297554f-f03e-4dbf-bf36-f53105218fdf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18ca97f-e05c-499e-9c7c-141b86fab149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57320f58-0b72-4472-a2e8-67cf9ea7b1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c0eb4d-433f-43ef-a738-bcdfe20941ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bfec2f-6e15-47bd-8f67-1c7694d3d9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab4a2ac-de67-4bed-b393-83e15d77c116",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db43cd1e-1017-4af8-a57e-1febc04909ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aa746c-742b-4a5a-8ce3-a6549c749c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c50267-6216-4214-a6eb-927744651902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c066cf51-8f40-433d-beb5-0f64b0ec9201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365fc236-251e-431a-aa20-373faffc1440",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5faf7590-74bf-49ea-af90-444f66184588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac725afb-d783-4d2c-ac74-44581ec2442d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b363100-ccb8-4939-8b6c-35ec1cfd6ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055d474d-35c4-4d1c-a5de-b6a9cff4f5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c10759-5e2e-4ed4-8577-9cbbbdaecafd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7613c2fe-4f15-4bc5-9112-1fee9d6ad8b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd5a88b-2a3a-420b-976a-d1cb09f0d57e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272f690b-ac0b-411e-b17d-e5647ef4a241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c437e79-4310-433f-bb77-7c91c7258988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44da08ee-6383-4fd6-9ede-41f089d61815",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f10e48a-07b6-408a-a0d9-c8466d0d933b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea5a1a4-0877-4430-b61d-403f41554e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba89004-e01c-4818-872a-477c87dbbcfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8cf005-99ab-431d-88dd-2cac8d3e4e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88025393-43d7-4fda-81b5-f2868cdbe42d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154b507f-6a71-4bd3-aea9-037e5c43e485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2393041a-1b0f-42c7-8b0b-32466df2e739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "774f8104-3821-4d9c-902c-d32fe077d8b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62880ab9-2792-409f-a420-5ed2abf5eed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e819ce-aa18-4f7f-b622-b659dce7527b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c35be9-ede1-4892-83ce-d30131b2e248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51542790-e573-4dd1-a077-e81c9b216b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44a4e4b-2d18-4bd0-9305-520b8f00791c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb8372a-31d1-4478-8fad-ac7783f58759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6f6ff9-b729-4815-9596-7ae348f4f264",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e7410e-f4ad-478f-af16-c77fc7b91a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459e6b50-7b13-4036-b997-d6797bc1b55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e2216b-b0ed-4948-9153-9745446b7966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d64754b-c9b4-4fb6-ba1e-d44d22599c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35fe9f9-2871-4fdc-a26c-344e48ad45bd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a4561e-c04d-40ae-843b-cd6e106dcc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6859ea7-a770-48b3-89f9-97c23c1e1384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948be949-2a6f-470c-8071-b69681f35718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c9a141-c9b6-428e-b514-a7fcad35c3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a915e88-3fe9-441f-b50f-cc97f3dcd3b3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c40865-f50b-4665-9388-138de8d433a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7b908e-350c-43cb-a798-e899e6229c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f96729-0bfb-4ae4-9fb5-42b314cdb323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24dac7b-b41f-463b-826b-951a47de2603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae65fae-0376-4d4f-9ade-7e308aaf9715",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336e26f7-d7bb-4785-8594-94908248292e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42c64bb-a8ec-4b5e-b9be-da5979ec0405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7065f8e-6c77-412d-9ecf-d3b0d8c1d565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66871ac-5eef-46ac-a157-d469f4c63463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c971f3-97d4-4fad-8e08-c21a4f264c40",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f380bbf-0000-4b00-ba23-661522c54ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a902487-4a6b-4fde-bf5c-c96a117639e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbb409e-a5a7-4072-9b8e-599f3fb91554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308ec8eb-ab1c-406b-b722-abcd08735ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49845ff4-bbb6-4fb1-bf29-72ddce0aea6c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d9b2c5-c6fd-4b6f-8265-d40a66460ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f82aaf-3f4c-450e-8815-ac018281bd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf76e59-b3c4-41c8-b934-f08e07860997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae00aa91-f829-4921-af1e-c3ac89fb24e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d9c88d-6bcf-4640-8dfa-3567623aedeb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3409c43-5b62-467f-b88c-b4a41c671909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f45594a-abbf-493b-a446-4a32fc482a3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8deb5550-f9a7-4ee8-acd0-60657dcab011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575eafa7-b235-43e0-bc7a-74aa0b480c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8540bbd8-eb56-45fa-98de-b71099e9ec3b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae6e886-f708-46ad-b439-7c7cdc54a437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e78aa9d-13fa-4d08-92ae-10da3e849379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2e14a8-c5f9-40ad-b828-dfb6c0b5f9af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd245c6-24bb-4408-9568-3f38696a1944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fb0b6e-781c-4776-aed6-853d2289f0ce",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26030656-a21b-469a-aa23-c7133deb3bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b5d144d-0646-44d7-9ae8-2ed4f5310ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be4fa3b-6810-42e4-8345-786f459add9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b45455-df48-437a-a4c9-f243a9f5e17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e01232-6d9d-4c64-a704-5e699da03a85",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4031e78f-7326-4dd9-b1a9-ac9522fa9969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdab10d-be6d-49cd-ab05-e550e0a16821"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c37438e-0eb4-49cf-be63-b0d495379a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d02299-28d0-464c-8aa3-b66f295a9530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04badd84-b999-49af-a5b5-42667e4e5a94",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed3902-a4cd-4d4b-80f4-f7de70f8fad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bfa0ca-3345-4628-a68f-d13759d62c2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dcf140-1181-49d0-a85a-ff147ee051a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859fe5bb-db35-433a-a5be-5db0ef49afe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a681ad-b288-4602-97a2-61202077e880",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e966ca79-cafa-484a-a839-1d39a45fdff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad9cbfe-9745-476a-87af-42a1a31d76cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa05ffc-f9e7-4e3a-a9d5-98ce039340cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a07563-e1a7-4831-8ac3-910fd15a899b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfdc07a-4968-4021-bc6d-5e0b95961a9e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cf51e4-3592-49f5-a406-f60935828bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2206731f-127f-4921-9e90-c714505a773c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd1b003-5fd2-4920-a536-9ba79a7bd74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9051e782-3667-4cc2-a452-0937efc04651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1062754c-a25e-470c-a1d1-a92046694032",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d04ce4-6cb6-4624-9cb4-a85527fc17ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f398bb5-d132-4f41-8fb0-0b9d3b9f93e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b697cabc-de0b-4266-9155-7e523bb52e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d08c7c-9fa7-451c-8e4c-932564c3a63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058463ad-9df0-425a-9072-4bace022961c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79007ada-ba80-4511-841f-1438414677cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825f1510-39b2-449f-be7e-54e60b92220b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3a1c14-ba94-44e1-84f1-298cfcc89a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5bf2dd-ae50-4cab-a2cb-83c8aad092de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1af39c-abd9-4dd7-97b7-f96a7c0028b4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e7e594-b5ca-4d37-8395-b6359321e929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b8b1fb-2c07-4569-a0e1-17ad77982189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19a6421-facb-4472-a8b0-bee88ffde7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838be2e3-e0f2-401c-a0d6-f5c50732b497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bf194e-6b1b-4fe3-be5a-6ade69d73bac",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3d8c38-de58-4265-a85d-b695cd017a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d440e44-4320-415e-bde7-e331bcc5a895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a92fc72-39a6-4490-88cd-306cdd38d3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba9345b-c447-4e35-b312-5297968dbef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb81b9b-4eb5-4d5e-862d-0e51f7061226",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4279e51-222e-4bb6-b872-96302bfcc682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d2d124-b1aa-4f77-8f1b-f5372649534e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d031354f-0071-482b-83eb-069a7c00f018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3662ec5-fe9d-44c3-9c5e-f5e1c8de361e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450bff9a-7bef-4ee6-92bd-df39c85ba70e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e560835c-7bc5-451f-a879-6b950b902d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84cdfbe-25c2-4146-9b8d-bc1111bd50c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957b3f0f-9e36-49db-9f4c-236e1d82cb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037fb86d-307d-46a9-9ba3-c795dd12fb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3f2724-4f62-427e-bb5f-053fb1387a46",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca3bb3b-cbc8-46c6-8ad3-585f46974f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e107f0-fac2-4c69-b95c-ad1dd70e86c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36869e90-d811-4b4d-9107-b99ed6646867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1f07cb-2aba-49fb-9b7f-e9d8b158d6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2e8e40-0f52-4d0d-9b08-3e64dc51db55",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211f0353-62e0-43ed-b8e6-a59a49919eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4730d650-479d-4b5b-8a92-2d79ea44ea19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6f6bc7-5feb-4527-a513-b1bb32a4009f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0827ca09-b4f5-4b58-be26-280ea4b34595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2970de-224a-4172-850a-7375c8f45e85",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f59381-9189-4467-9232-458c09160095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f46b64b-1f30-4481-9ab3-778177c567af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f95d69b-c2bf-46d3-87d1-94178bd3540a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d19b96-6b81-4ca3-9b04-81d2bc76d528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763c8a66-ef62-4276-9cc8-931278efaecc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e190bb29-c633-4e50-b069-35ea2089b674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2daed5ec-c754-4c4a-bbd5-42002350c392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91251ccf-0379-45f1-8c4e-5849a2dc09ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1772641-ec9e-419f-978f-3655e61cf544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7897d444-798d-4cda-8811-7980c6e9e4e8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e45de39-beb5-4445-aef3-37e23a545c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bebf189b-309d-475c-b3b3-e0a32c76ba54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b622f1-388a-49d6-b299-2397a8dbe652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f99d42-a8a0-48e1-994c-abe713c1ca65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be50bd04-2575-4c24-957f-ed410a37e20f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844ccd62-48de-4c57-9ecb-8b45fd627a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65985d4b-0d21-40fe-b033-2cea54461fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fafc66c-9abc-4c75-8fb0-774b59df01e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0c7f0e-b6d1-4e66-883e-e1e2544f89ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b53ecd1-23fc-4e04-915d-9aaf918b64bf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e57964-2637-4223-bbf2-46bb46898ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0722ed89-2325-4782-9a7e-f4a389a72197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b985f4-5b17-4790-ade9-ffdecec778a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c0a4ea-906c-44a2-bc1e-a122e44a5f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e43b81-cbc6-40bf-9cf9-d596112aeb69",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5330a1a2-0c78-49e1-b2af-b506fbfda579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a538d691-3a6d-4550-9d7a-8fba3a301ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08abf20-5c0f-4305-abab-735514b08dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052f42bc-10a7-439b-94ea-bc6ca3110502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d34579-5dba-429d-b097-e7f46a4f6bb6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4657c4e9-1164-4048-b701-a77b053dc3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c55ca1-8e82-4e92-8118-a18b23f22668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bdba438-44ec-4611-b3e8-fa258792d4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32699d6-cbf3-4dc1-959a-c3635f7d0756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa6400d-1e34-4e25-b7cf-d3439bfd6503",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293381fe-9096-4112-89b4-16387ea08a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f0ef20-70a9-496b-ba8a-5b99daa2fb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1067a1d3-e979-4e7e-bf6a-bdbe86ff3807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab083ab-e79d-42f2-8fc5-aebe0b60d270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3317add-81f1-4306-bce7-91d300d75b18",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ba60f4-9457-45d1-9c3e-ebabf6749be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570771d7-364c-40ce-8b50-db716b159c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59d54bd-ff88-4ef7-8a34-89f44c9d1e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e17f5e8-c5ad-407c-81b9-782c5779d3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6891781-5107-4d42-99ef-2a4782ea5c45",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15af560e-8a84-432e-8482-7ac4caf966f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7b8a3cc-adff-4ec7-9dac-6ea8c35f4a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4028e4-fba3-4ff0-a6db-d6d900a799de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d19a09-8929-4d8a-a633-c593ad4a5352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eabd414-8b73-4dc5-b3a3-d99dde009e60",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76997a5a-c9e0-4850-9a66-26cbed95e523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a2f35f-3b2d-448d-86ce-2c0e4e39128f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05553bc1-23b1-4cd6-b707-2757270eb21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e20a09-2583-45c7-9fec-ee272d15e14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a79e12-93ad-4454-9758-b08e0d0761c6",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63afda6c-652c-4e18-81d0-4efb0eb829fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc2cb41-6ce7-4eb7-bc57-8374cdc27444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c22f00-3ca8-4aba-b7d1-573f76af8185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e93c008-57a7-4316-bf90-7fbf86590472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cb1395-774d-4dc3-9f58-d98aa78febc8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f1a581-157d-45bb-b2ce-f1349165c7ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a3d348-a68e-4a5b-b6bd-e28c910781b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a133efee-b60b-4ed6-b068-fd9622dfa961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84660f6e-a85f-4464-b0c0-e015d3a08fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15053b28-2fbb-410e-9902-be1801183dae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6802b28b-cfe6-4b25-b52f-d1fe9ffc393f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14cce122-c276-43a4-acad-b1350f77d618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8c9e68-97e8-4d7c-b104-d4de2de75b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85cdf8ff-b012-4a31-9adb-b04aff2a45da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3966d8da-54d6-4851-8648-79001eb96edb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe80d1e-4123-40a7-b63f-960ac803abe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6b4c1f-2879-4f56-945c-78c4da2467af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6359bd-3ab2-4adc-8c4f-c256d3767c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74251387-a724-48e9-8ba2-cd4f7b1cc3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ff5a62-c1b1-47fa-99c8-a363c1dab36b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff13cea-6c8f-403c-bdfc-232d4cd6bdab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52af986-0a26-45c5-a609-a7c07c3087d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6cfd09-0138-419e-a1af-98f17df77495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f5e437-b25c-4ea5-99fb-8aa739e2def6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48618307-d499-4db3-8397-7bb052bc0526",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5145fb8a-db8d-40a4-9784-f200d6531b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d037b3-4c2c-4b0e-92a7-505e2ce4e818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ac0832-4f51-401a-919a-9e1359b5289d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9363ed-b96d-46ad-b1b9-368248ced7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afd9aee-ecde-451e-9690-3a01b4f3f3d8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f1f5b3-5774-4207-ae77-b677a381f436",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c7633df-d2e0-4bf0-8687-4d802e5499b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d38913-8db5-4be4-8ea7-dcfccbb8ec51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6ff26c-d88d-4f7b-8b67-69b7c72f2047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae71eb4f-56b4-4361-8b93-9fe8b8a20d88",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af246bc0-a72e-439b-b179-ebb67dcd70b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a85096f3-eb22-4fe0-b9a3-f6811a140df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d00a1de-63d2-4746-9d4a-c41ecd1d2aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4549b1-b827-4c9f-b33c-86b3bf1b50a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd20e4e-4d1d-4823-8eaf-9b55ccc99bee",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8039b7-2bba-4d9d-9142-4f2473a0e1fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5fbbec5-e207-41e5-828e-0bdac7c970a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cdfd1d-ab66-4363-8de4-bae9410873f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c5f6ba-0936-4207-a85c-afceac90c67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73322461-518c-4274-af98-f4cf94094082",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f29ccbd-8318-4a76-88a0-49dd84283bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25ad694e-32c4-42f1-90f1-86f2ed45d6e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b4786-e085-4efd-8e3b-4e49e22b6a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b84f5d1-7486-4f13-912a-1c370feb1093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "335adbcf-a1c8-409e-8702-1e97d7c761f5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13eaaaf-1383-4ec5-ac99-21f88505790d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddf170d1-951a-4974-bb3c-44b0c963fdee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedcb720-0c6b-47fd-8762-bbdb8948d7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e24d60-bc61-438f-b004-9277d1ec7a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5855f7-9151-4185-8513-63df7a1533ef",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ea2db5-1631-4816-ba0e-e0e25a6f4c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058b874e-5d22-4fe5-b53a-60b42672edbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210dc250-8cdf-4543-93d1-dd837907d068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a422f9-83ff-4af3-a197-0a76978ae16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3429109-72db-4cfa-bf06-abacaa5f3afe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d192881-061a-4eda-9831-ac2044f1711d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b02681-f131-43e1-be7f-794164db7469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ac3763-a427-4cac-aaf6-aba7861eb840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3557281e-7e80-4379-83a5-579788017586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e391cd-cdc9-4cc8-a681-06a701537767",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75591e67-8328-4572-8654-a30a10f737f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07885ca8-5b94-466d-95b1-4e27119d0680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04799d53-3d6f-4436-aa99-3cb6ef3a5561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ae4aad-1ba4-4efe-92d8-20d28dfb814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f4ac20-3ccf-4f54-8094-2fb782665fcf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e159470-a903-4d8a-a877-016f6e555a3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59289142-f859-45c5-afe6-d66d0cbf17fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fa154a-0872-4eba-962f-3578b40baa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1974c834-6e95-41aa-803f-305647b810b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73129183-056f-4710-b31b-e251b952c84f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b7c6fe-a081-4df9-a95c-ac7848897b10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea4494a-e5ad-4695-abdc-301942e62e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee77dede-77d6-479d-926e-1d2ae3a3a507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe2e5f2-b5fd-448e-a390-21eb059cb0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433a7a11-50a9-409f-b8f9-cd2aa80e6efa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efd7e7e-2700-4fd9-93ed-c7a089eb7c51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e4c565f-c0b4-4a16-9391-a67cbb18aaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8955968-936b-4e76-b34d-16798ef183e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0cbe34-5fcf-4228-8631-dd3010d3a88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10130380-a755-4622-94e0-516b5623578f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff69a53e-e8c9-4059-a45e-d524c88a5c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9982dcea-5bfd-4a33-91f1-dd2fc8d9fc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf87656-6bca-4d90-9600-254c5689e4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1d0005-9149-416f-a0bd-6ad8e9704a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f739a8-0c09-48ae-b61d-83a0c3314b02",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76bad03-5daf-49e5-9b01-ba98df040ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522a690f-68b5-4f9e-850f-229a1a14c151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc72b3e-cb11-4ee7-b940-a60b6c94abae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbf67e9-e9d1-402f-b07b-61e96e735859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee58232-f8da-48b8-bdf6-20fd86b9ac8f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592ede40-e57e-4583-b4e3-f0ec53156dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43a3830-46e3-48c2-8b81-33c71574bf11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6d0af0-9665-4faf-a6fb-90af673fbf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7fdbde-03bc-4923-9369-934c310e11be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c472a14f-84dc-40bd-9d3e-949c82d39b60",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf84a96-a5c0-4bfb-b93c-9ebc7b314b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c293cbfc-1edf-40d3-a6b2-d867179b731f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2afd3e-15db-4c69-af32-d6ed42fc51c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626f7b3e-9fc6-4d46-a19c-3c9e758dee88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923b8c4c-98c5-42de-9bed-b4bc9a72b04a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73141fce-57e9-4f3c-a248-6433a56373b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25398313-8955-4777-8a14-ffd7daeddf32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a91d803-c1ab-4808-abde-efb3b236b11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0ac645-ce18-4b40-8c63-68ff4088d412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce16e96-f555-471d-8a03-437f0ca1d17d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f6164c-90c7-44be-bddd-4ca8a8b7f2f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7952b9ba-8122-497f-b078-ef403e495242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d61f63-ba48-4bb5-916e-cd27f4c447a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c03932d-e562-40bf-9c99-acf0554be48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4bf60fa-6612-404a-a411-80146afb227f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc172c47-4cec-4158-8c33-65f6fd6506c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3afc3c3-8897-46f6-9609-bffb01645052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "882c17fe-5013-487c-94d7-ed9761d423e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34b0767-70c9-4633-9525-2218c1acdf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15b03e2-9ca5-4136-88eb-14bb3da327c2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1315b789-8845-49ed-90b7-faa1fa19a9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7904345c-0cce-4b3f-986b-2463d3945d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d61d022-77d7-4761-b1df-079c636425e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200c1256-49fa-45c3-a2b7-bd9da2307e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3e999b-4101-4d32-bbdd-44c07d433ed1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ac0658-024b-482d-9217-4a8154bb8044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63a28ba-339e-4d4d-8b3e-31c4ff1945db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bc3ed0-c512-4b26-92ef-ca6c10ba9664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1481b084-0578-4c76-bd92-403bbd4e2fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3137c30-6d0c-4fa4-a06b-ec7b77724178",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c40e449-877d-44f9-908a-b2d335cf042c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef1a67a2-65e4-44d9-8482-73b5c70f3d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d49240c-e9be-44d4-accd-a5520ad5e148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae09b93-3c80-4077-b2ae-8c153a253aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f00607-d7f6-47fb-b0e0-98eb7362f81e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f199ca-5921-494b-be24-797797e6b8a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6636c5d3-6c07-49ba-8539-fd04e5b0660a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90900e18-0764-4379-bbaa-75610f06ef50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493af6b6-d48b-47e5-8104-e75e6abf7dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1040c1-1ff3-4b8a-badb-4e277aa96c1f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910dcf53-c0cd-4e11-9439-644ac7f6ffdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31741334-6ac9-4807-8573-f00e179b7aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ed3d87-5b8e-48ac-9357-cd78dab86a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0a6f2d-8b29-4afa-ac13-af00fcb36aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9f7780-4751-4f4c-b3db-8089d2aa56d6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec9be5a-10e4-4a02-bc52-8bea87c6fcde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516d0585-f717-4ff2-9ffe-590cb98e3492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6433b14-b497-48de-abcb-c587ba4c655c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f78031b-5ec6-4cbe-968b-2391ce652fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a79870e-ac9e-466f-a0d4-7be89bf8ee4b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec22614-c394-44e5-8bda-fea4505f0cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0155f05d-55a5-4156-9742-3139805d2c3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df6eae9-63ad-4da0-9b01-301119c832e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2e3d5d-731a-4e8c-951e-7864c4f6af40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd0502-bd4c-4354-a612-69e7550781ca",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aacb33-0150-4e93-826c-98f22096aa8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc9b8627-9f20-4339-9a9a-6e33124740c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60fe984-46bf-46c7-bf06-f1814b2dba18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba100de-83a1-45db-9011-1790a84e84ce"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "537ac0fc-842a-4a0c-9127-d98dec8d88a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7350516e-7645-430e-882d-02d246eaff6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cad70bda-cfd4-441d-bd73-e124b62692ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45b04ea3-1acb-47f8-9209-af4ec6aaf0b8"
                    }
                  }
                ]
              },
              {
                "id": "a6e5c291-2670-466d-b3b2-f64a98119a9a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44b1966b-4ac4-4722-be9f-09c7816e4b4e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d646572c-f220-40d3-b2d2-1f736ea558d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7d70b5c9-b301-4050-a9ef-4009697133e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e159ecc-7289-4f09-8a01-4c25ce3d0ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "382a123b-8ba9-403b-b987-37b92539c794"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c89da37-0597-4834-83ee-18481e7e47cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26e031bc-a8a0-49f0-9313-b7f4a9f74adb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "261b30e4-8830-47b9-9c98-9051794d6b9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54e648d6-b2f1-42d8-9239-9856e841d9a3"
                    }
                  }
                ]
              },
              {
                "id": "76fc2cf5-0cbd-4e15-ab92-e39995fdf0c7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "152de478-976c-4231-ac45-813937d9687b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9043084-b0d9-4e3d-b0c1-67573391bf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5a5fce74-c987-4ea9-aa0b-326366433f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7bcade-d705-41b7-803a-1eede4c5eaef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723efb71-a065-4c1a-928c-4894717580f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5e51caad-d95e-46c2-8bb7-5416bac040c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42b2321a-a475-4d90-a809-538ffebb93b4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55d74f84-070d-4d1e-a79f-0fab93579a30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b301e017-efd9-4de3-bd97-a464bad5f4f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dd399e2-67ba-4288-9ef5-1456f69548e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29fe91e0-856a-4bee-8891-cd6e3cc6ca00"
                    }
                  }
                ]
              },
              {
                "id": "bb37a04b-e814-4647-ab23-5e3c42f679d4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61164923-f2b3-4db1-88db-830e3b287e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ca23ccce-cc20-4865-896e-08427e7da581"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4d92c8e-1b45-4987-a197-1390a76de80f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5369634c-904b-4252-89f2-4c3dae1d96f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4afae4d6-e405-41ce-bb6c-a3516db54601",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1c4eb47c-fd59-4d56-9551-4fc44e1561a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fb76057-720d-4869-9586-5f0adf966ee0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cc7e23b-6a73-4a0f-a767-d2f0fae89089"
            }
          }
        ]
      },
      {
        "id": "05b9c1c5-315a-4242-b4ed-6a83835034ce",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "78a29181-c200-48a9-a40e-c2c60a9a44a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4270a015-fd57-4a18-9160-38ec8201f43d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "604cc461-1d8e-4d7c-bd00-ee2f196a7e7e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aeb7311-aa67-44fb-8467-52af0edcfd21",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0968f97a-1ad0-4f78-9989-baac87fd3ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ab8665-3f75-442a-b90d-95d55e65e364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98957cc3-65d4-4792-966c-b02d1cb446dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9481584d-7f43-4e5c-8251-ef29954456ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0196763-6290-4800-8033-083871a8774f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f4a88df-7f5e-4827-8d71-6b6a768b9e86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f1f64d0-ac97-4cad-b92e-8688a2138331"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a389ca8a-a305-43a4-ae73-fbe1a53811ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "511bca57-2b58-4e9e-910e-4f123e17faba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15600376-4c96-434b-8733-29306dd57741",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "405d1e75-b456-4cba-83e5-3af7cdd40599"
            }
          }
        ]
      },
      {
        "id": "3f829b90-ec85-409f-b31d-98212affcddc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8ed413b4-86b2-43be-a5af-f2e5966c54ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7f1500d-4040-4190-b34e-35c460dbb725",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "777f0ab5-2d92-4988-ae5a-20e3d603c35a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33140b03-0841-4771-a927-fd79b5179cb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93bfcb9d-e5c4-46a7-b482-74477c3f7a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a998e6c6-6088-43d3-899c-90ab5b80a240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37a56272-980c-454b-b62c-8532fe91c0ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "370a087d-c33c-4c9a-ad21-ca3d1e0641ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0435aef-1678-4c16-92f2-1aa669dd0899"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c6ff3be-8af0-4113-a84b-7850cd68df0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1962f43f-b59a-4beb-9f0c-a58b290de195"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9020cc18-8ebc-485d-b006-5f1b120b52ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "896579b5-4ffe-45a3-b0f6-4c4c2c77184b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53d4d2b3-3c60-4487-8fc0-d2dbb70b0595",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a2be2c0-a2c5-4781-8baf-87288bcb15a0"
            }
          }
        ]
      },
      {
        "id": "fa5e14a2-c3fb-4a05-b5d1-3fbc79777935",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fd6bb72e-37c0-4b6e-b81a-1747390a2530",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6dccb3ad-eaee-45d5-8e4c-817f789485b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0957fac3-af24-49f4-916e-bdb814ad39ac",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554a70c6-ec3e-42ac-a6df-e084a2ca99e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d875e04c-37f8-4d72-8e34-3632c37c6acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff79b4f6-a8bc-417c-9c10-88711263ac4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdb97ec2-8134-4263-bcde-6d5a878b9b12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69fe2bb4-f60d-4789-af1f-c16906e082d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7308923f-170b-4d1a-b117-132aa3e52809"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "265abe1c-bcb6-4dd2-8d5d-6579756d34b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b678d15-97c5-47ae-ab72-3a50d2476d9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b81116b-e0f1-40b6-a874-647ffc2797b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "035a06fb-d2d8-4b88-9e04-d81f0b2a7eea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c59347b9-cbf3-4975-904f-567f40b25f7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c701176b-99a9-4114-be37-ffc4fe08d178"
            }
          }
        ]
      },
      {
        "id": "b904cef7-3ff3-40bb-98ef-f54eea3c22cb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42657450-1531-43d9-a92f-03d94435a853",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf5e7307-c9f7-4330-bf9b-0cc47f89cac0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6347ae2e-6a47-446c-8374-35ea5b35b7f1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "756acf02-b96c-4106-98e8-0da039ca7ec5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "127738ea-d18a-410c-b337-5cbfafe7bd37",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 479
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 495.4227642276424,
      "responseMin": 8,
      "responseMax": 1182,
      "responseSd": 147.8509196492857,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685925759527,
      "completed": 1685925894055
    },
    "executions": [
      {
        "id": "7093740f-8345-4cf5-8eb0-11c9e94cd188",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "40d39379-14d1-4c58-a468-a9d0434bd68c",
          "httpRequestId": "7b8df786-13cd-4628-95d4-d811b6c16b0e"
        },
        "item": {
          "id": "7093740f-8345-4cf5-8eb0-11c9e94cd188",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b7542803-6629-4fc5-a4e2-b698fb8a8ac4",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "34b22dc0-4cee-41a3-b22a-4f0e2a647df2",
        "cursor": {
          "ref": "58fdbc14-e3d7-4335-87aa-3bb282cc6968",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "67b67689-176c-4a4e-aa44-670546caae6c"
        },
        "item": {
          "id": "34b22dc0-4cee-41a3-b22a-4f0e2a647df2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ee277060-b530-4671-b7b9-cbc89a6fc65e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "307f8209-d39a-4802-b195-5833e5aed921",
        "cursor": {
          "ref": "0d6e824f-071c-45a2-8895-660b3aa87c88",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fec1a469-d255-4701-9ae6-8a9cd8758705"
        },
        "item": {
          "id": "307f8209-d39a-4802-b195-5833e5aed921",
          "name": "did_json"
        },
        "response": {
          "id": "f97e47c4-833b-49bb-806a-b72bd4ad89f3",
          "status": "OK",
          "code": 200,
          "responseTime": 1182,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bc04ed-1265-4f92-8c55-37fefe1dce98",
        "cursor": {
          "ref": "db61a327-0fc8-4789-a424-ec4d884aca27",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c2d95c5-3c9a-4882-be02-da8052917bf1"
        },
        "item": {
          "id": "14bc04ed-1265-4f92-8c55-37fefe1dce98",
          "name": "did:invalid"
        },
        "response": {
          "id": "35139962-5c4d-46d0-b8a4-1466b23d896a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 897,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "14bc04ed-1265-4f92-8c55-37fefe1dce98",
        "cursor": {
          "ref": "db61a327-0fc8-4789-a424-ec4d884aca27",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c2d95c5-3c9a-4882-be02-da8052917bf1"
        },
        "item": {
          "id": "14bc04ed-1265-4f92-8c55-37fefe1dce98",
          "name": "did:invalid"
        },
        "response": {
          "id": "35139962-5c4d-46d0-b8a4-1466b23d896a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 897,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e115d88f-2fd4-494a-b5d5-9614e10f8a84",
        "cursor": {
          "ref": "dc4967c9-479d-4488-882b-4ba4b383f0ec",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ed210b4-f3e3-41b3-b45d-0f8eb6a64944"
        },
        "item": {
          "id": "e115d88f-2fd4-494a-b5d5-9614e10f8a84",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "74fc7174-dca6-43dd-95b2-e475f0892879",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "fd629054-2c9c-4ef6-bc22-ea72eeb42452",
        "cursor": {
          "ref": "713f7fad-9eab-4f33-bff2-bf0f3bdb1139",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfc3335e-c0c6-4752-969f-0a55aaa1e3a6"
        },
        "item": {
          "id": "fd629054-2c9c-4ef6-bc22-ea72eeb42452",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "18aefcbd-a586-44b2-a644-a0d94310d5f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 738,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 403",
              "stack": "AssertionError: expected response to have status code 404 but got 403\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "d3d32866-6cb5-49f9-a93a-0d173491b6a1",
        "cursor": {
          "ref": "1e7eb789-cb85-471f-8b2e-209f65f805c9",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4291ed9a-d802-4f33-af30-2f62e0099a67"
        },
        "item": {
          "id": "d3d32866-6cb5-49f9-a93a-0d173491b6a1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6855365e-1318-4253-8784-d47177ece1e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb64eef5-d0f8-4ea4-b9a0-a93b419fd923",
        "cursor": {
          "ref": "15e60d5a-c888-4bf5-b1d8-732e8fe613fc",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0306aa65-b802-43c7-abf3-0b31b87bd70d"
        },
        "item": {
          "id": "eb64eef5-d0f8-4ea4-b9a0-a93b419fd923",
          "name": "identifiers"
        },
        "response": {
          "id": "3aaff6c9-8d8f-4c44-917a-3e562ac42926",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 624,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0dc9ce54-2bc8-4989-8ef6-0b7dd06cbf7b",
        "cursor": {
          "ref": "5bc56c3f-dc29-44c6-9128-c0ea3c080b0b",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8cb02388-1000-4931-9369-4ce149c05a32"
        },
        "item": {
          "id": "0dc9ce54-2bc8-4989-8ef6-0b7dd06cbf7b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c9beed8c-bb5e-4101-9d9a-f977b9823577",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 605,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "f362558b-93d8-4b79-8062-a3d7a507942e",
        "cursor": {
          "ref": "f45f9c34-e623-4767-af0a-0961aa1f5c6d",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7860d66e-40ad-4d11-92b9-165bdebaeb9e"
        },
        "item": {
          "id": "f362558b-93d8-4b79-8062-a3d7a507942e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "61337a93-3785-4385-bdcd-10c7dd4ad35e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 587,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0bf83ea6-b4c6-4ce4-a8a4-ed97c086f641",
        "cursor": {
          "ref": "05686f98-2dd2-4092-804d-07bbd0e6bf67",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9f2b17f7-0e93-4bec-9a0a-774c917cb589"
        },
        "item": {
          "id": "0bf83ea6-b4c6-4ce4-a8a4-ed97c086f641",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "47939650-dd30-48f4-ae4c-a47d9f8db001",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 578,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "03af2925-2d5c-4412-8b76-33bf75d6ad20",
        "cursor": {
          "ref": "8d3dcae9-3f4b-47cb-8b0b-8645b17710ce",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5790c751-596e-401a-8017-ac2f9478dd62"
        },
        "item": {
          "id": "03af2925-2d5c-4412-8b76-33bf75d6ad20",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "938df241-9edb-4431-bb34-578e225308f5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 605,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "ca886415-8ee1-4602-914e-4dcbc0f47398",
        "cursor": {
          "ref": "6830780d-b3c2-46a0-bed0-716895394e59",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e82252b6-0668-48cb-97c2-f50b6f4d3754"
        },
        "item": {
          "id": "ca886415-8ee1-4602-914e-4dcbc0f47398",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "21c056f5-637e-4397-911a-612ff6f0c15f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 582,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "678aa923-2500-4040-a742-52641c4aa0be",
        "cursor": {
          "ref": "1930ea13-bc6e-4c5a-b940-a3a21f924daf",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2013ba78-78db-4af5-b955-1bdce4709cd0"
        },
        "item": {
          "id": "678aa923-2500-4040-a742-52641c4aa0be",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b1e8a44a-bf68-4562-96b8-cf85ee85e49d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 577,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ef2adf59-c52d-4a49-848b-74a17dc3de25",
        "cursor": {
          "ref": "51746226-74ce-4415-9ed2-b2fb72dd49b4",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9040d435-d758-4e90-b99d-89e8ab0f5234"
        },
        "item": {
          "id": "ef2adf59-c52d-4a49-848b-74a17dc3de25",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "63951b2f-87bf-4f41-8417-3b35629bc86b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 608,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "c5394ac5-b013-4f93-be5c-05179fa48bad",
        "cursor": {
          "ref": "f6d02db6-f37e-44b3-a5d2-b0b6651ee68d",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "69ab39d9-25b4-428b-96e0-0a823f352886"
        },
        "item": {
          "id": "c5394ac5-b013-4f93-be5c-05179fa48bad",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ee0d8d53-d15b-4f8d-a25b-e75ea24d82e3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 601,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "24da8e09-78c4-4559-a03e-c8238b662986",
        "cursor": {
          "ref": "378d5d05-b2c9-4d5e-a07a-26209630ed82",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "98ce439f-3379-4e59-a93e-481f6638c880"
        },
        "item": {
          "id": "24da8e09-78c4-4559-a03e-c8238b662986",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cab39840-b8d3-4b94-ac4e-76ddddc69bda",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 590,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "7fe7b69d-b388-4140-a524-391614e6fde9",
        "cursor": {
          "ref": "8181bd8a-b559-4092-8f70-ca076c65789d",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a80eeee5-a902-40dd-b6cd-b769c2a40ec7"
        },
        "item": {
          "id": "7fe7b69d-b388-4140-a524-391614e6fde9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "54bbfa3a-5a0a-4a21-af64-ad136a3f9e90",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 599,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ba8a709e-9342-459f-b9d8-0745ac6d701f",
        "cursor": {
          "ref": "404e1eb3-19d6-4a07-abbc-19b4e7b1f69c",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e8cab897-7e1a-41a7-a329-da05ba61ce60"
        },
        "item": {
          "id": "ba8a709e-9342-459f-b9d8-0745ac6d701f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "73c4f72c-3e80-4395-933b-afda98a7223e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ae0eb6b9-71d7-4b27-befe-9086e901ed5d",
        "cursor": {
          "ref": "a11091f9-00c0-4134-902a-7bf3c98501e1",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ec5d4e55-0168-4511-8f42-796422892370"
        },
        "item": {
          "id": "ae0eb6b9-71d7-4b27-befe-9086e901ed5d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "786298c6-0553-462f-9986-08649c3760e0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 584,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b5565079-fcb3-45fc-9c85-17948dcb46ac",
        "cursor": {
          "ref": "6bc22bb3-0c40-4cc8-8258-35c2c21043a1",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cbce8235-6b6b-485e-9f8d-44e96d89459e"
        },
        "item": {
          "id": "b5565079-fcb3-45fc-9c85-17948dcb46ac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2e45a3c2-ed1d-4f84-be98-121ea0455b53",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 595,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d5e05511-99fd-4a7d-8c8d-8f17c4332370",
        "cursor": {
          "ref": "0e10090f-b5aa-4dce-a1a6-3021a333dbdf",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c981b377-7a72-4316-8a5c-c88cc95085f7"
        },
        "item": {
          "id": "d5e05511-99fd-4a7d-8c8d-8f17c4332370",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "093cea88-0e95-44df-8c36-2d023d4eae72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 613,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "0e8750bb-6d8e-40ff-85fa-9fd13741f1f2",
        "cursor": {
          "ref": "42c4d90d-1ded-424c-98c5-c2b6aaf8a995",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9bc63d43-e131-476e-b9b0-c67d4fe51d80"
        },
        "item": {
          "id": "0e8750bb-6d8e-40ff-85fa-9fd13741f1f2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "09fa8087-9edb-4133-91fd-840f96956306",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 595,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a88dc38a-735c-4bd5-a655-bed34f8e03ac",
        "cursor": {
          "ref": "75b2bf67-fb86-4841-8c79-1137e4b1414c",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e41489a5-52b6-427a-a643-43387dac169a"
        },
        "item": {
          "id": "a88dc38a-735c-4bd5-a655-bed34f8e03ac",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "46570d86-6252-478e-b0b6-1aafaf3483cd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 609,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5edb9b6e-ddbc-47f7-a916-83a9a8edaec9",
        "cursor": {
          "ref": "4753053f-bd65-405a-9176-9705d4575e66",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b5c61daf-443e-4fcd-a9a4-2379cbe9c3f1"
        },
        "item": {
          "id": "5edb9b6e-ddbc-47f7-a916-83a9a8edaec9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1c5b9282-7c10-47ea-8dd2-c5e93b185313",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 582,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "30ea7c9b-ae94-454d-8524-b056795e96e4",
        "cursor": {
          "ref": "822a6c20-aad0-4a71-a4ab-6f7a4e71f352",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8de629de-b06e-4a7d-bb2f-920c1725b5cd"
        },
        "item": {
          "id": "30ea7c9b-ae94-454d-8524-b056795e96e4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9bbb8fa8-a6b2-4241-a673-6fcacdde6fd2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 609,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "7f43223b-3178-4d6c-a24e-a623a4c2cc53",
        "cursor": {
          "ref": "237303e9-bdb0-44dd-a9f2-4f40fc69aaf0",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f7a44655-c9d8-4b75-91ef-50e692da9b1d"
        },
        "item": {
          "id": "7f43223b-3178-4d6c-a24e-a623a4c2cc53",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1bfae247-1989-4c41-a270-4cb5b9d2b7a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 584,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "05040467-138e-46e0-b870-32ac96876b73",
        "cursor": {
          "ref": "c3ebce28-1c8a-42d6-94d5-28d95482e7c2",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3e09956f-82f6-42aa-b167-0ba29bb5c5c8"
        },
        "item": {
          "id": "05040467-138e-46e0-b870-32ac96876b73",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9656d3a6-1e94-4e20-ac94-01fe30d5434f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 603,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "22aff95a-5253-45a5-b6a1-51422c2d52e6",
        "cursor": {
          "ref": "c5fbb1f7-edc6-4b59-8942-046a034c5f55",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1cf530a4-84ca-43e3-8601-05d5ec7c7194"
        },
        "item": {
          "id": "22aff95a-5253-45a5-b6a1-51422c2d52e6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6b245dd3-2777-4803-a095-df22665d5b73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "ca42225d-d362-482d-a676-c005e0375251",
        "cursor": {
          "ref": "c96878eb-fccc-4f41-ae6f-1ef2f92c2493",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cdc96031-c92c-4b67-bf40-56c119a5b05c"
        },
        "item": {
          "id": "ca42225d-d362-482d-a676-c005e0375251",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "65a47d03-3028-4f6d-aac6-2e070782fac0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c1d198eb-7d7e-4b8f-a54b-66d0d857dd5d",
        "cursor": {
          "ref": "77baf474-f4fd-4927-ac1f-151155c9f5b6",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7396437b-d00a-41c8-86f4-804fc912b43e"
        },
        "item": {
          "id": "c1d198eb-7d7e-4b8f-a54b-66d0d857dd5d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ff9bdb4c-0bbe-4fc5-94fe-94e1698391f9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "42d95475-6fec-4e1a-ad87-ebdbb6e6b9a4",
        "cursor": {
          "ref": "1b354795-c192-43b7-b46b-99b7c8356181",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b9827ab5-17f9-49fb-97f4-fb63f316e14b"
        },
        "item": {
          "id": "42d95475-6fec-4e1a-ad87-ebdbb6e6b9a4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a6fd596e-5f44-4065-b29e-1d6b83ce1fa3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 636,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "09c80705-02d7-4677-a17b-9bed81bddf7b",
        "cursor": {
          "ref": "f387c6ea-1e05-4acd-a0c9-d0a8f0992774",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "dbbb9e70-064a-4206-971f-ed1e35b01774"
        },
        "item": {
          "id": "09c80705-02d7-4677-a17b-9bed81bddf7b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8c5eade6-1676-4ff3-9480-5fb0c7cbb190",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 595,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ed506e5d-1ce7-46de-b4fb-29f9f54074ae",
        "cursor": {
          "ref": "736937dd-8d05-4fb0-9e01-f1f4ea6a6d38",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "751c662e-bdc7-4862-9a2b-6c67f3b3b228"
        },
        "item": {
          "id": "ed506e5d-1ce7-46de-b4fb-29f9f54074ae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d93cb8d7-b828-4682-a837-b83aeeaabed8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 600,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "fae0ed25-42a2-4c3d-a0be-26b40e22a5f8",
        "cursor": {
          "ref": "1e80ab5f-2e8f-4004-bc49-9b64c915b38a",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3c4c57d3-5e74-46d8-ba96-6d06cd73dc74"
        },
        "item": {
          "id": "fae0ed25-42a2-4c3d-a0be-26b40e22a5f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c49deb87-9657-471d-88c6-931d03d2605f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 598,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "fbc0c9f9-1ccd-4092-8f1d-8da7d2d665ae",
        "cursor": {
          "ref": "8f7dc0e2-b9d3-46ef-b352-b614e1db2dbb",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5e7a6acc-fb2c-438b-a91e-b4fcfb3d951e"
        },
        "item": {
          "id": "fbc0c9f9-1ccd-4092-8f1d-8da7d2d665ae",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8b5f2653-5fc0-40ae-9a38-9ebce714e4af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 601,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "989f6067-b6c9-4d5c-ba87-5e057df20c00",
        "cursor": {
          "ref": "9306378b-34ba-4d7c-a970-223bb5fb79aa",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4fec103f-130b-4ac2-851b-0a9e4b5db388"
        },
        "item": {
          "id": "989f6067-b6c9-4d5c-ba87-5e057df20c00",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4ee7d517-3dd7-4c6a-b5b3-615a050a1692",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 573,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a797e2bd-d5eb-44a5-89b4-bb4201ef38fb",
        "cursor": {
          "ref": "8da3e0de-93e8-4efd-ac79-e032a7020495",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01cfff4f-612e-46e4-af41-88e1a9a9a284"
        },
        "item": {
          "id": "a797e2bd-d5eb-44a5-89b4-bb4201ef38fb",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c5d0a767-ad7d-4753-ba76-9555855129f3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 592,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "34d76d3e-942d-4ecf-b546-ef8d9a03e594",
        "cursor": {
          "ref": "2f1e279c-c4d9-419e-acfb-69bdf4b925aa",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "479f8ca7-a0e6-48ff-b7f8-515dd0e07069"
        },
        "item": {
          "id": "34d76d3e-942d-4ecf-b546-ef8d9a03e594",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9cc1e236-8539-477b-90d8-47fa87e74730",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 586,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "82288045-6a77-4585-9e52-b629b07e38d1",
        "cursor": {
          "ref": "c450858e-30fe-4d5b-bdc0-8a560fe9bf78",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c4ce0e21-d221-49b6-83c0-f49fec33003d"
        },
        "item": {
          "id": "82288045-6a77-4585-9e52-b629b07e38d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "16a587ee-740d-4d37-bda4-220a841b20e6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 585,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0c983c55-799f-4d29-8bd5-560a323e7d0a",
        "cursor": {
          "ref": "224dafa1-5a2b-49b5-9451-9d11c251620d",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "369b6f30-9761-41ff-bb16-4dd6149fb738"
        },
        "item": {
          "id": "0c983c55-799f-4d29-8bd5-560a323e7d0a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5c63d759-12df-456c-9471-1ebf6cd5245b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 619,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b87ca733-3a6d-4b81-baf8-6b4119a6532e",
        "cursor": {
          "ref": "06fef1c2-36d9-42b9-9b65-b3964210e8fb",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2d5b2ed0-971a-4afb-a358-d02a5b72cf3e"
        },
        "item": {
          "id": "b87ca733-3a6d-4b81-baf8-6b4119a6532e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5701c479-b9b1-4920-8abc-518b9fe92377",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 564,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "62d26035-05d6-4434-af20-c875b98a0cdd",
        "cursor": {
          "ref": "94d94da7-1b4e-4465-99ee-b6c0a0ef322c",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "381ef117-2a18-4d6c-a674-879df42eecf6"
        },
        "item": {
          "id": "62d26035-05d6-4434-af20-c875b98a0cdd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "50d88062-2f5c-45af-87d6-351bcdbd3590",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 616,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f1c9bba8-3832-42da-bf56-0941304b3fd9",
        "cursor": {
          "ref": "16a9ac49-a083-4c50-8db1-6a4ef8235786",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0e1e964d-c713-4d33-abbf-a35067fb88a1"
        },
        "item": {
          "id": "f1c9bba8-3832-42da-bf56-0941304b3fd9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "03e5f98b-f019-4d00-a785-759486d0cb54",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 890,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bb74883e-c2a8-43de-be58-c5ffb6aacf8b",
        "cursor": {
          "ref": "5c89c766-b42a-4525-a462-bd50daf6a318",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8ec8b3bb-3c38-433b-ab4e-d803c922fa80"
        },
        "item": {
          "id": "bb74883e-c2a8-43de-be58-c5ffb6aacf8b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "65dd3221-59d1-4914-a00d-5d86ad782370",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 593,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cf8ec7c2-6a8d-4197-afbd-ada9c8fe1888",
        "cursor": {
          "ref": "17dbd0a1-8057-409e-8720-3b3c3df6022e",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "76a51123-af3d-4534-bacc-82d43ab654bf"
        },
        "item": {
          "id": "cf8ec7c2-6a8d-4197-afbd-ada9c8fe1888",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a4342c00-266a-4668-b0f6-bdece3cdb0d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "811056d3-000f-4926-b7d1-d9626b3e7701",
        "cursor": {
          "ref": "f8031a06-5b44-451e-a77f-5164d817ebd7",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c4aaa1a6-1a0a-4106-8d23-239951336ee6"
        },
        "item": {
          "id": "811056d3-000f-4926-b7d1-d9626b3e7701",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dec66d93-a26e-43c6-860d-832867739ff0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6ac2639b-b0a6-405c-ad72-364f1e438a46",
        "cursor": {
          "ref": "5d593c9a-0722-470a-af44-c37d3e38a83b",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "439f9eb3-40dd-4574-b37b-a98556de5703"
        },
        "item": {
          "id": "6ac2639b-b0a6-405c-ad72-364f1e438a46",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0f46e0bc-8a94-4ce4-8d7c-b1f54261b0a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 588,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f6b77198-b890-4893-a208-bff5ce9d75bc",
        "cursor": {
          "ref": "807c90d5-a6ee-4f61-8154-e5da900fd29d",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2f6132d8-d7f1-46f5-be8d-163f38d8d1f3"
        },
        "item": {
          "id": "f6b77198-b890-4893-a208-bff5ce9d75bc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fb24d2d8-90e6-49b5-a739-795c5893c4d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 572,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cf49fc61-8b9f-4e16-9842-fa090f0b1231",
        "cursor": {
          "ref": "893c0921-1b2d-4e26-88b9-03ba31779e5e",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "60518488-d5a6-438e-a0d4-6d1a3b4d8f52"
        },
        "item": {
          "id": "cf49fc61-8b9f-4e16-9842-fa090f0b1231",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd08acfe-9695-414c-8a5d-b96a90c0b14a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 616,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9c0857f1-38e1-4d9e-9be4-70125ca00a62",
        "cursor": {
          "ref": "9f708a2d-e6f1-4e14-9b0f-97511006d465",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "95785095-332a-4707-812c-322071a7cf0c"
        },
        "item": {
          "id": "9c0857f1-38e1-4d9e-9be4-70125ca00a62",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "75d64572-2fd0-4606-bb7e-956fd919fc46",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 608,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 403",
              "stack": "AssertionError: expected response to have status code 422 but got 403\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "90edeccc-0660-43c0-af83-81545a1b2900",
        "cursor": {
          "ref": "87cde8ba-1a98-4899-8d84-f0b2261e64cb",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a69f58d8-a04f-4f54-ad53-96de7c09545f"
        },
        "item": {
          "id": "90edeccc-0660-43c0-af83-81545a1b2900",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d69fd146-dbd3-4870-b227-34453e39a1c4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 598,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3f293259-5759-409c-8c61-bb6e61a9aa5a",
        "cursor": {
          "ref": "7c664f5e-aa07-4967-b576-adeed12d90dc",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "afea15b9-7645-4b9e-8929-55577375dd9c"
        },
        "item": {
          "id": "3f293259-5759-409c-8c61-bb6e61a9aa5a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0256df6b-9085-4799-8b46-f33f31013615",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 609,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "792ccc1f-5677-4612-bd10-36df2b9ffe61",
        "cursor": {
          "ref": "63006097-1da9-4318-86b8-467d5dad952c",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e11d529a-4c93-4094-aea4-38a18975c09b"
        },
        "item": {
          "id": "792ccc1f-5677-4612-bd10-36df2b9ffe61",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a8b1a553-b4ac-4427-bcbc-2c101a6c4e32",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 577,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f663d88e-9b1b-44d0-abd3-e58a5c278a54",
        "cursor": {
          "ref": "15bc7a50-7f2e-4387-b6f5-e5c3a97d6390",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ed285da2-ff15-44e6-a880-78ad92985545"
        },
        "item": {
          "id": "f663d88e-9b1b-44d0-abd3-e58a5c278a54",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8262efb2-1d2d-442a-a8c1-bf60433272fe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 673,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "fc361f6d-3c57-435b-ac9d-d34d34d7d579",
        "cursor": {
          "ref": "eb79d404-e138-4d24-a9e1-7ecf95ca2758",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9a2d0ab8-4298-4b11-98a8-323452797f82"
        },
        "item": {
          "id": "fc361f6d-3c57-435b-ac9d-d34d34d7d579",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "174a7f2d-7be0-4c6a-9c6b-500cdbd997bf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 602,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "ff07ff0b-2dd8-4f22-8669-d8dd6756210f",
        "cursor": {
          "ref": "671ad3ef-4ab5-481b-a82d-ece7037ba680",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dcb1173d-eb80-4bb8-aefe-d67d18dc6d5e"
        },
        "item": {
          "id": "ff07ff0b-2dd8-4f22-8669-d8dd6756210f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "822f6b8d-4f82-47d4-8903-0ebc60aa45af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "2566b8c8-e20a-456e-9409-d82681e473f3",
        "cursor": {
          "ref": "6e53f5ea-02a4-436e-9983-71fb9c66ac7d",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5f5b5c20-0f15-40e4-aa49-777890c7c3a0"
        },
        "item": {
          "id": "2566b8c8-e20a-456e-9409-d82681e473f3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ad0f63ee-073f-4c58-99da-aa69d7649938",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 585,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "60fb8d76-2753-4aca-a694-910a4baa92dc",
        "cursor": {
          "ref": "6ec5c1ea-86d6-4b4d-b9b8-c93549d425e5",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e27d5726-fb89-483b-a7f3-05babe2da3b9"
        },
        "item": {
          "id": "60fb8d76-2753-4aca-a694-910a4baa92dc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "779628f2-a395-4f3e-bb12-426f493880a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 593,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e1b75efd-496a-4148-b650-312d80ff0ff6",
        "cursor": {
          "ref": "c3490199-61f5-43ba-9cf9-01fa2e65deac",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1b3a328d-23c1-4212-9bc1-6827d662c171"
        },
        "item": {
          "id": "e1b75efd-496a-4148-b650-312d80ff0ff6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7bf3335f-e69d-4d8e-b107-0a059cdbcfbc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 604,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "6f3d1fcb-fb58-4d2b-9185-06822126900a",
        "cursor": {
          "ref": "9a2a7b83-9e8c-405b-ad4b-a51eafa63073",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "133b0772-8944-463a-ac7b-0c6e4a779b7a"
        },
        "item": {
          "id": "6f3d1fcb-fb58-4d2b-9185-06822126900a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "364b2044-2b2d-4b4b-bf4f-d8530bd63c5d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 577,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "e0a1a8b8-c5b7-4a09-819c-ac6c5cfc5218",
        "cursor": {
          "ref": "a05262e8-813f-464a-b62e-3f52fc5005a4",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "99f8d007-4414-4038-9d0d-14233db200c9"
        },
        "item": {
          "id": "e0a1a8b8-c5b7-4a09-819c-ac6c5cfc5218",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "847ca1aa-6c3d-4632-8709-804dbad328d7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "f534c757-baf9-49ba-91ff-10e227d47a77",
        "cursor": {
          "ref": "0ce9053a-1026-4318-8e14-d2450b03b481",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8c39efcd-20ad-46d3-847f-e279c252906b"
        },
        "item": {
          "id": "f534c757-baf9-49ba-91ff-10e227d47a77",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "48ff64c4-47fb-4b27-afaa-ee3a6b3c2d8c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "7faf85ba-d36c-4e39-9ea1-c104fbd5bada",
        "cursor": {
          "ref": "9832e5d0-b122-4485-8503-ea22508859ea",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2801c881-4c47-4996-9937-85020cb9ad08"
        },
        "item": {
          "id": "7faf85ba-d36c-4e39-9ea1-c104fbd5bada",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8f8ed5b4-2f9b-41fe-98c6-89a063cdb9fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 591,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "a329520a-176f-4575-bbb5-945a95d0dd6f",
        "cursor": {
          "ref": "15123f99-93c6-44e8-b7b0-768f74b42af5",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4019a967-0da4-4abb-ac42-e3f903d245db"
        },
        "item": {
          "id": "a329520a-176f-4575-bbb5-945a95d0dd6f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a8e6e490-77de-495f-8fd3-664875a6024c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 597,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "523c39e4-02d8-4cc4-985b-ccd71cc36697",
        "cursor": {
          "ref": "47d20442-63c4-43f6-bdd2-8a79c215c19c",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2525e354-c8a3-43ac-80f7-0dbfe1fcc9c2"
        },
        "item": {
          "id": "523c39e4-02d8-4cc4-985b-ccd71cc36697",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f969b9ec-bfea-4984-a1eb-02683ddae7b1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 566,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ad4fa1a1-7123-4834-b205-0e2cd40ec4b4",
        "cursor": {
          "ref": "06c12c6c-334c-4563-98d1-9d0c8b4706b7",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fac6477c-0fb5-4aa6-9ea4-f2dc26efc17f"
        },
        "item": {
          "id": "ad4fa1a1-7123-4834-b205-0e2cd40ec4b4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "91844931-c136-41e3-ba36-da1edac79a45",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9009fc6e-716d-419f-9ce9-75544896c7c6",
        "cursor": {
          "ref": "33fc26c4-740d-40a6-83d3-a9fcfda932cc",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "91497d2f-4615-493a-96a9-ec04949771d0"
        },
        "item": {
          "id": "9009fc6e-716d-419f-9ce9-75544896c7c6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "884aa6c2-416d-407b-9bed-0c4cbee806fe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 590,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "43b00686-bec4-4c68-b04e-880afb4e32a5",
        "cursor": {
          "ref": "656299a2-e429-4354-a6af-a06837b161a1",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b849a66f-37ae-456e-811c-f229fe0232f3"
        },
        "item": {
          "id": "43b00686-bec4-4c68-b04e-880afb4e32a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "09eb404b-e54b-4158-8bf3-0c9244e01f14",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 586,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "fe39290d-df06-4235-8a58-67e77a525c8f",
        "cursor": {
          "ref": "85ff6863-56ea-44f7-8efe-5c1eff9bd0d4",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8a3d12dd-6da1-4f5d-bd9d-654c2f85b1aa"
        },
        "item": {
          "id": "fe39290d-df06-4235-8a58-67e77a525c8f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f561e662-4ee0-471d-8ea9-c8e91e938e19",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 588,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "2acc3f6e-60d4-4670-86a0-20075cedd35f",
        "cursor": {
          "ref": "1dbefaed-e4b2-4092-ad86-81b2a7bf8039",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b01fdb0f-2095-49f4-8baa-68db7f2605f4"
        },
        "item": {
          "id": "2acc3f6e-60d4-4670-86a0-20075cedd35f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7ee1348a-2e26-4fc6-84c4-fef28e324c4f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 582,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f65ccff4-0ece-4475-8509-be7495c53d0b",
        "cursor": {
          "ref": "583dbad7-be1c-47d2-8995-6d437eb78efc",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "835ef53d-46c2-4955-814c-181b8cfd0578"
        },
        "item": {
          "id": "f65ccff4-0ece-4475-8509-be7495c53d0b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "63b9ce7a-2b83-4d32-922e-7ac020b30e2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 581,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6bd91b4a-e39a-4e5d-ab9a-88e66dfcec5e",
        "cursor": {
          "ref": "efb59332-301d-4cc8-add7-12051600d72b",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bf9dd84f-b3fc-4ab9-af42-c5108158a5b9"
        },
        "item": {
          "id": "6bd91b4a-e39a-4e5d-ab9a-88e66dfcec5e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b042e4d9-e12d-43db-ac36-045c8160956f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 622,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "82498eda-82eb-4725-9f17-ba39e45e8dd1",
        "cursor": {
          "ref": "0f5180ed-d8ab-4b40-aeae-54c1dce79a4f",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "053ccde9-f08b-496e-9ff8-88fc649a2eac"
        },
        "item": {
          "id": "82498eda-82eb-4725-9f17-ba39e45e8dd1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "04f0f7fe-29b9-4920-9be1-39045aa0a0b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 584,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "8e8e8a92-e03f-42d4-b80a-912997da8ef1",
        "cursor": {
          "ref": "4f439c30-75f1-4bfa-bfc2-d99c851e124b",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b04cbdc5-ad80-477c-89d2-4d6ec24ecd5d"
        },
        "item": {
          "id": "8e8e8a92-e03f-42d4-b80a-912997da8ef1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "131a5800-83c6-4323-ab21-52fbe0c0b41f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 581,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "17bccc0a-b74f-4b31-94d1-832592205f45",
        "cursor": {
          "ref": "f927eb28-1513-47a1-aa3c-74337b61fc5b",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "636bf3cf-bfe8-4a94-8e3d-b034c21fc607"
        },
        "item": {
          "id": "17bccc0a-b74f-4b31-94d1-832592205f45",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "38c5d6e8-893f-48d5-898b-2b6dad608a0b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 591,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "1cab5d10-e861-4eb2-8448-538831c16eeb",
        "cursor": {
          "ref": "89b4e861-b07e-4e33-ae60-1bddd747adf3",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1b02b5b0-34d5-4617-ae4d-4032758f8ed2"
        },
        "item": {
          "id": "1cab5d10-e861-4eb2-8448-538831c16eeb",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2c169b9a-972c-4197-891b-72474915b892",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 576,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "11d088a1-3cc3-4843-8958-40e489f475af",
        "cursor": {
          "ref": "00f60500-c7f8-4f21-8547-5245025a1ad0",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3cc5315d-89bb-48aa-a02a-3fb471a84c7e"
        },
        "item": {
          "id": "11d088a1-3cc3-4843-8958-40e489f475af",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "919f8997-7e30-4d1a-9630-3f434495f5b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 601,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "5977c7ca-b970-4c55-b29b-cb02202968ff",
        "cursor": {
          "ref": "a21926c9-de2f-4763-8400-e4ddfb06b9bb",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ce0868db-a4e4-4366-9da1-46c720bfaee6"
        },
        "item": {
          "id": "5977c7ca-b970-4c55-b29b-cb02202968ff",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "470a51ab-7297-49ea-89e1-24c8942f8ab7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "79882b1f-4fcf-4c24-ad7a-dd996c94e5cb",
        "cursor": {
          "ref": "8251efb3-c26c-4fc2-8664-13f1e4999aaa",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7e6762ef-83e1-4d85-ba53-914b004f49c4"
        },
        "item": {
          "id": "79882b1f-4fcf-4c24-ad7a-dd996c94e5cb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3b502cc0-8762-4b47-a406-73f29b488ec5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 678,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "0a2b3625-7043-475e-98e6-7b16d665eb78",
        "cursor": {
          "ref": "d5194494-5565-440d-804b-e7bd910ef679",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1e2775da-7823-4b8b-8729-877aa8a70cb7"
        },
        "item": {
          "id": "0a2b3625-7043-475e-98e6-7b16d665eb78",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0dd6b515-59fc-4460-ab84-32ea2b67d4f3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 587,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "812cb212-ebb1-4b34-805c-0e9a0798747b",
        "cursor": {
          "ref": "f0dd832c-9a62-4b62-948e-c57ba56b5a30",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "00d3bc6b-e70d-4e5b-9db5-282c81c89fce"
        },
        "item": {
          "id": "812cb212-ebb1-4b34-805c-0e9a0798747b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e04b22ec-236b-4579-804c-d2efcf0637fa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 583,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "0b0ef632-c4fb-4c5d-b421-3deeed124d03",
        "cursor": {
          "ref": "25a9aea7-9313-4632-a0b5-545b8f9f4131",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0cbeb58e-7e6e-4981-9b48-54b07cc11fbf"
        },
        "item": {
          "id": "0b0ef632-c4fb-4c5d-b421-3deeed124d03",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b3b43e85-b95a-4bc5-8f94-c56dd59a2482",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 599,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "4004a0da-24fd-4014-a087-a9fd593c7002",
        "cursor": {
          "ref": "0716d3bb-4b36-422d-98a3-851dfd24bb6a",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "991e424e-e381-43fc-aa77-ad2410e15b0b"
        },
        "item": {
          "id": "4004a0da-24fd-4014-a087-a9fd593c7002",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c7aa2a11-b536-462f-8c7a-5d79301c6fec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 614,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "f35fa8be-60bb-43c8-8969-671de26ebb3d",
        "cursor": {
          "ref": "6bd5baf0-d14d-4de1-bef5-cfb0ea2eb477",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ff684fcd-cede-4eaf-88ae-eb79f6cf4b35"
        },
        "item": {
          "id": "f35fa8be-60bb-43c8-8969-671de26ebb3d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1f5b29d7-5ea0-40c8-9752-86d4a70cbe12",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 592,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "16357016-10c9-4c2b-b155-3b17f435f780",
        "cursor": {
          "ref": "8dff7ad9-56d5-465a-873c-6364133e27e5",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "835834ba-c3a3-4a90-a1be-7ab40aa0e49d"
        },
        "item": {
          "id": "16357016-10c9-4c2b-b155-3b17f435f780",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0dc8e14e-315f-4539-b458-a303c881d377",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 597,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "88c4656e-36d6-47be-b8c5-d808f51e9cb7",
        "cursor": {
          "ref": "72ec16f8-f6c7-4f3b-8150-403edc1770c3",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8b3673f8-24ed-4e2c-84ba-795d20b84aab"
        },
        "item": {
          "id": "88c4656e-36d6-47be-b8c5-d808f51e9cb7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "38bfc3b6-596d-472c-9cab-1c6e14826ad6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "bf39a615-ffb9-4872-8591-6abdac920ff6",
        "cursor": {
          "ref": "b9aff301-7c25-49c0-b116-6a6bbb672d2a",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "57f1e0ea-42c0-4a63-9f9c-99bd32090076"
        },
        "item": {
          "id": "bf39a615-ffb9-4872-8591-6abdac920ff6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "053de287-cbe6-4c38-a313-0938dcb29947",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "54170f7c-ce75-4818-8bc7-1bcef3d7236b",
        "cursor": {
          "ref": "ffc241a9-dd0e-4d7f-9a48-41f387c9be08",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "aef5f866-4c71-481d-8dc8-661795df848a"
        },
        "item": {
          "id": "54170f7c-ce75-4818-8bc7-1bcef3d7236b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "45256413-0870-4017-8b41-c658fadf1fae",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 585,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "6f116982-a9a9-44c5-84ca-2894e3284dcf",
        "cursor": {
          "ref": "966f1f59-55ed-4590-994d-1244a9823b5f",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "eee34251-678a-4213-a38f-3b9642b0c17a"
        },
        "item": {
          "id": "6f116982-a9a9-44c5-84ca-2894e3284dcf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "04c492ae-1801-4dc3-9afe-9fd6af113b3b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 585,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d62e639a-09c3-4de3-81e3-a465e9e40a66",
        "cursor": {
          "ref": "2421dabe-e5e5-46c2-83fa-fe38abb6a2d7",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7778e4ff-f545-4888-8602-1954d254a5e2"
        },
        "item": {
          "id": "d62e639a-09c3-4de3-81e3-a465e9e40a66",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7b0e4f36-d195-44bc-bf8c-55c17bb621a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 584,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "43d878c9-61f1-4098-bb83-fce650c7a8ab",
        "cursor": {
          "ref": "a9aaf0eb-fd22-4594-beeb-1a4fd355dae3",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7146b9f4-5e73-4c39-9e1f-9ef2ea66d4fa"
        },
        "item": {
          "id": "43d878c9-61f1-4098-bb83-fce650c7a8ab",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "20dd465f-8f7a-4b9e-ae96-abe839de45eb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 588,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b29a1e85-251c-4240-a283-46f699bc6113",
        "cursor": {
          "ref": "7869255e-e8b1-4eba-bab1-d9d1063ae07c",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6bcd0074-b8ae-4c75-9335-a48ce8b16a9a"
        },
        "item": {
          "id": "b29a1e85-251c-4240-a283-46f699bc6113",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4c1f9d91-365b-4821-9eff-0cd88fe01d60",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 614,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "bb8a59d6-6b6a-4df3-8955-c3949fc6b078",
        "cursor": {
          "ref": "0dbca291-3796-4a8c-bfb9-12a4acbbe557",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "700db560-613f-494c-99b5-f3d48005c3b7"
        },
        "item": {
          "id": "bb8a59d6-6b6a-4df3-8955-c3949fc6b078",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0b847645-1c5d-411d-927a-081ecdeba6a3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "99db260e-9985-4760-9905-14c811d8791b",
        "cursor": {
          "ref": "09860ee0-dbb4-49ed-a807-2ffd885dea46",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "64e038be-d989-4c2b-8ccc-6f9341fbbaee"
        },
        "item": {
          "id": "99db260e-9985-4760-9905-14c811d8791b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b4f6f87c-2861-4689-98a7-88065c07ceb9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4b2e4b41-27a3-45aa-91bf-63d9f72d46e8",
        "cursor": {
          "ref": "a529bef1-5c31-4191-a121-b38f796d4264",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7fe91929-ccca-4571-b01a-659c62d0c3f0"
        },
        "item": {
          "id": "4b2e4b41-27a3-45aa-91bf-63d9f72d46e8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "89b21c90-a0b5-4920-a5c9-9023687cfb36",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 609,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "a53f96a3-d808-4af7-b608-6bd5cf36bbe8",
        "cursor": {
          "ref": "ec8d6d1a-0e82-46f3-aef1-1212d8ba53ee",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bb3e614d-50fc-41c5-af41-55bce44eed84"
        },
        "item": {
          "id": "a53f96a3-d808-4af7-b608-6bd5cf36bbe8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "93a7f63b-d788-4738-8909-d66bc52fe291",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 626,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "8f4dae35-784e-45d4-adc7-fc550b5cea55",
        "cursor": {
          "ref": "d5546d18-3ef6-4fe8-bee1-85a381ef12ee",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4a16d6b9-3f9e-4015-9177-7707999ed07e"
        },
        "item": {
          "id": "8f4dae35-784e-45d4-adc7-fc550b5cea55",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "aaf1f71f-843c-459b-a525-ee9c014e486f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 610,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5438972f-0b5c-4636-a95c-8d52bff508a6",
        "cursor": {
          "ref": "228efa60-352f-4c78-8552-e271896f5994",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "62216c05-2644-453c-97e4-f6353649c3e2"
        },
        "item": {
          "id": "5438972f-0b5c-4636-a95c-8d52bff508a6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b0868c3a-7ed5-441c-9eca-f18ed9e33a3e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 592,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "56b9d9ab-a918-461f-9245-ec42190406bc",
        "cursor": {
          "ref": "c28ad853-444d-46ac-92f4-56e3d3dc2e1e",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0e7adb23-fdce-4e5b-b8bb-dc2f8170a5cb"
        },
        "item": {
          "id": "56b9d9ab-a918-461f-9245-ec42190406bc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b3d54638-c3b6-4c4b-a26c-f7dec7d5245a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 604,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e057c6aa-0d16-4727-b8ce-90e2a9c2ead1",
        "cursor": {
          "ref": "57d9b35b-ae29-4c81-a3c8-0e936d9bab65",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "82ba7d22-df52-4ca1-b023-4c01e16c7e3b"
        },
        "item": {
          "id": "e057c6aa-0d16-4727-b8ce-90e2a9c2ead1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5df34edb-4a73-41ff-929e-be49ee06c70f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b634d37-7f61-45d0-8d47-d086ad8ea4e3",
        "cursor": {
          "ref": "2ee46005-723c-4375-92bd-dc227c37f973",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7590b864-a17b-47fc-ba2e-53ae85bfe5de"
        },
        "item": {
          "id": "2b634d37-7f61-45d0-8d47-d086ad8ea4e3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ed768db6-a73d-4eea-a54f-a3ddf8748c4d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 663,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "60aa105e-d5b8-4db2-a1d2-92263b61b561",
        "cursor": {
          "ref": "ee4bdb12-6c73-4bf5-89c1-c49af2290832",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "16cc32a2-daa6-4279-9c34-12924d97c8eb"
        },
        "item": {
          "id": "60aa105e-d5b8-4db2-a1d2-92263b61b561",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "380b9247-2821-44b5-b74e-face9d8796d3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 598,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "c602e6d0-bc8c-45da-ba1e-7dd41aeb4067",
        "cursor": {
          "ref": "ab1e21a6-eefe-435d-82a2-260415d68240",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ab0e661f-948d-4283-929b-660be9722ef1"
        },
        "item": {
          "id": "c602e6d0-bc8c-45da-ba1e-7dd41aeb4067",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f20eaeb2-b8a6-4238-906c-7b0c401cd5f3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 586,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "7c743f6f-226a-419b-8480-e60d56056126",
        "cursor": {
          "ref": "806cbed6-0d68-4757-91c2-316b24d1e15d",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3040e895-989c-47e6-821e-984761e38d38"
        },
        "item": {
          "id": "7c743f6f-226a-419b-8480-e60d56056126",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a48a4ed3-daf3-4e47-8cfc-5d307c5c3d7c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 595,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "29bfc8f6-4e57-431b-836e-d828addbaf74",
        "cursor": {
          "ref": "518aa73c-44df-4860-b4b9-0fe3be36b916",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "37d27086-ba39-486d-9701-324feddcdeb8"
        },
        "item": {
          "id": "29bfc8f6-4e57-431b-836e-d828addbaf74",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b07a3912-69d3-4c62-ad92-7862b863a66b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 610,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "24b3b6aa-49f2-4607-9b76-1e2195ccf1e5",
        "cursor": {
          "ref": "ac8ebf21-ebf7-4a2b-97a4-ab41a314665a",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e888e0f5-0e93-40ca-aad2-7cd65930841a"
        },
        "item": {
          "id": "24b3b6aa-49f2-4607-9b76-1e2195ccf1e5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "97485952-28ee-4b0b-bae9-ce2d1a29d7a7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 403",
              "stack": "AssertionError: expected response to have status code 201 but got 403\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "12243762-ce5d-415d-8597-7374c027462c",
        "cursor": {
          "ref": "acbd53a5-1166-4a04-901d-896d0a2ae6f3",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "69d9cb5b-837d-420d-b805-57b576df18df"
        },
        "item": {
          "id": "12243762-ce5d-415d-8597-7374c027462c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e7a9cf77-976b-487a-a410-173f7255eacf",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 600,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d02063e1-663f-4b2a-85b4-088216683338",
        "cursor": {
          "ref": "77b5899a-09ed-448f-9388-2e9cca88dc12",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1a8afcef-2745-4fdd-ac08-49d7baa486eb"
        },
        "item": {
          "id": "d02063e1-663f-4b2a-85b4-088216683338",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4012990-a3df-46ed-ab94-3e2946a76f09",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "82b12e6c-2995-439d-8345-6cde553a2de2",
        "cursor": {
          "ref": "4d251a7b-2b22-4b07-8248-24024123d9e2",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d2e411d4-07ef-4005-abcf-5d7e8a2c6c40"
        },
        "item": {
          "id": "82b12e6c-2995-439d-8345-6cde553a2de2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3d699cfe-c50f-4b4a-ac02-a67771f468ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 585,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e02178e5-a0f3-48b0-b5f5-811e4bb73c81",
        "cursor": {
          "ref": "566cfb65-d95a-4e07-95c9-6e4bea3fda7a",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cf584e1a-dc90-4c2d-b80a-d9100fc1130f"
        },
        "item": {
          "id": "e02178e5-a0f3-48b0-b5f5-811e4bb73c81",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b2bb0203-54bb-4bd5-98a1-ba9c93e8032f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 574,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7bc8b803-0e74-42dd-a388-81742794e0c8",
        "cursor": {
          "ref": "4d157ea1-5746-44c2-b9d3-4824a1c03d73",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e00512bf-f2a3-4e37-9221-d45345042b20"
        },
        "item": {
          "id": "7bc8b803-0e74-42dd-a388-81742794e0c8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "21077baf-7cca-45d2-a6de-dd173c1fb86a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 583,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7dfefc80-712a-4c93-a51b-c7921d431b37",
        "cursor": {
          "ref": "64daa80f-d55a-4468-ae38-efdcc4e329ee",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "76338d10-e944-41d0-b3f4-bf9ab76a9992"
        },
        "item": {
          "id": "7dfefc80-712a-4c93-a51b-c7921d431b37",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bc1586d2-43b9-4187-9f0f-402228e6186d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 598,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "9a6d1e80-3447-44af-8226-d8cd3d969237",
        "cursor": {
          "ref": "9cda6903-e46d-4232-903f-e87fb4a1025d",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6418b6ab-59a3-4069-8114-4bdd42738014"
        },
        "item": {
          "id": "9a6d1e80-3447-44af-8226-d8cd3d969237",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "378a83b3-5cb1-45b3-a773-a3fb9129bb60",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b6638c30-c88d-4a3d-aa9e-92f11f7c50fc",
        "cursor": {
          "ref": "7edf7f20-a9c4-4349-b57e-7577e5071bf3",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4be3fff6-c807-4ae5-9900-f8aa628df497"
        },
        "item": {
          "id": "b6638c30-c88d-4a3d-aa9e-92f11f7c50fc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "62b121f1-cdc9-420b-bc71-d74b5db7f7b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 625,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "cdb06809-f37d-4098-848d-bafccf9c478a",
        "cursor": {
          "ref": "a427b9d4-c31a-42aa-a212-492c2452ddd5",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7f6aff7e-a82c-4373-925f-bca06981175e"
        },
        "item": {
          "id": "cdb06809-f37d-4098-848d-bafccf9c478a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5c90e92d-aec2-4f1e-a542-eb6740e5ab55",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 601,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "64949811-e785-416e-843a-c38e073af910",
        "cursor": {
          "ref": "6c3fc706-f9bc-4aa7-8226-7211d45dbcf0",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1cf6072f-3da8-4076-a7cc-cfa8382e25c4"
        },
        "item": {
          "id": "64949811-e785-416e-843a-c38e073af910",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5d4dadeb-0e57-4967-b45e-086d207dd7ba",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 617,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3bf0e7ec-3d57-46aa-add3-85aec6bbb080",
        "cursor": {
          "ref": "e3fbc286-77db-4c70-8808-decc1c44bf77",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "050518a3-8b3e-418a-84d4-d4a8c12334e6"
        },
        "item": {
          "id": "3bf0e7ec-3d57-46aa-add3-85aec6bbb080",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "38bb29e1-1696-47e3-b0fb-6dacedddad50",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 590,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "863d4519-1493-4766-ae6d-f54bd235b273",
        "cursor": {
          "ref": "85a2c327-5ccc-47bc-b3ce-1cb95f433726",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d1cdef84-43cb-40a8-b1e6-fa86c79af6ed"
        },
        "item": {
          "id": "863d4519-1493-4766-ae6d-f54bd235b273",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6cd1fef9-2288-47b4-9602-f2757de28af5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 607,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "88f104c1-b1b0-4e0c-ad33-b2a293a0da4d",
        "cursor": {
          "ref": "6c888df2-f3a0-4c07-ab6f-5877e29f1853",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "913eb328-8575-4750-bc0e-4be868916737"
        },
        "item": {
          "id": "88f104c1-b1b0-4e0c-ad33-b2a293a0da4d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5ef1ad2a-cffe-4ce2-897a-1175b77972ef",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0a55a466-cb21-4ff4-963d-d0edd3915f9d",
        "cursor": {
          "ref": "e03c798c-f612-43d7-b894-43acee2de190",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5e1bbd39-9ef7-445f-9a1a-eab94871d384"
        },
        "item": {
          "id": "0a55a466-cb21-4ff4-963d-d0edd3915f9d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5d2f80b1-4c7a-429e-b101-c3f74dcc36d2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 568,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e8094c10-bb01-4555-8584-44711521fc8d",
        "cursor": {
          "ref": "1baa2cea-3ec1-465f-ba41-8804128600fa",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ca2c66bc-aa50-45d0-b25f-a08d77fba6b6"
        },
        "item": {
          "id": "e8094c10-bb01-4555-8584-44711521fc8d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "12d19f9e-b26b-4805-9206-2ade2c116c9d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 593,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b8189bbb-e0f8-45a0-8d0f-87b0a010b3d7",
        "cursor": {
          "ref": "1a2785b1-4ed8-4168-a1d8-1c74ef1ed850",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ffe07a1b-f0a3-49ae-b1f2-5daa87bc964e"
        },
        "item": {
          "id": "b8189bbb-e0f8-45a0-8d0f-87b0a010b3d7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "abbffb51-2e2c-4deb-ae92-9ff2e822a8f9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 578,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e92012d6-4301-4c2b-8d95-aa4bf32e56b4",
        "cursor": {
          "ref": "906bc82e-9037-4206-b425-ddb7254a54dc",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f7fa08ed-eb5c-469f-b0b8-b1038193ac85"
        },
        "item": {
          "id": "e92012d6-4301-4c2b-8d95-aa4bf32e56b4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a357c8a0-75a8-4da8-9651-3c942e101621",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 619,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "df98a11a-bf73-4a4c-813d-cc97c3f6be58",
        "cursor": {
          "ref": "4fcb05ba-a653-4b27-9e65-39093615a22c",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "785d67c0-4bd3-4429-ae12-3e16e653fb08"
        },
        "item": {
          "id": "df98a11a-bf73-4a4c-813d-cc97c3f6be58",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "76d3f253-3336-4b8a-9b1a-4cde893db12f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 608,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "84aa2808-53bd-4b10-a32c-cff3c792b6b3",
        "cursor": {
          "ref": "857c977d-6a07-4360-968a-de6cdcace637",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d53d869f-8445-417e-9ebf-24c05c0c3415"
        },
        "item": {
          "id": "84aa2808-53bd-4b10-a32c-cff3c792b6b3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "abc61424-5d02-4091-a188-67bdde756ddc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 582,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1ffedfe6-2515-4bd4-8076-d3cb12bbc0ca",
        "cursor": {
          "ref": "65d26a11-32a7-4f22-a5f6-9e969cc3018a",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b2738927-386c-43f0-bb50-ac87e848f873"
        },
        "item": {
          "id": "1ffedfe6-2515-4bd4-8076-d3cb12bbc0ca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "efe17eeb-2dde-4df2-a298-e4ac0b1b7af4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f0ea3d6c-0e72-4671-a4d6-c683a36c02c1",
        "cursor": {
          "ref": "71528b74-d155-4138-8ab5-2a568fa88090",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c768c252-143c-4d55-ae78-1083b50becfd"
        },
        "item": {
          "id": "f0ea3d6c-0e72-4671-a4d6-c683a36c02c1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bd45efbd-b4ce-41ed-82c9-cec47dba9f95",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 612,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7264781c-04e1-412d-b725-899dfd06bdf8",
        "cursor": {
          "ref": "c2ac7563-0830-49e9-b457-265567e8c2ef",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "40f18d9d-5c9a-4304-ba8b-21aaeda0ff1f"
        },
        "item": {
          "id": "7264781c-04e1-412d-b725-899dfd06bdf8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fe27b318-0a61-41e3-a9f1-3c8b349b497e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "9b5ee6fb-cf61-464e-aee2-5da90f9250e6",
        "cursor": {
          "ref": "58d5fc68-d344-4c6e-a2f1-49c5d4ca5def",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "200c1e0e-b969-4b30-a78d-cc36f1fb5f47"
        },
        "item": {
          "id": "9b5ee6fb-cf61-464e-aee2-5da90f9250e6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2602b840-ae1f-4ce9-a4fd-0918e11cc553",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 594,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "01d2f7dc-c308-4d8b-94b3-0ab5fa2b4b04",
        "cursor": {
          "ref": "dfe03125-b5d3-440c-83c8-971110c9d868",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d37e97d5-1852-4adf-8acb-c633340df53e"
        },
        "item": {
          "id": "01d2f7dc-c308-4d8b-94b3-0ab5fa2b4b04",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "411f5585-6476-4a95-aea1-cbef6d40969a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 602,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7bdc1bae-f8e5-4020-b617-70598cd8a74d",
        "cursor": {
          "ref": "5e2b8550-3d77-4cb7-8b95-0bc950be66a7",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "418413a0-11ee-48c5-85e7-5986a842ada1"
        },
        "item": {
          "id": "7bdc1bae-f8e5-4020-b617-70598cd8a74d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dbbc0099-8529-4108-8ed4-7a68b157437a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 580,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4cf74593-a8a2-4142-bb44-49b65403e929",
        "cursor": {
          "ref": "9a17caec-7551-4eb5-b7ff-1c67436c757c",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d5a8c26a-9538-45b0-8ca4-77f3f2f3c527"
        },
        "item": {
          "id": "4cf74593-a8a2-4142-bb44-49b65403e929",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "870763a0-a393-4049-8429-de2cb7f2ae9c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 610,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "42415eb4-ec87-4197-ba33-6e6a882ba934",
        "cursor": {
          "ref": "2a6d073c-63f9-46a8-8246-47cfc00fffff",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1baf13d7-c277-4e74-8e89-e65e053ef03b"
        },
        "item": {
          "id": "42415eb4-ec87-4197-ba33-6e6a882ba934",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1335e490-9a71-43c3-92f7-43f176412f25",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 596,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0f8fd5e7-5d22-4cb2-aea8-2fcb2f1a1891",
        "cursor": {
          "ref": "c952b043-7eee-49be-a4e6-248377f155c0",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f4791c07-b995-4a96-842e-02bbfd35dfc7"
        },
        "item": {
          "id": "0f8fd5e7-5d22-4cb2-aea8-2fcb2f1a1891",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "457e8b29-672d-40a2-9ba3-081209dcdf82",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 589,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "88de0a8a-2a15-4e9c-bce7-31966ffef916",
        "cursor": {
          "ref": "d2b34fbf-ada0-4bc2-9123-51f2e9ecb1b3",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4a84f433-1fd1-4f35-a49c-84161f1ae43c"
        },
        "item": {
          "id": "88de0a8a-2a15-4e9c-bce7-31966ffef916",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "588a41a7-ba40-40d5-b11f-ff95dad538b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 605,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1f7daf8a-9b6c-4567-b500-7394827b71f4",
        "cursor": {
          "ref": "1eb24c53-42ec-4590-82e4-3054bbd3e5d8",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c9b80ac7-deca-44c2-bf15-58446b85db89"
        },
        "item": {
          "id": "1f7daf8a-9b6c-4567-b500-7394827b71f4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4079ef0f-4bee-428b-a90f-ab0962a55ab2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 611,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "475cdbb3-86b2-414b-8efe-36caaec1ec90",
        "cursor": {
          "ref": "e77c149b-4272-4a32-ad7b-d5ef45016410",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2aebf4a3-9327-419a-9a7c-6d4949ad3659"
        },
        "item": {
          "id": "475cdbb3-86b2-414b-8efe-36caaec1ec90",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7aada96f-7080-45c8-9ae6-c7c675eb82c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 593,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f713eea7-63da-4fe8-ad0c-d434dbb9afb4",
        "cursor": {
          "ref": "7f888e22-9e49-46c8-87a0-a06e9990d9e3",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "96b93f34-581d-4cde-a573-2f1edeee4ff3"
        },
        "item": {
          "id": "f713eea7-63da-4fe8-ad0c-d434dbb9afb4",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "84a900c9-449a-43fe-b540-cd65f6cf8108",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 607,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6c649753-6e7d-4455-8a21-fc0a12cfbb4b",
        "cursor": {
          "ref": "d0b36bb4-6932-4a21-bfd5-855f2d667cee",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "604ae2c7-273e-433a-a8f1-d150cd2a4765"
        },
        "item": {
          "id": "6c649753-6e7d-4455-8a21-fc0a12cfbb4b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6389b154-d6de-4568-83ea-f7cc9cf06da8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bea4205-df48-4290-b713-10329dfb3755",
        "cursor": {
          "ref": "7663f0b8-ddb3-4b9d-b6d9-1e6cf06600d3",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3605bb8d-bb47-49ef-856f-47c93e28274c"
        },
        "item": {
          "id": "8bea4205-df48-4290-b713-10329dfb3755",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b8341c75-5b90-46d3-b4de-9a146ce51882",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "66b09479-2903-4ae2-9b6e-5dce1c735114",
        "cursor": {
          "ref": "bfdffb27-6e11-4461-923e-a95b39c070eb",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1978bc5-e442-4b65-aa70-0ef6c4515b4d"
        },
        "item": {
          "id": "66b09479-2903-4ae2-9b6e-5dce1c735114",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "38c6343c-185d-421d-9c3f-8860c7f51c5a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 386,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4316f4d3-d728-419b-bc18-f83beab9de5b",
        "cursor": {
          "ref": "79cecfef-24e8-4fe7-9f72-fbb6588068ab",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "25471904-c074-4d22-b66c-eac3552577ef"
        },
        "item": {
          "id": "4316f4d3-d728-419b-bc18-f83beab9de5b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "439fbea1-0c53-4414-93a1-88ff461f4d49",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 376,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6c87121a-d3f0-4701-9f56-9f3d769436f6",
        "cursor": {
          "ref": "545a6bab-613a-4dac-a240-64f057f2ca39",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "49c2921e-2a8d-477b-8cd2-df634f0c9063"
        },
        "item": {
          "id": "6c87121a-d3f0-4701-9f56-9f3d769436f6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "682081d5-5e56-4d8b-a974-252db3f8a4af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 384,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "5245d87d-0fdd-46bf-9c10-6524b1d76de9",
        "cursor": {
          "ref": "dd902ccf-e214-4e14-a4c1-c9e322b7a885",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3c008f02-3736-49c9-b51c-332763771ff0"
        },
        "item": {
          "id": "5245d87d-0fdd-46bf-9c10-6524b1d76de9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d349413f-cf89-4bc6-a278-e039bed84e69",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "c4d38a2e-aa2a-46df-a4d0-93f9f25d9b58",
        "cursor": {
          "ref": "76c1314a-1daa-46ce-8267-52a0966eade6",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d343b31a-a4ad-4a3a-b77a-192616bb139d"
        },
        "item": {
          "id": "c4d38a2e-aa2a-46df-a4d0-93f9f25d9b58",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4b692fbc-6b83-410c-95ad-5624789c6752",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 375,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "9a8d1cfc-c547-4f2c-9a09-6190e1b3be5c",
        "cursor": {
          "ref": "7e9fcda0-0ac8-4b83-aaed-205c69ab2af1",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "901ab4a7-2ce5-4e80-800b-423cc119decf"
        },
        "item": {
          "id": "9a8d1cfc-c547-4f2c-9a09-6190e1b3be5c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1f0baae3-465e-456f-ac50-eb8ddb9c34be",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 384,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "adef0c05-c135-499a-afbb-a5d39fe2e62f",
        "cursor": {
          "ref": "6559f9da-e39d-4147-83b6-c5f58d0bdef4",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "cf9cc7ea-eb19-4fad-9575-7a1d206b1edc"
        },
        "item": {
          "id": "adef0c05-c135-499a-afbb-a5d39fe2e62f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d4cd862a-bdea-45b7-8c55-13a5216f4550",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 382,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "078f89ae-e52c-4c97-b641-f2563fa2bc53",
        "cursor": {
          "ref": "88e53d93-424f-4358-a96c-c9395403a038",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e0c719e4-37ea-448e-a04b-ed5235af1750"
        },
        "item": {
          "id": "078f89ae-e52c-4c97-b641-f2563fa2bc53",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b1b95917-c3f4-4dde-9ebc-530213dbc7e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "b7485751-1ee5-4ff1-8ddb-8bc88a7afb1f",
        "cursor": {
          "ref": "8a40555e-f5bb-46ec-88eb-b9494f262cd0",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "83a854cc-2fff-4a0c-8e53-ac050b7fc1a0"
        },
        "item": {
          "id": "b7485751-1ee5-4ff1-8ddb-8bc88a7afb1f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e767a2f9-b7cb-4f7f-8f22-643853cfd9f7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 371,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "f3fc49b7-68a1-49a2-b0a7-3dc82391442c",
        "cursor": {
          "ref": "f47de4da-0385-4a03-a6d2-e75c3b28ca62",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5c109de3-b768-4e5a-83e7-e0162b8abe1a"
        },
        "item": {
          "id": "f3fc49b7-68a1-49a2-b0a7-3dc82391442c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "36759002-6b3b-4ff8-ab48-9e20f4da6638",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "6593d7f1-67e9-4c93-852a-c756a5b5f923",
        "cursor": {
          "ref": "0202cdee-6372-4672-9011-780e678343a4",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "21c13a52-aaba-4e9e-80c0-3546e49953f7"
        },
        "item": {
          "id": "6593d7f1-67e9-4c93-852a-c756a5b5f923",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "49576b3f-c652-466b-9921-60881d7709a3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 374,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "2865ba6c-9fe8-4131-8465-d6485ffb751a",
        "cursor": {
          "ref": "6e78f076-78c2-4860-b7f3-b8b90d7d0c3d",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a3490fac-3d57-4db0-8923-f02455d03a23"
        },
        "item": {
          "id": "2865ba6c-9fe8-4131-8465-d6485ffb751a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "36962bcf-fc09-48e3-8ad0-5d01164148e4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "48000c50-56f1-4455-b038-a273edd78c83",
        "cursor": {
          "ref": "94b3fa55-a5ad-4c4c-8cba-2669831c5330",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0341c92f-9fe2-4a02-b718-7067e413ce27"
        },
        "item": {
          "id": "48000c50-56f1-4455-b038-a273edd78c83",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "56fc1a42-3706-483c-afbd-47b00194c625",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 401,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "aa110586-c6a0-44c9-a390-6db06ea68301",
        "cursor": {
          "ref": "2cec8981-da8a-4c7d-adf8-7b7a3ba75abf",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7eb9e982-04d3-4320-ae05-7ad46c9ef99f"
        },
        "item": {
          "id": "aa110586-c6a0-44c9-a390-6db06ea68301",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a950fc28-e30f-4c4d-b81d-1714916ca3e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "733f5974-e8c4-4cba-9a36-36774a25b66c",
        "cursor": {
          "ref": "9b7e8812-2d83-4621-90e3-2f6aa2305cfa",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0c24abf1-d124-4f56-964b-8572f8344a55"
        },
        "item": {
          "id": "733f5974-e8c4-4cba-9a36-36774a25b66c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a1cfdbed-82da-439c-a449-56b48d3fd7af",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "6617a54b-9d64-4663-94e5-11e77a68e9d2",
        "cursor": {
          "ref": "e9ef3751-d242-40c2-846d-07edf1a7c006",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "748087e6-21b8-4bc3-ad13-c868a985d1a6"
        },
        "item": {
          "id": "6617a54b-9d64-4663-94e5-11e77a68e9d2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "369a1e64-1595-462c-a9d9-c702b2ff2f37",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "65a11fab-3c0c-43fd-9233-3b58a8e77f17",
        "cursor": {
          "ref": "cdad4d44-0f2c-4f15-b79d-438257208bcf",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7f6cce3d-d49b-424e-99ce-5b646795f60d"
        },
        "item": {
          "id": "65a11fab-3c0c-43fd-9233-3b58a8e77f17",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "27d65353-4208-43e5-a4dd-d526cca5cf0a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "69c45099-b4b9-446d-b59c-eaf69b2560d2",
        "cursor": {
          "ref": "7632e5c8-eb53-4571-b994-16b505cfdc08",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "00a04152-1035-4b06-8d2f-a7198a513eaa"
        },
        "item": {
          "id": "69c45099-b4b9-446d-b59c-eaf69b2560d2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "bcf6a7cb-8cb1-4d8b-a2df-9d133367b758",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 378,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "3ffd7ffe-e286-4a34-b174-870471e16fda",
        "cursor": {
          "ref": "5bce2d2e-d6d8-4a07-88f3-394f96092040",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1eda1f29-cad0-455d-baba-9efbcaca2143"
        },
        "item": {
          "id": "3ffd7ffe-e286-4a34-b174-870471e16fda",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3a344393-2cd4-40e0-b273-380b7574f442",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f2cb0f8a-5919-4fc0-a779-e0ec603cb2b9",
        "cursor": {
          "ref": "99999ba2-61a3-40c9-92d5-7ad01d0b0c2b",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "67cd792d-d4b7-4c25-aa84-88ff35e2fde6"
        },
        "item": {
          "id": "f2cb0f8a-5919-4fc0-a779-e0ec603cb2b9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "73a8f031-2c10-46c5-b874-4b254abf5745",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 369,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "7dd130cd-9682-42f0-86e6-0f77e33b182a",
        "cursor": {
          "ref": "d0f1caee-35b9-4776-9e9f-b474fa8098e5",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "68ba773c-576b-4a00-aab4-2d9e7104a1e6"
        },
        "item": {
          "id": "7dd130cd-9682-42f0-86e6-0f77e33b182a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "387a34b8-9fdd-4e61-8ba1-4999a323aa63",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 385,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "70c8a901-0a58-4b88-b43f-58351c15d25f",
        "cursor": {
          "ref": "05a0a5c8-d39a-409c-8923-dee6fabb9265",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0b06d189-7dfa-4800-a24e-6c83fc9158c2"
        },
        "item": {
          "id": "70c8a901-0a58-4b88-b43f-58351c15d25f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b030051c-5547-4bce-9539-8260b396bf56",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "44e1aefc-f9d5-4732-b313-949c737cb016",
        "cursor": {
          "ref": "4b195a21-c3ac-41ea-ab6f-3412df2fd785",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a24cc67a-5d60-4163-8faa-ad8c46675ac3"
        },
        "item": {
          "id": "44e1aefc-f9d5-4732-b313-949c737cb016",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5a269a50-6299-4764-8ab3-5ccf9c18cbaa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 375,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "3c325705-89df-4b17-9a4d-815f365fda71",
        "cursor": {
          "ref": "f1a11602-8b65-43f2-944b-acb797ae321f",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "49e36b4c-d5ed-4798-bbbe-1e118d0ac684"
        },
        "item": {
          "id": "3c325705-89df-4b17-9a4d-815f365fda71",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cd08415c-9223-44b2-b9fd-ff75e348be34",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b942c1e8-d4bc-49d8-a980-376ee5744ae9",
        "cursor": {
          "ref": "7bf83d38-5235-4092-a6dc-a30978c0e7d5",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1ab5a9b2-cf16-42c6-89e2-f06ecb82b6d1"
        },
        "item": {
          "id": "b942c1e8-d4bc-49d8-a980-376ee5744ae9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6eb306db-9401-452b-802c-dc328a842e4e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f297554f-f03e-4dbf-bf36-f53105218fdf",
        "cursor": {
          "ref": "5ac76da8-d79f-4347-ad0b-e70ad654b83b",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1a7bafba-a54c-4731-a7c6-9c9a64165630"
        },
        "item": {
          "id": "f297554f-f03e-4dbf-bf36-f53105218fdf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d16d8241-fba0-4bd1-8fb7-06d149c921e7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "dab4a2ac-de67-4bed-b393-83e15d77c116",
        "cursor": {
          "ref": "05566062-3768-48ae-9a43-0a46bc36039b",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ef55626e-a307-4f64-86ac-2ffaaede15cd"
        },
        "item": {
          "id": "dab4a2ac-de67-4bed-b393-83e15d77c116",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "22c01908-76d0-41bf-8cc8-52e9ad37ee15",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 394,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "365fc236-251e-431a-aa20-373faffc1440",
        "cursor": {
          "ref": "26334a47-2167-4c1d-8825-652666d2cc5d",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "07f6ca9a-eb90-4493-9a21-864ef7c24f3f"
        },
        "item": {
          "id": "365fc236-251e-431a-aa20-373faffc1440",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "afa9828f-37c2-4014-85c2-7d85e09b293e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "95c10759-5e2e-4ed4-8577-9cbbbdaecafd",
        "cursor": {
          "ref": "79a8f6d5-89d8-441c-9b5b-125c30bf7c10",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9803a8e4-227d-4f3a-8a3d-c68f13f99de5"
        },
        "item": {
          "id": "95c10759-5e2e-4ed4-8577-9cbbbdaecafd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6876fe8b-da97-4caf-955a-481f26a033d9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "44da08ee-6383-4fd6-9ede-41f089d61815",
        "cursor": {
          "ref": "eaa9a3b2-7999-4e42-b93e-bfa7361755ec",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1cd96c6d-2551-4372-8496-d1faebfa2997"
        },
        "item": {
          "id": "44da08ee-6383-4fd6-9ede-41f089d61815",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b2be7436-ce9d-4dbc-8a91-fca75f3e8084",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 374,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "88025393-43d7-4fda-81b5-f2868cdbe42d",
        "cursor": {
          "ref": "bf157540-c12f-4b5a-a775-102a782209c0",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "98e40e13-f0fb-41e6-9859-0b6bf88d6027"
        },
        "item": {
          "id": "88025393-43d7-4fda-81b5-f2868cdbe42d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6514a5cd-3219-4f24-8271-a30e48404593",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 393,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "60e819ce-aa18-4f7f-b622-b659dce7527b",
        "cursor": {
          "ref": "4c2d7754-9d13-475e-867d-ebe37105e267",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "42e26a5a-82cd-4ce1-b015-4dbed00df49d"
        },
        "item": {
          "id": "60e819ce-aa18-4f7f-b622-b659dce7527b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d0533861-9201-4d74-8b8b-15223f38ea72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9a6f6ff9-b729-4815-9596-7ae348f4f264",
        "cursor": {
          "ref": "d0a3566f-0065-41da-9eca-b31d860bff6b",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "58438667-bf60-40d4-b813-fa3c0af9ea45"
        },
        "item": {
          "id": "9a6f6ff9-b729-4815-9596-7ae348f4f264",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9e940a26-1855-44ab-9f09-aa31f5efef73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a35fe9f9-2871-4fdc-a26c-344e48ad45bd",
        "cursor": {
          "ref": "7b5f331b-8d46-4cf8-9f21-d5a4c76690e1",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f22ea54c-201e-4f6f-b807-2c940644595a"
        },
        "item": {
          "id": "a35fe9f9-2871-4fdc-a26c-344e48ad45bd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7cba3f85-be36-4f40-b9fe-9834a362719e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "8a915e88-3fe9-441f-b50f-cc97f3dcd3b3",
        "cursor": {
          "ref": "cf8ee91f-d4ee-4381-a410-4757ffd36775",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7a81f145-72ce-46ab-a50e-3c8432765257"
        },
        "item": {
          "id": "8a915e88-3fe9-441f-b50f-cc97f3dcd3b3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "982816ad-b189-4007-9448-ff07f97967dd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "3ae65fae-0376-4d4f-9ade-7e308aaf9715",
        "cursor": {
          "ref": "1c111dd4-362d-4337-a07b-f9f0b304f955",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "53c5a2ce-834e-4896-b87a-07b7db78ffba"
        },
        "item": {
          "id": "3ae65fae-0376-4d4f-9ade-7e308aaf9715",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "53ca1def-61b3-4d05-8532-4c38c9c9188e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "c3c971f3-97d4-4fad-8e08-c21a4f264c40",
        "cursor": {
          "ref": "6739d2cc-5a0d-4a93-a498-1c208cc263f1",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a3891a32-a3df-412c-a12e-7fe3ffca93d9"
        },
        "item": {
          "id": "c3c971f3-97d4-4fad-8e08-c21a4f264c40",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f50c77a7-5841-4c3c-9a75-25a0e5faef31",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "49845ff4-bbb6-4fb1-bf29-72ddce0aea6c",
        "cursor": {
          "ref": "76bb291a-3c95-4a80-8123-724546ed730b",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f47d075d-7695-4372-9a7a-2d502b5224b2"
        },
        "item": {
          "id": "49845ff4-bbb6-4fb1-bf29-72ddce0aea6c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9e419ced-e22f-478b-97b8-735d6e46722e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 385,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "b6d9c88d-6bcf-4640-8dfa-3567623aedeb",
        "cursor": {
          "ref": "b830efaa-7441-4537-925e-8998ddceea2d",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "10030b29-87a8-4392-924f-480e50f353b5"
        },
        "item": {
          "id": "b6d9c88d-6bcf-4640-8dfa-3567623aedeb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1f3eff73-7e82-4788-8a07-7cb8aa2167e1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 373,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8540bbd8-eb56-45fa-98de-b71099e9ec3b",
        "cursor": {
          "ref": "2a9efbd8-2ed6-4db2-acdd-4871b87334ff",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "029ee67f-bb45-419f-88ef-2853afedb635"
        },
        "item": {
          "id": "8540bbd8-eb56-45fa-98de-b71099e9ec3b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "91705695-8e5f-4a83-895e-9912cd3036ac",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 395,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "07fb0b6e-781c-4776-aed6-853d2289f0ce",
        "cursor": {
          "ref": "a6696729-9de6-424a-94ae-df0879b6ee17",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2dbad3d2-2eb6-4a50-8619-cd4f30ecb41a"
        },
        "item": {
          "id": "07fb0b6e-781c-4776-aed6-853d2289f0ce",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "55eb4673-b215-4019-adea-27f85452047d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 376,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "68e01232-6d9d-4c64-a704-5e699da03a85",
        "cursor": {
          "ref": "e4785731-eec4-43bb-8dd6-70d339556d0d",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "99dec0f2-dd86-48f4-8917-3f8f359c33b6"
        },
        "item": {
          "id": "68e01232-6d9d-4c64-a704-5e699da03a85",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ac4f2c7d-f34a-4f6a-b674-589b61f163d1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "04badd84-b999-49af-a5b5-42667e4e5a94",
        "cursor": {
          "ref": "ff64a5c2-82b7-4bb0-9f11-4b939105677f",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ae3416fe-7a08-462c-9d14-3e884d63ec4c"
        },
        "item": {
          "id": "04badd84-b999-49af-a5b5-42667e4e5a94",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7c7a60b0-97aa-4033-8dac-2761ac5969b6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 370,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "00a681ad-b288-4602-97a2-61202077e880",
        "cursor": {
          "ref": "d814c192-ce9b-4214-88dd-1874e7db5cad",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ce642d3d-a8d1-4da5-bb5c-97f14b6de491"
        },
        "item": {
          "id": "00a681ad-b288-4602-97a2-61202077e880",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "29fbaa3e-7966-4175-b92e-79ce6e556b10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4bfdc07a-4968-4021-bc6d-5e0b95961a9e",
        "cursor": {
          "ref": "f2134407-4a4b-49f1-8736-32510aa71a01",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a9f16e89-7981-4e55-9e6a-903b4ff50735"
        },
        "item": {
          "id": "4bfdc07a-4968-4021-bc6d-5e0b95961a9e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6148933a-6ae7-4e2c-9e83-dd1e8e2120ce",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 396,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "1062754c-a25e-470c-a1d1-a92046694032",
        "cursor": {
          "ref": "a78f0609-9954-4522-94c9-1082a20bdb76",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a6067727-7a4d-4b9b-a077-207be30f3c22"
        },
        "item": {
          "id": "1062754c-a25e-470c-a1d1-a92046694032",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f15aeec5-9683-4328-b2e0-a37428810a72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "058463ad-9df0-425a-9072-4bace022961c",
        "cursor": {
          "ref": "805ea2be-32d8-4c7a-bfe6-2572fe35b65a",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "547d4444-9320-49e9-ae52-044241667ded"
        },
        "item": {
          "id": "058463ad-9df0-425a-9072-4bace022961c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fef445e7-1590-4601-bd8c-a7648a5f63b7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 394,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1c1af39c-abd9-4dd7-97b7-f96a7c0028b4",
        "cursor": {
          "ref": "4200d599-b103-4727-8ef7-9c20d77ca152",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "62a3d79f-27e8-4780-98e3-088d16f2e5a9"
        },
        "item": {
          "id": "1c1af39c-abd9-4dd7-97b7-f96a7c0028b4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f104570c-da74-4de2-a5ca-f12c372bad8a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 431,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "12bf194e-6b1b-4fe3-be5a-6ade69d73bac",
        "cursor": {
          "ref": "d1a98c96-4c2e-4c86-b31c-e4787fd501d6",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ae2afa8f-4832-4cba-8e1a-2cad09322de4"
        },
        "item": {
          "id": "12bf194e-6b1b-4fe3-be5a-6ade69d73bac",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "639a82cc-f534-44f4-a80e-9aa633bb2775",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 399,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5eb81b9b-4eb5-4d5e-862d-0e51f7061226",
        "cursor": {
          "ref": "af505506-3e10-4eda-b622-02b3ffeea21d",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b93b5b8e-6254-4aa4-bf35-6963eecd9363"
        },
        "item": {
          "id": "5eb81b9b-4eb5-4d5e-862d-0e51f7061226",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0602c61f-8e27-4683-9469-2b2ab66527a0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 384,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "450bff9a-7bef-4ee6-92bd-df39c85ba70e",
        "cursor": {
          "ref": "65e3ee54-5519-4d2e-bf5d-fee0e198abd5",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5186b45d-7d12-401a-983e-a1d733fd9a6e"
        },
        "item": {
          "id": "450bff9a-7bef-4ee6-92bd-df39c85ba70e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "930277d4-e306-4320-b497-a339f46e056b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 396,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3c3f2724-4f62-427e-bb5f-053fb1387a46",
        "cursor": {
          "ref": "44f09ce0-1057-467c-af50-d118675d7fa1",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d817269e-27fb-4113-b496-1e72cdf945b2"
        },
        "item": {
          "id": "3c3f2724-4f62-427e-bb5f-053fb1387a46",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1e99110a-2e5c-4211-aa3d-69aa9ff739f0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 378,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "fb2e8e40-0f52-4d0d-9b08-3e64dc51db55",
        "cursor": {
          "ref": "76316ee3-e893-4246-ac8d-1f844b5f1159",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c59f9a24-6a5d-4304-82a9-7ec268b85f88"
        },
        "item": {
          "id": "fb2e8e40-0f52-4d0d-9b08-3e64dc51db55",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "aae9306c-4e25-450e-96c3-14c58e0845ca",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 386,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "5e2970de-224a-4172-850a-7375c8f45e85",
        "cursor": {
          "ref": "711cb489-cd79-43c2-9434-a1ae2a05cfaf",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e618fa7f-7d63-4f2f-81d4-516d1c33eeff"
        },
        "item": {
          "id": "5e2970de-224a-4172-850a-7375c8f45e85",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "67b7e4ba-305f-4e55-b4fe-04ff211966e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "763c8a66-ef62-4276-9cc8-931278efaecc",
        "cursor": {
          "ref": "fa2593b2-3f17-4ed7-a6d9-61f944b36d52",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6a7dbdc-9a56-4345-b1fc-b2d038d71241"
        },
        "item": {
          "id": "763c8a66-ef62-4276-9cc8-931278efaecc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f526bbfc-2292-464b-ae5a-6eeef754c2e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "7897d444-798d-4cda-8811-7980c6e9e4e8",
        "cursor": {
          "ref": "ce35fd49-d531-4710-8fb0-2fed2f75c907",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "22a2b21c-ca2c-467d-8cfe-761c89757a81"
        },
        "item": {
          "id": "7897d444-798d-4cda-8811-7980c6e9e4e8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7f117293-028a-48c8-a992-aa760495b42f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 390,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "be50bd04-2575-4c24-957f-ed410a37e20f",
        "cursor": {
          "ref": "a54a2e52-9270-4861-84fb-c16d35fa97c0",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f7d98d7a-d133-4b99-8755-4b04bf21b0ca"
        },
        "item": {
          "id": "be50bd04-2575-4c24-957f-ed410a37e20f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "96c29fbd-a3c2-4eec-abf2-29c7e8764442",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2b53ecd1-23fc-4e04-915d-9aaf918b64bf",
        "cursor": {
          "ref": "35b33a2d-14ab-49da-8fe3-a6e4a09d2b18",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a3747b41-ee32-4293-878d-f62b489239ba"
        },
        "item": {
          "id": "2b53ecd1-23fc-4e04-915d-9aaf918b64bf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "61989801-704c-4dd6-95ff-bce4c19279b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 382,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "03e43b81-cbc6-40bf-9cf9-d596112aeb69",
        "cursor": {
          "ref": "c6d787c6-17fe-44be-a5fd-0a27e3d4b163",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7dabd74a-4efd-4e9d-bbfa-ade4d7f9fec7"
        },
        "item": {
          "id": "03e43b81-cbc6-40bf-9cf9-d596112aeb69",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "779dedbc-df43-4398-8864-4df6ea13887e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 398,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "45d34579-5dba-429d-b097-e7f46a4f6bb6",
        "cursor": {
          "ref": "7f39064c-2599-4238-a391-9efc74010b0d",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ca361300-7979-4414-a1ee-1f39958f9130"
        },
        "item": {
          "id": "45d34579-5dba-429d-b097-e7f46a4f6bb6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "dbf379b3-7c5b-4b0d-aee4-54eb53261ba7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "baa6400d-1e34-4e25-b7cf-d3439bfd6503",
        "cursor": {
          "ref": "6cf2ee23-ff81-4d2a-8856-aa9fcffbe94d",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ce256b23-9795-4b09-b43a-5a30291a0df3"
        },
        "item": {
          "id": "baa6400d-1e34-4e25-b7cf-d3439bfd6503",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "46d75c0b-4865-4070-9562-69691f3eb173",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 390,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "e3317add-81f1-4306-bce7-91d300d75b18",
        "cursor": {
          "ref": "769dd199-24fc-4d87-a3b1-d6d3cfc9d519",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "42bd4257-7cdc-46ba-b62e-966729538597"
        },
        "item": {
          "id": "e3317add-81f1-4306-bce7-91d300d75b18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c8f5a82f-1ebc-4e88-8251-dea038c8a16f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 382,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "d6891781-5107-4d42-99ef-2a4782ea5c45",
        "cursor": {
          "ref": "834ef418-d949-454a-9879-68f3ed6ad273",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1d11dc1d-af1c-4abc-8000-a15874ac5fdc"
        },
        "item": {
          "id": "d6891781-5107-4d42-99ef-2a4782ea5c45",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "44917f14-30bb-4760-88dd-c91214268ea9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2eabd414-8b73-4dc5-b3a3-d99dde009e60",
        "cursor": {
          "ref": "159319db-610b-498d-bb24-ca136797c794",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bcdd5343-d27f-4a96-805d-abd9466d9dd7"
        },
        "item": {
          "id": "2eabd414-8b73-4dc5-b3a3-d99dde009e60",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1d62922-cc18-4e79-85bc-545223c640f4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "f7a79e12-93ad-4454-9758-b08e0d0761c6",
        "cursor": {
          "ref": "598e5c00-86c2-4d12-8429-e29185e283af",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "707a8043-2e57-47a9-97b9-b935029c2bf9"
        },
        "item": {
          "id": "f7a79e12-93ad-4454-9758-b08e0d0761c6",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "be8355dc-6667-4bc5-ad76-96482bc83b89",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c5cb1395-774d-4dc3-9f58-d98aa78febc8",
        "cursor": {
          "ref": "120d0ff4-36e9-46aa-80d7-f430ef002826",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6adcaac4-42f1-456d-ba26-ab9d08573be1"
        },
        "item": {
          "id": "c5cb1395-774d-4dc3-9f58-d98aa78febc8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "09e252d2-9c1c-4ea8-9afe-38afdb8fb155",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "15053b28-2fbb-410e-9902-be1801183dae",
        "cursor": {
          "ref": "ba0d0fab-df92-4e14-a709-321718f8d304",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6080aad6-f8e8-4ec5-ab97-c1a4beaa2992"
        },
        "item": {
          "id": "15053b28-2fbb-410e-9902-be1801183dae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4c2447f8-a4b4-4e37-a1b9-94fccec317b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "3966d8da-54d6-4851-8648-79001eb96edb",
        "cursor": {
          "ref": "46bf8f00-de17-40bc-b2e0-3c43ee6bcf8e",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e5bfba5b-dff6-4b89-9067-1b5b615acf19"
        },
        "item": {
          "id": "3966d8da-54d6-4851-8648-79001eb96edb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3aef0f44-66bc-4dc5-838c-2938a71632d2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "36ff5a62-c1b1-47fa-99c8-a363c1dab36b",
        "cursor": {
          "ref": "c9f8dc44-1172-466d-a726-958fd254dcbc",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "33669c8f-d028-44af-a440-5a90bf044fd2"
        },
        "item": {
          "id": "36ff5a62-c1b1-47fa-99c8-a363c1dab36b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e6f18b0c-964a-4654-94a2-cc5c430fd41c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "48618307-d499-4db3-8397-7bb052bc0526",
        "cursor": {
          "ref": "a5dbd67c-3985-482a-b59d-42446a8b3338",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a49b1ee9-9c4b-40bb-810f-8daf1c07bcae"
        },
        "item": {
          "id": "48618307-d499-4db3-8397-7bb052bc0526",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "83bad8ff-dec8-4318-a717-ce0ab6ad0770",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "6afd9aee-ecde-451e-9690-3a01b4f3f3d8",
        "cursor": {
          "ref": "8635bf09-4cc8-45e4-9077-41bd34868531",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f6b8f578-8598-44ce-b070-9328a6621d83"
        },
        "item": {
          "id": "6afd9aee-ecde-451e-9690-3a01b4f3f3d8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dc7f5884-0659-4d57-8c2c-7e071a55252c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 381,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ae71eb4f-56b4-4361-8b93-9fe8b8a20d88",
        "cursor": {
          "ref": "a2b5606a-81f9-4ae1-a415-af0469bdde04",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8217ef6-c1dd-4191-b8e5-f1d32cb21f06"
        },
        "item": {
          "id": "ae71eb4f-56b4-4361-8b93-9fe8b8a20d88",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9f9b084e-3f39-4840-b0ab-49f415353bb3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 373,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "bcd20e4e-4d1d-4823-8eaf-9b55ccc99bee",
        "cursor": {
          "ref": "4ea7e22a-cd9c-4743-b96a-0f6a222ac2fc",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "93e6ca4a-d006-4307-a421-e073e7340dd1"
        },
        "item": {
          "id": "bcd20e4e-4d1d-4823-8eaf-9b55ccc99bee",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a0fce22c-45a6-4c76-9c7f-3952648ebcaa",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "73322461-518c-4274-af98-f4cf94094082",
        "cursor": {
          "ref": "6b55adb7-4342-4b5c-ac90-cc4bac2d53cc",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b57872aa-7021-4fce-99a6-195f265e70a4"
        },
        "item": {
          "id": "73322461-518c-4274-af98-f4cf94094082",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a65b6c37-b854-46b0-a1e8-e7e14f97eb0e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "335adbcf-a1c8-409e-8702-1e97d7c761f5",
        "cursor": {
          "ref": "5915a15d-e1d7-430c-92d9-b779b9933139",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "52f16033-7ab1-4888-9d51-3226eae83d2e"
        },
        "item": {
          "id": "335adbcf-a1c8-409e-8702-1e97d7c761f5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "30e0f145-ddb6-4c10-9c5c-771cf19e19e3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 393,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4e5855f7-9151-4185-8513-63df7a1533ef",
        "cursor": {
          "ref": "d22a71ba-f960-4dbf-a6de-c60e0bd8edd9",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "05c2dd81-2031-4666-a575-43f69f6756c9"
        },
        "item": {
          "id": "4e5855f7-9151-4185-8513-63df7a1533ef",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afad5ebf-8a05-4f15-b40b-4930052dec08",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 377,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b3429109-72db-4cfa-bf06-abacaa5f3afe",
        "cursor": {
          "ref": "a4a1e9dc-dcad-4050-a9aa-7637e9c9045d",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2dbc44ce-f62a-4186-a306-740b98389540"
        },
        "item": {
          "id": "b3429109-72db-4cfa-bf06-abacaa5f3afe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "15015f9b-6f06-4b35-8eff-fe5bb3057be4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 379,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f2e391cd-cdc9-4cc8-a681-06a701537767",
        "cursor": {
          "ref": "75cf688c-1b6d-463d-8fdd-65d0e7f56fb9",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a11f393e-caeb-4756-af1e-44d0f0d396cc"
        },
        "item": {
          "id": "f2e391cd-cdc9-4cc8-a681-06a701537767",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ed517d7a-ca2e-4f37-bcec-fcfb34dc9973",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d2f4ac20-3ccf-4f54-8094-2fb782665fcf",
        "cursor": {
          "ref": "ddafdf7a-3832-4905-88b9-e54cfc1c2e1a",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7dc3a588-f8b1-4e92-8c1e-7ccd8f6bf0d3"
        },
        "item": {
          "id": "d2f4ac20-3ccf-4f54-8094-2fb782665fcf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c7e0c223-6cd1-4382-ae64-92d749c30819",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "73129183-056f-4710-b31b-e251b952c84f",
        "cursor": {
          "ref": "aa102e67-9610-4565-b0db-738a0d9016b8",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0b6806f4-25ce-402f-8e97-3ffc14c304d5"
        },
        "item": {
          "id": "73129183-056f-4710-b31b-e251b952c84f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ca03ce98-14c5-4cdc-92e0-49b68dd392fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 386,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "433a7a11-50a9-409f-b8f9-cd2aa80e6efa",
        "cursor": {
          "ref": "cb4ee844-1fa2-4d28-9980-265bb625cd4a",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dea12d28-baa2-4358-8052-4428d883cf61"
        },
        "item": {
          "id": "433a7a11-50a9-409f-b8f9-cd2aa80e6efa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "622337f4-4dc1-4dd7-a912-9dab3e6e945e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "10130380-a755-4622-94e0-516b5623578f",
        "cursor": {
          "ref": "8b10bc91-cc82-424d-912a-4f35630b0955",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5d09db34-59a7-4b1b-a573-a02f2ac597c3"
        },
        "item": {
          "id": "10130380-a755-4622-94e0-516b5623578f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ab9c1e29-28cb-4877-9a6a-7de535095abb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 401,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "03f739a8-0c09-48ae-b61d-83a0c3314b02",
        "cursor": {
          "ref": "d860f682-5f0d-4836-ae05-fa58d96877e1",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9a3059a6-a86d-432a-82a3-d458bdc738e7"
        },
        "item": {
          "id": "03f739a8-0c09-48ae-b61d-83a0c3314b02",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c16adca6-4519-4954-9f35-aa4aa1b67ee0",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6ee58232-f8da-48b8-bdf6-20fd86b9ac8f",
        "cursor": {
          "ref": "6758dab5-7957-4636-82a2-c24ee3a2dc1b",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bf31202e-5a7d-45d5-a68d-e62ce669e925"
        },
        "item": {
          "id": "6ee58232-f8da-48b8-bdf6-20fd86b9ac8f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fcb3815c-b42e-4ae6-ab39-ac39936b3e7d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c472a14f-84dc-40bd-9d3e-949c82d39b60",
        "cursor": {
          "ref": "33bf608a-e421-418b-b290-2eadc0f0416f",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a23d3b80-b1b8-48ea-8688-9687e99cfd52"
        },
        "item": {
          "id": "c472a14f-84dc-40bd-9d3e-949c82d39b60",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5b48d03e-262f-49a4-9421-e570475b2d36",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 396,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "923b8c4c-98c5-42de-9bed-b4bc9a72b04a",
        "cursor": {
          "ref": "d01efe5e-4665-4074-8c4d-160ab55ccd25",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "adf92b14-0234-4c9a-932b-53ccdab72d78"
        },
        "item": {
          "id": "923b8c4c-98c5-42de-9bed-b4bc9a72b04a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d8a571e9-0415-48bc-bc46-f7b4404077dd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 389,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "dce16e96-f555-471d-8a03-437f0ca1d17d",
        "cursor": {
          "ref": "7ec82a0d-295a-41e6-a07e-c33a893ca21e",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "71e6b2cc-08ba-4b70-a2f5-431eb195d7f3"
        },
        "item": {
          "id": "dce16e96-f555-471d-8a03-437f0ca1d17d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f39ca848-171b-4560-843e-a3b4e53a2037",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 385,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "a4bf60fa-6612-404a-a411-80146afb227f",
        "cursor": {
          "ref": "e5af0e1b-01e6-4b0c-bdb3-481cd616fe7b",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6ca01bb5-6d49-4995-b172-76a7841a3922"
        },
        "item": {
          "id": "a4bf60fa-6612-404a-a411-80146afb227f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7bb398a1-f439-410d-a631-3660c2034b54",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 388,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b15b03e2-9ca5-4136-88eb-14bb3da327c2",
        "cursor": {
          "ref": "7168ab52-97b2-4e8f-a17d-3eb583c9f9f8",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "342798c2-8171-413d-ba14-e00220ab7bed"
        },
        "item": {
          "id": "b15b03e2-9ca5-4136-88eb-14bb3da327c2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e41ff02e-886f-4189-a970-3d3db3b3be5e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 376,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "9f3e999b-4101-4d32-bbdd-44c07d433ed1",
        "cursor": {
          "ref": "b7535a22-5508-43ae-ba7c-d0c5e15d1339",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9feeed98-7019-4b38-8f47-64db13c7249c"
        },
        "item": {
          "id": "9f3e999b-4101-4d32-bbdd-44c07d433ed1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99fe05d7-3814-4c8c-931c-88b78b5d41a9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "c3137c30-6d0c-4fa4-a06b-ec7b77724178",
        "cursor": {
          "ref": "11c84429-3c9a-4e01-8108-d01bdb667698",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "599c152e-0a44-46bf-95e8-86e6207b8fb7"
        },
        "item": {
          "id": "c3137c30-6d0c-4fa4-a06b-ec7b77724178",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a8eef88b-ad44-465e-9605-1ff0a16f08a2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 390,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "01f00607-d7f6-47fb-b0e0-98eb7362f81e",
        "cursor": {
          "ref": "86d3e389-64a3-4e3c-aa93-1482e5ebcda1",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5a37e879-3536-4c38-a811-87dfc1892217"
        },
        "item": {
          "id": "01f00607-d7f6-47fb-b0e0-98eb7362f81e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6e45f342-e339-4c32-ba4a-e6e8e5433a51",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 383,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "bc1040c1-1ff3-4b8a-badb-4e277aa96c1f",
        "cursor": {
          "ref": "5e2045b5-f446-40ce-abe7-e217e83eb799",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "25318201-642b-4bbf-af82-5b149b9ce179"
        },
        "item": {
          "id": "bc1040c1-1ff3-4b8a-badb-4e277aa96c1f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c319c5e6-406a-4ce4-ae40-19912f20261d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 385,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "fc9f7780-4751-4f4c-b3db-8089d2aa56d6",
        "cursor": {
          "ref": "b7b4aefd-68f7-48d0-a7d6-d10482e11bd7",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "761daa33-26ba-4694-a4e7-c346afa5d7a6"
        },
        "item": {
          "id": "fc9f7780-4751-4f4c-b3db-8089d2aa56d6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "61354d62-407b-4de7-aaed-41bf4303c78e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 382,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0a79870e-ac9e-466f-a0d4-7be89bf8ee4b",
        "cursor": {
          "ref": "54716a77-7453-48c0-949d-e5dce180781c",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "632b2cd7-84b2-4302-b5ab-a1f1a65e7f13"
        },
        "item": {
          "id": "0a79870e-ac9e-466f-a0d4-7be89bf8ee4b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "084e0535-d872-490d-a03c-dfc3c1c59ba8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 375,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b3dd0502-bd4c-4354-a612-69e7550781ca",
        "cursor": {
          "ref": "e350acf6-4500-43a6-860a-b0da69d87351",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5136163b-82da-4d9f-ae38-df2e848e68c6"
        },
        "item": {
          "id": "b3dd0502-bd4c-4354-a612-69e7550781ca",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f901b66e-1bfc-4025-85a6-a534c73726fe",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 378,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 403",
              "stack": "AssertionError: expected response to have status code 400 but got 403\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "44b1966b-4ac4-4722-be9f-09c7816e4b4e",
        "cursor": {
          "ref": "5ea8f292-2d28-49f7-8bce-07e822ccb478",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bb310e85-8319-4199-afe1-b827c4ec53af"
        },
        "item": {
          "id": "44b1966b-4ac4-4722-be9f-09c7816e4b4e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "30f62320-82e9-4458-8d7e-798ef405d63e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152de478-976c-4231-ac45-813937d9687b",
        "cursor": {
          "ref": "b34438ea-cafc-4f7a-86ec-04d99d0d5724",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "47322861-64b5-4ee7-8142-2dc68e66e5df"
        },
        "item": {
          "id": "152de478-976c-4231-ac45-813937d9687b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "84a09526-89ce-4e01-9242-041120b4f536",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 395,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "42b2321a-a475-4d90-a809-538ffebb93b4",
        "cursor": {
          "ref": "75e4c042-2ccf-42de-a198-20fbbaa3a652",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7b97a431-b8d1-4116-91d4-d72d3943fa93"
        },
        "item": {
          "id": "42b2321a-a475-4d90-a809-538ffebb93b4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f6b08715-b4b6-4abf-b4d6-ce9c1fdc400b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 380,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "bb37a04b-e814-4647-ab23-5e3c42f679d4",
        "cursor": {
          "ref": "50ce85b9-1dc8-4b92-a17d-69af4da43d84",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f185c2c0-43e5-4672-b634-41613c8db0e6"
        },
        "item": {
          "id": "bb37a04b-e814-4647-ab23-5e3c42f679d4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a53567b4-7ec7-4b91-a9e5-bf276adb95a6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 387,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 403",
              "stack": "AssertionError: expected response to have status code 200 but got 403\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "604cc461-1d8e-4d7c-bd00-ee2f196a7e7e",
        "cursor": {
          "ref": "a5b292e7-9073-4aec-92af-a8461378fd6a",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c91ecbff-d801-4f6d-9927-1cdfb1af026e"
        },
        "item": {
          "id": "604cc461-1d8e-4d7c-bd00-ee2f196a7e7e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe4a3d22-0f7f-4a73-adaa-c7f0fcb05c37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604cc461-1d8e-4d7c-bd00-ee2f196a7e7e",
        "cursor": {
          "ref": "a5b292e7-9073-4aec-92af-a8461378fd6a",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c91ecbff-d801-4f6d-9927-1cdfb1af026e"
        },
        "item": {
          "id": "604cc461-1d8e-4d7c-bd00-ee2f196a7e7e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe4a3d22-0f7f-4a73-adaa-c7f0fcb05c37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777f0ab5-2d92-4988-ae5a-20e3d603c35a",
        "cursor": {
          "ref": "53e41b3c-7e12-4b55-91e8-55f919ec7030",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3a45fcbe-c76a-45f6-906e-a5ff367df651"
        },
        "item": {
          "id": "777f0ab5-2d92-4988-ae5a-20e3d603c35a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "39815699-47f6-44a3-94c1-a9ae55c7228e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0957fac3-af24-49f4-916e-bdb814ad39ac",
        "cursor": {
          "ref": "d67de897-f959-46a1-a096-56889b2223c0",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ac1a64cf-ae3c-447f-8535-15576323a9fe"
        },
        "item": {
          "id": "0957fac3-af24-49f4-916e-bdb814ad39ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6839082c-5644-4a2c-96a0-c54f99a6f041",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}